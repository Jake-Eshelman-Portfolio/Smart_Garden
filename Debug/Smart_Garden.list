
Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a950  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800ab00  0800ab00  0000bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad00  0800ad00  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad08  0800ad08  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad08  0800ad08  0000bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad0c  0800ad0c  0000bd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ad10  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c06c  2**0
                  CONTENTS
 10 .bss          00000978  2000006c  2000006c  0000c06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009e4  200009e4  0000c06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000277f0  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005610  00000000  00000000  0003388c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b0  00000000  00000000  00038ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aec  00000000  00000000  0003b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c902  00000000  00000000  0003cc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ae63  00000000  00000000  0006953e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010266e  00000000  00000000  000943a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00196a0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c10  00000000  00000000  00196a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001a0664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aae8 	.word	0x0800aae8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800aae8 	.word	0x0800aae8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <MX_I2C3_Init+0x78>)
 800059e:	4a1d      	ldr	r2, [pc, #116]	@ (8000614 <MX_I2C3_Init+0x7c>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 30000; // changed from 100000
 80005a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005a4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005a8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005d6:	480e      	ldr	r0, [pc, #56]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005d8:	f003 ff64 	bl	80044a4 <HAL_I2C_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80005e2:	f000 fca7 	bl	8000f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005ea:	f004 fda7 	bl	800513c <HAL_I2CEx_ConfigAnalogFilter>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C3_Init+0x60>
  {
    Error_Handler();
 80005f4:	f000 fc9e 	bl	8000f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005fc:	f004 fdda 	bl	80051b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C3_Init+0x72>
  {
    Error_Handler();
 8000606:	f000 fc95 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000088 	.word	0x20000088
 8000614:	40005c00 	.word	0x40005c00

08000618 <read_capacitance>:
  * @brief Function to read the capacitance from the sensor
  * @param None
  * @retval None
  */
void read_capacitance()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af04      	add	r7, sp, #16
	uint8_t capacitance_data[2];
	uint8_t busy_data = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;

	// Sensor reads once for previous value then updates with recent value. Get old value first to update register.
	status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, CAPACITANCE_REGISTER, I2C_MEMADD_SIZE_8BIT, capacitance_data, CAPACITANCE_READ_SIZE, HAL_MAX_DELAY);
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2302      	movs	r3, #2
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2200      	movs	r2, #0
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	4824      	ldr	r0, [pc, #144]	@ (80006cc <read_capacitance+0xb4>)
 800063a:	f004 f877 	bl	800472c <HAL_I2C_Mem_Read>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d015      	beq.n	8000674 <read_capacitance+0x5c>
		printf("Initial capacitance read failed with status: %d \r\n", status);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4619      	mov	r1, r3
 800064c:	4820      	ldr	r0, [pc, #128]	@ (80006d0 <read_capacitance+0xb8>)
 800064e:	f009 fc1f 	bl	8009e90 <iprintf>
 8000652:	e038      	b.n	80006c6 <read_capacitance+0xae>
	}

    // Wait for measurement to complete
    while (busy_data == 1)
    {
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1 , BUSY_REGISTER, I2C_MEMADD_SIZE_8BIT, &busy_data, BUSY_DATA_SIZE, HAL_MAX_DELAY);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2301      	movs	r3, #1
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2209      	movs	r2, #9
 8000666:	2140      	movs	r1, #64	@ 0x40
 8000668:	4818      	ldr	r0, [pc, #96]	@ (80006cc <read_capacitance+0xb4>)
 800066a:	f004 f85f 	bl	800472c <HAL_I2C_Mem_Read>
        HAL_Delay(10); // Short delay to avoid flooding the I2C bus -- add a timeout here too probably
 800066e:	200a      	movs	r0, #10
 8000670:	f001 fa46 	bl	8001b00 <HAL_Delay>
    while (busy_data == 1)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d0ec      	beq.n	8000654 <read_capacitance+0x3c>
    }

	// Read the updated capacitance value and print it on success
	status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, CAPACITANCE_REGISTER, I2C_MEMADD_SIZE_8BIT, capacitance_data, CAPACITANCE_READ_SIZE, HAL_MAX_DELAY);
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	2302      	movs	r3, #2
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	@ 0x40
 8000690:	480e      	ldr	r0, [pc, #56]	@ (80006cc <read_capacitance+0xb4>)
 8000692:	f004 f84b 	bl	800472c <HAL_I2C_Mem_Read>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10d      	bne.n	80006bc <read_capacitance+0xa4>
	{
		uint16_t combinted_capacitance = capacitance_data[0] << 8 | capacitance_data[1];
 80006a0:	7a3b      	ldrb	r3, [r7, #8]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	7a7b      	ldrb	r3, [r7, #9]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	81bb      	strh	r3, [r7, #12]
		printf("capacitance read successfully from sensor: %d \r\n", combinted_capacitance);
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <read_capacitance+0xbc>)
 80006b6:	f009 fbeb 	bl	8009e90 <iprintf>
 80006ba:	e004      	b.n	80006c6 <read_capacitance+0xae>
	}
	else
	{
		printf("capacitance read failed with status: %d \r\n", status);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <read_capacitance+0xc0>)
 80006c2:	f009 fbe5 	bl	8009e90 <iprintf>
	}
}
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000088 	.word	0x20000088
 80006d0:	0800ab94 	.word	0x0800ab94
 80006d4:	0800abc8 	.word	0x0800abc8
 80006d8:	0800abfc 	.word	0x0800abfc

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f001 f9cc 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f83e 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 fb02 	bl	8000cf0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ec:	f000 f8a4 	bl	8000838 <MX_ADC1_Init>
  MX_CRC_Init();
 80006f0:	f000 f8f4 	bl	80008dc <MX_CRC_Init>
  MX_DMA2D_Init();
 80006f4:	f000 f906 	bl	8000904 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006f8:	f000 faaa 	bl	8000c50 <MX_FMC_Init>
  MX_I2C3_Init();
 80006fc:	f7ff ff4c 	bl	8000598 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000700:	f000 f932 	bl	8000968 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000704:	f000 f9b0 	bl	8000a68 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000708:	f000 f9e4 	bl	8000ad4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800070c:	f000 fa76 	bl	8000bfc <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8000710:	f000 fa30 	bl	8000b74 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 8000714:	f000 fc14 	bl	8000f40 <Motor_Init>
  Motor_SetSpeed(100);
 8000718:	2064      	movs	r0, #100	@ 0x64
 800071a:	f000 fc1b 	bl	8000f54 <Motor_SetSpeed>

  printf("Initialization complete!\r\n");
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <main+0x58>)
 8000720:	f009 fc1e 	bl	8009f60 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Motor_Forward();
	  HAL_Delay(5000);
 8000724:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000728:	f001 f9ea 	bl	8001b00 <HAL_Delay>
	  //read_temperature();
	  read_capacitance();
 800072c:	f7ff ff74 	bl	8000618 <read_capacitance>
	  HAL_Delay(5000);
 8000730:	bf00      	nop
 8000732:	e7f7      	b.n	8000724 <main+0x48>
 8000734:	0800ac98 	.word	0x0800ac98

08000738 <_write>:
  /* USER CODE END 3 */
}


int _write(int file, char *ptr, int len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	b29a      	uxth	r2, r3
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	4804      	ldr	r0, [pc, #16]	@ (8000760 <_write+0x28>)
 8000750:	f007 f894 	bl	800787c <HAL_UART_Transmit>
    return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200002fc 	.word	0x200002fc

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f009 fcd4 	bl	800a120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b0:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <SystemClock_Config+0xd0>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007dc:	2348      	movs	r3, #72	@ 0x48
 80007de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e4:	2303      	movs	r3, #3
 80007e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f005 f889 	bl	8005904 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f8:	f000 fb9c 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f005 faeb 	bl	8005df4 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 fb86 	bl	8000f34 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	@ 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800084a:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_ADC1_Init+0x98>)
 800084c:	4a21      	ldr	r2, [pc, #132]	@ (80008d4 <MX_ADC1_Init+0x9c>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000856:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_ADC1_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_ADC1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000878:	4a17      	ldr	r2, [pc, #92]	@ (80008d8 <MX_ADC1_Init+0xa0>)
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000892:	2201      	movs	r2, #1
 8000894:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <MX_ADC1_Init+0x98>)
 8000898:	f001 f956 	bl	8001b48 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fb47 	bl	8000f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008a6:	2305      	movs	r3, #5
 80008a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <MX_ADC1_Init+0x98>)
 80008b8:	f001 f98a 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008c2:	f000 fb37 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000dc 	.word	0x200000dc
 80008d4:	40012000 	.word	0x40012000
 80008d8:	0f000001 	.word	0x0f000001

080008dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_CRC_Init+0x20>)
 80008e2:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <MX_CRC_Init+0x24>)
 80008e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_CRC_Init+0x20>)
 80008e8:	f001 fc82 	bl	80021f0 <HAL_CRC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008f2:	f000 fb1f 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000124 	.word	0x20000124
 8000900:	40023000 	.word	0x40023000

08000904 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	@ (8000964 <MX_DMA2D_Init+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800093a:	f001 fc75 	bl	8002228 <HAL_DMA2D_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000944:	f000 faf6 	bl	8000f34 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000948:	2101      	movs	r1, #1
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800094c:	f001 fdc6 	bl	80024dc <HAL_DMA2D_ConfigLayer>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 faed 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000012c 	.word	0x2000012c
 8000964:	4002b000 	.word	0x4002b000

08000968 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2234      	movs	r2, #52	@ 0x34
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f009 fbd3 	bl	800a120 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800097a:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 800097c:	4a39      	ldr	r2, [pc, #228]	@ (8000a64 <MX_LTDC_Init+0xfc>)
 800097e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000980:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000986:	4b36      	ldr	r3, [pc, #216]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800098c:	4b34      	ldr	r3, [pc, #208]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000992:	4b33      	ldr	r3, [pc, #204]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000998:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 800099a:	2209      	movs	r2, #9
 800099c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009a6:	221d      	movs	r2, #29
 80009a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009b2:	f240 120d 	movw	r2, #269	@ 0x10d
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009ba:	f240 1243 	movw	r2, #323	@ 0x143
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009c2:	f240 1217 	movw	r2, #279	@ 0x117
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80009c8:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009ca:	f240 1247 	movw	r2, #327	@ 0x147
 80009ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009e8:	481d      	ldr	r0, [pc, #116]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 80009ea:	f004 fc23 	bl	8005234 <HAL_LTDC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80009f4:	f000 fa9e 	bl	8000f34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80009fc:	23f0      	movs	r3, #240	@ 0xf0
 80009fe:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000a04:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a08:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a0e:	23ff      	movs	r3, #255	@ 0xff
 8000a10:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a1a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a20:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000a26:	23f0      	movs	r3, #240	@ 0xf0
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000a2a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_LTDC_Init+0xf8>)
 8000a4a:	f004 fd85 	bl	8005558 <HAL_LTDC_ConfigLayer>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000a54:	f000 fa6e 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3738      	adds	r7, #56	@ 0x38
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000016c 	.word	0x2000016c
 8000a64:	40016800 	.word	0x40016800

08000a68 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <MX_SPI5_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a78:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a98:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000a9c:	2218      	movs	r2, #24
 8000a9e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_SPI5_Init+0x64>)
 8000aba:	f005 fde1 	bl	8006680 <HAL_SPI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ac4:	f000 fa36 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000214 	.word	0x20000214
 8000ad0:	40015000 	.word	0x40015000

08000ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <MX_TIM1_Init+0x9c>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1c:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b1e:	f005 fe38 	bl	8006792 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 fa04 	bl	8000f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b3a:	f006 f9b3 	bl	8006ea4 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b44:	f000 f9f6 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_TIM1_Init+0x98>)
 8000b56:	f006 fdb1 	bl	80076bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b60:	f000 f9e8 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000026c 	.word	0x2000026c
 8000b70:	40010000 	.word	0x40010000

08000b74 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]
 8000b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf8 <MX_TIM9_Init+0x84>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000b94:	2247      	movs	r2, #71	@ 0x47
 8000b96:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000ba0:	2263      	movs	r2, #99	@ 0x63
 8000ba2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000bb0:	4810      	ldr	r0, [pc, #64]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000bb2:	f005 fead 	bl	8006910 <HAL_TIM_PWM_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 f9ba 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000bc4:	2332      	movs	r3, #50	@ 0x32
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000bd8:	f006 f8a2 	bl	8006d20 <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000be2:	f000 f9a7 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000be6:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <MX_TIM9_Init+0x80>)
 8000be8:	f000 fca6 	bl	8001538 <HAL_TIM_MspPostInit>

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200002b4 	.word	0x200002b4
 8000bf8:	40014000 	.word	0x40014000

08000bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART1_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f006 fdd2 	bl	80077dc <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f979 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002fc 	.word	0x200002fc
 8000c4c:	40011000 	.word	0x40011000

08000c50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <MX_FMC_Init+0x9c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c80:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c82:	2210      	movs	r2, #16
 8000c84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c88:	2240      	movs	r2, #64	@ 0x40
 8000c8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c8e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ca0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_FMC_Init+0x98>)
 8000cd2:	f005 fca1 	bl	8006618 <HAL_SDRAM_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cdc:	f000 f92a 	bl	8000f34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000344 	.word	0x20000344
 8000cec:	a0000140 	.word	0xa0000140

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	@ 0x38
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b78      	ldr	r3, [pc, #480]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	623b      	str	r3, [r7, #32]
 8000d20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	4b74      	ldr	r3, [pc, #464]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a73      	ldr	r2, [pc, #460]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b71      	ldr	r3, [pc, #452]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b6d      	ldr	r3, [pc, #436]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a6c      	ldr	r2, [pc, #432]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0320 	and.w	r3, r3, #32
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b66      	ldr	r3, [pc, #408]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a65      	ldr	r2, [pc, #404]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b63      	ldr	r3, [pc, #396]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b58      	ldr	r3, [pc, #352]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a57      	ldr	r2, [pc, #348]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b55      	ldr	r3, [pc, #340]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b51      	ldr	r3, [pc, #324]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a50      	ldr	r2, [pc, #320]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a49      	ldr	r2, [pc, #292]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b47      	ldr	r3, [pc, #284]	@ (8000ef8 <MX_GPIO_Init+0x208>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2116      	movs	r1, #22
 8000dea:	4844      	ldr	r0, [pc, #272]	@ (8000efc <MX_GPIO_Init+0x20c>)
 8000dec:	f001 fdb4 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2180      	movs	r1, #128	@ 0x80
 8000df4:	4842      	ldr	r0, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x210>)
 8000df6:	f001 fdaf 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000e00:	4840      	ldr	r0, [pc, #256]	@ (8000f04 <MX_GPIO_Init+0x214>)
 8000e02:	f001 fda9 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000e0c:	483e      	ldr	r0, [pc, #248]	@ (8000f08 <MX_GPIO_Init+0x218>)
 8000e0e:	f001 fda3 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin;
 8000e12:	2316      	movs	r3, #22
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4834      	ldr	r0, [pc, #208]	@ (8000efc <MX_GPIO_Init+0x20c>)
 8000e2a:	f001 fbe9 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e2e:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e34:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	482e      	ldr	r0, [pc, #184]	@ (8000f00 <MX_GPIO_Init+0x210>)
 8000e46:	f001 fbdb 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4827      	ldr	r0, [pc, #156]	@ (8000f00 <MX_GPIO_Init+0x210>)
 8000e62:	f001 fbcd 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e66:	2320      	movs	r3, #32
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4820      	ldr	r0, [pc, #128]	@ (8000efc <MX_GPIO_Init+0x20c>)
 8000e7c:	f001 fbc0 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e80:	2304      	movs	r3, #4
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <MX_GPIO_Init+0x21c>)
 8000e94:	f001 fbb4 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_GPIO_Init+0x214>)
 8000eae:	f001 fba7 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000eb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <MX_GPIO_Init+0x214>)
 8000ecc:	f001 fb98 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ed0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_GPIO_Init+0x218>)
 8000eea:	f001 fb89 	bl	8002600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eee:	bf00      	nop
 8000ef0:	3738      	adds	r7, #56	@ 0x38
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40020400 	.word	0x40020400

08000f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f22:	f000 fdcd 	bl	8001ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <Motor_Init>:

// Global variables
extern TIM_HandleTypeDef htim9;  // Assuming TIM9 for PWM

void Motor_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Start PWM on PE5
 8000f44:	2100      	movs	r1, #0
 8000f46:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <Motor_Init+0x10>)
 8000f48:	f005 fd32 	bl	80069b0 <HAL_TIM_PWM_Start>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200002b4 	.word	0x200002b4

08000f54 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
    // Assuming 16-bit timer, adjust if different
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <Motor_SetSpeed+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	88fa      	ldrh	r2, [r7, #6]
 8000f64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200002b4 	.word	0x200002b4

08000f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_MspInit+0x54>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <HAL_MspInit+0x54>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_MspInit+0x54>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_MspInit+0x54>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_MspInit+0x54>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_MspInit+0x54>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	210f      	movs	r1, #15
 8000fba:	f06f 0001 	mvn.w	r0, #1
 8000fbe:	f001 f8ed 	bl	800219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <HAL_ADC_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d127      	bne.n	8001042 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_ADC_MspInit+0x80>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	4a15      	ldr	r2, [pc, #84]	@ (8001050 <HAL_ADC_MspInit+0x80>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001000:	6453      	str	r3, [r2, #68]	@ 0x44
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_ADC_MspInit+0x80>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_ADC_MspInit+0x80>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_ADC_MspInit+0x80>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HAL_ADC_MspInit+0x80>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800102a:	2320      	movs	r3, #32
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <HAL_ADC_MspInit+0x84>)
 800103e:	f001 fadf 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012000 	.word	0x40012000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_CRC_MspInit+0x3c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_CRC_MspInit+0x40>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_CRC_MspInit+0x40>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_CRC_MspInit+0x40>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023000 	.word	0x40023000
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_DMA2D_MspInit+0x48>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d115      	bne.n	80010da <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_DMA2D_MspInit+0x4c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <HAL_DMA2D_MspInit+0x4c>)
 80010b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_DMA2D_MspInit+0x4c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	205a      	movs	r0, #90	@ 0x5a
 80010d0:	f001 f864 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010d4:	205a      	movs	r0, #90	@ 0x5a
 80010d6:	f001 f87d 	bl	80021d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	4002b000 	.word	0x4002b000
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a29      	ldr	r2, [pc, #164]	@ (80011b0 <HAL_I2C_MspInit+0xc4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d14b      	bne.n	80011a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114c:	2312      	movs	r3, #18
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001158:	2304      	movs	r3, #4
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <HAL_I2C_MspInit+0xcc>)
 8001164:	f001 fa4c 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800117a:	2304      	movs	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <HAL_I2C_MspInit+0xd0>)
 8001186:	f001 fa3b 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001194:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005c00 	.word	0x40005c00
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09a      	sub	sp, #104	@ 0x68
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	2230      	movs	r2, #48	@ 0x30
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 ff9d 	bl	800a120 <memset>
  if(hltdc->Instance==LTDC)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a85      	ldr	r2, [pc, #532]	@ (8001400 <HAL_LTDC_MspInit+0x240>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f040 8102 	bne.w	80013f6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011f2:	2308      	movs	r3, #8
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011f6:	2332      	movs	r3, #50	@ 0x32
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011fe:	2300      	movs	r3, #0
 8001200:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4618      	mov	r0, r3
 8001208:	f005 f846 	bl	8006298 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001212:	f7ff fe8f 	bl	8000f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	4b7a      	ldr	r3, [pc, #488]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a79      	ldr	r2, [pc, #484]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b77      	ldr	r3, [pc, #476]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b73      	ldr	r3, [pc, #460]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a72      	ldr	r2, [pc, #456]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b70      	ldr	r3, [pc, #448]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b6c      	ldr	r3, [pc, #432]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a6b      	ldr	r2, [pc, #428]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b69      	ldr	r3, [pc, #420]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b65      	ldr	r3, [pc, #404]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a64      	ldr	r2, [pc, #400]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b62      	ldr	r3, [pc, #392]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b5e      	ldr	r3, [pc, #376]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a5d      	ldr	r2, [pc, #372]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b5b      	ldr	r3, [pc, #364]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b57      	ldr	r3, [pc, #348]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a56      	ldr	r2, [pc, #344]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b50      	ldr	r3, [pc, #320]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80012da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ec:	230e      	movs	r3, #14
 80012ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012f4:	4619      	mov	r1, r3
 80012f6:	4844      	ldr	r0, [pc, #272]	@ (8001408 <HAL_LTDC_MspInit+0x248>)
 80012f8:	f001 f982 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012fc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001300:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800130e:	230e      	movs	r3, #14
 8001310:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001316:	4619      	mov	r1, r3
 8001318:	483c      	ldr	r0, [pc, #240]	@ (800140c <HAL_LTDC_MspInit+0x24c>)
 800131a:	f001 f971 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800131e:	2303      	movs	r3, #3
 8001320:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800132e:	2309      	movs	r3, #9
 8001330:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001336:	4619      	mov	r1, r3
 8001338:	4835      	ldr	r0, [pc, #212]	@ (8001410 <HAL_LTDC_MspInit+0x250>)
 800133a:	f001 f961 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800133e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001342:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001350:	230e      	movs	r3, #14
 8001352:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001358:	4619      	mov	r1, r3
 800135a:	482d      	ldr	r0, [pc, #180]	@ (8001410 <HAL_LTDC_MspInit+0x250>)
 800135c:	f001 f950 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001360:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001364:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001372:	230e      	movs	r3, #14
 8001374:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800137a:	4619      	mov	r1, r3
 800137c:	4825      	ldr	r0, [pc, #148]	@ (8001414 <HAL_LTDC_MspInit+0x254>)
 800137e:	f001 f93f 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001382:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001394:	230e      	movs	r3, #14
 8001396:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800139c:	4619      	mov	r1, r3
 800139e:	481e      	ldr	r0, [pc, #120]	@ (8001418 <HAL_LTDC_MspInit+0x258>)
 80013a0:	f001 f92e 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80013a4:	2348      	movs	r3, #72	@ 0x48
 80013a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b4:	230e      	movs	r3, #14
 80013b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013bc:	4619      	mov	r1, r3
 80013be:	4817      	ldr	r0, [pc, #92]	@ (800141c <HAL_LTDC_MspInit+0x25c>)
 80013c0:	f001 f91e 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80013c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013d6:	2309      	movs	r3, #9
 80013d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <HAL_LTDC_MspInit+0x254>)
 80013e2:	f001 f90d 	bl	8002600 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2058      	movs	r0, #88	@ 0x58
 80013ec:	f000 fed6 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013f0:	2058      	movs	r0, #88	@ 0x58
 80013f2:	f000 feef 	bl	80021d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80013f6:	bf00      	nop
 80013f8:	3768      	adds	r7, #104	@ 0x68
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40016800 	.word	0x40016800
 8001404:	40023800 	.word	0x40023800
 8001408:	40021400 	.word	0x40021400
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40021800 	.word	0x40021800
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00

08001420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_SPI_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 800144c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800147a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800148c:	2305      	movs	r3, #5
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_SPI_MspInit+0x8c>)
 8001498:	f001 f8b2 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40015000 	.word	0x40015000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021400 	.word	0x40021400

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_TIM_Base_MspInit+0x3c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_TIM_PWM_MspInit+0x3c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10d      	bne.n	8001522 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_TIM_PWM_MspInit+0x40>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <HAL_TIM_PWM_MspInit+0x40>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <HAL_TIM_PWM_MspInit+0x40>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40014000 	.word	0x40014000
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <HAL_TIM_MspPostInit+0x68>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11d      	bne.n	8001596 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001576:	2320      	movs	r3, #32
 8001578:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001586:	2303      	movs	r3, #3
 8001588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <HAL_TIM_MspPostInit+0x70>)
 8001592:	f001 f835 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40014000 	.word	0x40014000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	@ 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <HAL_UART_MspInit+0x84>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12c      	bne.n	8001628 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 8001624:	f000 ffec 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40011000 	.word	0x40011000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001650:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_FMC_MspInit+0x104>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d16f      	bne.n	8001738 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <HAL_FMC_MspInit+0x104>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_FMC_MspInit+0x108>)
 8001664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001666:	4a37      	ldr	r2, [pc, #220]	@ (8001744 <HAL_FMC_MspInit+0x108>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6393      	str	r3, [r2, #56]	@ 0x38
 800166e:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <HAL_FMC_MspInit+0x108>)
 8001670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800167a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800167e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168c:	230c      	movs	r3, #12
 800168e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	482c      	ldr	r0, [pc, #176]	@ (8001748 <HAL_FMC_MspInit+0x10c>)
 8001696:	f000 ffb3 	bl	8002600 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800169a:	2301      	movs	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016aa:	230c      	movs	r3, #12
 80016ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4826      	ldr	r0, [pc, #152]	@ (800174c <HAL_FMC_MspInit+0x110>)
 80016b4:	f000 ffa4 	bl	8002600 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016b8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80016bc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ca:	230c      	movs	r3, #12
 80016cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	481f      	ldr	r0, [pc, #124]	@ (8001750 <HAL_FMC_MspInit+0x114>)
 80016d4:	f000 ff94 	bl	8002600 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016d8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016dc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4818      	ldr	r0, [pc, #96]	@ (8001754 <HAL_FMC_MspInit+0x118>)
 80016f4:	f000 ff84 	bl	8002600 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016f8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80016fc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800170a:	230c      	movs	r3, #12
 800170c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4811      	ldr	r0, [pc, #68]	@ (8001758 <HAL_FMC_MspInit+0x11c>)
 8001714:	f000 ff74 	bl	8002600 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001718:	2360      	movs	r3, #96	@ 0x60
 800171a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001728:	230c      	movs	r3, #12
 800172a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	480a      	ldr	r0, [pc, #40]	@ (800175c <HAL_FMC_MspInit+0x120>)
 8001732:	f000 ff65 	bl	8002600 <HAL_GPIO_Init>
 8001736:	e000      	b.n	800173a <HAL_FMC_MspInit+0xfe>
    return;
 8001738:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000378 	.word	0x20000378
 8001744:	40023800 	.word	0x40023800
 8001748:	40021400 	.word	0x40021400
 800174c:	40020800 	.word	0x40020800
 8001750:	40021800 	.word	0x40021800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001768:	f7ff ff68 	bl	800163c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	@ 0x38
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_InitTick+0xe4>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_InitTick+0xe4>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6413      	str	r3, [r2, #64]	@ 0x40
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_InitTick+0xe4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0210 	add.w	r2, r7, #16
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fd42 	bl	8006234 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d103      	bne.n	80017c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ba:	f004 fd13 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 80017be:	6378      	str	r0, [r7, #52]	@ 0x34
 80017c0:	e004      	b.n	80017cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017c2:	f004 fd0f 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 80017c6:	4603      	mov	r3, r0
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ce:	4a23      	ldr	r2, [pc, #140]	@ (800185c <HAL_InitTick+0xe8>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9b      	lsrs	r3, r3, #18
 80017d6:	3b01      	subs	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <HAL_InitTick+0xec>)
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_InitTick+0xf0>)
 80017de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_InitTick+0xec>)
 80017e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_InitTick+0xec>)
 80017ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_InitTick+0xec>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_InitTick+0xec>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_InitTick+0xec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001800:	4817      	ldr	r0, [pc, #92]	@ (8001860 <HAL_InitTick+0xec>)
 8001802:	f004 ffc6 	bl	8006792 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800180c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001810:	2b00      	cmp	r3, #0
 8001812:	d11b      	bne.n	800184c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001814:	4812      	ldr	r0, [pc, #72]	@ (8001860 <HAL_InitTick+0xec>)
 8001816:	f005 f80b 	bl	8006830 <HAL_TIM_Base_Start_IT>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001820:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001824:	2b00      	cmp	r3, #0
 8001826:	d111      	bne.n	800184c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001828:	2036      	movs	r0, #54	@ 0x36
 800182a:	f000 fcd3 	bl	80021d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d808      	bhi.n	8001846 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	2036      	movs	r0, #54	@ 0x36
 800183a:	f000 fcaf 	bl	800219c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <HAL_InitTick+0xf4>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e002      	b.n	800184c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001850:	4618      	mov	r0, r3
 8001852:	3738      	adds	r7, #56	@ 0x38
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	431bde83 	.word	0x431bde83
 8001860:	2000037c 	.word	0x2000037c
 8001864:	40001000 	.word	0x40001000
 8001868:	20000004 	.word	0x20000004

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <TIM6_DAC_IRQHandler+0x10>)
 80018aa:	f005 f949 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000037c 	.word	0x2000037c

080018b8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <OTG_HS_IRQHandler+0x10>)
 80018be:	f001 f864 	bl	800298a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200004b8 	.word	0x200004b8

080018cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <LTDC_IRQHandler+0x10>)
 80018d2:	f003 fd7f 	bl	80053d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000016c 	.word	0x2000016c

080018e0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA2D_IRQHandler+0x10>)
 80018e6:	f000 fce8 	bl	80022ba <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000012c 	.word	0x2000012c

080018f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
  }

  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:
  }
  return len;
}

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001956:	605a      	str	r2, [r3, #4]
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f008 fc08 	bl	800a1dc <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20030000 	.word	0x20030000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	200003c4 	.word	0x200003c4
 8001a00:	200009e8 	.word	0x200009e8

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a2c:	f7ff ffea 	bl	8001a04 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a56:	f008 fbc7 	bl	800a1e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7fe fe3f 	bl	80006dc <main>
  bx  lr    
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a6c:	0800ad10 	.word	0x0800ad10
  ldr r2, =_sbss
 8001a70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a74:	200009e4 	.word	0x200009e4

08001a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <HAL_Init+0x40>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_Init+0x40>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_Init+0x40>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 fb6e 	bl	8002186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fe62 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fa62 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	200003c8 	.word	0x200003c8

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200003c8 	.word	0x200003c8

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e033      	b.n	8001bc6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fa32 	bl	8000fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b8e:	f023 0302 	bic.w	r3, r3, #2
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f94a 	bl	8001e34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bb6:	e001      	b.n	8001bbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e113      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x244>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d925      	bls.n	8001c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4403      	add	r3, r0
 8001c3a:	3b1e      	subs	r3, #30
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e022      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4403      	add	r3, r0
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d824      	bhi.n	8001ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cde:	e04c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	@ 0x23
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b23      	subs	r3, #35	@ 0x23
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d30:	e023      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	@ 0x41
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b41      	subs	r3, #65	@ 0x41
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <HAL_ADC_ConfigChannel+0x250>)
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <HAL_ADC_ConfigChannel+0x254>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10f      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d8>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_ADC_ConfigChannel+0x254>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d12b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <HAL_ADC_ConfigChannel+0x258>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b11      	cmp	r3, #17
 8001dc2:	d122      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <HAL_ADC_ConfigChannel+0x258>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_ADC_ConfigChannel+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <HAL_ADC_ConfigChannel+0x260>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9a      	lsrs	r2, r3, #18
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012300 	.word	0x40012300
 8001e24:	40012000 	.word	0x40012000
 8001e28:	10000012 	.word	0x10000012
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e3c:	4b79      	ldr	r3, [pc, #484]	@ (8002024 <ADC_Init+0x1f0>)
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	021a      	lsls	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	4a58      	ldr	r2, [pc, #352]	@ (8002028 <ADC_Init+0x1f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6899      	ldr	r1, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e00f      	b.n	8001f32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0202 	bic.w	r2, r2, #2
 8001f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7e1b      	ldrb	r3, [r3, #24]
 8001f4c:	005a      	lsls	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	035a      	lsls	r2, r3, #13
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e007      	b.n	8001fa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	051a      	lsls	r2, r3, #20
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fea:	025a      	lsls	r2, r3, #9
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	029a      	lsls	r2, r3, #10
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40012300 	.word	0x40012300
 8002028:	0f000001 	.word	0x0f000001

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4c 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ae:	f7ff ff61 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f7ff ffb1 	bl	8002120 <NVIC_EncodePriority>
 80021be:	4602      	mov	r2, r0
 80021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff80 	bl	80020cc <__NVIC_SetPriority>
}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff54 	bl	8002090 <__NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	795b      	ldrb	r3, [r3, #5]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe ff20 	bl	8001058 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e03b      	b.n	80022b2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe ff24 	bl	800109c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	f023 0107 	bic.w	r1, r3, #7
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002292:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68d1      	ldr	r1, [r2, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	430b      	orrs	r3, r1
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d026      	beq.n	800232a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d021      	beq.n	800232a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2204      	movs	r2, #4
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d026      	beq.n	8002382 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d021      	beq.n	8002382 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800234c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2220      	movs	r2, #32
 8002354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235a:	f043 0202 	orr.w	r2, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2204      	movs	r2, #4
 8002366:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d026      	beq.n	80023da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	2b00      	cmp	r3, #0
 8002394:	d021      	beq.n	80023da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2208      	movs	r2, #8
 80023ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b2:	f043 0204 	orr.w	r2, r3, #4
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2204      	movs	r2, #4
 80023be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00e      	beq.n	800240c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f853 	bl	80024b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d024      	beq.n	8002460 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01f      	beq.n	8002460 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800242e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2202      	movs	r2, #2
 8002436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01f      	beq.n	80024aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01a      	beq.n	80024aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002482:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2210      	movs	r2, #16
 800248a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f80e 	bl	80024c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_DMA2D_ConfigLayer+0x20>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e079      	b.n	80025f0 <HAL_DMA2D_ConfigLayer+0x114>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	3318      	adds	r3, #24
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002526:	4b35      	ldr	r3, [pc, #212]	@ (80025fc <HAL_DMA2D_ConfigLayer+0x120>)
 8002528:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b0a      	cmp	r3, #10
 8002530:	d003      	beq.n	800253a <HAL_DMA2D_ConfigLayer+0x5e>
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b09      	cmp	r3, #9
 8002538:	d107      	bne.n	800254a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e005      	b.n	8002556 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d120      	bne.n	800259e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	ea02 0103 	and.w	r1, r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	430a      	orrs	r2, r1
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	d003      	beq.n	800258e <HAL_DMA2D_ConfigLayer+0xb2>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b09      	cmp	r3, #9
 800258c:	d127      	bne.n	80025de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
 800259c:	e01f      	b.n	80025de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	ea02 0103 	and.w	r1, r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d106      	bne.n	80025de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80025dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	ff03000f 	.word	0xff03000f

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e177      	b.n	800290c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8166 	bne.w	8002906 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80c0 	beq.w	8002906 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <HAL_GPIO_Init+0x324>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	4a65      	ldr	r2, [pc, #404]	@ (8002924 <HAL_GPIO_Init+0x324>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002794:	6453      	str	r3, [r2, #68]	@ 0x44
 8002796:	4b63      	ldr	r3, [pc, #396]	@ (8002924 <HAL_GPIO_Init+0x324>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a61      	ldr	r2, [pc, #388]	@ (8002928 <HAL_GPIO_Init+0x328>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a58      	ldr	r2, [pc, #352]	@ (800292c <HAL_GPIO_Init+0x32c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d037      	beq.n	800283e <HAL_GPIO_Init+0x23e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a57      	ldr	r2, [pc, #348]	@ (8002930 <HAL_GPIO_Init+0x330>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d031      	beq.n	800283a <HAL_GPIO_Init+0x23a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a56      	ldr	r2, [pc, #344]	@ (8002934 <HAL_GPIO_Init+0x334>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02b      	beq.n	8002836 <HAL_GPIO_Init+0x236>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a55      	ldr	r2, [pc, #340]	@ (8002938 <HAL_GPIO_Init+0x338>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x232>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a54      	ldr	r2, [pc, #336]	@ (800293c <HAL_GPIO_Init+0x33c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x22e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a53      	ldr	r2, [pc, #332]	@ (8002940 <HAL_GPIO_Init+0x340>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x22a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_GPIO_Init+0x344>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a51      	ldr	r2, [pc, #324]	@ (8002948 <HAL_GPIO_Init+0x348>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a50      	ldr	r2, [pc, #320]	@ (800294c <HAL_GPIO_Init+0x34c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4f      	ldr	r2, [pc, #316]	@ (8002950 <HAL_GPIO_Init+0x350>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x21a>
 8002816:	2309      	movs	r3, #9
 8002818:	e012      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800281a:	230a      	movs	r3, #10
 800281c:	e010      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800281e:	2308      	movs	r3, #8
 8002820:	e00e      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002822:	2307      	movs	r3, #7
 8002824:	e00c      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002826:	2306      	movs	r3, #6
 8002828:	e00a      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800282a:	2305      	movs	r3, #5
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800282e:	2304      	movs	r3, #4
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x240>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x240>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	@ (8002928 <HAL_GPIO_Init+0x328>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_GPIO_Init+0x354>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002882:	4a34      	ldr	r2, [pc, #208]	@ (8002954 <HAL_GPIO_Init+0x354>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002888:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <HAL_GPIO_Init+0x354>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ac:	4a29      	ldr	r2, [pc, #164]	@ (8002954 <HAL_GPIO_Init+0x354>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b2:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_GPIO_Init+0x354>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002954 <HAL_GPIO_Init+0x354>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_GPIO_Init+0x354>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <HAL_GPIO_Init+0x354>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f ae84 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	@ 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40021400 	.word	0x40021400
 8002944:	40021800 	.word	0x40021800
 8002948:	40021c00 	.word	0x40021c00
 800294c:	40022000 	.word	0x40022000
 8002950:	40022400 	.word	0x40022400
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f005 fcfb 	bl	800839c <USB_GetMode>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 80fb 	bne.w	8002ba4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f005 fcbe 	bl	8008334 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80f1 	beq.w	8002ba2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 fcb5 	bl	8008334 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029d4:	d104      	bne.n	80029e0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029de:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 fca5 	bl	8008334 <USB_ReadInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f4:	d104      	bne.n	8002a00 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029fe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f005 fc95 	bl	8008334 <USB_ReadInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a14:	d104      	bne.n	8002a20 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a1e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 fc85 	bl	8008334 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d103      	bne.n	8002a3c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f005 fc77 	bl	8008334 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a50:	d120      	bne.n	8002a94 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a5a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d113      	bne.n	8002a94 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	6938      	ldr	r0, [r7, #16]
 8002a70:	f005 fba8 	bl	80081c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a74:	6938      	ldr	r0, [r7, #16]
 8002a76:	f005 fbd7 	bl	8008228 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7a5b      	ldrb	r3, [r3, #9]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d105      	bne.n	8002a8e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f005 fc95 	bl	80083b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f007 f80a 	bl	8009aa8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f005 fc4b 	bl	8008334 <USB_ReadInterrupts>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa8:	d102      	bne.n	8002ab0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f001 fc87 	bl	80043be <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 fc3d 	bl	8008334 <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d106      	bne.n	8002ad2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f006 ffd3 	bl	8009a70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2208      	movs	r2, #8
 8002ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f005 fc2c 	bl	8008334 <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ae6:	d139      	bne.n	8002b5c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 fca0 	bl	8008432 <USB_HC_ReadInterrupt>
 8002af2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	e025      	b.n	8002b46 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b24:	d106      	bne.n	8002b34 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f859 	bl	8002be4 <HCD_HC_IN_IRQHandler>
 8002b32:	e005      	b.n	8002b40 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 febb 	bl	80038b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	795b      	ldrb	r3, [r3, #5]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d3d3      	bcc.n	8002afa <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f005 fbe7 	bl	8008334 <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d101      	bne.n	8002b74 <HAL_HCD_IRQHandler+0x1ea>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_HCD_IRQHandler+0x1ec>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0210 	bic.w	r2, r2, #16
 8002b88:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 fb38 	bl	8004200 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0210 	orr.w	r2, r2, #16
 8002b9e:	619a      	str	r2, [r3, #24]
 8002ba0:	e000      	b.n	8002ba4 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002ba2:	bf00      	nop
    }
  }
}
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_HCD_Stop+0x16>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e00d      	b.n	8002bdc <HAL_HCD_Stop+0x32>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f005 fd61 	bl	8008694 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 fba9 	bl	800835a <USB_ReadChInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d11a      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2304      	movs	r3, #4
 8002c22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334d      	adds	r3, #77	@ 0x4d
 8002c34:	2207      	movs	r2, #7
 8002c36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f005 fc07 	bl	8008454 <USB_HC_Halt>
 8002c46:	e09e      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f005 fb82 	bl	800835a <USB_ReadChInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c60:	d11b      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	334d      	adds	r3, #77	@ 0x4d
 8002c86:	2208      	movs	r2, #8
 8002c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f005 fbde 	bl	8008454 <USB_HC_Halt>
 8002c98:	e075      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f005 fb59 	bl	800835a <USB_ReadChInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11a      	bne.n	8002ce8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334d      	adds	r3, #77	@ 0x4d
 8002cd4:	2206      	movs	r2, #6
 8002cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fbb7 	bl	8008454 <USB_HC_Halt>
 8002ce6:	e04e      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 fb32 	bl	800835a <USB_ReadChInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d00:	d11b      	bne.n	8002d3a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	334d      	adds	r3, #77	@ 0x4d
 8002d26:	2209      	movs	r2, #9
 8002d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 fb8e 	bl	8008454 <USB_HC_Halt>
 8002d38:	e025      	b.n	8002d86 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f005 fb09 	bl	800835a <USB_ReadChInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4e:	2b80      	cmp	r3, #128	@ 0x80
 8002d50:	d119      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	334d      	adds	r3, #77	@ 0x4d
 8002d74:	2207      	movs	r2, #7
 8002d76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 fb67 	bl	8008454 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f005 fae3 	bl	800835a <USB_ReadChInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d9e:	d112      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f005 fb53 	bl	8008454 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dc0:	6093      	str	r3, [r2, #8]
 8002dc2:	f000 bd75 	b.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 fac3 	bl	800835a <USB_ReadChInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 8128 	bne.w	8003030 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2320      	movs	r3, #32
 8002df0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	331b      	adds	r3, #27
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d119      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	331b      	adds	r3, #27
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	0151      	lsls	r1, r2, #5
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	440a      	add	r2, r1
 8002e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e3a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	799b      	ldrb	r3, [r3, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01b      	beq.n	8002e7c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3330      	adds	r3, #48	@ 0x30
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	1ac9      	subs	r1, r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4403      	add	r3, r0
 8002e78:	3338      	adds	r3, #56	@ 0x38
 8002e7a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3344      	adds	r3, #68	@ 0x44
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3326      	adds	r3, #38	@ 0x26
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3326      	adds	r3, #38	@ 0x26
 8002edc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d110      	bne.n	8002f04 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f005 fab2 	bl	8008454 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2310      	movs	r3, #16
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	e03d      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3326      	adds	r3, #38	@ 0x26
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d00a      	beq.n	8002f30 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3326      	adds	r3, #38	@ 0x26
 8002f2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d127      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	0151      	lsls	r1, r2, #5
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	440a      	add	r2, r1
 8002f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	@ 0x4c
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	334c      	adds	r3, #76	@ 0x4c
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f006 fda2 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	799b      	ldrb	r3, [r3, #6]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d13b      	bne.n	8003000 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3338      	adds	r3, #56	@ 0x38
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4403      	add	r3, r0
 8002fa8:	3328      	adds	r3, #40	@ 0x28
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	440b      	add	r3, r1
 8002fae:	1e59      	subs	r1, r3, #1
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3328      	adds	r3, #40	@ 0x28
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8470 	beq.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	333c      	adds	r3, #60	@ 0x3c
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	f083 0301 	eor.w	r3, r3, #1
 8002fe8:	b2d8      	uxtb	r0, r3
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	333c      	adds	r3, #60	@ 0x3c
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	f000 bc58 	b.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	333c      	adds	r3, #60	@ 0x3c
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2d8      	uxtb	r0, r3
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	333c      	adds	r3, #60	@ 0x3c
 8003028:	4602      	mov	r2, r0
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	f000 bc40 	b.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f005 f98e 	bl	800835a <USB_ReadChInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b20      	cmp	r3, #32
 8003046:	d131      	bne.n	80030ac <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2320      	movs	r3, #32
 8003058:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	331a      	adds	r3, #26
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 841f 	bne.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	331b      	adds	r3, #27
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334d      	adds	r3, #77	@ 0x4d
 8003096:	2203      	movs	r2, #3
 8003098:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f005 f9d6 	bl	8008454 <USB_HC_Halt>
 80030a8:	f000 bc02 	b.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 f950 	bl	800835a <USB_ReadChInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	f040 8305 	bne.w	80036d0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d2:	461a      	mov	r2, r3
 80030d4:	2302      	movs	r3, #2
 80030d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	334d      	adds	r3, #77	@ 0x4d
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d114      	bne.n	8003118 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334d      	adds	r3, #77	@ 0x4d
 80030fe:	2202      	movs	r2, #2
 8003100:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	334c      	adds	r3, #76	@ 0x4c
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e2cc      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	334d      	adds	r3, #77	@ 0x4d
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b06      	cmp	r3, #6
 800312c:	d114      	bne.n	8003158 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334d      	adds	r3, #77	@ 0x4d
 800313e:	2202      	movs	r2, #2
 8003140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334c      	adds	r3, #76	@ 0x4c
 8003152:	2205      	movs	r2, #5
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e2ac      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334d      	adds	r3, #77	@ 0x4d
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b07      	cmp	r3, #7
 800316c:	d00b      	beq.n	8003186 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	334d      	adds	r3, #77	@ 0x4d
 800317e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003180:	2b09      	cmp	r3, #9
 8003182:	f040 80a6 	bne.w	80032d2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334d      	adds	r3, #77	@ 0x4d
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3344      	adds	r3, #68	@ 0x44
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1c59      	adds	r1, r3, #1
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4403      	add	r3, r0
 80031ba:	3344      	adds	r3, #68	@ 0x44
 80031bc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3344      	adds	r3, #68	@ 0x44
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d943      	bls.n	800325c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3344      	adds	r3, #68	@ 0x44
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	331a      	adds	r3, #26
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d123      	bne.n	8003246 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	331b      	adds	r3, #27
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	331c      	adds	r3, #28
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334c      	adds	r3, #76	@ 0x4c
 8003256:	2204      	movs	r2, #4
 8003258:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800325a:	e229      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	334c      	adds	r3, #76	@ 0x4c
 800326c:	2202      	movs	r2, #2
 800326e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3326      	adds	r3, #38	@ 0x26
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3326      	adds	r3, #38	@ 0x26
 8003296:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003298:	2b02      	cmp	r3, #2
 800329a:	f040 8209 	bne.w	80036b0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032d0:	e1ee      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	@ 0x4d
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	f040 80c8 	bne.w	800347a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334d      	adds	r3, #77	@ 0x4d
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	331b      	adds	r3, #27
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 81ce 	bne.w	80036b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3326      	adds	r3, #38	@ 0x26
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d16b      	bne.n	8003404 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3348      	adds	r3, #72	@ 0x48
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4403      	add	r3, r0
 800334c:	3348      	adds	r3, #72	@ 0x48
 800334e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3348      	adds	r3, #72	@ 0x48
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d943      	bls.n	80033ee <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3348      	adds	r3, #72	@ 0x48
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	331b      	adds	r3, #27
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3344      	adds	r3, #68	@ 0x44
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d809      	bhi.n	80033b8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	331c      	adds	r3, #28
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	0151      	lsls	r1, r2, #5
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	440a      	add	r2, r1
 80033ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	334c      	adds	r3, #76	@ 0x4c
 80033e8:	2204      	movs	r2, #4
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e014      	b.n	8003418 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334c      	adds	r3, #76	@ 0x4c
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e009      	b.n	8003418 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3326      	adds	r3, #38	@ 0x26
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3326      	adds	r3, #38	@ 0x26
 800343e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003440:	2b02      	cmp	r3, #2
 8003442:	f040 8136 	bne.w	80036b2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800345c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003464:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e11b      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	@ 0x4d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b03      	cmp	r3, #3
 800348e:	f040 8081 	bne.w	8003594 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334d      	adds	r3, #77	@ 0x4d
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	331b      	adds	r3, #27
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 80fa 	bne.w	80036b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334c      	adds	r3, #76	@ 0x4c
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	0151      	lsls	r1, r2, #5
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	440a      	add	r2, r1
 80034e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	0151      	lsls	r1, r2, #5
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	440a      	add	r2, r1
 8003508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800350c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003510:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	0151      	lsls	r1, r2, #5
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	440a      	add	r2, r1
 8003528:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800352c:	f023 0320 	bic.w	r3, r3, #32
 8003530:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3326      	adds	r3, #38	@ 0x26
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3326      	adds	r3, #38	@ 0x26
 8003558:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800355a:	2b02      	cmp	r3, #2
 800355c:	f040 80a9 	bne.w	80036b2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003576:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800357e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800358c:	461a      	mov	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e08e      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334d      	adds	r3, #77	@ 0x4d
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d143      	bne.n	8003632 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334d      	adds	r3, #77	@ 0x4d
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	334c      	adds	r3, #76	@ 0x4c
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3326      	adds	r3, #38	@ 0x26
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3326      	adds	r3, #38	@ 0x26
 80035f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d159      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003614:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800361c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	e03f      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	334d      	adds	r3, #77	@ 0x4d
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d126      	bne.n	8003696 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	334d      	adds	r3, #77	@ 0x4d
 8003658:	2202      	movs	r2, #2
 800365a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3344      	adds	r3, #68	@ 0x44
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4403      	add	r3, r0
 800367c:	3344      	adds	r3, #68	@ 0x44
 800367e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334c      	adds	r3, #76	@ 0x4c
 8003690:	2204      	movs	r2, #4
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e00d      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	334d      	adds	r3, #77	@ 0x4d
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	f000 8100 	beq.w	80038ae <HCD_HC_IN_IRQHandler+0xcca>
 80036ae:	e000      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036b0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	334c      	adds	r3, #76	@ 0x4c
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f006 f9fb 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036ce:	e0ef      	b.n	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f004 fe3e 	bl	800835a <USB_ReadChInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b40      	cmp	r3, #64	@ 0x40
 80036e6:	d12f      	bne.n	8003748 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2340      	movs	r3, #64	@ 0x40
 80036f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	334d      	adds	r3, #77	@ 0x4d
 800370a:	2205      	movs	r2, #5
 800370c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	331a      	adds	r3, #26
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3344      	adds	r3, #68	@ 0x44
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f004 fe87 	bl	8008454 <USB_HC_Halt>
 8003746:	e0b3      	b.n	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f004 fe02 	bl	800835a <USB_ReadChInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b10      	cmp	r3, #16
 800375e:	f040 80a7 	bne.w	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3326      	adds	r3, #38	@ 0x26
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d11b      	bne.n	80037b0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3344      	adds	r3, #68	@ 0x44
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334d      	adds	r3, #77	@ 0x4d
 800379c:	2204      	movs	r2, #4
 800379e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fe53 	bl	8008454 <USB_HC_Halt>
 80037ae:	e03f      	b.n	8003830 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3326      	adds	r3, #38	@ 0x26
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3326      	adds	r3, #38	@ 0x26
 80037d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d129      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3344      	adds	r3, #68	@ 0x44
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	799b      	ldrb	r3, [r3, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HCD_HC_IN_IRQHandler+0xc2a>
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	331b      	adds	r3, #27
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d110      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334d      	adds	r3, #77	@ 0x4d
 800381e:	2204      	movs	r2, #4
 8003820:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fe12 	bl	8008454 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	331b      	adds	r3, #27
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d129      	bne.n	800389a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	331b      	adds	r3, #27
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	440a      	add	r2, r1
 8003870:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003878:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	0151      	lsls	r1, r2, #5
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	440a      	add	r2, r1
 8003890:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	2310      	movs	r3, #16
 80038aa:	6093      	str	r3, [r2, #8]
 80038ac:	e000      	b.n	80038b0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80038ae:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 fd40 	bl	800835a <USB_ReadChInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11b      	bne.n	800391c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f0:	461a      	mov	r2, r3
 80038f2:	2304      	movs	r3, #4
 80038f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	334d      	adds	r3, #77	@ 0x4d
 8003906:	2207      	movs	r2, #7
 8003908:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fd9e 	bl	8008454 <USB_HC_Halt>
 8003918:	f000 bc6f 	b.w	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f004 fd18 	bl	800835a <USB_ReadChInterrupts>
 800392a:	4603      	mov	r3, r0
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	f040 8082 	bne.w	8003a3a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003942:	461a      	mov	r2, r3
 8003944:	2320      	movs	r3, #32
 8003946:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3319      	adds	r3, #25
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d124      	bne.n	80039a8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3319      	adds	r3, #25
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	334c      	adds	r3, #76	@ 0x4c
 8003982:	2202      	movs	r2, #2
 8003984:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334d      	adds	r3, #77	@ 0x4d
 8003996:	2203      	movs	r2, #3
 8003998:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 fd56 	bl	8008454 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	331a      	adds	r3, #26
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	f040 841d 	bne.w	80041fa <HCD_HC_OUT_IRQHandler+0x944>
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	331b      	adds	r3, #27
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 8411 	bne.w	80041fa <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3326      	adds	r3, #38	@ 0x26
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d009      	beq.n	8003a02 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	331b      	adds	r3, #27
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	334d      	adds	r3, #77	@ 0x4d
 8003a12:	2203      	movs	r2, #3
 8003a14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fd18 	bl	8008454 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3344      	adds	r3, #68	@ 0x44
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e3df      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fc89 	bl	800835a <USB_ReadChInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a52:	d111      	bne.n	8003a78 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a66:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 fcef 	bl	8008454 <USB_HC_Halt>
 8003a76:	e3c0      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f004 fc6a 	bl	800835a <USB_ReadChInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d168      	bne.n	8003b62 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3344      	adds	r3, #68	@ 0x44
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 fc54 	bl	800835a <USB_ReadChInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d112      	bne.n	8003ae2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3319      	adds	r3, #25
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003adc:	461a      	mov	r2, r3
 8003ade:	2340      	movs	r3, #64	@ 0x40
 8003ae0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	331b      	adds	r3, #27
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d019      	beq.n	8003b2c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	331b      	adds	r3, #27
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	334d      	adds	r3, #77	@ 0x4d
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fc7a 	bl	8008454 <USB_HC_Halt>
 8003b60:	e34b      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 fbf5 	bl	800835a <USB_ReadChInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d139      	bne.n	8003bee <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	334d      	adds	r3, #77	@ 0x4d
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	331a      	adds	r3, #26
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3319      	adds	r3, #25
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3344      	adds	r3, #68	@ 0x44
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f004 fc3d 	bl	8008454 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be6:	461a      	mov	r2, r3
 8003be8:	2340      	movs	r3, #64	@ 0x40
 8003bea:	6093      	str	r3, [r2, #8]
 8003bec:	e305      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 fbaf 	bl	800835a <USB_ReadChInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d11a      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c12:	461a      	mov	r2, r3
 8003c14:	2308      	movs	r3, #8
 8003c16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	334d      	adds	r3, #77	@ 0x4d
 8003c28:	2206      	movs	r2, #6
 8003c2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fc0d 	bl	8008454 <USB_HC_Halt>
 8003c3a:	e2de      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 fb88 	bl	800835a <USB_ReadChInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d144      	bne.n	8003cde <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3344      	adds	r3, #68	@ 0x44
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	334d      	adds	r3, #77	@ 0x4d
 8003c78:	2204      	movs	r2, #4
 8003c7a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	3319      	adds	r3, #25
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d114      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3318      	adds	r3, #24
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3319      	adds	r3, #25
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f004 fbc5 	bl	8008454 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2310      	movs	r3, #16
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	e28d      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fb37 	bl	800835a <USB_ReadChInterrupts>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d169      	bne.n	8003dca <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	799b      	ldrb	r3, [r3, #6]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d111      	bne.n	8003d22 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334d      	adds	r3, #77	@ 0x4d
 8003d0e:	2207      	movs	r2, #7
 8003d10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fb9a 	bl	8008454 <USB_HC_Halt>
 8003d20:	e049      	b.n	8003db6 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	3344      	adds	r3, #68	@ 0x44
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4403      	add	r3, r0
 8003d42:	3344      	adds	r3, #68	@ 0x44
 8003d44:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3344      	adds	r3, #68	@ 0x44
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d922      	bls.n	8003da2 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3344      	adds	r3, #68	@ 0x44
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	334c      	adds	r3, #76	@ 0x4c
 8003d80:	2204      	movs	r2, #4
 8003d82:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	334c      	adds	r3, #76	@ 0x4c
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f005 fe92 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003da0:	e009      	b.n	8003db6 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334c      	adds	r3, #76	@ 0x4c
 8003db2:	2202      	movs	r2, #2
 8003db4:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	6093      	str	r3, [r2, #8]
 8003dc8:	e217      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 fac1 	bl	800835a <USB_ReadChInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d11b      	bne.n	8003e1c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	334d      	adds	r3, #77	@ 0x4d
 8003df4:	2209      	movs	r2, #9
 8003df6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f004 fb27 	bl	8008454 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e12:	461a      	mov	r2, r3
 8003e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e18:	6093      	str	r3, [r2, #8]
 8003e1a:	e1ee      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fa98 	bl	800835a <USB_ReadChInterrupts>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f040 81df 	bne.w	80041f4 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e42:	461a      	mov	r2, r3
 8003e44:	2302      	movs	r3, #2
 8003e46:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	334d      	adds	r3, #77	@ 0x4d
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	f040 8093 	bne.w	8003f86 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334d      	adds	r3, #77	@ 0x4d
 8003e70:	2202      	movs	r2, #2
 8003e72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	334c      	adds	r3, #76	@ 0x4c
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3326      	adds	r3, #38	@ 0x26
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d00b      	beq.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3326      	adds	r3, #38	@ 0x26
 8003eae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	f040 8190 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	799b      	ldrb	r3, [r3, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d115      	bne.n	8003eea <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	333d      	adds	r3, #61	@ 0x3d
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	f083 0301 	eor.w	r3, r3, #1
 8003ed6:	b2d8      	uxtb	r0, r3
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	333d      	adds	r3, #61	@ 0x3d
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	799b      	ldrb	r3, [r3, #6]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	f040 8171 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3334      	adds	r3, #52	@ 0x34
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8165 	beq.w	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3334      	adds	r3, #52	@ 0x34
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4403      	add	r3, r0
 8003f2c:	3328      	adds	r3, #40	@ 0x28
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	440b      	add	r3, r1
 8003f32:	1e59      	subs	r1, r3, #1
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4403      	add	r3, r0
 8003f42:	3328      	adds	r3, #40	@ 0x28
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 813f 	beq.w	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	333d      	adds	r3, #61	@ 0x3d
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2d8      	uxtb	r0, r3
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	333d      	adds	r3, #61	@ 0x3d
 8003f80:	4602      	mov	r2, r0
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e127      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	334d      	adds	r3, #77	@ 0x4d
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d120      	bne.n	8003fde <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334d      	adds	r3, #77	@ 0x4d
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	331b      	adds	r3, #27
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 8107 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	334c      	adds	r3, #76	@ 0x4c
 8003fd8:	2202      	movs	r2, #2
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e0fb      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	334d      	adds	r3, #77	@ 0x4d
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d13a      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	334d      	adds	r3, #77	@ 0x4d
 8004004:	2202      	movs	r2, #2
 8004006:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	334c      	adds	r3, #76	@ 0x4c
 8004018:	2202      	movs	r2, #2
 800401a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	331b      	adds	r3, #27
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b01      	cmp	r3, #1
 8004030:	f040 80d1 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	331b      	adds	r3, #27
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	440a      	add	r2, r1
 800405e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004066:	6053      	str	r3, [r2, #4]
 8004068:	e0b5      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	334d      	adds	r3, #77	@ 0x4d
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d114      	bne.n	80040aa <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	334d      	adds	r3, #77	@ 0x4d
 8004090:	2202      	movs	r2, #2
 8004092:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	334c      	adds	r3, #76	@ 0x4c
 80040a4:	2202      	movs	r2, #2
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e095      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	334d      	adds	r3, #77	@ 0x4d
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d114      	bne.n	80040ea <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	334d      	adds	r3, #77	@ 0x4d
 80040d0:	2202      	movs	r2, #2
 80040d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	334c      	adds	r3, #76	@ 0x4c
 80040e4:	2205      	movs	r2, #5
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	e075      	b.n	80041d6 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	334d      	adds	r3, #77	@ 0x4d
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d00a      	beq.n	8004116 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	334d      	adds	r3, #77	@ 0x4d
 8004110:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004112:	2b09      	cmp	r3, #9
 8004114:	d170      	bne.n	80041f8 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	334d      	adds	r3, #77	@ 0x4d
 8004126:	2202      	movs	r2, #2
 8004128:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3344      	adds	r3, #68	@ 0x44
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4403      	add	r3, r0
 800414a:	3344      	adds	r3, #68	@ 0x44
 800414c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3344      	adds	r3, #68	@ 0x44
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d914      	bls.n	800418e <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	3344      	adds	r3, #68	@ 0x44
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	334c      	adds	r3, #76	@ 0x4c
 8004188:	2204      	movs	r2, #4
 800418a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800418c:	e022      	b.n	80041d4 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	334c      	adds	r3, #76	@ 0x4c
 800419e:	2202      	movs	r2, #2
 80041a0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041d4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	334c      	adds	r3, #76	@ 0x4c
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f005 fc69 	bl	8009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041f2:	e002      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80041f8:	bf00      	nop
  }
}
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	0c5b      	lsrs	r3, r3, #17
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004234:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d004      	beq.n	8004246 <HCD_RXQLVL_IRQHandler+0x46>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b05      	cmp	r3, #5
 8004240:	f000 80b6 	beq.w	80043b0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004244:	e0b7      	b.n	80043b6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80b3 	beq.w	80043b4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	332c      	adds	r3, #44	@ 0x2c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a7 	beq.w	80043b4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3338      	adds	r3, #56	@ 0x38
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	18d1      	adds	r1, r2, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4403      	add	r3, r0
 800428a:	3334      	adds	r3, #52	@ 0x34
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4299      	cmp	r1, r3
 8004290:	f200 8083 	bhi.w	800439a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	332c      	adds	r3, #44	@ 0x2c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	b292      	uxth	r2, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	f003 ffe8 	bl	8008284 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	332c      	adds	r3, #44	@ 0x2c
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	18d1      	adds	r1, r2, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4403      	add	r3, r0
 80042d8:	332c      	adds	r3, #44	@ 0x2c
 80042da:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	3338      	adds	r3, #56	@ 0x38
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	18d1      	adds	r1, r2, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4403      	add	r3, r0
 8004300:	3338      	adds	r3, #56	@ 0x38
 8004302:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	0cdb      	lsrs	r3, r3, #19
 8004314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004318:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	3328      	adds	r3, #40	@ 0x28
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4293      	cmp	r3, r2
 8004332:	d13f      	bne.n	80043b4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03c      	beq.n	80043b4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004350:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004358:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	333c      	adds	r3, #60	@ 0x3c
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	f083 0301 	eor.w	r3, r3, #1
 8004382:	b2d8      	uxtb	r0, r3
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	333c      	adds	r3, #60	@ 0x3c
 8004394:	4602      	mov	r2, r0
 8004396:	701a      	strb	r2, [r3, #0]
      break;
 8004398:	e00c      	b.n	80043b4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	334c      	adds	r3, #76	@ 0x4c
 80043aa:	2204      	movs	r2, #4
 80043ac:	701a      	strb	r2, [r3, #0]
      break;
 80043ae:	e001      	b.n	80043b4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80043b4:	bf00      	nop
  }
}
 80043b6:	bf00      	nop
 80043b8:	3728      	adds	r7, #40	@ 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80043ea:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d10b      	bne.n	800440e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d102      	bne.n	8004406 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f005 fb43 	bl	8009a8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d132      	bne.n	800447e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f043 0308 	orr.w	r3, r3, #8
 800441e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d126      	bne.n	8004478 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7a5b      	ldrb	r3, [r3, #9]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d113      	bne.n	800445a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004438:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800443c:	d106      	bne.n	800444c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2102      	movs	r1, #2
 8004444:	4618      	mov	r0, r3
 8004446:	f003 ffb7 	bl	80083b8 <USB_InitFSLSPClkSel>
 800444a:	e011      	b.n	8004470 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2101      	movs	r1, #1
 8004452:	4618      	mov	r0, r3
 8004454:	f003 ffb0 	bl	80083b8 <USB_InitFSLSPClkSel>
 8004458:	e00a      	b.n	8004470 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	79db      	ldrb	r3, [r3, #7]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d106      	bne.n	8004470 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004468:	461a      	mov	r2, r3
 800446a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800446e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f005 fb39 	bl	8009ae8 <HAL_HCD_PortEnabled_Callback>
 8004476:	e002      	b.n	800447e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f005 fb43 	bl	8009b04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b20      	cmp	r3, #32
 8004486:	d103      	bne.n	8004490 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f043 0320 	orr.w	r3, r3, #32
 800448e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e12b      	b.n	800470e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fe0e 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	@ 0x24
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004508:	f001 fe6c 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 800450c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4a81      	ldr	r2, [pc, #516]	@ (8004718 <HAL_I2C_Init+0x274>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d807      	bhi.n	8004528 <HAL_I2C_Init+0x84>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a80      	ldr	r2, [pc, #512]	@ (800471c <HAL_I2C_Init+0x278>)
 800451c:	4293      	cmp	r3, r2
 800451e:	bf94      	ite	ls
 8004520:	2301      	movls	r3, #1
 8004522:	2300      	movhi	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e006      	b.n	8004536 <HAL_I2C_Init+0x92>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a7d      	ldr	r2, [pc, #500]	@ (8004720 <HAL_I2C_Init+0x27c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	bf94      	ite	ls
 8004530:	2301      	movls	r3, #1
 8004532:	2300      	movhi	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0e7      	b.n	800470e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a78      	ldr	r2, [pc, #480]	@ (8004724 <HAL_I2C_Init+0x280>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0c9b      	lsrs	r3, r3, #18
 8004548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a6a      	ldr	r2, [pc, #424]	@ (8004718 <HAL_I2C_Init+0x274>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d802      	bhi.n	8004578 <HAL_I2C_Init+0xd4>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	3301      	adds	r3, #1
 8004576:	e009      	b.n	800458c <HAL_I2C_Init+0xe8>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	4a69      	ldr	r2, [pc, #420]	@ (8004728 <HAL_I2C_Init+0x284>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	099b      	lsrs	r3, r3, #6
 800458a:	3301      	adds	r3, #1
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	430b      	orrs	r3, r1
 8004592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800459e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	495c      	ldr	r1, [pc, #368]	@ (8004718 <HAL_I2C_Init+0x274>)
 80045a8:	428b      	cmp	r3, r1
 80045aa:	d819      	bhi.n	80045e0 <HAL_I2C_Init+0x13c>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e59      	subs	r1, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045c0:	400b      	ands	r3, r1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_I2C_Init+0x138>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1e59      	subs	r1, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045da:	e051      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 80045dc:	2304      	movs	r3, #4
 80045de:	e04f      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d111      	bne.n	800460c <HAL_I2C_Init+0x168>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1e58      	subs	r0, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6859      	ldr	r1, [r3, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	440b      	add	r3, r1
 80045f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e012      	b.n	8004632 <HAL_I2C_Init+0x18e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e58      	subs	r0, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	0099      	lsls	r1, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004622:	3301      	adds	r3, #1
 8004624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Init+0x196>
 8004636:	2301      	movs	r3, #1
 8004638:	e022      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10e      	bne.n	8004660 <HAL_I2C_Init+0x1bc>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e58      	subs	r0, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	440b      	add	r3, r1
 8004650:	fbb0 f3f3 	udiv	r3, r0, r3
 8004654:	3301      	adds	r3, #1
 8004656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800465e:	e00f      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	0099      	lsls	r1, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	6809      	ldr	r1, [r1, #0]
 8004684:	4313      	orrs	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6911      	ldr	r1, [r2, #16]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68d2      	ldr	r2, [r2, #12]
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	000186a0 	.word	0x000186a0
 800471c:	001e847f 	.word	0x001e847f
 8004720:	003d08ff 	.word	0x003d08ff
 8004724:	431bde83 	.word	0x431bde83
 8004728:	10624dd3 	.word	0x10624dd3

0800472c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	@ 0x30
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004746:	f7fd f9cf 	bl	8001ae8 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b20      	cmp	r3, #32
 8004756:	f040 8214 	bne.w	8004b82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2319      	movs	r3, #25
 8004760:	2201      	movs	r2, #1
 8004762:	497b      	ldr	r1, [pc, #492]	@ (8004950 <HAL_I2C_Mem_Read+0x224>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fafb 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
 8004772:	e207      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2C_Mem_Read+0x56>
 800477e:	2302      	movs	r3, #2
 8004780:	e200      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d007      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2222      	movs	r2, #34	@ 0x22
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2240      	movs	r2, #64	@ 0x40
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004954 <HAL_I2C_Mem_Read+0x228>)
 80047e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ea:	88f8      	ldrh	r0, [r7, #6]
 80047ec:	893a      	ldrh	r2, [r7, #8]
 80047ee:	8979      	ldrh	r1, [r7, #10]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4603      	mov	r3, r0
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f9c8 	bl	8004b90 <I2C_RequestMemoryRead>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1bc      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d113      	bne.n	800483a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	623b      	str	r3, [r7, #32]
 8004826:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e190      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	2b01      	cmp	r3, #1
 8004840:	d11b      	bne.n	800487a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e170      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487e:	2b02      	cmp	r3, #2
 8004880:	d11b      	bne.n	80048ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004890:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	e150      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048d0:	e144      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	f200 80f1 	bhi.w	8004abe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d123      	bne.n	800492c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fb9b 	bl	8005024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e145      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800492a:	e117      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004930:	2b02      	cmp	r3, #2
 8004932:	d14e      	bne.n	80049d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	2200      	movs	r2, #0
 800493c:	4906      	ldr	r1, [pc, #24]	@ (8004958 <HAL_I2C_Mem_Read+0x22c>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa0e 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e11a      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
 800494e:	bf00      	nop
 8004950:	00100002 	.word	0x00100002
 8004954:	ffff0000 	.word	0xffff0000
 8004958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049d0:	e0c4      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	2200      	movs	r2, #0
 80049da:	496c      	ldr	r1, [pc, #432]	@ (8004b8c <HAL_I2C_Mem_Read+0x460>)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f9bf 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0cb      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	2200      	movs	r2, #0
 8004a36:	4955      	ldr	r1, [pc, #340]	@ (8004b8c <HAL_I2C_Mem_Read+0x460>)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f991 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e09d      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004abc:	e04e      	b.n	8004b5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 faae 	bl	8005024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e058      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d124      	bne.n	8004b5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d107      	bne.n	8004b2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f aeb6 	bne.w	80048d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3728      	adds	r7, #40	@ 0x28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	00010004 	.word	0x00010004

08004b90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	4608      	mov	r0, r1
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	817b      	strh	r3, [r7, #10]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	813b      	strh	r3, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f8c2 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00d      	beq.n	8004bfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf0:	d103      	bne.n	8004bfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0aa      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bfe:	897b      	ldrh	r3, [r7, #10]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	4952      	ldr	r1, [pc, #328]	@ (8004d5c <I2C_RequestMemoryRead+0x1cc>)
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f91d 	bl	8004e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e097      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3c:	6a39      	ldr	r1, [r7, #32]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f9a8 	bl	8004f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00d      	beq.n	8004c66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d107      	bne.n	8004c62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e076      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c6c:	893b      	ldrh	r3, [r7, #8]
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]
 8004c76:	e021      	b.n	8004cbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f982 	bl	8004f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d107      	bne.n	8004cae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e050      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb2:	893b      	ldrh	r3, [r7, #8]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cbe:	6a39      	ldr	r1, [r7, #32]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f967 	bl	8004f94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00d      	beq.n	8004ce8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d107      	bne.n	8004ce4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e035      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f82b 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1e:	d103      	bne.n	8004d28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e013      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d2c:	897b      	ldrh	r3, [r7, #10]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	4906      	ldr	r1, [pc, #24]	@ (8004d5c <I2C_RequestMemoryRead+0x1cc>)
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f886 	bl	8004e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	00010002 	.word	0x00010002

08004d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d70:	e048      	b.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d044      	beq.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fc feb5 	bl	8001ae8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d139      	bne.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10d      	bne.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	43da      	mvns	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	e00c      	b.n	8004dd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	43da      	mvns	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d116      	bne.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e023      	b.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d10d      	bne.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	43da      	mvns	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	e00c      	b.n	8004e44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	43da      	mvns	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d093      	beq.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e62:	e071      	b.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e72:	d123      	bne.n	8004ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	f043 0204 	orr.w	r2, r3, #4
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e067      	b.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d041      	beq.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec4:	f7fc fe10 	bl	8001ae8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d302      	bcc.n	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d136      	bne.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d10c      	bne.n	8004efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	43da      	mvns	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	e00b      	b.n	8004f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	43da      	mvns	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e021      	b.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d10c      	bne.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	43da      	mvns	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e00b      	b.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf14      	ite	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	2300      	moveq	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af6d 	bne.w	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fa0:	e034      	b.n	800500c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f89b 	bl	80050de <I2C_IsAcknowledgeFailed>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e034      	b.n	800501c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d028      	beq.n	800500c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fc fd95 	bl	8001ae8 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11d      	bne.n	800500c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	d016      	beq.n	800500c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e007      	b.n	800501c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b80      	cmp	r3, #128	@ 0x80
 8005018:	d1c3      	bne.n	8004fa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005030:	e049      	b.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b10      	cmp	r3, #16
 800503e:	d119      	bne.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0210 	mvn.w	r2, #16
 8005048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e030      	b.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005074:	f7fc fd38 	bl	8001ae8 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11d      	bne.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d016      	beq.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e007      	b.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d0:	2b40      	cmp	r3, #64	@ 0x40
 80050d2:	d1ae      	bne.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f4:	d11b      	bne.n	800512e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b20      	cmp	r3, #32
 8005150:	d129      	bne.n	80051a6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	@ 0x24
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0210 	bic.w	r2, r2, #16
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d12a      	bne.n	8005224 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2224      	movs	r2, #36	@ 0x24
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80051ee:	89fb      	ldrh	r3, [r7, #14]
 80051f0:	f023 030f 	bic.w	r3, r3, #15
 80051f4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	89fb      	ldrh	r3, [r7, #14]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	89fa      	ldrh	r2, [r7, #14]
 8005206:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0bf      	b.n	80053c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fb ffb0 	bl	80011c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005276:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800528c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b4a      	ldr	r3, [pc, #296]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 80052a8:	400b      	ands	r3, r1
 80052aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68d9      	ldr	r1, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 80052d6:	400b      	ands	r3, r1
 80052d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68d9      	ldr	r1, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6919      	ldr	r1, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b33      	ldr	r3, [pc, #204]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 8005304:	400b      	ands	r3, r1
 8005306:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6919      	ldr	r1, [r3, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6959      	ldr	r1, [r3, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 8005332:	400b      	ands	r3, r1
 8005334:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6959      	ldr	r1, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005376:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0206 	orr.w	r2, r2, #6
 80053a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	f000f800 	.word	0xf000f800

080053d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d023      	beq.n	800543e <HAL_LTDC_IRQHandler+0x6a>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01e      	beq.n	800543e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2204      	movs	r2, #4
 8005416:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800541e:	f043 0201 	orr.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2204      	movs	r2, #4
 800542c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f86f 	bl	800551c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d023      	beq.n	8005490 <HAL_LTDC_IRQHandler+0xbc>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01e      	beq.n	8005490 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0202 	bic.w	r2, r2, #2
 8005460:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2202      	movs	r2, #2
 8005468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005470:	f043 0202 	orr.w	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2204      	movs	r2, #4
 800547e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f846 	bl	800551c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01b      	beq.n	80054d2 <HAL_LTDC_IRQHandler+0xfe>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d016      	beq.n	80054d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f82f 	bl	8005530 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_LTDC_IRQHandler+0x140>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d016      	beq.n	8005514 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0208 	bic.w	r2, r2, #8
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2208      	movs	r2, #8
 80054fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f818 	bl	8005544 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005558:	b5b0      	push	{r4, r5, r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_LTDC_ConfigLayer+0x1a>
 800556e:	2302      	movs	r3, #2
 8005570:	e02c      	b.n	80055cc <HAL_LTDC_ConfigLayer+0x74>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2134      	movs	r1, #52	@ 0x34
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4614      	mov	r4, r2
 8005596:	461d      	mov	r5, r3
 8005598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800559a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800559c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800559e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f811 	bl	80055d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2201      	movs	r2, #1
 80055b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bdb0      	pop	{r4, r5, r7, pc}

080055d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	@ 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f0:	4413      	add	r3, r2
 80055f2:	041b      	lsls	r3, r3, #16
 80055f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	01db      	lsls	r3, r3, #7
 8005600:	4413      	add	r3, r2
 8005602:	3384      	adds	r3, #132	@ 0x84
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4611      	mov	r1, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	01d2      	lsls	r2, r2, #7
 8005610:	440a      	add	r2, r1
 8005612:	3284      	adds	r2, #132	@ 0x84
 8005614:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005618:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800562a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800562c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4619      	mov	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	01db      	lsls	r3, r3, #7
 8005638:	440b      	add	r3, r1
 800563a:	3384      	adds	r3, #132	@ 0x84
 800563c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005642:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005652:	4413      	add	r3, r2
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	01db      	lsls	r3, r3, #7
 8005662:	4413      	add	r3, r2
 8005664:	3384      	adds	r3, #132	@ 0x84
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	4611      	mov	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	01d2      	lsls	r2, r2, #7
 8005672:	440a      	add	r2, r1
 8005674:	3284      	adds	r2, #132	@ 0x84
 8005676:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800567a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800568a:	4413      	add	r3, r2
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	01db      	lsls	r3, r3, #7
 8005698:	440b      	add	r3, r1
 800569a:	3384      	adds	r3, #132	@ 0x84
 800569c:	4619      	mov	r1, r3
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	01db      	lsls	r3, r3, #7
 80056ae:	4413      	add	r3, r2
 80056b0:	3384      	adds	r3, #132	@ 0x84
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	4611      	mov	r1, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	01d2      	lsls	r2, r2, #7
 80056be:	440a      	add	r2, r1
 80056c0:	3284      	adds	r2, #132	@ 0x84
 80056c2:	f023 0307 	bic.w	r3, r3, #7
 80056c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	01db      	lsls	r3, r3, #7
 80056d2:	4413      	add	r3, r2
 80056d4:	3384      	adds	r3, #132	@ 0x84
 80056d6:	461a      	mov	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	4413      	add	r3, r2
 8005706:	3384      	adds	r3, #132	@ 0x84
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4413      	add	r3, r2
 8005716:	3384      	adds	r3, #132	@ 0x84
 8005718:	461a      	mov	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005724:	461a      	mov	r2, r3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	431a      	orrs	r2, r3
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	01db      	lsls	r3, r3, #7
 8005738:	440b      	add	r3, r1
 800573a:	3384      	adds	r3, #132	@ 0x84
 800573c:	4619      	mov	r1, r3
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	01db      	lsls	r3, r3, #7
 800574e:	4413      	add	r3, r2
 8005750:	3384      	adds	r3, #132	@ 0x84
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	4611      	mov	r1, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	01d2      	lsls	r2, r2, #7
 800575e:	440a      	add	r2, r1
 8005760:	3284      	adds	r2, #132	@ 0x84
 8005762:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005766:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	01db      	lsls	r3, r3, #7
 8005772:	4413      	add	r3, r2
 8005774:	3384      	adds	r3, #132	@ 0x84
 8005776:	461a      	mov	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	01db      	lsls	r3, r3, #7
 8005788:	4413      	add	r3, r2
 800578a:	3384      	adds	r3, #132	@ 0x84
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	4611      	mov	r1, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	01d2      	lsls	r2, r2, #7
 8005798:	440a      	add	r2, r1
 800579a:	3284      	adds	r2, #132	@ 0x84
 800579c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057a0:	f023 0307 	bic.w	r3, r3, #7
 80057a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	6809      	ldr	r1, [r1, #0]
 80057b2:	4608      	mov	r0, r1
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	01c9      	lsls	r1, r1, #7
 80057b8:	4401      	add	r1, r0
 80057ba:	3184      	adds	r1, #132	@ 0x84
 80057bc:	4313      	orrs	r3, r2
 80057be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	01db      	lsls	r3, r3, #7
 80057ca:	4413      	add	r3, r2
 80057cc:	3384      	adds	r3, #132	@ 0x84
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	01db      	lsls	r3, r3, #7
 80057da:	4413      	add	r3, r2
 80057dc:	3384      	adds	r3, #132	@ 0x84
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	01db      	lsls	r3, r3, #7
 80057ee:	4413      	add	r3, r2
 80057f0:	3384      	adds	r3, #132	@ 0x84
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005802:	2304      	movs	r3, #4
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e01b      	b.n	8005840 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d102      	bne.n	8005816 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005810:	2303      	movs	r3, #3
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	e014      	b.n	8005840 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b04      	cmp	r3, #4
 800581c:	d00b      	beq.n	8005836 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005822:	2b02      	cmp	r3, #2
 8005824:	d007      	beq.n	8005836 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800582a:	2b03      	cmp	r3, #3
 800582c:	d003      	beq.n	8005836 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005832:	2b07      	cmp	r3, #7
 8005834:	d102      	bne.n	800583c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005836:	2302      	movs	r3, #2
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e001      	b.n	8005840 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800583c:	2301      	movs	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	01db      	lsls	r3, r3, #7
 800584a:	4413      	add	r3, r2
 800584c:	3384      	adds	r3, #132	@ 0x84
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	4611      	mov	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	01d2      	lsls	r2, r2, #7
 800585a:	440a      	add	r2, r1
 800585c:	3284      	adds	r2, #132	@ 0x84
 800585e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005862:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	1acb      	subs	r3, r1, r3
 800587a:	69f9      	ldr	r1, [r7, #28]
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6809      	ldr	r1, [r1, #0]
 8005886:	4608      	mov	r0, r1
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	01c9      	lsls	r1, r1, #7
 800588c:	4401      	add	r1, r0
 800588e:	3184      	adds	r1, #132	@ 0x84
 8005890:	4313      	orrs	r3, r2
 8005892:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3384      	adds	r3, #132	@ 0x84
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	4611      	mov	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	01d2      	lsls	r2, r2, #7
 80058ae:	440a      	add	r2, r1
 80058b0:	3284      	adds	r2, #132	@ 0x84
 80058b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	01db      	lsls	r3, r3, #7
 80058c6:	4413      	add	r3, r2
 80058c8:	3384      	adds	r3, #132	@ 0x84
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	@ 0x84
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4611      	mov	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	01d2      	lsls	r2, r2, #7
 80058ec:	440a      	add	r2, r1
 80058ee:	3284      	adds	r2, #132	@ 0x84
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6013      	str	r3, [r2, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3724      	adds	r7, #36	@ 0x24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e267      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d075      	beq.n	8005a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005922:	4b88      	ldr	r3, [pc, #544]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b04      	cmp	r3, #4
 800592c:	d00c      	beq.n	8005948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800592e:	4b85      	ldr	r3, [pc, #532]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005936:	2b08      	cmp	r3, #8
 8005938:	d112      	bne.n	8005960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593a:	4b82      	ldr	r3, [pc, #520]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005946:	d10b      	bne.n	8005960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005948:	4b7e      	ldr	r3, [pc, #504]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05b      	beq.n	8005a0c <HAL_RCC_OscConfig+0x108>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d157      	bne.n	8005a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e242      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005968:	d106      	bne.n	8005978 <HAL_RCC_OscConfig+0x74>
 800596a:	4b76      	ldr	r3, [pc, #472]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a75      	ldr	r2, [pc, #468]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e01d      	b.n	80059b4 <HAL_RCC_OscConfig+0xb0>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005980:	d10c      	bne.n	800599c <HAL_RCC_OscConfig+0x98>
 8005982:	4b70      	ldr	r3, [pc, #448]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6f      	ldr	r2, [pc, #444]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a6c      	ldr	r2, [pc, #432]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e00b      	b.n	80059b4 <HAL_RCC_OscConfig+0xb0>
 800599c:	4b69      	ldr	r3, [pc, #420]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a68      	ldr	r2, [pc, #416]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b66      	ldr	r3, [pc, #408]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a65      	ldr	r2, [pc, #404]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d013      	beq.n	80059e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059bc:	f7fc f894 	bl	8001ae8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c4:	f7fc f890 	bl	8001ae8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	@ 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e207      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0xc0>
 80059e2:	e014      	b.n	8005a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fc f880 	bl	8001ae8 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fc f87c 	bl	8001ae8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	@ 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e1f3      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	4b51      	ldr	r3, [pc, #324]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0xe8>
 8005a0a:	e000      	b.n	8005a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d063      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a26:	4b47      	ldr	r3, [pc, #284]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d11c      	bne.n	8005a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a32:	4b44      	ldr	r3, [pc, #272]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d116      	bne.n	8005a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3e:	4b41      	ldr	r3, [pc, #260]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_RCC_OscConfig+0x152>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e1c7      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a56:	4b3b      	ldr	r3, [pc, #236]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4937      	ldr	r1, [pc, #220]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6a:	e03a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d020      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a74:	4b34      	ldr	r3, [pc, #208]	@ (8005b48 <HAL_RCC_OscConfig+0x244>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7a:	f7fc f835 	bl	8001ae8 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a82:	f7fc f831 	bl	8001ae8 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e1a8      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a94:	4b2b      	ldr	r3, [pc, #172]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa0:	4b28      	ldr	r3, [pc, #160]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4925      	ldr	r1, [pc, #148]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
 8005ab4:	e015      	b.n	8005ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab6:	4b24      	ldr	r3, [pc, #144]	@ (8005b48 <HAL_RCC_OscConfig+0x244>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc f814 	bl	8001ae8 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7fc f810 	bl	8001ae8 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e187      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d036      	beq.n	8005b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d016      	beq.n	8005b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af6:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <HAL_RCC_OscConfig+0x248>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afc:	f7fb fff4 	bl	8001ae8 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b04:	f7fb fff0 	bl	8001ae8 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e167      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <HAL_RCC_OscConfig+0x240>)
 8005b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCC_OscConfig+0x200>
 8005b22:	e01b      	b.n	8005b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b24:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <HAL_RCC_OscConfig+0x248>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2a:	f7fb ffdd 	bl	8001ae8 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b30:	e00e      	b.n	8005b50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b32:	f7fb ffd9 	bl	8001ae8 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d907      	bls.n	8005b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e150      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
 8005b44:	40023800 	.word	0x40023800
 8005b48:	42470000 	.word	0x42470000
 8005b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b50:	4b88      	ldr	r3, [pc, #544]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1ea      	bne.n	8005b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8097 	beq.w	8005c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6e:	4b81      	ldr	r3, [pc, #516]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10f      	bne.n	8005b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	4a7c      	ldr	r2, [pc, #496]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9a:	4b77      	ldr	r3, [pc, #476]	@ (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d118      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba6:	4b74      	ldr	r3, [pc, #464]	@ (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a73      	ldr	r2, [pc, #460]	@ (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb2:	f7fb ff99 	bl	8001ae8 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bba:	f7fb ff95 	bl	8001ae8 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e10c      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8005d78 <HAL_RCC_OscConfig+0x474>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d106      	bne.n	8005bee <HAL_RCC_OscConfig+0x2ea>
 8005be0:	4b64      	ldr	r3, [pc, #400]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be4:	4a63      	ldr	r2, [pc, #396]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bec:	e01c      	b.n	8005c28 <HAL_RCC_OscConfig+0x324>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x30c>
 8005bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c02:	4b5c      	ldr	r3, [pc, #368]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c06:	4a5b      	ldr	r2, [pc, #364]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCC_OscConfig+0x324>
 8005c10:	4b58      	ldr	r3, [pc, #352]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c14:	4a57      	ldr	r2, [pc, #348]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c1c:	4b55      	ldr	r3, [pc, #340]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c20:	4a54      	ldr	r2, [pc, #336]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c22:	f023 0304 	bic.w	r3, r3, #4
 8005c26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d015      	beq.n	8005c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c30:	f7fb ff5a 	bl	8001ae8 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c38:	f7fb ff56 	bl	8001ae8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e0cb      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4e:	4b49      	ldr	r3, [pc, #292]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ee      	beq.n	8005c38 <HAL_RCC_OscConfig+0x334>
 8005c5a:	e014      	b.n	8005c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5c:	f7fb ff44 	bl	8001ae8 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c62:	e00a      	b.n	8005c7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c64:	f7fb ff40 	bl	8001ae8 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e0b5      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1ee      	bne.n	8005c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d105      	bne.n	8005c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8c:	4b39      	ldr	r3, [pc, #228]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c90:	4a38      	ldr	r2, [pc, #224]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80a1 	beq.w	8005de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca2:	4b34      	ldr	r3, [pc, #208]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d05c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d141      	bne.n	8005d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb6:	4b31      	ldr	r3, [pc, #196]	@ (8005d7c <HAL_RCC_OscConfig+0x478>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbc:	f7fb ff14 	bl	8001ae8 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc4:	f7fb ff10 	bl	8001ae8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e087      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	4b27      	ldr	r3, [pc, #156]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	491b      	ldr	r1, [pc, #108]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d7c <HAL_RCC_OscConfig+0x478>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d12:	f7fb fee9 	bl	8001ae8 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1a:	f7fb fee5 	bl	8001ae8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e05c      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2c:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x416>
 8005d38:	e054      	b.n	8005de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3a:	4b10      	ldr	r3, [pc, #64]	@ (8005d7c <HAL_RCC_OscConfig+0x478>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fb fed2 	bl	8001ae8 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d48:	f7fb fece 	bl	8001ae8 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e045      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x444>
 8005d66:	e03d      	b.n	8005de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e038      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
 8005d74:	40023800 	.word	0x40023800
 8005d78:	40007000 	.word	0x40007000
 8005d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d80:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <HAL_RCC_OscConfig+0x4ec>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d028      	beq.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d121      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d11a      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d111      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800

08005df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0cc      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e08:	4b68      	ldr	r3, [pc, #416]	@ (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d90c      	bls.n	8005e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b65      	ldr	r3, [pc, #404]	@ (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	4b63      	ldr	r3, [pc, #396]	@ (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0b8      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d020      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e48:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4a58      	ldr	r2, [pc, #352]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e60:	4b53      	ldr	r3, [pc, #332]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a52      	ldr	r2, [pc, #328]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e6c:	4b50      	ldr	r3, [pc, #320]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	494d      	ldr	r1, [pc, #308]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d044      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d107      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	4b47      	ldr	r3, [pc, #284]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d119      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e07f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e067      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed2:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 0203 	bic.w	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4934      	ldr	r1, [pc, #208]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee4:	f7fb fe00 	bl	8001ae8 <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eec:	f7fb fdfc 	bl	8001ae8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e04f      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f02:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 020c 	and.w	r2, r3, #12
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d1eb      	bne.n	8005eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f14:	4b25      	ldr	r3, [pc, #148]	@ (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d20c      	bcs.n	8005f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b22      	ldr	r3, [pc, #136]	@ (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b20      	ldr	r3, [pc, #128]	@ (8005fac <HAL_RCC_ClockConfig+0x1b8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e032      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f48:	4b19      	ldr	r3, [pc, #100]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4916      	ldr	r1, [pc, #88]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d009      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f66:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	490e      	ldr	r1, [pc, #56]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f7a:	f000 f821 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	490a      	ldr	r1, [pc, #40]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f8c:	5ccb      	ldrb	r3, [r1, r3]
 8005f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f92:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fb fbea 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023c00 	.word	0x40023c00
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	0800acb4 	.word	0x0800acb4
 8005fb8:	20000000 	.word	0x20000000
 8005fbc:	20000004 	.word	0x20000004

08005fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc4:	b094      	sub	sp, #80	@ 0x50
 8005fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fcc:	2300      	movs	r3, #0
 8005fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fd8:	4b79      	ldr	r3, [pc, #484]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d00d      	beq.n	8006000 <HAL_RCC_GetSysClockFreq+0x40>
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	f200 80e1 	bhi.w	80061ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d003      	beq.n	8005ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8005ff2:	e0db      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff4:	4b73      	ldr	r3, [pc, #460]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005ff8:	e0db      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ffa:	4b73      	ldr	r3, [pc, #460]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ffe:	e0d8      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006000:	4b6f      	ldr	r3, [pc, #444]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006008:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800600a:	4b6d      	ldr	r3, [pc, #436]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d063      	beq.n	80060de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006016:	4b6a      	ldr	r3, [pc, #424]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	099b      	lsrs	r3, r3, #6
 800601c:	2200      	movs	r2, #0
 800601e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	633b      	str	r3, [r7, #48]	@ 0x30
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
 800602e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006032:	4622      	mov	r2, r4
 8006034:	462b      	mov	r3, r5
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	0159      	lsls	r1, r3, #5
 8006040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006044:	0150      	lsls	r0, r2, #5
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4621      	mov	r1, r4
 800604c:	1a51      	subs	r1, r2, r1
 800604e:	6139      	str	r1, [r7, #16]
 8006050:	4629      	mov	r1, r5
 8006052:	eb63 0301 	sbc.w	r3, r3, r1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006064:	4659      	mov	r1, fp
 8006066:	018b      	lsls	r3, r1, #6
 8006068:	4651      	mov	r1, sl
 800606a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800606e:	4651      	mov	r1, sl
 8006070:	018a      	lsls	r2, r1, #6
 8006072:	4651      	mov	r1, sl
 8006074:	ebb2 0801 	subs.w	r8, r2, r1
 8006078:	4659      	mov	r1, fp
 800607a:	eb63 0901 	sbc.w	r9, r3, r1
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800608a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800608e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006092:	4690      	mov	r8, r2
 8006094:	4699      	mov	r9, r3
 8006096:	4623      	mov	r3, r4
 8006098:	eb18 0303 	adds.w	r3, r8, r3
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	462b      	mov	r3, r5
 80060a0:	eb49 0303 	adc.w	r3, r9, r3
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060b2:	4629      	mov	r1, r5
 80060b4:	024b      	lsls	r3, r1, #9
 80060b6:	4621      	mov	r1, r4
 80060b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060bc:	4621      	mov	r1, r4
 80060be:	024a      	lsls	r2, r1, #9
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060c6:	2200      	movs	r2, #0
 80060c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060d0:	f7fa f8de 	bl	8000290 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4613      	mov	r3, r2
 80060da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060dc:	e058      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060de:	4b38      	ldr	r3, [pc, #224]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	099b      	lsrs	r3, r3, #6
 80060e4:	2200      	movs	r2, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	4611      	mov	r1, r2
 80060ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	f04f 0000 	mov.w	r0, #0
 8006100:	f04f 0100 	mov.w	r1, #0
 8006104:	0159      	lsls	r1, r3, #5
 8006106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610a:	0150      	lsls	r0, r2, #5
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4641      	mov	r1, r8
 8006112:	ebb2 0a01 	subs.w	sl, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb63 0b01 	sbc.w	fp, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800612c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006130:	ebb2 040a 	subs.w	r4, r2, sl
 8006134:	eb63 050b 	sbc.w	r5, r3, fp
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	00eb      	lsls	r3, r5, #3
 8006142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006146:	00e2      	lsls	r2, r4, #3
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	4643      	mov	r3, r8
 800614e:	18e3      	adds	r3, r4, r3
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	464b      	mov	r3, r9
 8006154:	eb45 0303 	adc.w	r3, r5, r3
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006166:	4629      	mov	r1, r5
 8006168:	028b      	lsls	r3, r1, #10
 800616a:	4621      	mov	r1, r4
 800616c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006170:	4621      	mov	r1, r4
 8006172:	028a      	lsls	r2, r1, #10
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800617a:	2200      	movs	r2, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	61fa      	str	r2, [r7, #28]
 8006180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006184:	f7fa f884 	bl	8000290 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4613      	mov	r3, r2
 800618e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006190:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	3301      	adds	r3, #1
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80061a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061aa:	e002      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b05      	ldr	r3, [pc, #20]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80061ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3750      	adds	r7, #80	@ 0x50
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061be:	bf00      	nop
 80061c0:	40023800 	.word	0x40023800
 80061c4:	00f42400 	.word	0x00f42400
 80061c8:	007a1200 	.word	0x007a1200

080061cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d0:	4b03      	ldr	r3, [pc, #12]	@ (80061e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000000 	.word	0x20000000

080061e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061e8:	f7ff fff0 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0a9b      	lsrs	r3, r3, #10
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	@ (8006208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	0800acc4 	.word	0x0800acc4

0800620c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006210:	f7ff ffdc 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006214:	4602      	mov	r2, r0
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	0b5b      	lsrs	r3, r3, #13
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	4903      	ldr	r1, [pc, #12]	@ (8006230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40023800 	.word	0x40023800
 8006230:	0800acc4 	.word	0x0800acc4

08006234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	220f      	movs	r2, #15
 8006242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006244:	4b12      	ldr	r3, [pc, #72]	@ (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0203 	and.w	r2, r3, #3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006250:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006268:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <HAL_RCC_GetClockConfig+0x5c>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	08db      	lsrs	r3, r3, #3
 800626e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006276:	4b07      	ldr	r3, [pc, #28]	@ (8006294 <HAL_RCC_GetClockConfig+0x60>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 020f 	and.w	r2, r3, #15
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40023800 	.word	0x40023800
 8006294:	40023c00 	.word	0x40023c00

08006298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d075      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062cc:	4b91      	ldr	r3, [pc, #580]	@ (8006514 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062d2:	f7fb fc09 	bl	8001ae8 <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062da:	f7fb fc05 	bl	8001ae8 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e189      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f0      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	019a      	lsls	r2, r3, #6
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	071b      	lsls	r3, r3, #28
 8006310:	4981      	ldr	r1, [pc, #516]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01f      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006324:	4b7c      	ldr	r3, [pc, #496]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800632a:	0f1b      	lsrs	r3, r3, #28
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	019a      	lsls	r2, r3, #6
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	061b      	lsls	r3, r3, #24
 800633e:	431a      	orrs	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	071b      	lsls	r3, r3, #28
 8006344:	4974      	ldr	r1, [pc, #464]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800634c:	4b72      	ldr	r3, [pc, #456]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006352:	f023 021f 	bic.w	r2, r3, #31
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	3b01      	subs	r3, #1
 800635c:	496e      	ldr	r1, [pc, #440]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	019a      	lsls	r2, r3, #6
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	071b      	lsls	r3, r3, #28
 8006384:	4964      	ldr	r1, [pc, #400]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800638c:	4b61      	ldr	r3, [pc, #388]	@ (8006514 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006392:	f7fb fba9 	bl	8001ae8 <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800639a:	f7fb fba5 	bl	8001ae8 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e129      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d079      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80063d0:	4b52      	ldr	r3, [pc, #328]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063d6:	f7fb fb87 	bl	8001ae8 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063de:	f7fb fb83 	bl	8001ae8 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e107      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063f0:	4b49      	ldr	r3, [pc, #292]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063fc:	d0ef      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d020      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800640a:	4b43      	ldr	r3, [pc, #268]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006410:	0f1b      	lsrs	r3, r3, #28
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	019a      	lsls	r2, r3, #6
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	431a      	orrs	r2, r3
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	071b      	lsls	r3, r3, #28
 800642a:	493b      	ldr	r1, [pc, #236]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642c:	4313      	orrs	r3, r2
 800642e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006432:	4b39      	ldr	r3, [pc, #228]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006438:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	3b01      	subs	r3, #1
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	4934      	ldr	r1, [pc, #208]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01e      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006458:	4b2f      	ldr	r3, [pc, #188]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645e:	0e1b      	lsrs	r3, r3, #24
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	019a      	lsls	r2, r3, #6
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	071b      	lsls	r3, r3, #28
 8006478:	4927      	ldr	r1, [pc, #156]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006480:	4b25      	ldr	r3, [pc, #148]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006486:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	4922      	ldr	r1, [pc, #136]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006496:	4b21      	ldr	r3, [pc, #132]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800649c:	f7fb fb24 	bl	8001ae8 <HAL_GetTick>
 80064a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064a4:	f7fb fb20 	bl	8001ae8 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e0a4      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064b6:	4b18      	ldr	r3, [pc, #96]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c2:	d1ef      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 808b 	beq.w	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	4a0f      	ldr	r2, [pc, #60]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80064f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064fa:	f7fb faf5 	bl	8001ae8 <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006500:	e010      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006502:	f7fb faf1 	bl	8001ae8 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d909      	bls.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e075      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006514:	42470068 	.word	0x42470068
 8006518:	40023800 	.word	0x40023800
 800651c:	42470070 	.word	0x42470070
 8006520:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006524:	4b38      	ldr	r3, [pc, #224]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0e8      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006530:	4b36      	ldr	r3, [pc, #216]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006538:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d02f      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	429a      	cmp	r2, r3
 800654c:	d028      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800654e:	4b2f      	ldr	r3, [pc, #188]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006556:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006558:	4b2d      	ldr	r3, [pc, #180]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800655e:	4b2c      	ldr	r3, [pc, #176]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006564:	4a29      	ldr	r2, [pc, #164]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800656a:	4b28      	ldr	r3, [pc, #160]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b01      	cmp	r3, #1
 8006574:	d114      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006576:	f7fb fab7 	bl	8001ae8 <HAL_GetTick>
 800657a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800657c:	e00a      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657e:	f7fb fab3 	bl	8001ae8 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658c:	4293      	cmp	r3, r2
 800658e:	d901      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e035      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006594:	4b1d      	ldr	r3, [pc, #116]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0ee      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ac:	d10d      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80065ae:	4b17      	ldr	r3, [pc, #92]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c2:	4912      	ldr	r1, [pc, #72]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]
 80065c8:	e005      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80065ca:	4b10      	ldr	r3, [pc, #64]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	4a0f      	ldr	r2, [pc, #60]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065d4:	6093      	str	r3, [r2, #8]
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e2:	490a      	ldr	r1, [pc, #40]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80065fa:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80065fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40007000 	.word	0x40007000
 800660c:	40023800 	.word	0x40023800
 8006610:	42470e40 	.word	0x42470e40
 8006614:	424711e0 	.word	0x424711e0

08006618 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e025      	b.n	8006678 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7fb f88d 	bl	8001760 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f001 fccb 	bl	8007ff4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	461a      	mov	r2, r3
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	f001 fd20 	bl	80080ae <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e07b      	b.n	800678a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d108      	bne.n	80066ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066a2:	d009      	beq.n	80066b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	61da      	str	r2, [r3, #28]
 80066aa:	e005      	b.n	80066b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fa fea4 	bl	8001420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	ea42 0103 	orr.w	r1, r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	f003 0104 	and.w	r1, r3, #4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	f003 0210 	and.w	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e041      	b.n	8006828 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fa fe79 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f000 fc57 	bl	8007084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	d001      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e04e      	b.n	80068e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a23      	ldr	r2, [pc, #140]	@ (80068f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d022      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006872:	d01d      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1f      	ldr	r2, [pc, #124]	@ (80068f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d018      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1e      	ldr	r2, [pc, #120]	@ (80068fc <HAL_TIM_Base_Start_IT+0xcc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1c      	ldr	r2, [pc, #112]	@ (8006900 <HAL_TIM_Base_Start_IT+0xd0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00e      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1b      	ldr	r2, [pc, #108]	@ (8006904 <HAL_TIM_Base_Start_IT+0xd4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a19      	ldr	r2, [pc, #100]	@ (8006908 <HAL_TIM_Base_Start_IT+0xd8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_TIM_Base_Start_IT+0x80>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a18      	ldr	r2, [pc, #96]	@ (800690c <HAL_TIM_Base_Start_IT+0xdc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d111      	bne.n	80068d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d010      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0201 	orr.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d2:	e007      	b.n	80068e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40010400 	.word	0x40010400
 8006908:	40014000 	.word	0x40014000
 800690c:	40001800 	.word	0x40001800

08006910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e041      	b.n	80069a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fa fddc 	bl	80014f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f000 fb98 	bl	8007084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_TIM_PWM_Start+0x24>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e022      	b.n	8006a1a <HAL_TIM_PWM_Start+0x6a>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d109      	bne.n	80069ee <HAL_TIM_PWM_Start+0x3e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e015      	b.n	8006a1a <HAL_TIM_PWM_Start+0x6a>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d109      	bne.n	8006a08 <HAL_TIM_PWM_Start+0x58>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e008      	b.n	8006a1a <HAL_TIM_PWM_Start+0x6a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e07c      	b.n	8006b1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <HAL_TIM_PWM_Start+0x82>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a30:	e013      	b.n	8006a5a <HAL_TIM_PWM_Start+0xaa>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_PWM_Start+0x92>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a40:	e00b      	b.n	8006a5a <HAL_TIM_PWM_Start+0xaa>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_PWM_Start+0xa2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a50:	e003      	b.n	8006a5a <HAL_TIM_PWM_Start+0xaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fe04 	bl	8007670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b24 <HAL_TIM_PWM_Start+0x174>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIM_PWM_Start+0xcc>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2c      	ldr	r2, [pc, #176]	@ (8006b28 <HAL_TIM_PWM_Start+0x178>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_PWM_Start+0xd0>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_TIM_PWM_Start+0xd2>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a22      	ldr	r2, [pc, #136]	@ (8006b24 <HAL_TIM_PWM_Start+0x174>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1f      	ldr	r2, [pc, #124]	@ (8006b2c <HAL_TIM_PWM_Start+0x17c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b30 <HAL_TIM_PWM_Start+0x180>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b34 <HAL_TIM_PWM_Start+0x184>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a16      	ldr	r2, [pc, #88]	@ (8006b28 <HAL_TIM_PWM_Start+0x178>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	@ (8006b38 <HAL_TIM_PWM_Start+0x188>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x136>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <HAL_TIM_PWM_Start+0x18c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d111      	bne.n	8006b0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b06      	cmp	r3, #6
 8006af6:	d010      	beq.n	8006b1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b08:	e007      	b.n	8006b1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40010000 	.word	0x40010000
 8006b28:	40010400 	.word	0x40010400
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40001800 	.word	0x40001800

08006b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d020      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0202 	mvn.w	r2, #2
 8006b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa5b 	bl	8007046 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa4d 	bl	8007032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa5e 	bl	800705a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d020      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01b      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0204 	mvn.w	r2, #4
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa35 	bl	8007046 <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa27 	bl	8007032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa38 	bl	800705a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d020      	beq.n	8006c3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01b      	beq.n	8006c3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0208 	mvn.w	r2, #8
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2204      	movs	r2, #4
 8006c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fa0f 	bl	8007046 <HAL_TIM_IC_CaptureCallback>
 8006c28:	e005      	b.n	8006c36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa01 	bl	8007032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa12 	bl	800705a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d020      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01b      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0210 	mvn.w	r2, #16
 8006c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9e9 	bl	8007046 <HAL_TIM_IC_CaptureCallback>
 8006c74:	e005      	b.n	8006c82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f9db 	bl	8007032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f9ec 	bl	800705a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0201 	mvn.w	r2, #1
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa f932 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00c      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fd7c 	bl	80077c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f9bd 	bl	800706e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d007      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0220 	mvn.w	r2, #32
 8006d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fd4e 	bl	80077b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e0ae      	b.n	8006e9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b0c      	cmp	r3, #12
 8006d4a:	f200 809f 	bhi.w	8006e8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006e8d 	.word	0x08006e8d
 8006d5c:	08006e8d 	.word	0x08006e8d
 8006d60:	08006e8d 	.word	0x08006e8d
 8006d64:	08006dc9 	.word	0x08006dc9
 8006d68:	08006e8d 	.word	0x08006e8d
 8006d6c:	08006e8d 	.word	0x08006e8d
 8006d70:	08006e8d 	.word	0x08006e8d
 8006d74:	08006e0b 	.word	0x08006e0b
 8006d78:	08006e8d 	.word	0x08006e8d
 8006d7c:	08006e8d 	.word	0x08006e8d
 8006d80:	08006e8d 	.word	0x08006e8d
 8006d84:	08006e4b 	.word	0x08006e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fa24 	bl	80071dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0208 	orr.w	r2, r2, #8
 8006da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0204 	bic.w	r2, r2, #4
 8006db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6999      	ldr	r1, [r3, #24]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	619a      	str	r2, [r3, #24]
      break;
 8006dc6:	e064      	b.n	8006e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fa74 	bl	80072bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6999      	ldr	r1, [r3, #24]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	021a      	lsls	r2, r3, #8
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	619a      	str	r2, [r3, #24]
      break;
 8006e08:	e043      	b.n	8006e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fac9 	bl	80073a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0208 	orr.w	r2, r2, #8
 8006e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0204 	bic.w	r2, r2, #4
 8006e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69d9      	ldr	r1, [r3, #28]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	61da      	str	r2, [r3, #28]
      break;
 8006e48:	e023      	b.n	8006e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fb1d 	bl	8007490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69d9      	ldr	r1, [r3, #28]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	021a      	lsls	r2, r3, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	61da      	str	r2, [r3, #28]
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e0b4      	b.n	800702a <HAL_TIM_ConfigClockSource+0x186>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef8:	d03e      	beq.n	8006f78 <HAL_TIM_ConfigClockSource+0xd4>
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006efe:	f200 8087 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f06:	f000 8086 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x172>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	d87f      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b70      	cmp	r3, #112	@ 0x70
 8006f12:	d01a      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0xa6>
 8006f14:	2b70      	cmp	r3, #112	@ 0x70
 8006f16:	d87b      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b60      	cmp	r3, #96	@ 0x60
 8006f1a:	d050      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x11a>
 8006f1c:	2b60      	cmp	r3, #96	@ 0x60
 8006f1e:	d877      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b50      	cmp	r3, #80	@ 0x50
 8006f22:	d03c      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0xfa>
 8006f24:	2b50      	cmp	r3, #80	@ 0x50
 8006f26:	d873      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b40      	cmp	r3, #64	@ 0x40
 8006f2a:	d058      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x13a>
 8006f2c:	2b40      	cmp	r3, #64	@ 0x40
 8006f2e:	d86f      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b30      	cmp	r3, #48	@ 0x30
 8006f32:	d064      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x15a>
 8006f34:	2b30      	cmp	r3, #48	@ 0x30
 8006f36:	d86b      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d060      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x15a>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d867      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d05c      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x15a>
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d05a      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x15a>
 8006f48:	e062      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	f000 fb69 	bl	8007630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	609a      	str	r2, [r3, #8]
      break;
 8006f76:	e04f      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f88:	f000 fb52 	bl	8007630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f9a:	609a      	str	r2, [r3, #8]
      break;
 8006f9c:	e03c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 fac6 	bl	800753c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2150      	movs	r1, #80	@ 0x50
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb1f 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e02c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 fae5 	bl	800759a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2160      	movs	r1, #96	@ 0x60
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fb0f 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e01c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fea:	461a      	mov	r2, r3
 8006fec:	f000 faa6 	bl	800753c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2140      	movs	r1, #64	@ 0x40
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 faff 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e00c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f000 faf6 	bl	80075fa <TIM_ITRx_SetConfig>
      break;
 800700e:	e003      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
      break;
 8007014:	e000      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a46      	ldr	r2, [pc, #280]	@ (80071b0 <TIM_Base_SetConfig+0x12c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d013      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a43      	ldr	r2, [pc, #268]	@ (80071b4 <TIM_Base_SetConfig+0x130>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a42      	ldr	r2, [pc, #264]	@ (80071b8 <TIM_Base_SetConfig+0x134>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a41      	ldr	r2, [pc, #260]	@ (80071bc <TIM_Base_SetConfig+0x138>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0x40>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a40      	ldr	r2, [pc, #256]	@ (80071c0 <TIM_Base_SetConfig+0x13c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d108      	bne.n	80070d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a35      	ldr	r2, [pc, #212]	@ (80071b0 <TIM_Base_SetConfig+0x12c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02b      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e4:	d027      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a32      	ldr	r2, [pc, #200]	@ (80071b4 <TIM_Base_SetConfig+0x130>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d023      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a31      	ldr	r2, [pc, #196]	@ (80071b8 <TIM_Base_SetConfig+0x134>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01f      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a30      	ldr	r2, [pc, #192]	@ (80071bc <TIM_Base_SetConfig+0x138>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01b      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2f      	ldr	r2, [pc, #188]	@ (80071c0 <TIM_Base_SetConfig+0x13c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d017      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2e      	ldr	r2, [pc, #184]	@ (80071c4 <TIM_Base_SetConfig+0x140>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2d      	ldr	r2, [pc, #180]	@ (80071c8 <TIM_Base_SetConfig+0x144>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00f      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2c      	ldr	r2, [pc, #176]	@ (80071cc <TIM_Base_SetConfig+0x148>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00b      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2b      	ldr	r2, [pc, #172]	@ (80071d0 <TIM_Base_SetConfig+0x14c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d007      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2a      	ldr	r2, [pc, #168]	@ (80071d4 <TIM_Base_SetConfig+0x150>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a29      	ldr	r2, [pc, #164]	@ (80071d8 <TIM_Base_SetConfig+0x154>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800713c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <TIM_Base_SetConfig+0x12c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_Base_SetConfig+0xf8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a12      	ldr	r2, [pc, #72]	@ (80071c0 <TIM_Base_SetConfig+0x13c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d103      	bne.n	8007184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b01      	cmp	r3, #1
 8007194:	d105      	bne.n	80071a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f023 0201 	bic.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	611a      	str	r2, [r3, #16]
  }
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40010400 	.word	0x40010400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800
 80071d0:	40001800 	.word	0x40001800
 80071d4:	40001c00 	.word	0x40001c00
 80071d8:	40002000 	.word	0x40002000

080071dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f023 0201 	bic.w	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f023 0302 	bic.w	r3, r3, #2
 8007224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a20      	ldr	r2, [pc, #128]	@ (80072b4 <TIM_OC1_SetConfig+0xd8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC1_SetConfig+0x64>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a1f      	ldr	r2, [pc, #124]	@ (80072b8 <TIM_OC1_SetConfig+0xdc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10c      	bne.n	800725a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0308 	bic.w	r3, r3, #8
 8007246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f023 0304 	bic.w	r3, r3, #4
 8007258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a15      	ldr	r2, [pc, #84]	@ (80072b4 <TIM_OC1_SetConfig+0xd8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d003      	beq.n	800726a <TIM_OC1_SetConfig+0x8e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a14      	ldr	r2, [pc, #80]	@ (80072b8 <TIM_OC1_SetConfig+0xdc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d111      	bne.n	800728e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400

080072bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f023 0210 	bic.w	r2, r3, #16
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0320 	bic.w	r3, r3, #32
 8007306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a22      	ldr	r2, [pc, #136]	@ (80073a0 <TIM_OC2_SetConfig+0xe4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_OC2_SetConfig+0x68>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a21      	ldr	r2, [pc, #132]	@ (80073a4 <TIM_OC2_SetConfig+0xe8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d10d      	bne.n	8007340 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800732a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <TIM_OC2_SetConfig+0xe4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_OC2_SetConfig+0x94>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a16      	ldr	r2, [pc, #88]	@ (80073a4 <TIM_OC2_SetConfig+0xe8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d113      	bne.n	8007378 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800735e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40010400 	.word	0x40010400

080073a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a21      	ldr	r2, [pc, #132]	@ (8007488 <TIM_OC3_SetConfig+0xe0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_OC3_SetConfig+0x66>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a20      	ldr	r2, [pc, #128]	@ (800748c <TIM_OC3_SetConfig+0xe4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d10d      	bne.n	800742a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a16      	ldr	r2, [pc, #88]	@ (8007488 <TIM_OC3_SetConfig+0xe0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_OC3_SetConfig+0x92>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a15      	ldr	r2, [pc, #84]	@ (800748c <TIM_OC3_SetConfig+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d113      	bne.n	8007462 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	621a      	str	r2, [r3, #32]
}
 800747c:	bf00      	nop
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a12      	ldr	r2, [pc, #72]	@ (8007534 <TIM_OC4_SetConfig+0xa4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_OC4_SetConfig+0x68>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a11      	ldr	r2, [pc, #68]	@ (8007538 <TIM_OC4_SetConfig+0xa8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d109      	bne.n	800750c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	621a      	str	r2, [r3, #32]
}
 8007526:	bf00      	nop
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40010000 	.word	0x40010000
 8007538:	40010400 	.word	0x40010400

0800753c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f023 0201 	bic.w	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 030a 	bic.w	r3, r3, #10
 8007578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800759a:	b480      	push	{r7}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	f023 0210 	bic.w	r2, r3, #16
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	031b      	lsls	r3, r3, #12
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	4313      	orrs	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	f043 0307 	orr.w	r3, r3, #7
 800761c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	609a      	str	r2, [r3, #8]
}
 8007624:	bf00      	nop
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800764a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	021a      	lsls	r2, r3, #8
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	431a      	orrs	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4313      	orrs	r3, r2
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	609a      	str	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	371c      	adds	r7, #28
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	2201      	movs	r2, #1
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	43db      	mvns	r3, r3
 8007692:	401a      	ands	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a1a      	ldr	r2, [r3, #32]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	fa01 f303 	lsl.w	r3, r1, r3
 80076a8:	431a      	orrs	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	621a      	str	r2, [r3, #32]
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e05a      	b.n	800778a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a21      	ldr	r2, [pc, #132]	@ (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007720:	d01d      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1d      	ldr	r2, [pc, #116]	@ (800779c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1a      	ldr	r2, [pc, #104]	@ (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a18      	ldr	r2, [pc, #96]	@ (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a17      	ldr	r2, [pc, #92]	@ (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a15      	ldr	r2, [pc, #84]	@ (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d10c      	bne.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4313      	orrs	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40010000 	.word	0x40010000
 800779c:	40000400 	.word	0x40000400
 80077a0:	40000800 	.word	0x40000800
 80077a4:	40000c00 	.word	0x40000c00
 80077a8:	40010400 	.word	0x40010400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40001800 	.word	0x40001800

080077b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e042      	b.n	8007874 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7f9 fed2 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2224      	movs	r2, #36	@ 0x24
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800781e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f973 	bl	8007b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	@ 0x28
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b20      	cmp	r3, #32
 800789a:	d175      	bne.n	8007988 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_UART_Transmit+0x2c>
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e06e      	b.n	800798a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2221      	movs	r2, #33	@ 0x21
 80078b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ba:	f7fa f915 	bl	8001ae8 <HAL_GetTick>
 80078be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	88fa      	ldrh	r2, [r7, #6]
 80078ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d4:	d108      	bne.n	80078e8 <HAL_UART_Transmit+0x6c>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e003      	b.n	80078f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078f0:	e02e      	b.n	8007950 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	2180      	movs	r1, #128	@ 0x80
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f848 	bl	8007992 <UART_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e03a      	b.n	800798a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	3302      	adds	r3, #2
 800792e:	61bb      	str	r3, [r7, #24]
 8007930:	e007      	b.n	8007942 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1cb      	bne.n	80078f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2200      	movs	r2, #0
 8007962:	2140      	movs	r1, #64	@ 0x40
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f814 	bl	8007992 <UART_WaitOnFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e006      	b.n	800798a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	e000      	b.n	800798a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007988:	2302      	movs	r3, #2
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	603b      	str	r3, [r7, #0]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a2:	e03b      	b.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d037      	beq.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ac:	f7fa f89c 	bl	8001ae8 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	6a3a      	ldr	r2, [r7, #32]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d302      	bcc.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e03a      	b.n	8007a3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d023      	beq.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x8a>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b80      	cmp	r3, #128	@ 0x80
 80079d8:	d020      	beq.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x8a>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b40      	cmp	r3, #64	@ 0x40
 80079de:	d01d      	beq.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d116      	bne.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f81d 	bl	8007a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e00f      	b.n	8007a3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4013      	ands	r3, r2
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d0b4      	beq.n	80079a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b095      	sub	sp, #84	@ 0x54
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	330c      	adds	r3, #12
 8007a6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e5      	bne.n	8007a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3314      	adds	r3, #20
 8007a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f023 0301 	bic.w	r3, r3, #1
 8007a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3314      	adds	r3, #20
 8007a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e5      	bne.n	8007a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d119      	bne.n	8007af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f023 0310 	bic.w	r3, r3, #16
 8007ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007adc:	61ba      	str	r2, [r7, #24]
 8007ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6979      	ldr	r1, [r7, #20]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007afe:	bf00      	nop
 8007b00:	3754      	adds	r7, #84	@ 0x54
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b10:	b0c0      	sub	sp, #256	@ 0x100
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b28:	68d9      	ldr	r1, [r3, #12]
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	ea40 0301 	orr.w	r3, r0, r1
 8007b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b64:	f021 010c 	bic.w	r1, r1, #12
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b72:	430b      	orrs	r3, r1
 8007b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b86:	6999      	ldr	r1, [r3, #24]
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	ea40 0301 	orr.w	r3, r0, r1
 8007b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8007dd8 <UART_SetConfig+0x2cc>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d005      	beq.n	8007bac <UART_SetConfig+0xa0>
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8007ddc <UART_SetConfig+0x2d0>)
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d104      	bne.n	8007bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bac:	f7fe fb2e 	bl	800620c <HAL_RCC_GetPCLK2Freq>
 8007bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007bb4:	e003      	b.n	8007bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bb6:	f7fe fb15 	bl	80061e4 <HAL_RCC_GetPCLK1Freq>
 8007bba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc8:	f040 810c 	bne.w	8007de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	1891      	adds	r1, r2, r2
 8007be4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007be6:	415b      	adcs	r3, r3
 8007be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007bee:	4621      	mov	r1, r4
 8007bf0:	eb12 0801 	adds.w	r8, r2, r1
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	eb43 0901 	adc.w	r9, r3, r1
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c0e:	4690      	mov	r8, r2
 8007c10:	4699      	mov	r9, r3
 8007c12:	4623      	mov	r3, r4
 8007c14:	eb18 0303 	adds.w	r3, r8, r3
 8007c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	eb49 0303 	adc.w	r3, r9, r3
 8007c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	18db      	adds	r3, r3, r3
 8007c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c40:	4613      	mov	r3, r2
 8007c42:	eb42 0303 	adc.w	r3, r2, r3
 8007c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c50:	f7f8 fb1e 	bl	8000290 <__aeabi_uldivmod>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4b61      	ldr	r3, [pc, #388]	@ (8007de0 <UART_SetConfig+0x2d4>)
 8007c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	011c      	lsls	r4, r3, #4
 8007c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	1891      	adds	r1, r2, r2
 8007c7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c7c:	415b      	adcs	r3, r3
 8007c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c84:	4641      	mov	r1, r8
 8007c86:	eb12 0a01 	adds.w	sl, r2, r1
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ca4:	4692      	mov	sl, r2
 8007ca6:	469b      	mov	fp, r3
 8007ca8:	4643      	mov	r3, r8
 8007caa:	eb1a 0303 	adds.w	r3, sl, r3
 8007cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8007cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	18db      	adds	r3, r3, r3
 8007cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	eb42 0303 	adc.w	r3, r2, r3
 8007cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ce6:	f7f8 fad3 	bl	8000290 <__aeabi_uldivmod>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <UART_SetConfig+0x2d4>)
 8007cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	2264      	movs	r2, #100	@ 0x64
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	1acb      	subs	r3, r1, r3
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d06:	4b36      	ldr	r3, [pc, #216]	@ (8007de0 <UART_SetConfig+0x2d4>)
 8007d08:	fba3 2302 	umull	r2, r3, r3, r2
 8007d0c:	095b      	lsrs	r3, r3, #5
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d14:	441c      	add	r4, r3
 8007d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d28:	4642      	mov	r2, r8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	1891      	adds	r1, r2, r2
 8007d2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d30:	415b      	adcs	r3, r3
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d38:	4641      	mov	r1, r8
 8007d3a:	1851      	adds	r1, r2, r1
 8007d3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d3e:	4649      	mov	r1, r9
 8007d40:	414b      	adcs	r3, r1
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d50:	4659      	mov	r1, fp
 8007d52:	00cb      	lsls	r3, r1, #3
 8007d54:	4651      	mov	r1, sl
 8007d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d5a:	4651      	mov	r1, sl
 8007d5c:	00ca      	lsls	r2, r1, #3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	4642      	mov	r2, r8
 8007d66:	189b      	adds	r3, r3, r2
 8007d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	460a      	mov	r2, r1
 8007d70:	eb42 0303 	adc.w	r3, r2, r3
 8007d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	18db      	adds	r3, r3, r3
 8007d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d92:	4613      	mov	r3, r2
 8007d94:	eb42 0303 	adc.w	r3, r2, r3
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007da2:	f7f8 fa75 	bl	8000290 <__aeabi_uldivmod>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <UART_SetConfig+0x2d4>)
 8007dac:	fba3 1302 	umull	r1, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	2164      	movs	r1, #100	@ 0x64
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	3332      	adds	r3, #50	@ 0x32
 8007dbe:	4a08      	ldr	r2, [pc, #32]	@ (8007de0 <UART_SetConfig+0x2d4>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f003 0207 	and.w	r2, r3, #7
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4422      	add	r2, r4
 8007dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dd4:	e106      	b.n	8007fe4 <UART_SetConfig+0x4d8>
 8007dd6:	bf00      	nop
 8007dd8:	40011000 	.word	0x40011000
 8007ddc:	40011400 	.word	0x40011400
 8007de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	1891      	adds	r1, r2, r2
 8007dfc:	6239      	str	r1, [r7, #32]
 8007dfe:	415b      	adcs	r3, r3
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e06:	4641      	mov	r1, r8
 8007e08:	1854      	adds	r4, r2, r1
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	eb43 0501 	adc.w	r5, r3, r1
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	00eb      	lsls	r3, r5, #3
 8007e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e1e:	00e2      	lsls	r2, r4, #3
 8007e20:	4614      	mov	r4, r2
 8007e22:	461d      	mov	r5, r3
 8007e24:	4643      	mov	r3, r8
 8007e26:	18e3      	adds	r3, r4, r3
 8007e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	eb45 0303 	adc.w	r3, r5, r3
 8007e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e52:	4629      	mov	r1, r5
 8007e54:	008b      	lsls	r3, r1, #2
 8007e56:	4621      	mov	r1, r4
 8007e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	008a      	lsls	r2, r1, #2
 8007e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e64:	f7f8 fa14 	bl	8000290 <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4b60      	ldr	r3, [pc, #384]	@ (8007ff0 <UART_SetConfig+0x4e4>)
 8007e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	011c      	lsls	r4, r3, #4
 8007e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	1891      	adds	r1, r2, r2
 8007e8e:	61b9      	str	r1, [r7, #24]
 8007e90:	415b      	adcs	r3, r3
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e98:	4641      	mov	r1, r8
 8007e9a:	1851      	adds	r1, r2, r1
 8007e9c:	6139      	str	r1, [r7, #16]
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	414b      	adcs	r3, r1
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	00cb      	lsls	r3, r1, #3
 8007eb4:	4651      	mov	r1, sl
 8007eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eba:	4651      	mov	r1, sl
 8007ebc:	00ca      	lsls	r2, r1, #3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	189b      	adds	r3, r3, r2
 8007ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ecc:	464b      	mov	r3, r9
 8007ece:	460a      	mov	r2, r1
 8007ed0:	eb42 0303 	adc.w	r3, r2, r3
 8007ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	008b      	lsls	r3, r1, #2
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007efa:	4641      	mov	r1, r8
 8007efc:	008a      	lsls	r2, r1, #2
 8007efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f02:	f7f8 f9c5 	bl	8000290 <__aeabi_uldivmod>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4b38      	ldr	r3, [pc, #224]	@ (8007ff0 <UART_SetConfig+0x4e4>)
 8007f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f12:	095b      	lsrs	r3, r3, #5
 8007f14:	2264      	movs	r2, #100	@ 0x64
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	1acb      	subs	r3, r1, r3
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	3332      	adds	r3, #50	@ 0x32
 8007f20:	4a33      	ldr	r2, [pc, #204]	@ (8007ff0 <UART_SetConfig+0x4e4>)
 8007f22:	fba2 2303 	umull	r2, r3, r2, r3
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f2c:	441c      	add	r4, r3
 8007f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f32:	2200      	movs	r2, #0
 8007f34:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f36:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	1891      	adds	r1, r2, r2
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	415b      	adcs	r3, r3
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	1851      	adds	r1, r2, r1
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	4649      	mov	r1, r9
 8007f54:	414b      	adcs	r3, r1
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	f04f 0200 	mov.w	r2, #0
 8007f5c:	f04f 0300 	mov.w	r3, #0
 8007f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f64:	4659      	mov	r1, fp
 8007f66:	00cb      	lsls	r3, r1, #3
 8007f68:	4651      	mov	r1, sl
 8007f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f6e:	4651      	mov	r1, sl
 8007f70:	00ca      	lsls	r2, r1, #3
 8007f72:	4610      	mov	r0, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	4603      	mov	r3, r0
 8007f78:	4642      	mov	r2, r8
 8007f7a:	189b      	adds	r3, r3, r2
 8007f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f7e:	464b      	mov	r3, r9
 8007f80:	460a      	mov	r2, r1
 8007f82:	eb42 0303 	adc.w	r3, r2, r3
 8007f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f92:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	008b      	lsls	r3, r1, #2
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007faa:	4641      	mov	r1, r8
 8007fac:	008a      	lsls	r2, r1, #2
 8007fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fb2:	f7f8 f96d 	bl	8000290 <__aeabi_uldivmod>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <UART_SetConfig+0x4e4>)
 8007fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc0:	095b      	lsrs	r3, r3, #5
 8007fc2:	2164      	movs	r1, #100	@ 0x64
 8007fc4:	fb01 f303 	mul.w	r3, r1, r3
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	3332      	adds	r3, #50	@ 0x32
 8007fce:	4a08      	ldr	r2, [pc, #32]	@ (8007ff0 <UART_SetConfig+0x4e4>)
 8007fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	f003 020f 	and.w	r2, r3, #15
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4422      	add	r2, r4
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ff0:	51eb851f 	.word	0x51eb851f

08007ff4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d123      	bne.n	800804e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800800e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6851      	ldr	r1, [r2, #4]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	6892      	ldr	r2, [r2, #8]
 800801a:	4311      	orrs	r1, r2
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	68d2      	ldr	r2, [r2, #12]
 8008020:	4311      	orrs	r1, r2
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	6912      	ldr	r2, [r2, #16]
 8008026:	4311      	orrs	r1, r2
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	6952      	ldr	r2, [r2, #20]
 800802c:	4311      	orrs	r1, r2
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	6992      	ldr	r2, [r2, #24]
 8008032:	4311      	orrs	r1, r2
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	69d2      	ldr	r2, [r2, #28]
 8008038:	4311      	orrs	r1, r2
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	6a12      	ldr	r2, [r2, #32]
 800803e:	4311      	orrs	r1, r2
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008044:	430a      	orrs	r2, r1
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	e028      	b.n	80080a0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	69d9      	ldr	r1, [r3, #28]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	4319      	orrs	r1, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008064:	430b      	orrs	r3, r1
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008074:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	6851      	ldr	r1, [r2, #4]
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	6892      	ldr	r2, [r2, #8]
 8008080:	4311      	orrs	r1, r2
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	68d2      	ldr	r2, [r2, #12]
 8008086:	4311      	orrs	r1, r2
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	6912      	ldr	r2, [r2, #16]
 800808c:	4311      	orrs	r1, r2
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	6952      	ldr	r2, [r2, #20]
 8008092:	4311      	orrs	r1, r2
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	6992      	ldr	r2, [r2, #24]
 8008098:	430a      	orrs	r2, r1
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d128      	bne.n	8008112 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	1e59      	subs	r1, r3, #1
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	4319      	orrs	r1, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	3b01      	subs	r3, #1
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	4319      	orrs	r1, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	031b      	lsls	r3, r3, #12
 80080ea:	4319      	orrs	r1, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	041b      	lsls	r3, r3, #16
 80080f4:	4319      	orrs	r1, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	051b      	lsls	r3, r3, #20
 80080fe:	4319      	orrs	r1, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	3b01      	subs	r3, #1
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	430b      	orrs	r3, r1
 800810a:	431a      	orrs	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	609a      	str	r2, [r3, #8]
 8008110:	e02f      	b.n	8008172 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800811a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	68d2      	ldr	r2, [r2, #12]
 8008122:	3a01      	subs	r2, #1
 8008124:	0311      	lsls	r1, r2, #12
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	6952      	ldr	r2, [r2, #20]
 800812a:	3a01      	subs	r2, #1
 800812c:	0512      	lsls	r2, r2, #20
 800812e:	430a      	orrs	r2, r1
 8008130:	431a      	orrs	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1e59      	subs	r1, r3, #1
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	3b01      	subs	r3, #1
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4319      	orrs	r1, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	3b01      	subs	r3, #1
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	4319      	orrs	r1, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	3b01      	subs	r3, #1
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	4319      	orrs	r1, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	3b01      	subs	r3, #1
 8008168:	061b      	lsls	r3, r3, #24
 800816a:	430b      	orrs	r3, r1
 800816c:	431a      	orrs	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f023 0201 	bic.w	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081de:	d901      	bls.n	80081e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e01b      	b.n	800821c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	daf2      	bge.n	80081d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	019b      	lsls	r3, r3, #6
 80081f4:	f043 0220 	orr.w	r2, r3, #32
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008208:	d901      	bls.n	800820e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e006      	b.n	800821c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b20      	cmp	r3, #32
 8008218:	d0f0      	beq.n	80081fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3301      	adds	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008240:	d901      	bls.n	8008246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e018      	b.n	8008278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	daf2      	bge.n	8008234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2210      	movs	r2, #16
 8008256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008264:	d901      	bls.n	800826a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e006      	b.n	8008278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b10      	cmp	r3, #16
 8008274:	d0f0      	beq.n	8008258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008284:	b480      	push	{r7}
 8008286:	b08b      	sub	sp, #44	@ 0x2c
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	089b      	lsrs	r3, r3, #2
 800829e:	b29b      	uxth	r3, r3
 80082a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	623b      	str	r3, [r7, #32]
 80082ae:	e014      	b.n	80082da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	3301      	adds	r3, #1
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	3301      	adds	r3, #1
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	3301      	adds	r3, #1
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	3301      	adds	r3, #1
 80082d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	3301      	adds	r3, #1
 80082d8:	623b      	str	r3, [r7, #32]
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d3e6      	bcc.n	80082b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082e2:	8bfb      	ldrh	r3, [r7, #30]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01e      	beq.n	8008326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082f2:	461a      	mov	r2, r3
 80082f4:	f107 0310 	add.w	r3, r7, #16
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	b2da      	uxtb	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	701a      	strb	r2, [r3, #0]
      i++;
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	3301      	adds	r3, #1
 8008312:	623b      	str	r3, [r7, #32]
      pDest++;
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	3301      	adds	r3, #1
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800831a:	8bfb      	ldrh	r3, [r7, #30]
 800831c:	3b01      	subs	r3, #1
 800831e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008320:	8bfb      	ldrh	r3, [r7, #30]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1ea      	bne.n	80082fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008328:	4618      	mov	r0, r3
 800832a:	372c      	adds	r7, #44	@ 0x2c
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4013      	ands	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4413      	add	r3, r2
 8008372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	4013      	ands	r3, r2
 800838c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800838e:	68bb      	ldr	r3, [r7, #8]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	f003 0301 	and.w	r3, r3, #1
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80083f0:	4313      	orrs	r3, r2
 80083f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d107      	bne.n	800840a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008400:	461a      	mov	r2, r3
 8008402:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008406:	6053      	str	r3, [r2, #4]
 8008408:	e00c      	b.n	8008424 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d107      	bne.n	8008420 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008416:	461a      	mov	r2, r3
 8008418:	f241 7370 	movw	r3, #6000	@ 0x1770
 800841c:	6053      	str	r3, [r2, #4]
 800841e:	e001      	b.n	8008424 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	b29b      	uxth	r3, r3
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	@ 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	0c9b      	lsrs	r3, r3, #18
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	0fdb      	lsrs	r3, r3, #31
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	0fdb      	lsrs	r3, r3, #31
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d10d      	bne.n	80084d6 <USB_HC_Halt+0x82>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <USB_HC_Halt+0x82>
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d002      	beq.n	80084d2 <USB_HC_Halt+0x7e>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d101      	bne.n	80084d6 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e0d8      	b.n	8008688 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <USB_HC_Halt+0x8e>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d173      	bne.n	80085ca <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008500:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d14a      	bne.n	80085a4 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008512:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d133      	bne.n	8008582 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	440a      	add	r2, r1
 8008530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008534:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008538:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	440a      	add	r2, r1
 8008550:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008554:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008558:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	3301      	adds	r3, #1
 800855e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008566:	d82e      	bhi.n	80085c6 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800857a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800857e:	d0ec      	beq.n	800855a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008580:	e081      	b.n	8008686 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	440a      	add	r2, r1
 8008598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800859c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085a2:	e070      	b.n	8008686 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085c2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085c4:	e05f      	b.n	8008686 <USB_HC_Halt+0x232>
            break;
 80085c6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085c8:	e05d      	b.n	8008686 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085e8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d133      	bne.n	8008662 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	440a      	add	r2, r1
 8008610:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008614:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008618:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	440a      	add	r2, r1
 8008630:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008634:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008638:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	3301      	adds	r3, #1
 800863e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008646:	d81d      	bhi.n	8008684 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4413      	add	r3, r2
 8008650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800865a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800865e:	d0ec      	beq.n	800863a <USB_HC_Halt+0x1e6>
 8008660:	e011      	b.n	8008686 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	0151      	lsls	r1, r2, #5
 8008674:	69fa      	ldr	r2, [r7, #28]
 8008676:	440a      	add	r2, r1
 8008678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800867c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e000      	b.n	8008686 <USB_HC_Halt+0x232>
          break;
 8008684:	bf00      	nop
    }
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3724      	adds	r7, #36	@ 0x24
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fd7a 	bl	80081a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086ae:	2110      	movs	r1, #16
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fd87 	bl	80081c4 <USB_FlushTxFifo>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff fdb1 	bl	8008228 <USB_FlushRxFifo>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80086d0:	2300      	movs	r3, #0
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	e01f      	b.n	8008716 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870a:	461a      	mov	r2, r3
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	3301      	adds	r3, #1
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b0f      	cmp	r3, #15
 800871a:	d9dc      	bls.n	80086d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800871c:	2300      	movs	r3, #0
 800871e:	61bb      	str	r3, [r7, #24]
 8008720:	e034      	b.n	800878c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008738:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008740:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008748:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	4413      	add	r3, r2
 8008752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008756:	461a      	mov	r2, r3
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008768:	d80c      	bhi.n	8008784 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800877c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008780:	d0ec      	beq.n	800875c <USB_StopHost+0xc8>
 8008782:	e000      	b.n	8008786 <USB_StopHost+0xf2>
        break;
 8008784:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	3301      	adds	r3, #1
 800878a:	61bb      	str	r3, [r7, #24]
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b0f      	cmp	r3, #15
 8008790:	d9c7      	bls.n	8008722 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008798:	461a      	mov	r2, r3
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff fce9 	bl	8008180 <USB_EnableGlobalInt>

  return ret;
 80087ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f804 	bl	80087dc <USBH_HandleSof>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b0b      	cmp	r3, #11
 80087ec:	d10a      	bne.n	8008804 <USBH_HandleSof+0x28>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
  }
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008830:	2200      	movs	r2, #0
 8008832:	4619      	mov	r1, r3
 8008834:	f000 f8ae 	bl	8008994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008838:	bf00      	nop
}
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008850:	bf00      	nop
}
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008890:	2200      	movs	r2, #0
 8008892:	4619      	mov	r1, r3
 8008894:	f000 f87e 	bl	8008994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 f92c 	bl	8009b20 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	791b      	ldrb	r3, [r3, #4]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f830 	bl	8008934 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	795b      	ldrb	r3, [r3, #5]
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f82a 	bl	8008934 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80088f4:	2200      	movs	r2, #0
 80088f6:	4619      	mov	r1, r3
 80088f8:	f000 f84c 	bl	8008994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008922:	2200      	movs	r2, #0
 8008924:	4619      	mov	r1, r3
 8008926:	f000 f835 	bl	8008994 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	2b0f      	cmp	r3, #15
 8008944:	d80d      	bhi.n	8008962 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	33e0      	adds	r3, #224	@ 0xe0
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	33e0      	adds	r3, #224	@ 0xe0
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008976:	f3ef 8305 	mrs	r3, IPSR
 800897a:	607b      	str	r3, [r7, #4]
  return(result);
 800897c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf14      	ite	ne
 8008982:	2301      	movne	r3, #1
 8008984:	2300      	moveq	r3, #0
 8008986:	b2db      	uxtb	r3, r3
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <osMessagePut+0x1e>
    ticks = 1;
 80089ae:	2301      	movs	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80089b2:	f7ff ffdd 	bl	8008970 <inHandlerMode>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d018      	beq.n	80089ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80089bc:	f107 0210 	add.w	r2, r7, #16
 80089c0:	f107 0108 	add.w	r1, r7, #8
 80089c4:	2300      	movs	r3, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 f9ae 	bl	8008d28 <xQueueGenericSendFromISR>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d001      	beq.n	80089d6 <osMessagePut+0x42>
      return osErrorOS;
 80089d2:	23ff      	movs	r3, #255	@ 0xff
 80089d4:	e018      	b.n	8008a08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d014      	beq.n	8008a06 <osMessagePut+0x72>
 80089dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008a10 <osMessagePut+0x7c>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	e00b      	b.n	8008a06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80089ee:	f107 0108 	add.w	r1, r7, #8
 80089f2:	2300      	movs	r3, #0
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 f894 	bl	8008b24 <xQueueGenericSend>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d001      	beq.n	8008a06 <osMessagePut+0x72>
      return osErrorOS;
 8008a02:	23ff      	movs	r3, #255	@ 0xff
 8008a04:	e000      	b.n	8008a08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	601a      	str	r2, [r3, #0]
}
 8008a50:	bf00      	nop
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d103      	bne.n	8008a7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e00c      	b.n	8008a96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	e002      	b.n	8008a8a <vListInsert+0x2e>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d2f6      	bcs.n	8008a84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	601a      	str	r2, [r3, #0]
}
 8008ac2:	bf00      	nop
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	6892      	ldr	r2, [r2, #8]
 8008ae4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6852      	ldr	r2, [r2, #4]
 8008aee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d103      	bne.n	8008b02 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	1e5a      	subs	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
	...

08008b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08e      	sub	sp, #56	@ 0x38
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b32:	2300      	movs	r3, #0
 8008b34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10b      	bne.n	8008b58 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d103      	bne.n	8008b66 <xQueueGenericSend+0x42>
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <xQueueGenericSend+0x46>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <xQueueGenericSend+0x48>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10b      	bne.n	8008b88 <xQueueGenericSend+0x64>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b82:	bf00      	nop
 8008b84:	bf00      	nop
 8008b86:	e7fd      	b.n	8008b84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d103      	bne.n	8008b96 <xQueueGenericSend+0x72>
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <xQueueGenericSend+0x76>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <xQueueGenericSend+0x78>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10b      	bne.n	8008bb8 <xQueueGenericSend+0x94>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	623b      	str	r3, [r7, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bb8:	f000 fd40 	bl	800963c <xTaskGetSchedulerState>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d102      	bne.n	8008bc8 <xQueueGenericSend+0xa4>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <xQueueGenericSend+0xa8>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e000      	b.n	8008bce <xQueueGenericSend+0xaa>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10b      	bne.n	8008bea <xQueueGenericSend+0xc6>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	61fb      	str	r3, [r7, #28]
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bea:	f000 fe4d 	bl	8009888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d302      	bcc.n	8008c00 <xQueueGenericSend+0xdc>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d129      	bne.n	8008c54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c06:	f000 f92d 	bl	8008e64 <prvCopyDataToQueue>
 8008c0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d010      	beq.n	8008c36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	3324      	adds	r3, #36	@ 0x24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fc05 	bl	8009428 <xTaskRemoveFromEventList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d013      	beq.n	8008c4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c24:	4b3f      	ldr	r3, [pc, #252]	@ (8008d24 <xQueueGenericSend+0x200>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	e00a      	b.n	8008c4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d007      	beq.n	8008c4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c3c:	4b39      	ldr	r3, [pc, #228]	@ (8008d24 <xQueueGenericSend+0x200>)
 8008c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c4c:	f000 fe4e 	bl	80098ec <vPortExitCritical>
				return pdPASS;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e063      	b.n	8008d1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c5a:	f000 fe47 	bl	80098ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e05c      	b.n	8008d1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fc3f 	bl	80094f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c72:	2301      	movs	r3, #1
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c76:	f000 fe39 	bl	80098ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c7a:	f000 f9c7 	bl	800900c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c7e:	f000 fe03 	bl	8009888 <vPortEnterCritical>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c88:	b25b      	sxtb	r3, r3
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8e:	d103      	bne.n	8008c98 <xQueueGenericSend+0x174>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c9e:	b25b      	sxtb	r3, r3
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d103      	bne.n	8008cae <xQueueGenericSend+0x18a>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cae:	f000 fe1d 	bl	80098ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb2:	1d3a      	adds	r2, r7, #4
 8008cb4:	f107 0314 	add.w	r3, r7, #20
 8008cb8:	4611      	mov	r1, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fc2e 	bl	800951c <xTaskCheckForTimeOut>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d124      	bne.n	8008d10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cc8:	f000 f988 	bl	8008fdc <prvIsQueueFull>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d018      	beq.n	8008d04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fb7e 	bl	80093dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ce2:	f000 f929 	bl	8008f38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ce6:	f000 f99f 	bl	8009028 <xTaskResumeAll>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f47f af7c 	bne.w	8008bea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <xQueueGenericSend+0x200>)
 8008cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	e772      	b.n	8008bea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d06:	f000 f917 	bl	8008f38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d0a:	f000 f98d 	bl	8009028 <xTaskResumeAll>
 8008d0e:	e76c      	b.n	8008bea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d12:	f000 f911 	bl	8008f38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d16:	f000 f987 	bl	8009028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3738      	adds	r7, #56	@ 0x38
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	e000ed04 	.word	0xe000ed04

08008d28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b090      	sub	sp, #64	@ 0x40
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <xQueueGenericSendFromISR+0x3e>
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <xQueueGenericSendFromISR+0x42>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <xQueueGenericSendFromISR+0x44>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10b      	bne.n	8008d88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d103      	bne.n	8008d96 <xQueueGenericSendFromISR+0x6e>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d101      	bne.n	8008d9a <xQueueGenericSendFromISR+0x72>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <xQueueGenericSendFromISR+0x74>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10b      	bne.n	8008db8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	623b      	str	r3, [r7, #32]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008db8:	f000 fe18 	bl	80099ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dbc:	f3ef 8211 	mrs	r2, BASEPRI
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	61fa      	str	r2, [r7, #28]
 8008dd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d302      	bcc.n	8008dea <xQueueGenericSendFromISR+0xc2>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d12f      	bne.n	8008e4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e00:	f000 f830 	bl	8008e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d112      	bne.n	8008e34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	3324      	adds	r3, #36	@ 0x24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fb04 	bl	8009428 <xTaskRemoveFromEventList>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00e      	beq.n	8008e44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	e007      	b.n	8008e44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e38:	3301      	adds	r3, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	b25a      	sxtb	r2, r3
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e44:	2301      	movs	r3, #1
 8008e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008e48:	e001      	b.n	8008e4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3740      	adds	r7, #64	@ 0x40
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10d      	bne.n	8008e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d14d      	bne.n	8008f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fbf2 	bl	8009678 <xTaskPriorityDisinherit>
 8008e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	e043      	b.n	8008f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d119      	bne.n	8008ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6858      	ldr	r0, [r3, #4]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eac:	461a      	mov	r2, r3
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	f001 f9c1 	bl	800a236 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	441a      	add	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d32b      	bcc.n	8008f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	605a      	str	r2, [r3, #4]
 8008ed6:	e026      	b.n	8008f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	68d8      	ldr	r0, [r3, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	f001 f9a7 	bl	800a236 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	441a      	add	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d207      	bcs.n	8008f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0c:	425b      	negs	r3, r3
 8008f0e:	441a      	add	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d105      	bne.n	8008f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f2e:	697b      	ldr	r3, [r7, #20]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f40:	f000 fca2 	bl	8009888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f4c:	e011      	b.n	8008f72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d012      	beq.n	8008f7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3324      	adds	r3, #36	@ 0x24
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fa64 	bl	8009428 <xTaskRemoveFromEventList>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f66:	f000 fb3d 	bl	80095e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	dce9      	bgt.n	8008f4e <prvUnlockQueue+0x16>
 8008f7a:	e000      	b.n	8008f7e <prvUnlockQueue+0x46>
					break;
 8008f7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	22ff      	movs	r2, #255	@ 0xff
 8008f82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f86:	f000 fcb1 	bl	80098ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f8a:	f000 fc7d 	bl	8009888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f96:	e011      	b.n	8008fbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d012      	beq.n	8008fc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3310      	adds	r3, #16
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fa3f 	bl	8009428 <xTaskRemoveFromEventList>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008fb0:	f000 fb18 	bl	80095e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dce9      	bgt.n	8008f98 <prvUnlockQueue+0x60>
 8008fc4:	e000      	b.n	8008fc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008fc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	22ff      	movs	r2, #255	@ 0xff
 8008fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008fd0:	f000 fc8c 	bl	80098ec <vPortExitCritical>
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fe4:	f000 fc50 	bl	8009888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d102      	bne.n	8008ffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e001      	b.n	8008ffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ffe:	f000 fc75 	bl	80098ec <vPortExitCritical>

	return xReturn;
 8009002:	68fb      	ldr	r3, [r7, #12]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009010:	4b04      	ldr	r3, [pc, #16]	@ (8009024 <vTaskSuspendAll+0x18>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	4a03      	ldr	r2, [pc, #12]	@ (8009024 <vTaskSuspendAll+0x18>)
 8009018:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800901a:	bf00      	nop
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	200004ac 	.word	0x200004ac

08009028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009036:	4b42      	ldr	r3, [pc, #264]	@ (8009140 <xTaskResumeAll+0x118>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10b      	bne.n	8009056 <xTaskResumeAll+0x2e>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	603b      	str	r3, [r7, #0]
}
 8009050:	bf00      	nop
 8009052:	bf00      	nop
 8009054:	e7fd      	b.n	8009052 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009056:	f000 fc17 	bl	8009888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800905a:	4b39      	ldr	r3, [pc, #228]	@ (8009140 <xTaskResumeAll+0x118>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3b01      	subs	r3, #1
 8009060:	4a37      	ldr	r2, [pc, #220]	@ (8009140 <xTaskResumeAll+0x118>)
 8009062:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009064:	4b36      	ldr	r3, [pc, #216]	@ (8009140 <xTaskResumeAll+0x118>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d161      	bne.n	8009130 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800906c:	4b35      	ldr	r3, [pc, #212]	@ (8009144 <xTaskResumeAll+0x11c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d05d      	beq.n	8009130 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009074:	e02e      	b.n	80090d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009076:	4b34      	ldr	r3, [pc, #208]	@ (8009148 <xTaskResumeAll+0x120>)
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3318      	adds	r3, #24
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff fd23 	bl	8008ace <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3304      	adds	r3, #4
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fd1e 	bl	8008ace <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009096:	2201      	movs	r2, #1
 8009098:	409a      	lsls	r2, r3
 800909a:	4b2c      	ldr	r3, [pc, #176]	@ (800914c <xTaskResumeAll+0x124>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4313      	orrs	r3, r2
 80090a0:	4a2a      	ldr	r2, [pc, #168]	@ (800914c <xTaskResumeAll+0x124>)
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4a27      	ldr	r2, [pc, #156]	@ (8009150 <xTaskResumeAll+0x128>)
 80090b2:	441a      	add	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7ff fcaa 	bl	8008a14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c4:	4b23      	ldr	r3, [pc, #140]	@ (8009154 <xTaskResumeAll+0x12c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d302      	bcc.n	80090d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090ce:	4b22      	ldr	r3, [pc, #136]	@ (8009158 <xTaskResumeAll+0x130>)
 80090d0:	2201      	movs	r2, #1
 80090d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009148 <xTaskResumeAll+0x120>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1cc      	bne.n	8009076 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090e2:	f000 fa8b 	bl	80095fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090e6:	4b1d      	ldr	r3, [pc, #116]	@ (800915c <xTaskResumeAll+0x134>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d010      	beq.n	8009114 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090f2:	f000 f837 	bl	8009164 <xTaskIncrementTick>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80090fc:	4b16      	ldr	r3, [pc, #88]	@ (8009158 <xTaskResumeAll+0x130>)
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3b01      	subs	r3, #1
 8009106:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f1      	bne.n	80090f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800910e:	4b13      	ldr	r3, [pc, #76]	@ (800915c <xTaskResumeAll+0x134>)
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009114:	4b10      	ldr	r3, [pc, #64]	@ (8009158 <xTaskResumeAll+0x130>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009120:	4b0f      	ldr	r3, [pc, #60]	@ (8009160 <xTaskResumeAll+0x138>)
 8009122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009130:	f000 fbdc 	bl	80098ec <vPortExitCritical>

	return xAlreadyYielded;
 8009134:	68bb      	ldr	r3, [r7, #8]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	200004ac 	.word	0x200004ac
 8009144:	2000048c 	.word	0x2000048c
 8009148:	20000464 	.word	0x20000464
 800914c:	20000494 	.word	0x20000494
 8009150:	200003d0 	.word	0x200003d0
 8009154:	200003cc 	.word	0x200003cc
 8009158:	200004a0 	.word	0x200004a0
 800915c:	2000049c 	.word	0x2000049c
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800916e:	4b4f      	ldr	r3, [pc, #316]	@ (80092ac <xTaskIncrementTick+0x148>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f040 808f 	bne.w	8009296 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009178:	4b4d      	ldr	r3, [pc, #308]	@ (80092b0 <xTaskIncrementTick+0x14c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009180:	4a4b      	ldr	r2, [pc, #300]	@ (80092b0 <xTaskIncrementTick+0x14c>)
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d121      	bne.n	80091d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800918c:	4b49      	ldr	r3, [pc, #292]	@ (80092b4 <xTaskIncrementTick+0x150>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	603b      	str	r3, [r7, #0]
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	e7fd      	b.n	80091aa <xTaskIncrementTick+0x46>
 80091ae:	4b41      	ldr	r3, [pc, #260]	@ (80092b4 <xTaskIncrementTick+0x150>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	4b40      	ldr	r3, [pc, #256]	@ (80092b8 <xTaskIncrementTick+0x154>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a3e      	ldr	r2, [pc, #248]	@ (80092b4 <xTaskIncrementTick+0x150>)
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	4a3e      	ldr	r2, [pc, #248]	@ (80092b8 <xTaskIncrementTick+0x154>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	4b3e      	ldr	r3, [pc, #248]	@ (80092bc <xTaskIncrementTick+0x158>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3301      	adds	r3, #1
 80091c8:	4a3c      	ldr	r2, [pc, #240]	@ (80092bc <xTaskIncrementTick+0x158>)
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	f000 fa16 	bl	80095fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091d0:	4b3b      	ldr	r3, [pc, #236]	@ (80092c0 <xTaskIncrementTick+0x15c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d348      	bcc.n	800926c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091da:	4b36      	ldr	r3, [pc, #216]	@ (80092b4 <xTaskIncrementTick+0x150>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e4:	4b36      	ldr	r3, [pc, #216]	@ (80092c0 <xTaskIncrementTick+0x15c>)
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ea:	601a      	str	r2, [r3, #0]
					break;
 80091ec:	e03e      	b.n	800926c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ee:	4b31      	ldr	r3, [pc, #196]	@ (80092b4 <xTaskIncrementTick+0x150>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d203      	bcs.n	800920e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009206:	4a2e      	ldr	r2, [pc, #184]	@ (80092c0 <xTaskIncrementTick+0x15c>)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800920c:	e02e      	b.n	800926c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	3304      	adds	r3, #4
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff fc5b 	bl	8008ace <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3318      	adds	r3, #24
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fc52 	bl	8008ace <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	2201      	movs	r2, #1
 8009230:	409a      	lsls	r2, r3
 8009232:	4b24      	ldr	r3, [pc, #144]	@ (80092c4 <xTaskIncrementTick+0x160>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4313      	orrs	r3, r2
 8009238:	4a22      	ldr	r2, [pc, #136]	@ (80092c4 <xTaskIncrementTick+0x160>)
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4a1f      	ldr	r2, [pc, #124]	@ (80092c8 <xTaskIncrementTick+0x164>)
 800924a:	441a      	add	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7ff fbde 	bl	8008a14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925c:	4b1b      	ldr	r3, [pc, #108]	@ (80092cc <xTaskIncrementTick+0x168>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d3b9      	bcc.n	80091da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009266:	2301      	movs	r3, #1
 8009268:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800926a:	e7b6      	b.n	80091da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800926c:	4b17      	ldr	r3, [pc, #92]	@ (80092cc <xTaskIncrementTick+0x168>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009272:	4915      	ldr	r1, [pc, #84]	@ (80092c8 <xTaskIncrementTick+0x164>)
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	440b      	add	r3, r1
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d901      	bls.n	8009288 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009288:	4b11      	ldr	r3, [pc, #68]	@ (80092d0 <xTaskIncrementTick+0x16c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d007      	beq.n	80092a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e004      	b.n	80092a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009296:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <xTaskIncrementTick+0x170>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	4a0d      	ldr	r2, [pc, #52]	@ (80092d4 <xTaskIncrementTick+0x170>)
 800929e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092a0:	697b      	ldr	r3, [r7, #20]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	200004ac 	.word	0x200004ac
 80092b0:	20000490 	.word	0x20000490
 80092b4:	2000045c 	.word	0x2000045c
 80092b8:	20000460 	.word	0x20000460
 80092bc:	200004a4 	.word	0x200004a4
 80092c0:	200004a8 	.word	0x200004a8
 80092c4:	20000494 	.word	0x20000494
 80092c8:	200003d0 	.word	0x200003d0
 80092cc:	200003cc 	.word	0x200003cc
 80092d0:	200004a0 	.word	0x200004a0
 80092d4:	2000049c 	.word	0x2000049c

080092d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092de:	4b3a      	ldr	r3, [pc, #232]	@ (80093c8 <vTaskSwitchContext+0xf0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092e6:	4b39      	ldr	r3, [pc, #228]	@ (80093cc <vTaskSwitchContext+0xf4>)
 80092e8:	2201      	movs	r2, #1
 80092ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092ec:	e067      	b.n	80093be <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80092ee:	4b37      	ldr	r3, [pc, #220]	@ (80093cc <vTaskSwitchContext+0xf4>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80092f4:	4b36      	ldr	r3, [pc, #216]	@ (80093d0 <vTaskSwitchContext+0xf8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009300:	61bb      	str	r3, [r7, #24]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	429a      	cmp	r2, r3
 800930a:	d111      	bne.n	8009330 <vTaskSwitchContext+0x58>
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	3304      	adds	r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	429a      	cmp	r2, r3
 8009316:	d10b      	bne.n	8009330 <vTaskSwitchContext+0x58>
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3308      	adds	r3, #8
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	429a      	cmp	r2, r3
 8009322:	d105      	bne.n	8009330 <vTaskSwitchContext+0x58>
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	330c      	adds	r3, #12
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	429a      	cmp	r2, r3
 800932e:	d008      	beq.n	8009342 <vTaskSwitchContext+0x6a>
 8009330:	4b27      	ldr	r3, [pc, #156]	@ (80093d0 <vTaskSwitchContext+0xf8>)
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	4b26      	ldr	r3, [pc, #152]	@ (80093d0 <vTaskSwitchContext+0xf8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3334      	adds	r3, #52	@ 0x34
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7f7 f91f 	bl	8000580 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009342:	4b24      	ldr	r3, [pc, #144]	@ (80093d4 <vTaskSwitchContext+0xfc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	fab3 f383 	clz	r3, r3
 800934e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	f1c3 031f 	rsb	r3, r3, #31
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	491f      	ldr	r1, [pc, #124]	@ (80093d8 <vTaskSwitchContext+0x100>)
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <vTaskSwitchContext+0xac>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	607b      	str	r3, [r7, #4]
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <vTaskSwitchContext+0xa8>
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4a12      	ldr	r2, [pc, #72]	@ (80093d8 <vTaskSwitchContext+0x100>)
 8009390:	4413      	add	r3, r2
 8009392:	613b      	str	r3, [r7, #16]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	605a      	str	r2, [r3, #4]
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	3308      	adds	r3, #8
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d104      	bne.n	80093b4 <vTaskSwitchContext+0xdc>
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	4a05      	ldr	r2, [pc, #20]	@ (80093d0 <vTaskSwitchContext+0xf8>)
 80093bc:	6013      	str	r3, [r2, #0]
}
 80093be:	bf00      	nop
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200004ac 	.word	0x200004ac
 80093cc:	200004a0 	.word	0x200004a0
 80093d0:	200003cc 	.word	0x200003cc
 80093d4:	20000494 	.word	0x20000494
 80093d8:	200003d0 	.word	0x200003d0

080093dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009404:	4b07      	ldr	r3, [pc, #28]	@ (8009424 <vTaskPlaceOnEventList+0x48>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3318      	adds	r3, #24
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff fb25 	bl	8008a5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009412:	2101      	movs	r1, #1
 8009414:	6838      	ldr	r0, [r7, #0]
 8009416:	f000 f9b7 	bl	8009788 <prvAddCurrentTaskToDelayedList>
}
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200003cc 	.word	0x200003cc

08009428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10b      	bne.n	8009456 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60fb      	str	r3, [r7, #12]
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	3318      	adds	r3, #24
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fb37 	bl	8008ace <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009460:	4b1d      	ldr	r3, [pc, #116]	@ (80094d8 <xTaskRemoveFromEventList+0xb0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11c      	bne.n	80094a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	3304      	adds	r3, #4
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fb2e 	bl	8008ace <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009476:	2201      	movs	r2, #1
 8009478:	409a      	lsls	r2, r3
 800947a:	4b18      	ldr	r3, [pc, #96]	@ (80094dc <xTaskRemoveFromEventList+0xb4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4313      	orrs	r3, r2
 8009480:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <xTaskRemoveFromEventList+0xb4>)
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4a13      	ldr	r2, [pc, #76]	@ (80094e0 <xTaskRemoveFromEventList+0xb8>)
 8009492:	441a      	add	r2, r3
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7ff faba 	bl	8008a14 <vListInsertEnd>
 80094a0:	e005      	b.n	80094ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3318      	adds	r3, #24
 80094a6:	4619      	mov	r1, r3
 80094a8:	480e      	ldr	r0, [pc, #56]	@ (80094e4 <xTaskRemoveFromEventList+0xbc>)
 80094aa:	f7ff fab3 	bl	8008a14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <xTaskRemoveFromEventList+0xc0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d905      	bls.n	80094c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094c0:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <xTaskRemoveFromEventList+0xc4>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e001      	b.n	80094cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80094c8:	2300      	movs	r3, #0
 80094ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80094cc:	697b      	ldr	r3, [r7, #20]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200004ac 	.word	0x200004ac
 80094dc:	20000494 	.word	0x20000494
 80094e0:	200003d0 	.word	0x200003d0
 80094e4:	20000464 	.word	0x20000464
 80094e8:	200003cc 	.word	0x200003cc
 80094ec:	200004a0 	.word	0x200004a0

080094f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094f8:	4b06      	ldr	r3, [pc, #24]	@ (8009514 <vTaskInternalSetTimeOutState+0x24>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009500:	4b05      	ldr	r3, [pc, #20]	@ (8009518 <vTaskInternalSetTimeOutState+0x28>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	605a      	str	r2, [r3, #4]
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	200004a4 	.word	0x200004a4
 8009518:	20000490 	.word	0x20000490

0800951c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10b      	bne.n	8009544 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	613b      	str	r3, [r7, #16]
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10b      	bne.n	8009562 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	60fb      	str	r3, [r7, #12]
}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	e7fd      	b.n	800955e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009562:	f000 f991 	bl	8009888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009566:	4b1d      	ldr	r3, [pc, #116]	@ (80095dc <xTaskCheckForTimeOut+0xc0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d102      	bne.n	8009586 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009580:	2300      	movs	r3, #0
 8009582:	61fb      	str	r3, [r7, #28]
 8009584:	e023      	b.n	80095ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4b15      	ldr	r3, [pc, #84]	@ (80095e0 <xTaskCheckForTimeOut+0xc4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	429a      	cmp	r2, r3
 8009590:	d007      	beq.n	80095a2 <xTaskCheckForTimeOut+0x86>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	429a      	cmp	r2, r3
 800959a:	d302      	bcc.n	80095a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	61fb      	str	r3, [r7, #28]
 80095a0:	e015      	b.n	80095ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d20b      	bcs.n	80095c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	1ad2      	subs	r2, r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff ff99 	bl	80094f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095be:	2300      	movs	r3, #0
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	e004      	b.n	80095ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095ca:	2301      	movs	r3, #1
 80095cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095ce:	f000 f98d 	bl	80098ec <vPortExitCritical>

	return xReturn;
 80095d2:	69fb      	ldr	r3, [r7, #28]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20000490 	.word	0x20000490
 80095e0:	200004a4 	.word	0x200004a4

080095e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095e8:	4b03      	ldr	r3, [pc, #12]	@ (80095f8 <vTaskMissedYield+0x14>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	601a      	str	r2, [r3, #0]
}
 80095ee:	bf00      	nop
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	200004a0 	.word	0x200004a0

080095fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009602:	4b0c      	ldr	r3, [pc, #48]	@ (8009634 <prvResetNextTaskUnblockTime+0x38>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800960c:	4b0a      	ldr	r3, [pc, #40]	@ (8009638 <prvResetNextTaskUnblockTime+0x3c>)
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009614:	e008      	b.n	8009628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <prvResetNextTaskUnblockTime+0x38>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4a04      	ldr	r2, [pc, #16]	@ (8009638 <prvResetNextTaskUnblockTime+0x3c>)
 8009626:	6013      	str	r3, [r2, #0]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	2000045c 	.word	0x2000045c
 8009638:	200004a8 	.word	0x200004a8

0800963c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009642:	4b0b      	ldr	r3, [pc, #44]	@ (8009670 <xTaskGetSchedulerState+0x34>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800964a:	2301      	movs	r3, #1
 800964c:	607b      	str	r3, [r7, #4]
 800964e:	e008      	b.n	8009662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009650:	4b08      	ldr	r3, [pc, #32]	@ (8009674 <xTaskGetSchedulerState+0x38>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009658:	2302      	movs	r3, #2
 800965a:	607b      	str	r3, [r7, #4]
 800965c:	e001      	b.n	8009662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800965e:	2300      	movs	r3, #0
 8009660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009662:	687b      	ldr	r3, [r7, #4]
	}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	20000498 	.word	0x20000498
 8009674:	200004ac 	.word	0x200004ac

08009678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d070      	beq.n	8009770 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800968e:	4b3b      	ldr	r3, [pc, #236]	@ (800977c <xTaskPriorityDisinherit+0x104>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	429a      	cmp	r2, r3
 8009696:	d00b      	beq.n	80096b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	60fb      	str	r3, [r7, #12]
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10b      	bne.n	80096d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	60bb      	str	r3, [r7, #8]
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	e7fd      	b.n	80096cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d4:	1e5a      	subs	r2, r3, #1
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d044      	beq.n	8009770 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d140      	bne.n	8009770 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff f9eb 	bl	8008ace <uxListRemove>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d115      	bne.n	800972a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009702:	491f      	ldr	r1, [pc, #124]	@ (8009780 <xTaskPriorityDisinherit+0x108>)
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	440b      	add	r3, r1
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xTaskPriorityDisinherit+0xb2>
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009718:	2201      	movs	r2, #1
 800971a:	fa02 f303 	lsl.w	r3, r2, r3
 800971e:	43da      	mvns	r2, r3
 8009720:	4b18      	ldr	r3, [pc, #96]	@ (8009784 <xTaskPriorityDisinherit+0x10c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4013      	ands	r3, r2
 8009726:	4a17      	ldr	r2, [pc, #92]	@ (8009784 <xTaskPriorityDisinherit+0x10c>)
 8009728:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009736:	f1c3 0207 	rsb	r2, r3, #7
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	2201      	movs	r2, #1
 8009744:	409a      	lsls	r2, r3
 8009746:	4b0f      	ldr	r3, [pc, #60]	@ (8009784 <xTaskPriorityDisinherit+0x10c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4313      	orrs	r3, r2
 800974c:	4a0d      	ldr	r2, [pc, #52]	@ (8009784 <xTaskPriorityDisinherit+0x10c>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a08      	ldr	r2, [pc, #32]	@ (8009780 <xTaskPriorityDisinherit+0x108>)
 800975e:	441a      	add	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7ff f954 	bl	8008a14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009770:	697b      	ldr	r3, [r7, #20]
	}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200003cc 	.word	0x200003cc
 8009780:	200003d0 	.word	0x200003d0
 8009784:	20000494 	.word	0x20000494

08009788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009792:	4b29      	ldr	r3, [pc, #164]	@ (8009838 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009798:	4b28      	ldr	r3, [pc, #160]	@ (800983c <prvAddCurrentTaskToDelayedList+0xb4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3304      	adds	r3, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff f995 	bl	8008ace <uxListRemove>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10b      	bne.n	80097c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80097aa:	4b24      	ldr	r3, [pc, #144]	@ (800983c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	2201      	movs	r2, #1
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43da      	mvns	r2, r3
 80097b8:	4b21      	ldr	r3, [pc, #132]	@ (8009840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4013      	ands	r3, r2
 80097be:	4a20      	ldr	r2, [pc, #128]	@ (8009840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80097c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c8:	d10a      	bne.n	80097e0 <prvAddCurrentTaskToDelayedList+0x58>
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d0:	4b1a      	ldr	r3, [pc, #104]	@ (800983c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	481a      	ldr	r0, [pc, #104]	@ (8009844 <prvAddCurrentTaskToDelayedList+0xbc>)
 80097da:	f7ff f91b 	bl	8008a14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097de:	e026      	b.n	800982e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4413      	add	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097e8:	4b14      	ldr	r3, [pc, #80]	@ (800983c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d209      	bcs.n	800980c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097f8:	4b13      	ldr	r3, [pc, #76]	@ (8009848 <prvAddCurrentTaskToDelayedList+0xc0>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3304      	adds	r3, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f7ff f929 	bl	8008a5c <vListInsert>
}
 800980a:	e010      	b.n	800982e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800980c:	4b0f      	ldr	r3, [pc, #60]	@ (800984c <prvAddCurrentTaskToDelayedList+0xc4>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	4b0a      	ldr	r3, [pc, #40]	@ (800983c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7ff f91f 	bl	8008a5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800981e:	4b0c      	ldr	r3, [pc, #48]	@ (8009850 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	429a      	cmp	r2, r3
 8009826:	d202      	bcs.n	800982e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009828:	4a09      	ldr	r2, [pc, #36]	@ (8009850 <prvAddCurrentTaskToDelayedList+0xc8>)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6013      	str	r3, [r2, #0]
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20000490 	.word	0x20000490
 800983c:	200003cc 	.word	0x200003cc
 8009840:	20000494 	.word	0x20000494
 8009844:	20000478 	.word	0x20000478
 8009848:	20000460 	.word	0x20000460
 800984c:	2000045c 	.word	0x2000045c
 8009850:	200004a8 	.word	0x200004a8
	...

08009860 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009860:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <pxCurrentTCBConst2>)
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	6808      	ldr	r0, [r1, #0]
 8009866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986a:	f380 8809 	msr	PSP, r0
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8811 	msr	BASEPRI, r0
 800987a:	4770      	bx	lr
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst2>:
 8009880:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop

08009888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	607b      	str	r3, [r7, #4]
}
 80098a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098a2:	4b10      	ldr	r3, [pc, #64]	@ (80098e4 <vPortEnterCritical+0x5c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3301      	adds	r3, #1
 80098a8:	4a0e      	ldr	r2, [pc, #56]	@ (80098e4 <vPortEnterCritical+0x5c>)
 80098aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098ac:	4b0d      	ldr	r3, [pc, #52]	@ (80098e4 <vPortEnterCritical+0x5c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d110      	bne.n	80098d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098b4:	4b0c      	ldr	r3, [pc, #48]	@ (80098e8 <vPortEnterCritical+0x60>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00b      	beq.n	80098d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	603b      	str	r3, [r7, #0]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <vPortEnterCritical+0x4a>
	}
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	2000000c 	.word	0x2000000c
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098f2:	4b12      	ldr	r3, [pc, #72]	@ (800993c <vPortExitCritical+0x50>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <vPortExitCritical+0x26>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	e7fd      	b.n	800990e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009912:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <vPortExitCritical+0x50>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3b01      	subs	r3, #1
 8009918:	4a08      	ldr	r2, [pc, #32]	@ (800993c <vPortExitCritical+0x50>)
 800991a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800991c:	4b07      	ldr	r3, [pc, #28]	@ (800993c <vPortExitCritical+0x50>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d105      	bne.n	8009930 <vPortExitCritical+0x44>
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f383 8811 	msr	BASEPRI, r3
}
 800992e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	2000000c 	.word	0x2000000c

08009940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009940:	f3ef 8009 	mrs	r0, PSP
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4b15      	ldr	r3, [pc, #84]	@ (80099a0 <pxCurrentTCBConst>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	f01e 0f10 	tst.w	lr, #16
 8009950:	bf08      	it	eq
 8009952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	6010      	str	r0, [r2, #0]
 800995c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009964:	f380 8811 	msr	BASEPRI, r0
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f7ff fcb2 	bl	80092d8 <vTaskSwitchContext>
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	f380 8811 	msr	BASEPRI, r0
 800997c:	bc09      	pop	{r0, r3}
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	6808      	ldr	r0, [r1, #0]
 8009982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009986:	f01e 0f10 	tst.w	lr, #16
 800998a:	bf08      	it	eq
 800998c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009990:	f380 8809 	msr	PSP, r0
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst>:
 80099a0:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099c2:	f7ff fbcf 	bl	8009164 <xTaskIncrementTick>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099cc:	4b06      	ldr	r3, [pc, #24]	@ (80099e8 <SysTick_Handler+0x40>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f383 8811 	msr	BASEPRI, r3
}
 80099de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099f2:	f3ef 8305 	mrs	r3, IPSR
 80099f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b0f      	cmp	r3, #15
 80099fc:	d915      	bls.n	8009a2a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099fe:	4a18      	ldr	r2, [pc, #96]	@ (8009a60 <vPortValidateInterruptPriority+0x74>)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a08:	4b16      	ldr	r3, [pc, #88]	@ (8009a64 <vPortValidateInterruptPriority+0x78>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	7afa      	ldrb	r2, [r7, #11]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d20b      	bcs.n	8009a2a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	607b      	str	r3, [r7, #4]
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	e7fd      	b.n	8009a26 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a68 <vPortValidateInterruptPriority+0x7c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a32:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <vPortValidateInterruptPriority+0x80>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d90b      	bls.n	8009a52 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	603b      	str	r3, [r7, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <vPortValidateInterruptPriority+0x62>
	}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	e000e3f0 	.word	0xe000e3f0
 8009a64:	200004b0 	.word	0x200004b0
 8009a68:	e000ed0c 	.word	0xe000ed0c
 8009a6c:	200004b4 	.word	0x200004b4

08009a70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe fe9a 	bl	80087b8 <USBH_LL_IncTimer>
}
 8009a84:	bf00      	nop
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fede 	bl	800885c <USBH_LL_Connect>
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fef3 	bl	80088a2 <USBH_LL_Disconnect>
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe ff13 	bl	8008906 <USBH_LL_NotifyURBChange>
#endif
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fe88 	bl	800880c <USBH_LL_PortEnabled>
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fe94 	bl	8008840 <USBH_LL_PortDisabled>
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7f9 f837 	bl	8002baa <HAL_HCD_Stop>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f808 	bl	8009b58 <USBH_Get_USB_Status>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d817      	bhi.n	8009b9c <USBH_Get_USB_Status+0x44>
 8009b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b74 <USBH_Get_USB_Status+0x1c>)
 8009b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009b8b 	.word	0x08009b8b
 8009b7c:	08009b91 	.word	0x08009b91
 8009b80:	08009b97 	.word	0x08009b97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73fb      	strb	r3, [r7, #15]
    break;
 8009b88:	e00b      	b.n	8009ba2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b8e:	e008      	b.n	8009ba2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b90:	2301      	movs	r3, #1
 8009b92:	73fb      	strb	r3, [r7, #15]
    break;
 8009b94:	e005      	b.n	8009ba2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b96:	2302      	movs	r3, #2
 8009b98:	73fb      	strb	r3, [r7, #15]
    break;
 8009b9a:	e002      	b.n	8009ba2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba0:	bf00      	nop
  }
  return usb_status;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <sbrk_aligned>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8009bf0 <sbrk_aligned+0x40>)
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	6831      	ldr	r1, [r6, #0]
 8009bb8:	4605      	mov	r5, r0
 8009bba:	b911      	cbnz	r1, 8009bc2 <sbrk_aligned+0x12>
 8009bbc:	f000 faec 	bl	800a198 <_sbrk_r>
 8009bc0:	6030      	str	r0, [r6, #0]
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f000 fae7 	bl	800a198 <_sbrk_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d103      	bne.n	8009bd6 <sbrk_aligned+0x26>
 8009bce:	f04f 34ff 	mov.w	r4, #4294967295
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	bd70      	pop	{r4, r5, r6, pc}
 8009bd6:	1cc4      	adds	r4, r0, #3
 8009bd8:	f024 0403 	bic.w	r4, r4, #3
 8009bdc:	42a0      	cmp	r0, r4
 8009bde:	d0f8      	beq.n	8009bd2 <sbrk_aligned+0x22>
 8009be0:	1a21      	subs	r1, r4, r0
 8009be2:	4628      	mov	r0, r5
 8009be4:	f000 fad8 	bl	800a198 <_sbrk_r>
 8009be8:	3001      	adds	r0, #1
 8009bea:	d1f2      	bne.n	8009bd2 <sbrk_aligned+0x22>
 8009bec:	e7ef      	b.n	8009bce <sbrk_aligned+0x1e>
 8009bee:	bf00      	nop
 8009bf0:	20000898 	.word	0x20000898

08009bf4 <_malloc_r>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	1ccd      	adds	r5, r1, #3
 8009bfa:	f025 0503 	bic.w	r5, r5, #3
 8009bfe:	3508      	adds	r5, #8
 8009c00:	2d0c      	cmp	r5, #12
 8009c02:	bf38      	it	cc
 8009c04:	250c      	movcc	r5, #12
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	4606      	mov	r6, r0
 8009c0a:	db01      	blt.n	8009c10 <_malloc_r+0x1c>
 8009c0c:	42a9      	cmp	r1, r5
 8009c0e:	d904      	bls.n	8009c1a <_malloc_r+0x26>
 8009c10:	230c      	movs	r3, #12
 8009c12:	6033      	str	r3, [r6, #0]
 8009c14:	2000      	movs	r0, #0
 8009c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cf0 <_malloc_r+0xfc>
 8009c1e:	f000 f869 	bl	8009cf4 <__malloc_lock>
 8009c22:	f8d8 3000 	ldr.w	r3, [r8]
 8009c26:	461c      	mov	r4, r3
 8009c28:	bb44      	cbnz	r4, 8009c7c <_malloc_r+0x88>
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff ffbf 	bl	8009bb0 <sbrk_aligned>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	4604      	mov	r4, r0
 8009c36:	d158      	bne.n	8009cea <_malloc_r+0xf6>
 8009c38:	f8d8 4000 	ldr.w	r4, [r8]
 8009c3c:	4627      	mov	r7, r4
 8009c3e:	2f00      	cmp	r7, #0
 8009c40:	d143      	bne.n	8009cca <_malloc_r+0xd6>
 8009c42:	2c00      	cmp	r4, #0
 8009c44:	d04b      	beq.n	8009cde <_malloc_r+0xea>
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	4639      	mov	r1, r7
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	eb04 0903 	add.w	r9, r4, r3
 8009c50:	f000 faa2 	bl	800a198 <_sbrk_r>
 8009c54:	4581      	cmp	r9, r0
 8009c56:	d142      	bne.n	8009cde <_malloc_r+0xea>
 8009c58:	6821      	ldr	r1, [r4, #0]
 8009c5a:	1a6d      	subs	r5, r5, r1
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f7ff ffa6 	bl	8009bb0 <sbrk_aligned>
 8009c64:	3001      	adds	r0, #1
 8009c66:	d03a      	beq.n	8009cde <_malloc_r+0xea>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	442b      	add	r3, r5
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	bb62      	cbnz	r2, 8009cd0 <_malloc_r+0xdc>
 8009c76:	f8c8 7000 	str.w	r7, [r8]
 8009c7a:	e00f      	b.n	8009c9c <_malloc_r+0xa8>
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	1b52      	subs	r2, r2, r5
 8009c80:	d420      	bmi.n	8009cc4 <_malloc_r+0xd0>
 8009c82:	2a0b      	cmp	r2, #11
 8009c84:	d917      	bls.n	8009cb6 <_malloc_r+0xc2>
 8009c86:	1961      	adds	r1, r4, r5
 8009c88:	42a3      	cmp	r3, r4
 8009c8a:	6025      	str	r5, [r4, #0]
 8009c8c:	bf18      	it	ne
 8009c8e:	6059      	strne	r1, [r3, #4]
 8009c90:	6863      	ldr	r3, [r4, #4]
 8009c92:	bf08      	it	eq
 8009c94:	f8c8 1000 	streq.w	r1, [r8]
 8009c98:	5162      	str	r2, [r4, r5]
 8009c9a:	604b      	str	r3, [r1, #4]
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 f82f 	bl	8009d00 <__malloc_unlock>
 8009ca2:	f104 000b 	add.w	r0, r4, #11
 8009ca6:	1d23      	adds	r3, r4, #4
 8009ca8:	f020 0007 	bic.w	r0, r0, #7
 8009cac:	1ac2      	subs	r2, r0, r3
 8009cae:	bf1c      	itt	ne
 8009cb0:	1a1b      	subne	r3, r3, r0
 8009cb2:	50a3      	strne	r3, [r4, r2]
 8009cb4:	e7af      	b.n	8009c16 <_malloc_r+0x22>
 8009cb6:	6862      	ldr	r2, [r4, #4]
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	bf0c      	ite	eq
 8009cbc:	f8c8 2000 	streq.w	r2, [r8]
 8009cc0:	605a      	strne	r2, [r3, #4]
 8009cc2:	e7eb      	b.n	8009c9c <_malloc_r+0xa8>
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	6864      	ldr	r4, [r4, #4]
 8009cc8:	e7ae      	b.n	8009c28 <_malloc_r+0x34>
 8009cca:	463c      	mov	r4, r7
 8009ccc:	687f      	ldr	r7, [r7, #4]
 8009cce:	e7b6      	b.n	8009c3e <_malloc_r+0x4a>
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d1fb      	bne.n	8009cd0 <_malloc_r+0xdc>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	6053      	str	r3, [r2, #4]
 8009cdc:	e7de      	b.n	8009c9c <_malloc_r+0xa8>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	6033      	str	r3, [r6, #0]
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f000 f80c 	bl	8009d00 <__malloc_unlock>
 8009ce8:	e794      	b.n	8009c14 <_malloc_r+0x20>
 8009cea:	6005      	str	r5, [r0, #0]
 8009cec:	e7d6      	b.n	8009c9c <_malloc_r+0xa8>
 8009cee:	bf00      	nop
 8009cf0:	2000089c 	.word	0x2000089c

08009cf4 <__malloc_lock>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	@ (8009cfc <__malloc_lock+0x8>)
 8009cf6:	f000 ba9c 	b.w	800a232 <__retarget_lock_acquire_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	200009e0 	.word	0x200009e0

08009d00 <__malloc_unlock>:
 8009d00:	4801      	ldr	r0, [pc, #4]	@ (8009d08 <__malloc_unlock+0x8>)
 8009d02:	f000 ba97 	b.w	800a234 <__retarget_lock_release_recursive>
 8009d06:	bf00      	nop
 8009d08:	200009e0 	.word	0x200009e0

08009d0c <std>:
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	e9c0 3300 	strd	r3, r3, [r0]
 8009d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1a:	6083      	str	r3, [r0, #8]
 8009d1c:	8181      	strh	r1, [r0, #12]
 8009d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d20:	81c2      	strh	r2, [r0, #14]
 8009d22:	6183      	str	r3, [r0, #24]
 8009d24:	4619      	mov	r1, r3
 8009d26:	2208      	movs	r2, #8
 8009d28:	305c      	adds	r0, #92	@ 0x5c
 8009d2a:	f000 f9f9 	bl	800a120 <memset>
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d64 <std+0x58>)
 8009d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d32:	4b0d      	ldr	r3, [pc, #52]	@ (8009d68 <std+0x5c>)
 8009d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d36:	4b0d      	ldr	r3, [pc, #52]	@ (8009d6c <std+0x60>)
 8009d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d70 <std+0x64>)
 8009d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <std+0x68>)
 8009d40:	6224      	str	r4, [r4, #32]
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d006      	beq.n	8009d54 <std+0x48>
 8009d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d4a:	4294      	cmp	r4, r2
 8009d4c:	d002      	beq.n	8009d54 <std+0x48>
 8009d4e:	33d0      	adds	r3, #208	@ 0xd0
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d105      	bne.n	8009d60 <std+0x54>
 8009d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f000 ba68 	b.w	800a230 <__retarget_lock_init_recursive>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	bf00      	nop
 8009d64:	08009f71 	.word	0x08009f71
 8009d68:	08009f93 	.word	0x08009f93
 8009d6c:	08009fcb 	.word	0x08009fcb
 8009d70:	08009fef 	.word	0x08009fef
 8009d74:	200008a0 	.word	0x200008a0

08009d78 <stdio_exit_handler>:
 8009d78:	4a02      	ldr	r2, [pc, #8]	@ (8009d84 <stdio_exit_handler+0xc>)
 8009d7a:	4903      	ldr	r1, [pc, #12]	@ (8009d88 <stdio_exit_handler+0x10>)
 8009d7c:	4803      	ldr	r0, [pc, #12]	@ (8009d8c <stdio_exit_handler+0x14>)
 8009d7e:	f000 b869 	b.w	8009e54 <_fwalk_sglue>
 8009d82:	bf00      	nop
 8009d84:	20000010 	.word	0x20000010
 8009d88:	0800a991 	.word	0x0800a991
 8009d8c:	20000020 	.word	0x20000020

08009d90 <cleanup_stdio>:
 8009d90:	6841      	ldr	r1, [r0, #4]
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <cleanup_stdio+0x34>)
 8009d94:	4299      	cmp	r1, r3
 8009d96:	b510      	push	{r4, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	d001      	beq.n	8009da0 <cleanup_stdio+0x10>
 8009d9c:	f000 fdf8 	bl	800a990 <_fflush_r>
 8009da0:	68a1      	ldr	r1, [r4, #8]
 8009da2:	4b09      	ldr	r3, [pc, #36]	@ (8009dc8 <cleanup_stdio+0x38>)
 8009da4:	4299      	cmp	r1, r3
 8009da6:	d002      	beq.n	8009dae <cleanup_stdio+0x1e>
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 fdf1 	bl	800a990 <_fflush_r>
 8009dae:	68e1      	ldr	r1, [r4, #12]
 8009db0:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <cleanup_stdio+0x3c>)
 8009db2:	4299      	cmp	r1, r3
 8009db4:	d004      	beq.n	8009dc0 <cleanup_stdio+0x30>
 8009db6:	4620      	mov	r0, r4
 8009db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dbc:	f000 bde8 	b.w	800a990 <_fflush_r>
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	bf00      	nop
 8009dc4:	200008a0 	.word	0x200008a0
 8009dc8:	20000908 	.word	0x20000908
 8009dcc:	20000970 	.word	0x20000970

08009dd0 <global_stdio_init.part.0>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <global_stdio_init.part.0+0x30>)
 8009dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8009e04 <global_stdio_init.part.0+0x34>)
 8009dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8009e08 <global_stdio_init.part.0+0x38>)
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2104      	movs	r1, #4
 8009de0:	f7ff ff94 	bl	8009d0c <std>
 8009de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009de8:	2201      	movs	r2, #1
 8009dea:	2109      	movs	r1, #9
 8009dec:	f7ff ff8e 	bl	8009d0c <std>
 8009df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009df4:	2202      	movs	r2, #2
 8009df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dfa:	2112      	movs	r1, #18
 8009dfc:	f7ff bf86 	b.w	8009d0c <std>
 8009e00:	200009d8 	.word	0x200009d8
 8009e04:	200008a0 	.word	0x200008a0
 8009e08:	08009d79 	.word	0x08009d79

08009e0c <__sfp_lock_acquire>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	@ (8009e14 <__sfp_lock_acquire+0x8>)
 8009e0e:	f000 ba10 	b.w	800a232 <__retarget_lock_acquire_recursive>
 8009e12:	bf00      	nop
 8009e14:	200009e1 	.word	0x200009e1

08009e18 <__sfp_lock_release>:
 8009e18:	4801      	ldr	r0, [pc, #4]	@ (8009e20 <__sfp_lock_release+0x8>)
 8009e1a:	f000 ba0b 	b.w	800a234 <__retarget_lock_release_recursive>
 8009e1e:	bf00      	nop
 8009e20:	200009e1 	.word	0x200009e1

08009e24 <__sinit>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
 8009e28:	f7ff fff0 	bl	8009e0c <__sfp_lock_acquire>
 8009e2c:	6a23      	ldr	r3, [r4, #32]
 8009e2e:	b11b      	cbz	r3, 8009e38 <__sinit+0x14>
 8009e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e34:	f7ff bff0 	b.w	8009e18 <__sfp_lock_release>
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <__sinit+0x28>)
 8009e3a:	6223      	str	r3, [r4, #32]
 8009e3c:	4b04      	ldr	r3, [pc, #16]	@ (8009e50 <__sinit+0x2c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f5      	bne.n	8009e30 <__sinit+0xc>
 8009e44:	f7ff ffc4 	bl	8009dd0 <global_stdio_init.part.0>
 8009e48:	e7f2      	b.n	8009e30 <__sinit+0xc>
 8009e4a:	bf00      	nop
 8009e4c:	08009d91 	.word	0x08009d91
 8009e50:	200009d8 	.word	0x200009d8

08009e54 <_fwalk_sglue>:
 8009e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	4607      	mov	r7, r0
 8009e5a:	4688      	mov	r8, r1
 8009e5c:	4614      	mov	r4, r2
 8009e5e:	2600      	movs	r6, #0
 8009e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e64:	f1b9 0901 	subs.w	r9, r9, #1
 8009e68:	d505      	bpl.n	8009e76 <_fwalk_sglue+0x22>
 8009e6a:	6824      	ldr	r4, [r4, #0]
 8009e6c:	2c00      	cmp	r4, #0
 8009e6e:	d1f7      	bne.n	8009e60 <_fwalk_sglue+0xc>
 8009e70:	4630      	mov	r0, r6
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d907      	bls.n	8009e8c <_fwalk_sglue+0x38>
 8009e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e80:	3301      	adds	r3, #1
 8009e82:	d003      	beq.n	8009e8c <_fwalk_sglue+0x38>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4638      	mov	r0, r7
 8009e88:	47c0      	blx	r8
 8009e8a:	4306      	orrs	r6, r0
 8009e8c:	3568      	adds	r5, #104	@ 0x68
 8009e8e:	e7e9      	b.n	8009e64 <_fwalk_sglue+0x10>

08009e90 <iprintf>:
 8009e90:	b40f      	push	{r0, r1, r2, r3}
 8009e92:	b507      	push	{r0, r1, r2, lr}
 8009e94:	4906      	ldr	r1, [pc, #24]	@ (8009eb0 <iprintf+0x20>)
 8009e96:	ab04      	add	r3, sp, #16
 8009e98:	6808      	ldr	r0, [r1, #0]
 8009e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9e:	6881      	ldr	r1, [r0, #8]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	f000 fa4b 	bl	800a33c <_vfiprintf_r>
 8009ea6:	b003      	add	sp, #12
 8009ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eac:	b004      	add	sp, #16
 8009eae:	4770      	bx	lr
 8009eb0:	2000001c 	.word	0x2000001c

08009eb4 <_puts_r>:
 8009eb4:	6a03      	ldr	r3, [r0, #32]
 8009eb6:	b570      	push	{r4, r5, r6, lr}
 8009eb8:	6884      	ldr	r4, [r0, #8]
 8009eba:	4605      	mov	r5, r0
 8009ebc:	460e      	mov	r6, r1
 8009ebe:	b90b      	cbnz	r3, 8009ec4 <_puts_r+0x10>
 8009ec0:	f7ff ffb0 	bl	8009e24 <__sinit>
 8009ec4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ec6:	07db      	lsls	r3, r3, #31
 8009ec8:	d405      	bmi.n	8009ed6 <_puts_r+0x22>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	0598      	lsls	r0, r3, #22
 8009ece:	d402      	bmi.n	8009ed6 <_puts_r+0x22>
 8009ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ed2:	f000 f9ae 	bl	800a232 <__retarget_lock_acquire_recursive>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	0719      	lsls	r1, r3, #28
 8009eda:	d502      	bpl.n	8009ee2 <_puts_r+0x2e>
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d135      	bne.n	8009f4e <_puts_r+0x9a>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 f8c5 	bl	800a074 <__swsetup_r>
 8009eea:	b380      	cbz	r0, 8009f4e <_puts_r+0x9a>
 8009eec:	f04f 35ff 	mov.w	r5, #4294967295
 8009ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ef2:	07da      	lsls	r2, r3, #31
 8009ef4:	d405      	bmi.n	8009f02 <_puts_r+0x4e>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	059b      	lsls	r3, r3, #22
 8009efa:	d402      	bmi.n	8009f02 <_puts_r+0x4e>
 8009efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009efe:	f000 f999 	bl	800a234 <__retarget_lock_release_recursive>
 8009f02:	4628      	mov	r0, r5
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da04      	bge.n	8009f14 <_puts_r+0x60>
 8009f0a:	69a2      	ldr	r2, [r4, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	dc17      	bgt.n	8009f40 <_puts_r+0x8c>
 8009f10:	290a      	cmp	r1, #10
 8009f12:	d015      	beq.n	8009f40 <_puts_r+0x8c>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	6022      	str	r2, [r4, #0]
 8009f1a:	7019      	strb	r1, [r3, #0]
 8009f1c:	68a3      	ldr	r3, [r4, #8]
 8009f1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f22:	3b01      	subs	r3, #1
 8009f24:	60a3      	str	r3, [r4, #8]
 8009f26:	2900      	cmp	r1, #0
 8009f28:	d1ed      	bne.n	8009f06 <_puts_r+0x52>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	da11      	bge.n	8009f52 <_puts_r+0x9e>
 8009f2e:	4622      	mov	r2, r4
 8009f30:	210a      	movs	r1, #10
 8009f32:	4628      	mov	r0, r5
 8009f34:	f000 f85f 	bl	8009ff6 <__swbuf_r>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d0d7      	beq.n	8009eec <_puts_r+0x38>
 8009f3c:	250a      	movs	r5, #10
 8009f3e:	e7d7      	b.n	8009ef0 <_puts_r+0x3c>
 8009f40:	4622      	mov	r2, r4
 8009f42:	4628      	mov	r0, r5
 8009f44:	f000 f857 	bl	8009ff6 <__swbuf_r>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d1e7      	bne.n	8009f1c <_puts_r+0x68>
 8009f4c:	e7ce      	b.n	8009eec <_puts_r+0x38>
 8009f4e:	3e01      	subs	r6, #1
 8009f50:	e7e4      	b.n	8009f1c <_puts_r+0x68>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	6022      	str	r2, [r4, #0]
 8009f58:	220a      	movs	r2, #10
 8009f5a:	701a      	strb	r2, [r3, #0]
 8009f5c:	e7ee      	b.n	8009f3c <_puts_r+0x88>
	...

08009f60 <puts>:
 8009f60:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <puts+0xc>)
 8009f62:	4601      	mov	r1, r0
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	f7ff bfa5 	b.w	8009eb4 <_puts_r>
 8009f6a:	bf00      	nop
 8009f6c:	2000001c 	.word	0x2000001c

08009f70 <__sread>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	460c      	mov	r4, r1
 8009f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f78:	f000 f8fc 	bl	800a174 <_read_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	bfab      	itete	ge
 8009f80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f82:	89a3      	ldrhlt	r3, [r4, #12]
 8009f84:	181b      	addge	r3, r3, r0
 8009f86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f8a:	bfac      	ite	ge
 8009f8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f8e:	81a3      	strhlt	r3, [r4, #12]
 8009f90:	bd10      	pop	{r4, pc}

08009f92 <__swrite>:
 8009f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f96:	461f      	mov	r7, r3
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	05db      	lsls	r3, r3, #23
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	d505      	bpl.n	8009fb0 <__swrite+0x1e>
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	2302      	movs	r3, #2
 8009faa:	2200      	movs	r2, #0
 8009fac:	f000 f8d0 	bl	800a150 <_lseek_r>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	f000 b8f7 	b.w	800a1b8 <_write_r>

08009fca <__sseek>:
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	460c      	mov	r4, r1
 8009fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd2:	f000 f8bd 	bl	800a150 <_lseek_r>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	bf15      	itete	ne
 8009fdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009fde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fe2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fe6:	81a3      	strheq	r3, [r4, #12]
 8009fe8:	bf18      	it	ne
 8009fea:	81a3      	strhne	r3, [r4, #12]
 8009fec:	bd10      	pop	{r4, pc}

08009fee <__sclose>:
 8009fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff2:	f000 b89d 	b.w	800a130 <_close_r>

08009ff6 <__swbuf_r>:
 8009ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff8:	460e      	mov	r6, r1
 8009ffa:	4614      	mov	r4, r2
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	b118      	cbz	r0, 800a008 <__swbuf_r+0x12>
 800a000:	6a03      	ldr	r3, [r0, #32]
 800a002:	b90b      	cbnz	r3, 800a008 <__swbuf_r+0x12>
 800a004:	f7ff ff0e 	bl	8009e24 <__sinit>
 800a008:	69a3      	ldr	r3, [r4, #24]
 800a00a:	60a3      	str	r3, [r4, #8]
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	071a      	lsls	r2, r3, #28
 800a010:	d501      	bpl.n	800a016 <__swbuf_r+0x20>
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	b943      	cbnz	r3, 800a028 <__swbuf_r+0x32>
 800a016:	4621      	mov	r1, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 f82b 	bl	800a074 <__swsetup_r>
 800a01e:	b118      	cbz	r0, 800a028 <__swbuf_r+0x32>
 800a020:	f04f 37ff 	mov.w	r7, #4294967295
 800a024:	4638      	mov	r0, r7
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	6922      	ldr	r2, [r4, #16]
 800a02c:	1a98      	subs	r0, r3, r2
 800a02e:	6963      	ldr	r3, [r4, #20]
 800a030:	b2f6      	uxtb	r6, r6
 800a032:	4283      	cmp	r3, r0
 800a034:	4637      	mov	r7, r6
 800a036:	dc05      	bgt.n	800a044 <__swbuf_r+0x4e>
 800a038:	4621      	mov	r1, r4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 fca8 	bl	800a990 <_fflush_r>
 800a040:	2800      	cmp	r0, #0
 800a042:	d1ed      	bne.n	800a020 <__swbuf_r+0x2a>
 800a044:	68a3      	ldr	r3, [r4, #8]
 800a046:	3b01      	subs	r3, #1
 800a048:	60a3      	str	r3, [r4, #8]
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	6022      	str	r2, [r4, #0]
 800a050:	701e      	strb	r6, [r3, #0]
 800a052:	6962      	ldr	r2, [r4, #20]
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	429a      	cmp	r2, r3
 800a058:	d004      	beq.n	800a064 <__swbuf_r+0x6e>
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	07db      	lsls	r3, r3, #31
 800a05e:	d5e1      	bpl.n	800a024 <__swbuf_r+0x2e>
 800a060:	2e0a      	cmp	r6, #10
 800a062:	d1df      	bne.n	800a024 <__swbuf_r+0x2e>
 800a064:	4621      	mov	r1, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 fc92 	bl	800a990 <_fflush_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d0d9      	beq.n	800a024 <__swbuf_r+0x2e>
 800a070:	e7d6      	b.n	800a020 <__swbuf_r+0x2a>
	...

0800a074 <__swsetup_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4b29      	ldr	r3, [pc, #164]	@ (800a11c <__swsetup_r+0xa8>)
 800a078:	4605      	mov	r5, r0
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	460c      	mov	r4, r1
 800a07e:	b118      	cbz	r0, 800a088 <__swsetup_r+0x14>
 800a080:	6a03      	ldr	r3, [r0, #32]
 800a082:	b90b      	cbnz	r3, 800a088 <__swsetup_r+0x14>
 800a084:	f7ff fece 	bl	8009e24 <__sinit>
 800a088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08c:	0719      	lsls	r1, r3, #28
 800a08e:	d422      	bmi.n	800a0d6 <__swsetup_r+0x62>
 800a090:	06da      	lsls	r2, r3, #27
 800a092:	d407      	bmi.n	800a0a4 <__swsetup_r+0x30>
 800a094:	2209      	movs	r2, #9
 800a096:	602a      	str	r2, [r5, #0]
 800a098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	e033      	b.n	800a10c <__swsetup_r+0x98>
 800a0a4:	0758      	lsls	r0, r3, #29
 800a0a6:	d512      	bpl.n	800a0ce <__swsetup_r+0x5a>
 800a0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0aa:	b141      	cbz	r1, 800a0be <__swsetup_r+0x4a>
 800a0ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <__swsetup_r+0x46>
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 f8cd 	bl	800a254 <_free_r>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f043 0308 	orr.w	r3, r3, #8
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	b94b      	cbnz	r3, 800a0ee <__swsetup_r+0x7a>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e4:	d003      	beq.n	800a0ee <__swsetup_r+0x7a>
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	f000 fc9f 	bl	800aa2c <__smakebuf_r>
 800a0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f2:	f013 0201 	ands.w	r2, r3, #1
 800a0f6:	d00a      	beq.n	800a10e <__swsetup_r+0x9a>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	60a2      	str	r2, [r4, #8]
 800a0fc:	6962      	ldr	r2, [r4, #20]
 800a0fe:	4252      	negs	r2, r2
 800a100:	61a2      	str	r2, [r4, #24]
 800a102:	6922      	ldr	r2, [r4, #16]
 800a104:	b942      	cbnz	r2, 800a118 <__swsetup_r+0xa4>
 800a106:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a10a:	d1c5      	bne.n	800a098 <__swsetup_r+0x24>
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	0799      	lsls	r1, r3, #30
 800a110:	bf58      	it	pl
 800a112:	6962      	ldrpl	r2, [r4, #20]
 800a114:	60a2      	str	r2, [r4, #8]
 800a116:	e7f4      	b.n	800a102 <__swsetup_r+0x8e>
 800a118:	2000      	movs	r0, #0
 800a11a:	e7f7      	b.n	800a10c <__swsetup_r+0x98>
 800a11c:	2000001c 	.word	0x2000001c

0800a120 <memset>:
 800a120:	4402      	add	r2, r0
 800a122:	4603      	mov	r3, r0
 800a124:	4293      	cmp	r3, r2
 800a126:	d100      	bne.n	800a12a <memset+0xa>
 800a128:	4770      	bx	lr
 800a12a:	f803 1b01 	strb.w	r1, [r3], #1
 800a12e:	e7f9      	b.n	800a124 <memset+0x4>

0800a130 <_close_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d06      	ldr	r5, [pc, #24]	@ (800a14c <_close_r+0x1c>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7f7 fbf7 	bl	800192e <_close>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_close_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_close_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	200009dc 	.word	0x200009dc

0800a150 <_lseek_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d07      	ldr	r5, [pc, #28]	@ (800a170 <_lseek_r+0x20>)
 800a154:	4604      	mov	r4, r0
 800a156:	4608      	mov	r0, r1
 800a158:	4611      	mov	r1, r2
 800a15a:	2200      	movs	r2, #0
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f7f7 fc0c 	bl	800197c <_lseek>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_lseek_r+0x1e>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_lseek_r+0x1e>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	200009dc 	.word	0x200009dc

0800a174 <_read_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d07      	ldr	r5, [pc, #28]	@ (800a194 <_read_r+0x20>)
 800a178:	4604      	mov	r4, r0
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	2200      	movs	r2, #0
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f7 fbb6 	bl	80018f4 <_read>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_read_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_read_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	200009dc 	.word	0x200009dc

0800a198 <_sbrk_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4d06      	ldr	r5, [pc, #24]	@ (800a1b4 <_sbrk_r+0x1c>)
 800a19c:	2300      	movs	r3, #0
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	f7f7 fbf8 	bl	8001998 <_sbrk>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_sbrk_r+0x1a>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_sbrk_r+0x1a>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	200009dc 	.word	0x200009dc

0800a1b8 <_write_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4d07      	ldr	r5, [pc, #28]	@ (800a1d8 <_write_r+0x20>)
 800a1bc:	4604      	mov	r4, r0
 800a1be:	4608      	mov	r0, r1
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	602a      	str	r2, [r5, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f7f6 fab6 	bl	8000738 <_write>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d102      	bne.n	800a1d6 <_write_r+0x1e>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	b103      	cbz	r3, 800a1d6 <_write_r+0x1e>
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	200009dc 	.word	0x200009dc

0800a1dc <__errno>:
 800a1dc:	4b01      	ldr	r3, [pc, #4]	@ (800a1e4 <__errno+0x8>)
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2000001c 	.word	0x2000001c

0800a1e8 <__libc_init_array>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a220 <__libc_init_array+0x38>)
 800a1ec:	4c0d      	ldr	r4, [pc, #52]	@ (800a224 <__libc_init_array+0x3c>)
 800a1ee:	1b64      	subs	r4, r4, r5
 800a1f0:	10a4      	asrs	r4, r4, #2
 800a1f2:	2600      	movs	r6, #0
 800a1f4:	42a6      	cmp	r6, r4
 800a1f6:	d109      	bne.n	800a20c <__libc_init_array+0x24>
 800a1f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a228 <__libc_init_array+0x40>)
 800a1fa:	4c0c      	ldr	r4, [pc, #48]	@ (800a22c <__libc_init_array+0x44>)
 800a1fc:	f000 fc74 	bl	800aae8 <_init>
 800a200:	1b64      	subs	r4, r4, r5
 800a202:	10a4      	asrs	r4, r4, #2
 800a204:	2600      	movs	r6, #0
 800a206:	42a6      	cmp	r6, r4
 800a208:	d105      	bne.n	800a216 <__libc_init_array+0x2e>
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a210:	4798      	blx	r3
 800a212:	3601      	adds	r6, #1
 800a214:	e7ee      	b.n	800a1f4 <__libc_init_array+0xc>
 800a216:	f855 3b04 	ldr.w	r3, [r5], #4
 800a21a:	4798      	blx	r3
 800a21c:	3601      	adds	r6, #1
 800a21e:	e7f2      	b.n	800a206 <__libc_init_array+0x1e>
 800a220:	0800ad08 	.word	0x0800ad08
 800a224:	0800ad08 	.word	0x0800ad08
 800a228:	0800ad08 	.word	0x0800ad08
 800a22c:	0800ad0c 	.word	0x0800ad0c

0800a230 <__retarget_lock_init_recursive>:
 800a230:	4770      	bx	lr

0800a232 <__retarget_lock_acquire_recursive>:
 800a232:	4770      	bx	lr

0800a234 <__retarget_lock_release_recursive>:
 800a234:	4770      	bx	lr

0800a236 <memcpy>:
 800a236:	440a      	add	r2, r1
 800a238:	4291      	cmp	r1, r2
 800a23a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a23e:	d100      	bne.n	800a242 <memcpy+0xc>
 800a240:	4770      	bx	lr
 800a242:	b510      	push	{r4, lr}
 800a244:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a24c:	4291      	cmp	r1, r2
 800a24e:	d1f9      	bne.n	800a244 <memcpy+0xe>
 800a250:	bd10      	pop	{r4, pc}
	...

0800a254 <_free_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4605      	mov	r5, r0
 800a258:	2900      	cmp	r1, #0
 800a25a:	d041      	beq.n	800a2e0 <_free_r+0x8c>
 800a25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a260:	1f0c      	subs	r4, r1, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	bfb8      	it	lt
 800a266:	18e4      	addlt	r4, r4, r3
 800a268:	f7ff fd44 	bl	8009cf4 <__malloc_lock>
 800a26c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2e4 <_free_r+0x90>)
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	b933      	cbnz	r3, 800a280 <_free_r+0x2c>
 800a272:	6063      	str	r3, [r4, #4]
 800a274:	6014      	str	r4, [r2, #0]
 800a276:	4628      	mov	r0, r5
 800a278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a27c:	f7ff bd40 	b.w	8009d00 <__malloc_unlock>
 800a280:	42a3      	cmp	r3, r4
 800a282:	d908      	bls.n	800a296 <_free_r+0x42>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	1821      	adds	r1, r4, r0
 800a288:	428b      	cmp	r3, r1
 800a28a:	bf01      	itttt	eq
 800a28c:	6819      	ldreq	r1, [r3, #0]
 800a28e:	685b      	ldreq	r3, [r3, #4]
 800a290:	1809      	addeq	r1, r1, r0
 800a292:	6021      	streq	r1, [r4, #0]
 800a294:	e7ed      	b.n	800a272 <_free_r+0x1e>
 800a296:	461a      	mov	r2, r3
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	b10b      	cbz	r3, 800a2a0 <_free_r+0x4c>
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	d9fa      	bls.n	800a296 <_free_r+0x42>
 800a2a0:	6811      	ldr	r1, [r2, #0]
 800a2a2:	1850      	adds	r0, r2, r1
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d10b      	bne.n	800a2c0 <_free_r+0x6c>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	1850      	adds	r0, r2, r1
 800a2ae:	4283      	cmp	r3, r0
 800a2b0:	6011      	str	r1, [r2, #0]
 800a2b2:	d1e0      	bne.n	800a276 <_free_r+0x22>
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	6053      	str	r3, [r2, #4]
 800a2ba:	4408      	add	r0, r1
 800a2bc:	6010      	str	r0, [r2, #0]
 800a2be:	e7da      	b.n	800a276 <_free_r+0x22>
 800a2c0:	d902      	bls.n	800a2c8 <_free_r+0x74>
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	e7d6      	b.n	800a276 <_free_r+0x22>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	1821      	adds	r1, r4, r0
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	bf04      	itt	eq
 800a2d0:	6819      	ldreq	r1, [r3, #0]
 800a2d2:	685b      	ldreq	r3, [r3, #4]
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	bf04      	itt	eq
 800a2d8:	1809      	addeq	r1, r1, r0
 800a2da:	6021      	streq	r1, [r4, #0]
 800a2dc:	6054      	str	r4, [r2, #4]
 800a2de:	e7ca      	b.n	800a276 <_free_r+0x22>
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	2000089c 	.word	0x2000089c

0800a2e8 <__sfputc_r>:
 800a2e8:	6893      	ldr	r3, [r2, #8]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	b410      	push	{r4}
 800a2f0:	6093      	str	r3, [r2, #8]
 800a2f2:	da08      	bge.n	800a306 <__sfputc_r+0x1e>
 800a2f4:	6994      	ldr	r4, [r2, #24]
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	db01      	blt.n	800a2fe <__sfputc_r+0x16>
 800a2fa:	290a      	cmp	r1, #10
 800a2fc:	d103      	bne.n	800a306 <__sfputc_r+0x1e>
 800a2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a302:	f7ff be78 	b.w	8009ff6 <__swbuf_r>
 800a306:	6813      	ldr	r3, [r2, #0]
 800a308:	1c58      	adds	r0, r3, #1
 800a30a:	6010      	str	r0, [r2, #0]
 800a30c:	7019      	strb	r1, [r3, #0]
 800a30e:	4608      	mov	r0, r1
 800a310:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <__sfputs_r>:
 800a316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a318:	4606      	mov	r6, r0
 800a31a:	460f      	mov	r7, r1
 800a31c:	4614      	mov	r4, r2
 800a31e:	18d5      	adds	r5, r2, r3
 800a320:	42ac      	cmp	r4, r5
 800a322:	d101      	bne.n	800a328 <__sfputs_r+0x12>
 800a324:	2000      	movs	r0, #0
 800a326:	e007      	b.n	800a338 <__sfputs_r+0x22>
 800a328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a32c:	463a      	mov	r2, r7
 800a32e:	4630      	mov	r0, r6
 800a330:	f7ff ffda 	bl	800a2e8 <__sfputc_r>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d1f3      	bne.n	800a320 <__sfputs_r+0xa>
 800a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a33c <_vfiprintf_r>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	460d      	mov	r5, r1
 800a342:	b09d      	sub	sp, #116	@ 0x74
 800a344:	4614      	mov	r4, r2
 800a346:	4698      	mov	r8, r3
 800a348:	4606      	mov	r6, r0
 800a34a:	b118      	cbz	r0, 800a354 <_vfiprintf_r+0x18>
 800a34c:	6a03      	ldr	r3, [r0, #32]
 800a34e:	b90b      	cbnz	r3, 800a354 <_vfiprintf_r+0x18>
 800a350:	f7ff fd68 	bl	8009e24 <__sinit>
 800a354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a356:	07d9      	lsls	r1, r3, #31
 800a358:	d405      	bmi.n	800a366 <_vfiprintf_r+0x2a>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	059a      	lsls	r2, r3, #22
 800a35e:	d402      	bmi.n	800a366 <_vfiprintf_r+0x2a>
 800a360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a362:	f7ff ff66 	bl	800a232 <__retarget_lock_acquire_recursive>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	071b      	lsls	r3, r3, #28
 800a36a:	d501      	bpl.n	800a370 <_vfiprintf_r+0x34>
 800a36c:	692b      	ldr	r3, [r5, #16]
 800a36e:	b99b      	cbnz	r3, 800a398 <_vfiprintf_r+0x5c>
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	f7ff fe7e 	bl	800a074 <__swsetup_r>
 800a378:	b170      	cbz	r0, 800a398 <_vfiprintf_r+0x5c>
 800a37a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a37c:	07dc      	lsls	r4, r3, #31
 800a37e:	d504      	bpl.n	800a38a <_vfiprintf_r+0x4e>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b01d      	add	sp, #116	@ 0x74
 800a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	0598      	lsls	r0, r3, #22
 800a38e:	d4f7      	bmi.n	800a380 <_vfiprintf_r+0x44>
 800a390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a392:	f7ff ff4f 	bl	800a234 <__retarget_lock_release_recursive>
 800a396:	e7f3      	b.n	800a380 <_vfiprintf_r+0x44>
 800a398:	2300      	movs	r3, #0
 800a39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a39c:	2320      	movs	r3, #32
 800a39e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3a6:	2330      	movs	r3, #48	@ 0x30
 800a3a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a558 <_vfiprintf_r+0x21c>
 800a3ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3b0:	f04f 0901 	mov.w	r9, #1
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	469a      	mov	sl, r3
 800a3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3bc:	b10a      	cbz	r2, 800a3c2 <_vfiprintf_r+0x86>
 800a3be:	2a25      	cmp	r2, #37	@ 0x25
 800a3c0:	d1f9      	bne.n	800a3b6 <_vfiprintf_r+0x7a>
 800a3c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3c6:	d00b      	beq.n	800a3e0 <_vfiprintf_r+0xa4>
 800a3c8:	465b      	mov	r3, fp
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ffa1 	bl	800a316 <__sfputs_r>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f000 80a7 	beq.w	800a528 <_vfiprintf_r+0x1ec>
 800a3da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3dc:	445a      	add	r2, fp
 800a3de:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 809f 	beq.w	800a528 <_vfiprintf_r+0x1ec>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f4:	f10a 0a01 	add.w	sl, sl, #1
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a400:	931a      	str	r3, [sp, #104]	@ 0x68
 800a402:	4654      	mov	r4, sl
 800a404:	2205      	movs	r2, #5
 800a406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40a:	4853      	ldr	r0, [pc, #332]	@ (800a558 <_vfiprintf_r+0x21c>)
 800a40c:	f7f5 fef0 	bl	80001f0 <memchr>
 800a410:	9a04      	ldr	r2, [sp, #16]
 800a412:	b9d8      	cbnz	r0, 800a44c <_vfiprintf_r+0x110>
 800a414:	06d1      	lsls	r1, r2, #27
 800a416:	bf44      	itt	mi
 800a418:	2320      	movmi	r3, #32
 800a41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a41e:	0713      	lsls	r3, r2, #28
 800a420:	bf44      	itt	mi
 800a422:	232b      	movmi	r3, #43	@ 0x2b
 800a424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a428:	f89a 3000 	ldrb.w	r3, [sl]
 800a42c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a42e:	d015      	beq.n	800a45c <_vfiprintf_r+0x120>
 800a430:	9a07      	ldr	r2, [sp, #28]
 800a432:	4654      	mov	r4, sl
 800a434:	2000      	movs	r0, #0
 800a436:	f04f 0c0a 	mov.w	ip, #10
 800a43a:	4621      	mov	r1, r4
 800a43c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a440:	3b30      	subs	r3, #48	@ 0x30
 800a442:	2b09      	cmp	r3, #9
 800a444:	d94b      	bls.n	800a4de <_vfiprintf_r+0x1a2>
 800a446:	b1b0      	cbz	r0, 800a476 <_vfiprintf_r+0x13a>
 800a448:	9207      	str	r2, [sp, #28]
 800a44a:	e014      	b.n	800a476 <_vfiprintf_r+0x13a>
 800a44c:	eba0 0308 	sub.w	r3, r0, r8
 800a450:	fa09 f303 	lsl.w	r3, r9, r3
 800a454:	4313      	orrs	r3, r2
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	46a2      	mov	sl, r4
 800a45a:	e7d2      	b.n	800a402 <_vfiprintf_r+0xc6>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	1d19      	adds	r1, r3, #4
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	9103      	str	r1, [sp, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	bfbb      	ittet	lt
 800a468:	425b      	neglt	r3, r3
 800a46a:	f042 0202 	orrlt.w	r2, r2, #2
 800a46e:	9307      	strge	r3, [sp, #28]
 800a470:	9307      	strlt	r3, [sp, #28]
 800a472:	bfb8      	it	lt
 800a474:	9204      	strlt	r2, [sp, #16]
 800a476:	7823      	ldrb	r3, [r4, #0]
 800a478:	2b2e      	cmp	r3, #46	@ 0x2e
 800a47a:	d10a      	bne.n	800a492 <_vfiprintf_r+0x156>
 800a47c:	7863      	ldrb	r3, [r4, #1]
 800a47e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a480:	d132      	bne.n	800a4e8 <_vfiprintf_r+0x1ac>
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	1d1a      	adds	r2, r3, #4
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	9203      	str	r2, [sp, #12]
 800a48a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a48e:	3402      	adds	r4, #2
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a568 <_vfiprintf_r+0x22c>
 800a496:	7821      	ldrb	r1, [r4, #0]
 800a498:	2203      	movs	r2, #3
 800a49a:	4650      	mov	r0, sl
 800a49c:	f7f5 fea8 	bl	80001f0 <memchr>
 800a4a0:	b138      	cbz	r0, 800a4b2 <_vfiprintf_r+0x176>
 800a4a2:	9b04      	ldr	r3, [sp, #16]
 800a4a4:	eba0 000a 	sub.w	r0, r0, sl
 800a4a8:	2240      	movs	r2, #64	@ 0x40
 800a4aa:	4082      	lsls	r2, r0
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	3401      	adds	r4, #1
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b6:	4829      	ldr	r0, [pc, #164]	@ (800a55c <_vfiprintf_r+0x220>)
 800a4b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4bc:	2206      	movs	r2, #6
 800a4be:	f7f5 fe97 	bl	80001f0 <memchr>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d03f      	beq.n	800a546 <_vfiprintf_r+0x20a>
 800a4c6:	4b26      	ldr	r3, [pc, #152]	@ (800a560 <_vfiprintf_r+0x224>)
 800a4c8:	bb1b      	cbnz	r3, 800a512 <_vfiprintf_r+0x1d6>
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	3307      	adds	r3, #7
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	9303      	str	r3, [sp, #12]
 800a4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d8:	443b      	add	r3, r7
 800a4da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4dc:	e76a      	b.n	800a3b4 <_vfiprintf_r+0x78>
 800a4de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	e7a8      	b.n	800a43a <_vfiprintf_r+0xfe>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	3401      	adds	r4, #1
 800a4ec:	9305      	str	r3, [sp, #20]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	f04f 0c0a 	mov.w	ip, #10
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4fa:	3a30      	subs	r2, #48	@ 0x30
 800a4fc:	2a09      	cmp	r2, #9
 800a4fe:	d903      	bls.n	800a508 <_vfiprintf_r+0x1cc>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0c6      	beq.n	800a492 <_vfiprintf_r+0x156>
 800a504:	9105      	str	r1, [sp, #20]
 800a506:	e7c4      	b.n	800a492 <_vfiprintf_r+0x156>
 800a508:	fb0c 2101 	mla	r1, ip, r1, r2
 800a50c:	4604      	mov	r4, r0
 800a50e:	2301      	movs	r3, #1
 800a510:	e7f0      	b.n	800a4f4 <_vfiprintf_r+0x1b8>
 800a512:	ab03      	add	r3, sp, #12
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	462a      	mov	r2, r5
 800a518:	4b12      	ldr	r3, [pc, #72]	@ (800a564 <_vfiprintf_r+0x228>)
 800a51a:	a904      	add	r1, sp, #16
 800a51c:	4630      	mov	r0, r6
 800a51e:	f3af 8000 	nop.w
 800a522:	4607      	mov	r7, r0
 800a524:	1c78      	adds	r0, r7, #1
 800a526:	d1d6      	bne.n	800a4d6 <_vfiprintf_r+0x19a>
 800a528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a52a:	07d9      	lsls	r1, r3, #31
 800a52c:	d405      	bmi.n	800a53a <_vfiprintf_r+0x1fe>
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	059a      	lsls	r2, r3, #22
 800a532:	d402      	bmi.n	800a53a <_vfiprintf_r+0x1fe>
 800a534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a536:	f7ff fe7d 	bl	800a234 <__retarget_lock_release_recursive>
 800a53a:	89ab      	ldrh	r3, [r5, #12]
 800a53c:	065b      	lsls	r3, r3, #25
 800a53e:	f53f af1f 	bmi.w	800a380 <_vfiprintf_r+0x44>
 800a542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a544:	e71e      	b.n	800a384 <_vfiprintf_r+0x48>
 800a546:	ab03      	add	r3, sp, #12
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	462a      	mov	r2, r5
 800a54c:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <_vfiprintf_r+0x228>)
 800a54e:	a904      	add	r1, sp, #16
 800a550:	4630      	mov	r0, r6
 800a552:	f000 f879 	bl	800a648 <_printf_i>
 800a556:	e7e4      	b.n	800a522 <_vfiprintf_r+0x1e6>
 800a558:	0800accc 	.word	0x0800accc
 800a55c:	0800acd6 	.word	0x0800acd6
 800a560:	00000000 	.word	0x00000000
 800a564:	0800a317 	.word	0x0800a317
 800a568:	0800acd2 	.word	0x0800acd2

0800a56c <_printf_common>:
 800a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	4616      	mov	r6, r2
 800a572:	4698      	mov	r8, r3
 800a574:	688a      	ldr	r2, [r1, #8]
 800a576:	690b      	ldr	r3, [r1, #16]
 800a578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a57c:	4293      	cmp	r3, r2
 800a57e:	bfb8      	it	lt
 800a580:	4613      	movlt	r3, r2
 800a582:	6033      	str	r3, [r6, #0]
 800a584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a588:	4607      	mov	r7, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	b10a      	cbz	r2, 800a592 <_printf_common+0x26>
 800a58e:	3301      	adds	r3, #1
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	0699      	lsls	r1, r3, #26
 800a596:	bf42      	ittt	mi
 800a598:	6833      	ldrmi	r3, [r6, #0]
 800a59a:	3302      	addmi	r3, #2
 800a59c:	6033      	strmi	r3, [r6, #0]
 800a59e:	6825      	ldr	r5, [r4, #0]
 800a5a0:	f015 0506 	ands.w	r5, r5, #6
 800a5a4:	d106      	bne.n	800a5b4 <_printf_common+0x48>
 800a5a6:	f104 0a19 	add.w	sl, r4, #25
 800a5aa:	68e3      	ldr	r3, [r4, #12]
 800a5ac:	6832      	ldr	r2, [r6, #0]
 800a5ae:	1a9b      	subs	r3, r3, r2
 800a5b0:	42ab      	cmp	r3, r5
 800a5b2:	dc26      	bgt.n	800a602 <_printf_common+0x96>
 800a5b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5b8:	6822      	ldr	r2, [r4, #0]
 800a5ba:	3b00      	subs	r3, #0
 800a5bc:	bf18      	it	ne
 800a5be:	2301      	movne	r3, #1
 800a5c0:	0692      	lsls	r2, r2, #26
 800a5c2:	d42b      	bmi.n	800a61c <_printf_common+0xb0>
 800a5c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5c8:	4641      	mov	r1, r8
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	47c8      	blx	r9
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	d01e      	beq.n	800a610 <_printf_common+0xa4>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	6922      	ldr	r2, [r4, #16]
 800a5d6:	f003 0306 	and.w	r3, r3, #6
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	bf02      	ittt	eq
 800a5de:	68e5      	ldreq	r5, [r4, #12]
 800a5e0:	6833      	ldreq	r3, [r6, #0]
 800a5e2:	1aed      	subeq	r5, r5, r3
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	bf0c      	ite	eq
 800a5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5ec:	2500      	movne	r5, #0
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	bfc4      	itt	gt
 800a5f2:	1a9b      	subgt	r3, r3, r2
 800a5f4:	18ed      	addgt	r5, r5, r3
 800a5f6:	2600      	movs	r6, #0
 800a5f8:	341a      	adds	r4, #26
 800a5fa:	42b5      	cmp	r5, r6
 800a5fc:	d11a      	bne.n	800a634 <_printf_common+0xc8>
 800a5fe:	2000      	movs	r0, #0
 800a600:	e008      	b.n	800a614 <_printf_common+0xa8>
 800a602:	2301      	movs	r3, #1
 800a604:	4652      	mov	r2, sl
 800a606:	4641      	mov	r1, r8
 800a608:	4638      	mov	r0, r7
 800a60a:	47c8      	blx	r9
 800a60c:	3001      	adds	r0, #1
 800a60e:	d103      	bne.n	800a618 <_printf_common+0xac>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	3501      	adds	r5, #1
 800a61a:	e7c6      	b.n	800a5aa <_printf_common+0x3e>
 800a61c:	18e1      	adds	r1, r4, r3
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	2030      	movs	r0, #48	@ 0x30
 800a622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a626:	4422      	add	r2, r4
 800a628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a62c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a630:	3302      	adds	r3, #2
 800a632:	e7c7      	b.n	800a5c4 <_printf_common+0x58>
 800a634:	2301      	movs	r3, #1
 800a636:	4622      	mov	r2, r4
 800a638:	4641      	mov	r1, r8
 800a63a:	4638      	mov	r0, r7
 800a63c:	47c8      	blx	r9
 800a63e:	3001      	adds	r0, #1
 800a640:	d0e6      	beq.n	800a610 <_printf_common+0xa4>
 800a642:	3601      	adds	r6, #1
 800a644:	e7d9      	b.n	800a5fa <_printf_common+0x8e>
	...

0800a648 <_printf_i>:
 800a648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	7e0f      	ldrb	r7, [r1, #24]
 800a64e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a650:	2f78      	cmp	r7, #120	@ 0x78
 800a652:	4691      	mov	r9, r2
 800a654:	4680      	mov	r8, r0
 800a656:	460c      	mov	r4, r1
 800a658:	469a      	mov	sl, r3
 800a65a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a65e:	d807      	bhi.n	800a670 <_printf_i+0x28>
 800a660:	2f62      	cmp	r7, #98	@ 0x62
 800a662:	d80a      	bhi.n	800a67a <_printf_i+0x32>
 800a664:	2f00      	cmp	r7, #0
 800a666:	f000 80d2 	beq.w	800a80e <_printf_i+0x1c6>
 800a66a:	2f58      	cmp	r7, #88	@ 0x58
 800a66c:	f000 80b9 	beq.w	800a7e2 <_printf_i+0x19a>
 800a670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a678:	e03a      	b.n	800a6f0 <_printf_i+0xa8>
 800a67a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a67e:	2b15      	cmp	r3, #21
 800a680:	d8f6      	bhi.n	800a670 <_printf_i+0x28>
 800a682:	a101      	add	r1, pc, #4	@ (adr r1, 800a688 <_printf_i+0x40>)
 800a684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a688:	0800a6e1 	.word	0x0800a6e1
 800a68c:	0800a6f5 	.word	0x0800a6f5
 800a690:	0800a671 	.word	0x0800a671
 800a694:	0800a671 	.word	0x0800a671
 800a698:	0800a671 	.word	0x0800a671
 800a69c:	0800a671 	.word	0x0800a671
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a671 	.word	0x0800a671
 800a6a8:	0800a671 	.word	0x0800a671
 800a6ac:	0800a671 	.word	0x0800a671
 800a6b0:	0800a671 	.word	0x0800a671
 800a6b4:	0800a7f5 	.word	0x0800a7f5
 800a6b8:	0800a71f 	.word	0x0800a71f
 800a6bc:	0800a7af 	.word	0x0800a7af
 800a6c0:	0800a671 	.word	0x0800a671
 800a6c4:	0800a671 	.word	0x0800a671
 800a6c8:	0800a817 	.word	0x0800a817
 800a6cc:	0800a671 	.word	0x0800a671
 800a6d0:	0800a71f 	.word	0x0800a71f
 800a6d4:	0800a671 	.word	0x0800a671
 800a6d8:	0800a671 	.word	0x0800a671
 800a6dc:	0800a7b7 	.word	0x0800a7b7
 800a6e0:	6833      	ldr	r3, [r6, #0]
 800a6e2:	1d1a      	adds	r2, r3, #4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6032      	str	r2, [r6, #0]
 800a6e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e09d      	b.n	800a830 <_printf_i+0x1e8>
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	1d19      	adds	r1, r3, #4
 800a6fa:	6031      	str	r1, [r6, #0]
 800a6fc:	0606      	lsls	r6, r0, #24
 800a6fe:	d501      	bpl.n	800a704 <_printf_i+0xbc>
 800a700:	681d      	ldr	r5, [r3, #0]
 800a702:	e003      	b.n	800a70c <_printf_i+0xc4>
 800a704:	0645      	lsls	r5, r0, #25
 800a706:	d5fb      	bpl.n	800a700 <_printf_i+0xb8>
 800a708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	da03      	bge.n	800a718 <_printf_i+0xd0>
 800a710:	232d      	movs	r3, #45	@ 0x2d
 800a712:	426d      	negs	r5, r5
 800a714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a718:	4859      	ldr	r0, [pc, #356]	@ (800a880 <_printf_i+0x238>)
 800a71a:	230a      	movs	r3, #10
 800a71c:	e011      	b.n	800a742 <_printf_i+0xfa>
 800a71e:	6821      	ldr	r1, [r4, #0]
 800a720:	6833      	ldr	r3, [r6, #0]
 800a722:	0608      	lsls	r0, r1, #24
 800a724:	f853 5b04 	ldr.w	r5, [r3], #4
 800a728:	d402      	bmi.n	800a730 <_printf_i+0xe8>
 800a72a:	0649      	lsls	r1, r1, #25
 800a72c:	bf48      	it	mi
 800a72e:	b2ad      	uxthmi	r5, r5
 800a730:	2f6f      	cmp	r7, #111	@ 0x6f
 800a732:	4853      	ldr	r0, [pc, #332]	@ (800a880 <_printf_i+0x238>)
 800a734:	6033      	str	r3, [r6, #0]
 800a736:	bf14      	ite	ne
 800a738:	230a      	movne	r3, #10
 800a73a:	2308      	moveq	r3, #8
 800a73c:	2100      	movs	r1, #0
 800a73e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a742:	6866      	ldr	r6, [r4, #4]
 800a744:	60a6      	str	r6, [r4, #8]
 800a746:	2e00      	cmp	r6, #0
 800a748:	bfa2      	ittt	ge
 800a74a:	6821      	ldrge	r1, [r4, #0]
 800a74c:	f021 0104 	bicge.w	r1, r1, #4
 800a750:	6021      	strge	r1, [r4, #0]
 800a752:	b90d      	cbnz	r5, 800a758 <_printf_i+0x110>
 800a754:	2e00      	cmp	r6, #0
 800a756:	d04b      	beq.n	800a7f0 <_printf_i+0x1a8>
 800a758:	4616      	mov	r6, r2
 800a75a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a75e:	fb03 5711 	mls	r7, r3, r1, r5
 800a762:	5dc7      	ldrb	r7, [r0, r7]
 800a764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a768:	462f      	mov	r7, r5
 800a76a:	42bb      	cmp	r3, r7
 800a76c:	460d      	mov	r5, r1
 800a76e:	d9f4      	bls.n	800a75a <_printf_i+0x112>
 800a770:	2b08      	cmp	r3, #8
 800a772:	d10b      	bne.n	800a78c <_printf_i+0x144>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	07df      	lsls	r7, r3, #31
 800a778:	d508      	bpl.n	800a78c <_printf_i+0x144>
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	6861      	ldr	r1, [r4, #4]
 800a77e:	4299      	cmp	r1, r3
 800a780:	bfde      	ittt	le
 800a782:	2330      	movle	r3, #48	@ 0x30
 800a784:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a78c:	1b92      	subs	r2, r2, r6
 800a78e:	6122      	str	r2, [r4, #16]
 800a790:	f8cd a000 	str.w	sl, [sp]
 800a794:	464b      	mov	r3, r9
 800a796:	aa03      	add	r2, sp, #12
 800a798:	4621      	mov	r1, r4
 800a79a:	4640      	mov	r0, r8
 800a79c:	f7ff fee6 	bl	800a56c <_printf_common>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d14a      	bne.n	800a83a <_printf_i+0x1f2>
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	b004      	add	sp, #16
 800a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	f043 0320 	orr.w	r3, r3, #32
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	4833      	ldr	r0, [pc, #204]	@ (800a884 <_printf_i+0x23c>)
 800a7b8:	2778      	movs	r7, #120	@ 0x78
 800a7ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	6831      	ldr	r1, [r6, #0]
 800a7c2:	061f      	lsls	r7, r3, #24
 800a7c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7c8:	d402      	bmi.n	800a7d0 <_printf_i+0x188>
 800a7ca:	065f      	lsls	r7, r3, #25
 800a7cc:	bf48      	it	mi
 800a7ce:	b2ad      	uxthmi	r5, r5
 800a7d0:	6031      	str	r1, [r6, #0]
 800a7d2:	07d9      	lsls	r1, r3, #31
 800a7d4:	bf44      	itt	mi
 800a7d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7da:	6023      	strmi	r3, [r4, #0]
 800a7dc:	b11d      	cbz	r5, 800a7e6 <_printf_i+0x19e>
 800a7de:	2310      	movs	r3, #16
 800a7e0:	e7ac      	b.n	800a73c <_printf_i+0xf4>
 800a7e2:	4827      	ldr	r0, [pc, #156]	@ (800a880 <_printf_i+0x238>)
 800a7e4:	e7e9      	b.n	800a7ba <_printf_i+0x172>
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	f023 0320 	bic.w	r3, r3, #32
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	e7f6      	b.n	800a7de <_printf_i+0x196>
 800a7f0:	4616      	mov	r6, r2
 800a7f2:	e7bd      	b.n	800a770 <_printf_i+0x128>
 800a7f4:	6833      	ldr	r3, [r6, #0]
 800a7f6:	6825      	ldr	r5, [r4, #0]
 800a7f8:	6961      	ldr	r1, [r4, #20]
 800a7fa:	1d18      	adds	r0, r3, #4
 800a7fc:	6030      	str	r0, [r6, #0]
 800a7fe:	062e      	lsls	r6, r5, #24
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	d501      	bpl.n	800a808 <_printf_i+0x1c0>
 800a804:	6019      	str	r1, [r3, #0]
 800a806:	e002      	b.n	800a80e <_printf_i+0x1c6>
 800a808:	0668      	lsls	r0, r5, #25
 800a80a:	d5fb      	bpl.n	800a804 <_printf_i+0x1bc>
 800a80c:	8019      	strh	r1, [r3, #0]
 800a80e:	2300      	movs	r3, #0
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	4616      	mov	r6, r2
 800a814:	e7bc      	b.n	800a790 <_printf_i+0x148>
 800a816:	6833      	ldr	r3, [r6, #0]
 800a818:	1d1a      	adds	r2, r3, #4
 800a81a:	6032      	str	r2, [r6, #0]
 800a81c:	681e      	ldr	r6, [r3, #0]
 800a81e:	6862      	ldr	r2, [r4, #4]
 800a820:	2100      	movs	r1, #0
 800a822:	4630      	mov	r0, r6
 800a824:	f7f5 fce4 	bl	80001f0 <memchr>
 800a828:	b108      	cbz	r0, 800a82e <_printf_i+0x1e6>
 800a82a:	1b80      	subs	r0, r0, r6
 800a82c:	6060      	str	r0, [r4, #4]
 800a82e:	6863      	ldr	r3, [r4, #4]
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	2300      	movs	r3, #0
 800a834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a838:	e7aa      	b.n	800a790 <_printf_i+0x148>
 800a83a:	6923      	ldr	r3, [r4, #16]
 800a83c:	4632      	mov	r2, r6
 800a83e:	4649      	mov	r1, r9
 800a840:	4640      	mov	r0, r8
 800a842:	47d0      	blx	sl
 800a844:	3001      	adds	r0, #1
 800a846:	d0ad      	beq.n	800a7a4 <_printf_i+0x15c>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	079b      	lsls	r3, r3, #30
 800a84c:	d413      	bmi.n	800a876 <_printf_i+0x22e>
 800a84e:	68e0      	ldr	r0, [r4, #12]
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	4298      	cmp	r0, r3
 800a854:	bfb8      	it	lt
 800a856:	4618      	movlt	r0, r3
 800a858:	e7a6      	b.n	800a7a8 <_printf_i+0x160>
 800a85a:	2301      	movs	r3, #1
 800a85c:	4632      	mov	r2, r6
 800a85e:	4649      	mov	r1, r9
 800a860:	4640      	mov	r0, r8
 800a862:	47d0      	blx	sl
 800a864:	3001      	adds	r0, #1
 800a866:	d09d      	beq.n	800a7a4 <_printf_i+0x15c>
 800a868:	3501      	adds	r5, #1
 800a86a:	68e3      	ldr	r3, [r4, #12]
 800a86c:	9903      	ldr	r1, [sp, #12]
 800a86e:	1a5b      	subs	r3, r3, r1
 800a870:	42ab      	cmp	r3, r5
 800a872:	dcf2      	bgt.n	800a85a <_printf_i+0x212>
 800a874:	e7eb      	b.n	800a84e <_printf_i+0x206>
 800a876:	2500      	movs	r5, #0
 800a878:	f104 0619 	add.w	r6, r4, #25
 800a87c:	e7f5      	b.n	800a86a <_printf_i+0x222>
 800a87e:	bf00      	nop
 800a880:	0800acdd 	.word	0x0800acdd
 800a884:	0800acee 	.word	0x0800acee

0800a888 <__sflush_r>:
 800a888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	0716      	lsls	r6, r2, #28
 800a892:	4605      	mov	r5, r0
 800a894:	460c      	mov	r4, r1
 800a896:	d454      	bmi.n	800a942 <__sflush_r+0xba>
 800a898:	684b      	ldr	r3, [r1, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dc02      	bgt.n	800a8a4 <__sflush_r+0x1c>
 800a89e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dd48      	ble.n	800a936 <__sflush_r+0xae>
 800a8a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8a6:	2e00      	cmp	r6, #0
 800a8a8:	d045      	beq.n	800a936 <__sflush_r+0xae>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8b0:	682f      	ldr	r7, [r5, #0]
 800a8b2:	6a21      	ldr	r1, [r4, #32]
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	d030      	beq.n	800a91a <__sflush_r+0x92>
 800a8b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	0759      	lsls	r1, r3, #29
 800a8be:	d505      	bpl.n	800a8cc <__sflush_r+0x44>
 800a8c0:	6863      	ldr	r3, [r4, #4]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8c6:	b10b      	cbz	r3, 800a8cc <__sflush_r+0x44>
 800a8c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8d0:	6a21      	ldr	r1, [r4, #32]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b0      	blx	r6
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	d106      	bne.n	800a8ea <__sflush_r+0x62>
 800a8dc:	6829      	ldr	r1, [r5, #0]
 800a8de:	291d      	cmp	r1, #29
 800a8e0:	d82b      	bhi.n	800a93a <__sflush_r+0xb2>
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a98c <__sflush_r+0x104>)
 800a8e4:	410a      	asrs	r2, r1
 800a8e6:	07d6      	lsls	r6, r2, #31
 800a8e8:	d427      	bmi.n	800a93a <__sflush_r+0xb2>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	6062      	str	r2, [r4, #4]
 800a8ee:	04d9      	lsls	r1, r3, #19
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	6022      	str	r2, [r4, #0]
 800a8f4:	d504      	bpl.n	800a900 <__sflush_r+0x78>
 800a8f6:	1c42      	adds	r2, r0, #1
 800a8f8:	d101      	bne.n	800a8fe <__sflush_r+0x76>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b903      	cbnz	r3, 800a900 <__sflush_r+0x78>
 800a8fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a902:	602f      	str	r7, [r5, #0]
 800a904:	b1b9      	cbz	r1, 800a936 <__sflush_r+0xae>
 800a906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a90a:	4299      	cmp	r1, r3
 800a90c:	d002      	beq.n	800a914 <__sflush_r+0x8c>
 800a90e:	4628      	mov	r0, r5
 800a910:	f7ff fca0 	bl	800a254 <_free_r>
 800a914:	2300      	movs	r3, #0
 800a916:	6363      	str	r3, [r4, #52]	@ 0x34
 800a918:	e00d      	b.n	800a936 <__sflush_r+0xae>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b0      	blx	r6
 800a920:	4602      	mov	r2, r0
 800a922:	1c50      	adds	r0, r2, #1
 800a924:	d1c9      	bne.n	800a8ba <__sflush_r+0x32>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0c6      	beq.n	800a8ba <__sflush_r+0x32>
 800a92c:	2b1d      	cmp	r3, #29
 800a92e:	d001      	beq.n	800a934 <__sflush_r+0xac>
 800a930:	2b16      	cmp	r3, #22
 800a932:	d11e      	bne.n	800a972 <__sflush_r+0xea>
 800a934:	602f      	str	r7, [r5, #0]
 800a936:	2000      	movs	r0, #0
 800a938:	e022      	b.n	800a980 <__sflush_r+0xf8>
 800a93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a93e:	b21b      	sxth	r3, r3
 800a940:	e01b      	b.n	800a97a <__sflush_r+0xf2>
 800a942:	690f      	ldr	r7, [r1, #16]
 800a944:	2f00      	cmp	r7, #0
 800a946:	d0f6      	beq.n	800a936 <__sflush_r+0xae>
 800a948:	0793      	lsls	r3, r2, #30
 800a94a:	680e      	ldr	r6, [r1, #0]
 800a94c:	bf08      	it	eq
 800a94e:	694b      	ldreq	r3, [r1, #20]
 800a950:	600f      	str	r7, [r1, #0]
 800a952:	bf18      	it	ne
 800a954:	2300      	movne	r3, #0
 800a956:	eba6 0807 	sub.w	r8, r6, r7
 800a95a:	608b      	str	r3, [r1, #8]
 800a95c:	f1b8 0f00 	cmp.w	r8, #0
 800a960:	dde9      	ble.n	800a936 <__sflush_r+0xae>
 800a962:	6a21      	ldr	r1, [r4, #32]
 800a964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a966:	4643      	mov	r3, r8
 800a968:	463a      	mov	r2, r7
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b0      	blx	r6
 800a96e:	2800      	cmp	r0, #0
 800a970:	dc08      	bgt.n	800a984 <__sflush_r+0xfc>
 800a972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	4407      	add	r7, r0
 800a986:	eba8 0800 	sub.w	r8, r8, r0
 800a98a:	e7e7      	b.n	800a95c <__sflush_r+0xd4>
 800a98c:	dfbffffe 	.word	0xdfbffffe

0800a990 <_fflush_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	690b      	ldr	r3, [r1, #16]
 800a994:	4605      	mov	r5, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b913      	cbnz	r3, 800a9a0 <_fflush_r+0x10>
 800a99a:	2500      	movs	r5, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	b118      	cbz	r0, 800a9aa <_fflush_r+0x1a>
 800a9a2:	6a03      	ldr	r3, [r0, #32]
 800a9a4:	b90b      	cbnz	r3, 800a9aa <_fflush_r+0x1a>
 800a9a6:	f7ff fa3d 	bl	8009e24 <__sinit>
 800a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0f3      	beq.n	800a99a <_fflush_r+0xa>
 800a9b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9b4:	07d0      	lsls	r0, r2, #31
 800a9b6:	d404      	bmi.n	800a9c2 <_fflush_r+0x32>
 800a9b8:	0599      	lsls	r1, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_fflush_r+0x32>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9be:	f7ff fc38 	bl	800a232 <__retarget_lock_acquire_recursive>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7ff ff5f 	bl	800a888 <__sflush_r>
 800a9ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9cc:	07da      	lsls	r2, r3, #31
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	d4e4      	bmi.n	800a99c <_fflush_r+0xc>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	059b      	lsls	r3, r3, #22
 800a9d6:	d4e1      	bmi.n	800a99c <_fflush_r+0xc>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9da:	f7ff fc2b 	bl	800a234 <__retarget_lock_release_recursive>
 800a9de:	e7dd      	b.n	800a99c <_fflush_r+0xc>

0800a9e0 <__swhatbuf_r>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	b096      	sub	sp, #88	@ 0x58
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	461e      	mov	r6, r3
 800a9f0:	da0d      	bge.n	800aa0e <__swhatbuf_r+0x2e>
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9f8:	f04f 0100 	mov.w	r1, #0
 800a9fc:	bf14      	ite	ne
 800a9fe:	2340      	movne	r3, #64	@ 0x40
 800aa00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa04:	2000      	movs	r0, #0
 800aa06:	6031      	str	r1, [r6, #0]
 800aa08:	602b      	str	r3, [r5, #0]
 800aa0a:	b016      	add	sp, #88	@ 0x58
 800aa0c:	bd70      	pop	{r4, r5, r6, pc}
 800aa0e:	466a      	mov	r2, sp
 800aa10:	f000 f848 	bl	800aaa4 <_fstat_r>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	dbec      	blt.n	800a9f2 <__swhatbuf_r+0x12>
 800aa18:	9901      	ldr	r1, [sp, #4]
 800aa1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa22:	4259      	negs	r1, r3
 800aa24:	4159      	adcs	r1, r3
 800aa26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa2a:	e7eb      	b.n	800aa04 <__swhatbuf_r+0x24>

0800aa2c <__smakebuf_r>:
 800aa2c:	898b      	ldrh	r3, [r1, #12]
 800aa2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa30:	079d      	lsls	r5, r3, #30
 800aa32:	4606      	mov	r6, r0
 800aa34:	460c      	mov	r4, r1
 800aa36:	d507      	bpl.n	800aa48 <__smakebuf_r+0x1c>
 800aa38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	2301      	movs	r3, #1
 800aa42:	6163      	str	r3, [r4, #20]
 800aa44:	b003      	add	sp, #12
 800aa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa48:	ab01      	add	r3, sp, #4
 800aa4a:	466a      	mov	r2, sp
 800aa4c:	f7ff ffc8 	bl	800a9e0 <__swhatbuf_r>
 800aa50:	9f00      	ldr	r7, [sp, #0]
 800aa52:	4605      	mov	r5, r0
 800aa54:	4639      	mov	r1, r7
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7ff f8cc 	bl	8009bf4 <_malloc_r>
 800aa5c:	b948      	cbnz	r0, 800aa72 <__smakebuf_r+0x46>
 800aa5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa62:	059a      	lsls	r2, r3, #22
 800aa64:	d4ee      	bmi.n	800aa44 <__smakebuf_r+0x18>
 800aa66:	f023 0303 	bic.w	r3, r3, #3
 800aa6a:	f043 0302 	orr.w	r3, r3, #2
 800aa6e:	81a3      	strh	r3, [r4, #12]
 800aa70:	e7e2      	b.n	800aa38 <__smakebuf_r+0xc>
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	6020      	str	r0, [r4, #0]
 800aa76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa82:	b15b      	cbz	r3, 800aa9c <__smakebuf_r+0x70>
 800aa84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f000 f81d 	bl	800aac8 <_isatty_r>
 800aa8e:	b128      	cbz	r0, 800aa9c <__smakebuf_r+0x70>
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	f023 0303 	bic.w	r3, r3, #3
 800aa96:	f043 0301 	orr.w	r3, r3, #1
 800aa9a:	81a3      	strh	r3, [r4, #12]
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	431d      	orrs	r5, r3
 800aaa0:	81a5      	strh	r5, [r4, #12]
 800aaa2:	e7cf      	b.n	800aa44 <__smakebuf_r+0x18>

0800aaa4 <_fstat_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	@ (800aac4 <_fstat_r+0x20>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f7f6 ff48 	bl	8001946 <_fstat>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d102      	bne.n	800aac0 <_fstat_r+0x1c>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	b103      	cbz	r3, 800aac0 <_fstat_r+0x1c>
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	bf00      	nop
 800aac4:	200009dc 	.word	0x200009dc

0800aac8 <_isatty_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_isatty_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f6 ff47 	bl	8001966 <_isatty>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_isatty_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_isatty_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	200009dc 	.word	0x200009dc

0800aae8 <_init>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	bf00      	nop
 800aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaee:	bc08      	pop	{r3}
 800aaf0:	469e      	mov	lr, r3
 800aaf2:	4770      	bx	lr

0800aaf4 <_fini>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr
