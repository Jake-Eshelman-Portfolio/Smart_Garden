
Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e0c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08008fbc  08008fbc  00009fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe8  08008fe8  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe8  08008fe8  00009fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff0  08008ff0  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00009ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008ff8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a010  2**0
                  CONTENTS
 10 .bss          00000828  20000010  20000010  0000a010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000838  20000838  0000a010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026a9f  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000518c  00000000  00000000  00030adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  00035c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a38  00000000  00000000  00037e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aaad  00000000  00000000  00039858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000293ec  00000000  00000000  00064305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010065b  00000000  00000000  0008d6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018dd4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090c8  00000000  00000000  0018dd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00196e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008fa4 	.word	0x08008fa4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008fa4 	.word	0x08008fa4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b5b0      	push	{r4, r5, r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 f989 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f835 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fb39 	bl	8000b7c <MX_GPIO_Init>
  MX_ADC1_Init();
 800050a:	f000 f89b 	bl	8000644 <MX_ADC1_Init>
  MX_CRC_Init();
 800050e:	f000 f8eb 	bl	80006e8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000512:	f000 f8fd 	bl	8000710 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000516:	f000 fae1 	bl	8000adc <MX_FMC_Init>
  MX_I2C3_Init();
 800051a:	f000 f92b 	bl	8000774 <MX_I2C3_Init>
  MX_LTDC_Init();
 800051e:	f000 f969 	bl	80007f4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000522:	f000 f9e7 	bl	80008f4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000526:	f000 fa1b 	bl	8000960 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800052a:	f000 faad 	bl	8000a88 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800052e:	f000 fa67 	bl	8000a00 <MX_TIM9_Init>
  Motor_Init();
 8000532:	f000 fc4b 	bl	8000dcc <Motor_Init>
  /* USER CODE BEGIN 2 */

  char msg[] = "Init complete!\r\n";
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <main+0x70>)
 8000538:	1d3c      	adds	r4, r7, #4
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	682b      	ldr	r3, [r5, #0]
 8000542:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8000544:	1d39      	adds	r1, r7, #4
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
 800054a:	2210      	movs	r2, #16
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <main+0x74>)
 800054e:	f006 fb59 	bl	8006c04 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Motor_SetSpeed(500);  // Set speed (0-65535 for 16-bit timer)
	  Motor_Forward();
 8000552:	f000 fc45 	bl	8000de0 <Motor_Forward>
	  HAL_Delay(2000);  // Run forward for 2 seconds
 8000556:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800055a:	f001 f99d 	bl	8001898 <HAL_Delay>
	  Motor_Stop();
 800055e:	f000 fc4f 	bl	8000e00 <Motor_Stop>
	  Motor_Forward();
 8000562:	bf00      	nop
 8000564:	e7f5      	b.n	8000552 <main+0x5a>
 8000566:	bf00      	nop
 8000568:	08008fbc 	.word	0x08008fbc
 800056c:	200002a0 	.word	0x200002a0

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f008 fcd6 	bl	8008f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a27      	ldr	r2, [pc, #156]	@ (800063c <SystemClock_Config+0xcc>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005bc:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <SystemClock_Config+0xd0>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e8:	2348      	movs	r3, #72	@ 0x48
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f0:	2303      	movs	r3, #3
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 fb47 	bl	8004c8c <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 fbdc 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2102      	movs	r1, #2
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fda9 	bl	800517c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 fbc6 	bl	8000dc0 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3750      	adds	r7, #80	@ 0x50
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000684:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC1_Init+0xa0>)
 8000686:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000690:	2201      	movs	r2, #1
 8000692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC1_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	@ (80006dc <MX_ADC1_Init+0x98>)
 80006a4:	f001 f91c 	bl	80018e0 <HAL_ADC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f000 fb87 	bl	8000dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_ADC1_Init+0x98>)
 80006c4:	f001 f950 	bl	8001968 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 fb77 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_CRC_Init+0x20>)
 80006ee:	4a07      	ldr	r2, [pc, #28]	@ (800070c <MX_CRC_Init+0x24>)
 80006f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_CRC_Init+0x20>)
 80006f4:	f001 fc48 	bl	8001f88 <HAL_CRC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006fe:	f000 fb5f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000074 	.word	0x20000074
 800070c:	40023000 	.word	0x40023000

08000710 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000716:	4a16      	ldr	r2, [pc, #88]	@ (8000770 <MX_DMA2D_Init+0x60>)
 8000718:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_DMA2D_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_DMA2D_Init+0x5c>)
 800073a:	2200      	movs	r2, #0
 800073c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000746:	f001 fc3b 	bl	8001fc0 <HAL_DMA2D_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000750:	f000 fb36 	bl	8000dc0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000754:	2101      	movs	r1, #1
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_DMA2D_Init+0x5c>)
 8000758:	f001 fd8c 	bl	8002274 <HAL_DMA2D_ConfigLayer>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000762:	f000 fb2d 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000007c 	.word	0x2000007c
 8000770:	4002b000 	.word	0x4002b000

08000774 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_I2C3_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <MX_I2C3_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_I2C3_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	@ (80007f0 <MX_I2C3_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_I2C3_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_I2C3_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_I2C3_Init+0x74>)
 8000792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_I2C3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_I2C3_Init+0x74>)
 80007b2:	f003 fd43 	bl	800423c <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fb00 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <MX_I2C3_Init+0x74>)
 80007c4:	f003 fe7e 	bl	80044c4 <HAL_I2CEx_ConfigAnalogFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007ce:	f000 faf7 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_I2C3_Init+0x74>)
 80007d6:	f003 feb1 	bl	800453c <HAL_I2CEx_ConfigDigitalFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 faee 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	40005c00 	.word	0x40005c00
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	@ 0x38
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2234      	movs	r2, #52	@ 0x34
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f008 fb95 	bl	8008f30 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000806:	4b39      	ldr	r3, [pc, #228]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000808:	4a39      	ldr	r2, [pc, #228]	@ (80008f0 <MX_LTDC_Init+0xfc>)
 800080a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800080c:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000812:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800081e:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000826:	2209      	movs	r2, #9
 8000828:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800082a:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000830:	4b2e      	ldr	r3, [pc, #184]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000832:	221d      	movs	r2, #29
 8000834:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000838:	2203      	movs	r2, #3
 800083a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800083c:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800083e:	f240 120d 	movw	r2, #269	@ 0x10d
 8000842:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000844:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000846:	f240 1243 	movw	r2, #323	@ 0x143
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800084e:	f240 1217 	movw	r2, #279	@ 0x117
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000856:	f240 1247 	movw	r2, #327	@ 0x147
 800085a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_LTDC_Init+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000874:	481d      	ldr	r0, [pc, #116]	@ (80008ec <MX_LTDC_Init+0xf8>)
 8000876:	f003 fea1 	bl	80045bc <HAL_LTDC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000880:	f000 fa9e 	bl	8000dc0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000888:	23f0      	movs	r3, #240	@ 0xf0
 800088a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000890:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000894:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800089a:	23ff      	movs	r3, #255	@ 0xff
 800089c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008a6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008a8:	2307      	movs	r3, #7
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008ac:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80008b2:	23f0      	movs	r3, #240	@ 0xf0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80008b6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_LTDC_Init+0xf8>)
 80008d6:	f004 f803 	bl	80048e0 <HAL_LTDC_ConfigLayer>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008e0:	f000 fa6e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3738      	adds	r7, #56	@ 0x38
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000110 	.word	0x20000110
 80008f0:	40016800 	.word	0x40016800

080008f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_SPI5_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	@ (800095c <MX_SPI5_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_SPI5_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_SPI5_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000928:	2218      	movs	r2, #24
 800092a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_SPI5_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_SPI5_Init+0x64>)
 8000946:	f005 f85f 	bl	8005a08 <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 fa36 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001b8 	.word	0x200001b8
 800095c:	40015000 	.word	0x40015000

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_TIM1_Init+0x98>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	@ (80009fc <MX_TIM1_Init+0x9c>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_TIM1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_TIM1_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_TIM1_Init+0x98>)
 8000990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_TIM1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_TIM1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a8:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009aa:	f005 f8b6 	bl	8005b1a <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 fa04 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009c6:	f005 fc31 	bl	800622c <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009d0:	f000 f9f6 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009e2:	f006 f82f 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009ec:	f000 f9e8 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000210 	.word	0x20000210
 80009fc:	40010000 	.word	0x40010000

08000a00 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a84 <MX_TIM9_Init+0x84>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a20:	2247      	movs	r2, #71	@ 0x47
 8000a22:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a2c:	2263      	movs	r2, #99	@ 0x63
 8000a2e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a3e:	f005 f92b 	bl	8005c98 <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 f9ba 	bl	8000dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4c:	2360      	movs	r3, #96	@ 0x60
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000a50:	2332      	movs	r3, #50	@ 0x32
 8000a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a64:	f005 fb20 	bl	80060a8 <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f000 f9a7 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000a72:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <MX_TIM9_Init+0x80>)
 8000a74:	f000 fcb4 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000258 	.word	0x20000258
 8000a84:	40014000 	.word	0x40014000

08000a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f006 f850 	bl	8006b64 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f979 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200002a0 	.word	0x200002a0
 8000ad8:	40011000 	.word	0x40011000

08000adc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000af6:	4a20      	ldr	r2, [pc, #128]	@ (8000b78 <MX_FMC_Init+0x9c>)
 8000af8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b08:	2204      	movs	r2, #4
 8000b0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b12:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b14:	2240      	movs	r2, #64	@ 0x40
 8000b16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_FMC_Init+0x98>)
 8000b5e:	f004 ff1f 	bl	80059a0 <HAL_SDRAM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b68:	f000 f92a 	bl	8000dc0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200002e8 	.word	0x200002e8
 8000b78:	a0000140 	.word	0xa0000140

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	4b7b      	ldr	r3, [pc, #492]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a7a      	ldr	r2, [pc, #488]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b78      	ldr	r3, [pc, #480]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	4b74      	ldr	r3, [pc, #464]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a73      	ldr	r2, [pc, #460]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b71      	ldr	r3, [pc, #452]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4b6d      	ldr	r3, [pc, #436]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b6a      	ldr	r3, [pc, #424]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b66      	ldr	r3, [pc, #408]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a65      	ldr	r2, [pc, #404]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b63      	ldr	r3, [pc, #396]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b5f      	ldr	r3, [pc, #380]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b5c      	ldr	r3, [pc, #368]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b58      	ldr	r3, [pc, #352]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a57      	ldr	r2, [pc, #348]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b55      	ldr	r3, [pc, #340]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b51      	ldr	r3, [pc, #324]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a50      	ldr	r2, [pc, #320]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a49      	ldr	r2, [pc, #292]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b47      	ldr	r3, [pc, #284]	@ (8000d84 <MX_GPIO_Init+0x208>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2116      	movs	r1, #22
 8000c76:	4844      	ldr	r0, [pc, #272]	@ (8000d88 <MX_GPIO_Init+0x20c>)
 8000c78:	f001 fd3a 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	4842      	ldr	r0, [pc, #264]	@ (8000d8c <MX_GPIO_Init+0x210>)
 8000c82:	f001 fd35 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c8c:	4840      	ldr	r0, [pc, #256]	@ (8000d90 <MX_GPIO_Init+0x214>)
 8000c8e:	f001 fd2f 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c98:	483e      	ldr	r0, [pc, #248]	@ (8000d94 <MX_GPIO_Init+0x218>)
 8000c9a:	f001 fd29 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c9e:	2316      	movs	r3, #22
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4834      	ldr	r0, [pc, #208]	@ (8000d88 <MX_GPIO_Init+0x20c>)
 8000cb6:	f001 fb6f 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cba:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482e      	ldr	r0, [pc, #184]	@ (8000d8c <MX_GPIO_Init+0x210>)
 8000cd2:	f001 fb61 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4827      	ldr	r0, [pc, #156]	@ (8000d8c <MX_GPIO_Init+0x210>)
 8000cee:	f001 fb53 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4820      	ldr	r0, [pc, #128]	@ (8000d88 <MX_GPIO_Init+0x20c>)
 8000d08:	f001 fb46 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481e      	ldr	r0, [pc, #120]	@ (8000d98 <MX_GPIO_Init+0x21c>)
 8000d20:	f001 fb3a 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4815      	ldr	r0, [pc, #84]	@ (8000d90 <MX_GPIO_Init+0x214>)
 8000d3a:	f001 fb2d 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d3e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	480e      	ldr	r0, [pc, #56]	@ (8000d90 <MX_GPIO_Init+0x214>)
 8000d58:	f001 fb1e 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d5c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MX_GPIO_Init+0x218>)
 8000d76:	f001 fb0f 	bl	8002398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	@ 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020400 	.word	0x40020400

08000d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dae:	f000 fd53 	bl	8001858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40001000 	.word	0x40001000

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <Motor_Init>:

// Global variables
extern TIM_HandleTypeDef htim9;  // Assuming TIM9 for PWM

void Motor_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Start PWM on PE5
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <Motor_Init+0x10>)
 8000dd4:	f004 ffb0 	bl	8005d38 <HAL_TIM_PWM_Start>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000258 	.word	0x20000258

08000de0 <Motor_Forward>:
    // Assuming 16-bit timer, adjust if different
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
}

void Motor_Forward(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);    // IN1 High
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <Motor_Forward+0x1c>)
 8000dea:	f001 fc81 	bl	80026f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // IN2 Low
 8000dee:	2200      	movs	r2, #0
 8000df0:	2102      	movs	r1, #2
 8000df2:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <Motor_Forward+0x1c>)
 8000df4:	f001 fc7c 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40020000 	.word	0x40020000

08000e00 <Motor_Stop>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // IN1 Low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);    // IN2 High
}

void Motor_Stop(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // IN1 Low
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <Motor_Stop+0x1c>)
 8000e0a:	f001 fc71 	bl	80026f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // IN2 Low
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2102      	movs	r1, #2
 8000e12:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <Motor_Stop+0x1c>)
 8000e14:	f001 fc6c 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_MspInit+0x54>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a11      	ldr	r2, [pc, #68]	@ (8000e74 <HAL_MspInit+0x54>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_MspInit+0x54>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_MspInit+0x54>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_MspInit+0x54>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_MspInit+0x54>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210f      	movs	r1, #15
 8000e62:	f06f 0001 	mvn.w	r0, #1
 8000e66:	f001 f865 	bl	8001f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <HAL_ADC_MspInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d127      	bne.n	8000eea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_ADC_MspInit+0x80>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_ADC_MspInit+0x84>)
 8000ee6:	f001 fa57 	bl	8002398 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	@ 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40012000 	.word	0x40012000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <HAL_CRC_MspInit+0x3c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10d      	bne.n	8000f2e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_CRC_MspInit+0x40>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023000 	.word	0x40023000
 8000f40:	40023800 	.word	0x40023800

08000f44 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_DMA2D_MspInit+0x48>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d115      	bne.n	8000f82 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_DMA2D_MspInit+0x4c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <HAL_DMA2D_MspInit+0x4c>)
 8000f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_DMA2D_MspInit+0x4c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	205a      	movs	r0, #90	@ 0x5a
 8000f78:	f000 ffdc 	bl	8001f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f7c:	205a      	movs	r0, #90	@ 0x5a
 8000f7e:	f000 fff5 	bl	8001f6c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	4002b000 	.word	0x4002b000
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a29      	ldr	r2, [pc, #164]	@ (8001058 <HAL_I2C_MspInit+0xc4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d14b      	bne.n	800104e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b25      	ldr	r3, [pc, #148]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a20      	ldr	r2, [pc, #128]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001000:	2304      	movs	r3, #4
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4815      	ldr	r0, [pc, #84]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 800100c:	f001 f9c4 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001022:	2304      	movs	r3, #4
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <HAL_I2C_MspInit+0xd0>)
 800102e:	f001 f9b3 	bl	8002398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 800103c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40005c00 	.word	0x40005c00
 800105c:	40023800 	.word	0x40023800
 8001060:	40020800 	.word	0x40020800
 8001064:	40020000 	.word	0x40020000

08001068 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09a      	sub	sp, #104	@ 0x68
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001084:	2230      	movs	r2, #48	@ 0x30
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f007 ff51 	bl	8008f30 <memset>
  if(hltdc->Instance==LTDC)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a85      	ldr	r2, [pc, #532]	@ (80012a8 <HAL_LTDC_MspInit+0x240>)
 8001094:	4293      	cmp	r3, r2
 8001096:	f040 8102 	bne.w	800129e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800109a:	2308      	movs	r3, #8
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800109e:	2332      	movs	r3, #50	@ 0x32
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fab6 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80010ba:	f7ff fe81 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	4b7a      	ldr	r3, [pc, #488]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a79      	ldr	r2, [pc, #484]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b77      	ldr	r3, [pc, #476]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	4b73      	ldr	r3, [pc, #460]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a72      	ldr	r2, [pc, #456]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b70      	ldr	r3, [pc, #448]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a6b      	ldr	r2, [pc, #428]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a64      	ldr	r2, [pc, #400]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b62      	ldr	r3, [pc, #392]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a5d      	ldr	r2, [pc, #372]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a56      	ldr	r2, [pc, #344]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b54      	ldr	r3, [pc, #336]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b50      	ldr	r3, [pc, #320]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a4f      	ldr	r2, [pc, #316]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b4d      	ldr	r3, [pc, #308]	@ (80012ac <HAL_LTDC_MspInit+0x244>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001186:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001194:	230e      	movs	r3, #14
 8001196:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800119c:	4619      	mov	r1, r3
 800119e:	4844      	ldr	r0, [pc, #272]	@ (80012b0 <HAL_LTDC_MspInit+0x248>)
 80011a0:	f001 f8fa 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011a4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80011a8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b6:	230e      	movs	r3, #14
 80011b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011be:	4619      	mov	r1, r3
 80011c0:	483c      	ldr	r0, [pc, #240]	@ (80012b4 <HAL_LTDC_MspInit+0x24c>)
 80011c2:	f001 f8e9 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011c6:	2303      	movs	r3, #3
 80011c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011d6:	2309      	movs	r3, #9
 80011d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011de:	4619      	mov	r1, r3
 80011e0:	4835      	ldr	r0, [pc, #212]	@ (80012b8 <HAL_LTDC_MspInit+0x250>)
 80011e2:	f001 f8d9 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011e6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f8:	230e      	movs	r3, #14
 80011fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	482d      	ldr	r0, [pc, #180]	@ (80012b8 <HAL_LTDC_MspInit+0x250>)
 8001204:	f001 f8c8 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001208:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800120c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121a:	230e      	movs	r3, #14
 800121c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001222:	4619      	mov	r1, r3
 8001224:	4825      	ldr	r0, [pc, #148]	@ (80012bc <HAL_LTDC_MspInit+0x254>)
 8001226:	f001 f8b7 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800122a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800122e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800123c:	230e      	movs	r3, #14
 800123e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001244:	4619      	mov	r1, r3
 8001246:	481e      	ldr	r0, [pc, #120]	@ (80012c0 <HAL_LTDC_MspInit+0x258>)
 8001248:	f001 f8a6 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800124c:	2348      	movs	r3, #72	@ 0x48
 800124e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125c:	230e      	movs	r3, #14
 800125e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001264:	4619      	mov	r1, r3
 8001266:	4817      	ldr	r0, [pc, #92]	@ (80012c4 <HAL_LTDC_MspInit+0x25c>)
 8001268:	f001 f896 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800126c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001270:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800127e:	2309      	movs	r3, #9
 8001280:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <HAL_LTDC_MspInit+0x254>)
 800128a:	f001 f885 	bl	8002398 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	2058      	movs	r0, #88	@ 0x58
 8001294:	f000 fe4e 	bl	8001f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001298:	2058      	movs	r0, #88	@ 0x58
 800129a:	f000 fe67 	bl	8001f6c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800129e:	bf00      	nop
 80012a0:	3768      	adds	r7, #104	@ 0x68
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40016800 	.word	0x40016800
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021400 	.word	0x40021400
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00

080012c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_SPI_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_SPI_MspInit+0x88>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_SPI_MspInit+0x88>)
 80012f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_SPI_MspInit+0x88>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_SPI_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	@ (8001350 <HAL_SPI_MspInit+0x88>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_SPI_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001322:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001334:	2305      	movs	r3, #5
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <HAL_SPI_MspInit+0x8c>)
 8001340:	f001 f82a 	bl	8002398 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40015000 	.word	0x40015000
 8001350:	40023800 	.word	0x40023800
 8001354:	40021400 	.word	0x40021400

08001358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_TIM_Base_MspInit+0x3c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_TIM_Base_MspInit+0x40>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_TIM_Base_MspInit+0x40>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <HAL_TIM_Base_MspInit+0x40>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40010000 	.word	0x40010000
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10d      	bne.n	80013ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_TIM_PWM_MspInit+0x40>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a09      	ldr	r2, [pc, #36]	@ (80013dc <HAL_TIM_PWM_MspInit+0x40>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_TIM_PWM_MspInit+0x40>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40014000 	.word	0x40014000
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_TIM_MspPostInit+0x68>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11d      	bne.n	800143e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141e:	2320      	movs	r3, #32
 8001420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800142e:	2303      	movs	r3, #3
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <HAL_TIM_MspPostInit+0x70>)
 800143a:	f000 ffad 	bl	8002398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40014000 	.word	0x40014000
 800144c:	40023800 	.word	0x40023800
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_UART_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12c      	bne.n	80014d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_UART_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_UART_MspInit+0x88>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <HAL_UART_MspInit+0x8c>)
 80014cc:	f000 ff64 	bl	8002398 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014f8:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <HAL_FMC_MspInit+0x104>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d16f      	bne.n	80015e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001500:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <HAL_FMC_MspInit+0x104>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 800150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150e:	4a37      	ldr	r2, [pc, #220]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6393      	str	r3, [r2, #56]	@ 0x38
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 8001518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001522:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001526:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001534:	230c      	movs	r3, #12
 8001536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	482c      	ldr	r0, [pc, #176]	@ (80015f0 <HAL_FMC_MspInit+0x10c>)
 800153e:	f000 ff2b 	bl	8002398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001552:	230c      	movs	r3, #12
 8001554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4826      	ldr	r0, [pc, #152]	@ (80015f4 <HAL_FMC_MspInit+0x110>)
 800155c:	f000 ff1c 	bl	8002398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001560:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001564:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	481f      	ldr	r0, [pc, #124]	@ (80015f8 <HAL_FMC_MspInit+0x114>)
 800157c:	f000 ff0c 	bl	8002398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001580:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001584:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <HAL_FMC_MspInit+0x118>)
 800159c:	f000 fefc 	bl	8002398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80015a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b2:	230c      	movs	r3, #12
 80015b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4811      	ldr	r0, [pc, #68]	@ (8001600 <HAL_FMC_MspInit+0x11c>)
 80015bc:	f000 feec 	bl	8002398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015c0:	2360      	movs	r3, #96	@ 0x60
 80015c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	480a      	ldr	r0, [pc, #40]	@ (8001604 <HAL_FMC_MspInit+0x120>)
 80015da:	f000 fedd 	bl	8002398 <HAL_GPIO_Init>
 80015de:	e000      	b.n	80015e2 <HAL_FMC_MspInit+0xfe>
    return;
 80015e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000031c 	.word	0x2000031c
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001610:	f7ff ff68 	bl	80014e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_InitTick+0xe4>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_InitTick+0xe4>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <HAL_InitTick+0xe4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f003 ffb2 	bl	80055bc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001662:	f003 ff83 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8001666:	6378      	str	r0, [r7, #52]	@ 0x34
 8001668:	e004      	b.n	8001674 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800166a:	f003 ff7f 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 800166e:	4603      	mov	r3, r0
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001676:	4a23      	ldr	r2, [pc, #140]	@ (8001704 <HAL_InitTick+0xe8>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	3b01      	subs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_InitTick+0xec>)
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <HAL_InitTick+0xf0>)
 8001686:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_InitTick+0xec>)
 800168a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800168e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_InitTick+0xec>)
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_InitTick+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_InitTick+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_InitTick+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016a8:	4817      	ldr	r0, [pc, #92]	@ (8001708 <HAL_InitTick+0xec>)
 80016aa:	f004 fa36 	bl	8005b1a <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11b      	bne.n	80016f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <HAL_InitTick+0xec>)
 80016be:	f004 fa7b 	bl	8005bb8 <HAL_TIM_Base_Start_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d0:	2036      	movs	r0, #54	@ 0x36
 80016d2:	f000 fc4b 	bl	8001f6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d808      	bhi.n	80016ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2036      	movs	r0, #54	@ 0x36
 80016e2:	f000 fc27 	bl	8001f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_InitTick+0xf4>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e002      	b.n	80016f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3738      	adds	r7, #56	@ 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	431bde83 	.word	0x431bde83
 8001708:	20000320 	.word	0x20000320
 800170c:	40001000 	.word	0x40001000
 8001710:	20000004 	.word	0x20000004

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <TIM6_DAC_IRQHandler+0x10>)
 8001752:	f004 fbb9 	bl	8005ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000320 	.word	0x20000320

08001760 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <OTG_HS_IRQHandler+0x10>)
 8001766:	f000 ffdc 	bl	8002722 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000458 	.word	0x20000458

08001774 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <LTDC_IRQHandler+0x10>)
 800177a:	f002 ffef 	bl	800475c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000110 	.word	0x20000110

08001788 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA2D_IRQHandler+0x10>)
 800178e:	f000 fc60 	bl	8002052 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000007c 	.word	0x2000007c

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c4:	f7ff ffea 	bl	800179c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	@ (8001800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	@ (800180c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f007 fba7 	bl	8008f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7fe fe81 	bl	80004f8 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001804:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 8001808:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800180c:	20000838 	.word	0x20000838

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 fb6e 	bl	8001f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff feea 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff faea 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	20000368 	.word	0x20000368

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000368 	.word	0x20000368

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e033      	b.n	800195e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff faba 	bl	8000e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001926:	f023 0302 	bic.w	r3, r3, #2
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f94a 	bl	8001bcc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
 800194e:	e001      	b.n	8001954 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1c>
 8001980:	2302      	movs	r3, #2
 8001982:	e113      	b.n	8001bac <HAL_ADC_ConfigChannel+0x244>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b09      	cmp	r3, #9
 8001992:	d925      	bls.n	80019e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68d9      	ldr	r1, [r3, #12]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	3b1e      	subs	r3, #30
 80019aa:	2207      	movs	r2, #7
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43da      	mvns	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	400a      	ands	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68d9      	ldr	r1, [r3, #12]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4403      	add	r3, r0
 80019d2:	3b1e      	subs	r3, #30
 80019d4:	409a      	lsls	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	e022      	b.n	8001a26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	2207      	movs	r2, #7
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	400a      	ands	r2, r1
 8001a02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6919      	ldr	r1, [r3, #16]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4403      	add	r3, r0
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d824      	bhi.n	8001a78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b05      	subs	r3, #5
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b05      	subs	r3, #5
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a76:	e04c      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d824      	bhi.n	8001aca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b23      	subs	r3, #35	@ 0x23
 8001a92:	221f      	movs	r2, #31
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b23      	subs	r3, #35	@ 0x23
 8001abc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac8:	e023      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b41      	subs	r3, #65	@ 0x41
 8001adc:	221f      	movs	r2, #31
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b41      	subs	r3, #65	@ 0x41
 8001b06:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b12:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x250>)
 8001b14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a28      	ldr	r2, [pc, #160]	@ (8001bbc <HAL_ADC_ConfigChannel+0x254>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d10f      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d8>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b12      	cmp	r3, #18
 8001b26:	d10b      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1d      	ldr	r2, [pc, #116]	@ (8001bbc <HAL_ADC_ConfigChannel+0x254>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12b      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x23a>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <HAL_ADC_ConfigChannel+0x258>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x1f4>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b11      	cmp	r3, #17
 8001b5a:	d122      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <HAL_ADC_ConfigChannel+0x258>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d111      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_ADC_ConfigChannel+0x25c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a11      	ldr	r2, [pc, #68]	@ (8001bc8 <HAL_ADC_ConfigChannel+0x260>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	0c9a      	lsrs	r2, r3, #18
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f9      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40012300 	.word	0x40012300
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	10000012 	.word	0x10000012
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	431bde83 	.word	0x431bde83

08001bcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd4:	4b79      	ldr	r3, [pc, #484]	@ (8001dbc <ADC_Init+0x1f0>)
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	021a      	lsls	r2, r3, #8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6899      	ldr	r1, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5e:	4a58      	ldr	r2, [pc, #352]	@ (8001dc0 <ADC_Init+0x1f4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6899      	ldr	r1, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6899      	ldr	r1, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e00f      	b.n	8001cca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cc8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0202 	bic.w	r2, r2, #2
 8001cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7e1b      	ldrb	r3, [r3, #24]
 8001ce4:	005a      	lsls	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d06:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	3b01      	subs	r3, #1
 8001d24:	035a      	lsls	r2, r3, #13
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	e007      	b.n	8001d40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d3e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	051a      	lsls	r2, r3, #20
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d82:	025a      	lsls	r2, r3, #9
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	029a      	lsls	r2, r3, #10
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	609a      	str	r2, [r3, #8]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40012300 	.word	0x40012300
 8001dc0:	0f000001 	.word	0x0f000001

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	@ (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff4c 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f46:	f7ff ff61 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	6978      	ldr	r0, [r7, #20]
 8001f52:	f7ff ffb1 	bl	8001eb8 <NVIC_EncodePriority>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff80 	bl	8001e64 <__NVIC_SetPriority>
}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff54 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	795b      	ldrb	r3, [r3, #5]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe ffa8 	bl	8000f00 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e03b      	b.n	800204a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe ffac 	bl	8000f44 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002010:	f023 0107 	bic.w	r1, r3, #7
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800202a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68d1      	ldr	r1, [r2, #12]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	430b      	orrs	r3, r1
 8002038:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d026      	beq.n	80020c2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d021      	beq.n	80020c2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800208c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2201      	movs	r2, #1
 80020a0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d026      	beq.n	800211a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d021      	beq.n	800211a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020e4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2220      	movs	r2, #32
 80020ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d026      	beq.n	8002172 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800212a:	2b00      	cmp	r3, #0
 800212c:	d021      	beq.n	8002172 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2208      	movs	r2, #8
 8002144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2204      	movs	r2, #4
 8002156:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002194:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2204      	movs	r2, #4
 800219c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f853 	bl	800224a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d024      	beq.n	80021f8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01f      	beq.n	80021f8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2202      	movs	r2, #2
 80021ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01f      	beq.n	8002242 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01a      	beq.n	8002242 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800221a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2210      	movs	r2, #16
 8002222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f80e 	bl	800225e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_DMA2D_ConfigLayer+0x20>
 8002290:	2302      	movs	r3, #2
 8002292:	e079      	b.n	8002388 <HAL_DMA2D_ConfigLayer+0x114>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	3318      	adds	r3, #24
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80022be:	4b35      	ldr	r3, [pc, #212]	@ (8002394 <HAL_DMA2D_ConfigLayer+0x120>)
 80022c0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b0a      	cmp	r3, #10
 80022c8:	d003      	beq.n	80022d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b09      	cmp	r3, #9
 80022d0:	d107      	bne.n	80022e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e005      	b.n	80022ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d120      	bne.n	8002336 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	ea02 0103 	and.w	r1, r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	430a      	orrs	r2, r1
 800230a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d003      	beq.n	8002326 <HAL_DMA2D_ConfigLayer+0xb2>
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b09      	cmp	r3, #9
 8002324:	d127      	bne.n	8002376 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
 8002334:	e01f      	b.n	8002376 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	ea02 0103 	and.w	r1, r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	430a      	orrs	r2, r1
 800234c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b0a      	cmp	r3, #10
 800235e:	d003      	beq.n	8002368 <HAL_DMA2D_ConfigLayer+0xf4>
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d106      	bne.n	8002376 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002374:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	ff03000f 	.word	0xff03000f

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	@ 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e177      	b.n	80026a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8166 	bne.w	800269e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d005      	beq.n	80023ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d130      	bne.n	800244c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 0201 	and.w	r2, r3, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b03      	cmp	r3, #3
 8002456:	d017      	beq.n	8002488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d123      	bne.n	80024dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	69b9      	ldr	r1, [r7, #24]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80c0 	beq.w	800269e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <HAL_GPIO_Init+0x324>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	4a65      	ldr	r2, [pc, #404]	@ (80026bc <HAL_GPIO_Init+0x324>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252c:	6453      	str	r3, [r2, #68]	@ 0x44
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_GPIO_Init+0x324>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253a:	4a61      	ldr	r2, [pc, #388]	@ (80026c0 <HAL_GPIO_Init+0x328>)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a58      	ldr	r2, [pc, #352]	@ (80026c4 <HAL_GPIO_Init+0x32c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d037      	beq.n	80025d6 <HAL_GPIO_Init+0x23e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a57      	ldr	r2, [pc, #348]	@ (80026c8 <HAL_GPIO_Init+0x330>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d031      	beq.n	80025d2 <HAL_GPIO_Init+0x23a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a56      	ldr	r2, [pc, #344]	@ (80026cc <HAL_GPIO_Init+0x334>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d02b      	beq.n	80025ce <HAL_GPIO_Init+0x236>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a55      	ldr	r2, [pc, #340]	@ (80026d0 <HAL_GPIO_Init+0x338>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d025      	beq.n	80025ca <HAL_GPIO_Init+0x232>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a54      	ldr	r2, [pc, #336]	@ (80026d4 <HAL_GPIO_Init+0x33c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01f      	beq.n	80025c6 <HAL_GPIO_Init+0x22e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a53      	ldr	r2, [pc, #332]	@ (80026d8 <HAL_GPIO_Init+0x340>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x22a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_GPIO_Init+0x344>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x226>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a51      	ldr	r2, [pc, #324]	@ (80026e0 <HAL_GPIO_Init+0x348>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x222>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a50      	ldr	r2, [pc, #320]	@ (80026e4 <HAL_GPIO_Init+0x34c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_GPIO_Init+0x350>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x21a>
 80025ae:	2309      	movs	r3, #9
 80025b0:	e012      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025b2:	230a      	movs	r3, #10
 80025b4:	e010      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025b6:	2308      	movs	r3, #8
 80025b8:	e00e      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025ba:	2307      	movs	r3, #7
 80025bc:	e00c      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025be:	2306      	movs	r3, #6
 80025c0:	e00a      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x240>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	@ (80026c0 <HAL_GPIO_Init+0x328>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ec <HAL_GPIO_Init+0x354>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261a:	4a34      	ldr	r2, [pc, #208]	@ (80026ec <HAL_GPIO_Init+0x354>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002620:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <HAL_GPIO_Init+0x354>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002644:	4a29      	ldr	r2, [pc, #164]	@ (80026ec <HAL_GPIO_Init+0x354>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264a:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <HAL_GPIO_Init+0x354>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266e:	4a1f      	ldr	r2, [pc, #124]	@ (80026ec <HAL_GPIO_Init+0x354>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002674:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <HAL_GPIO_Init+0x354>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002698:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <HAL_GPIO_Init+0x354>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f ae84 	bls.w	80023b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40021c00 	.word	0x40021c00
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40022400 	.word	0x40022400
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f004 fff3 	bl	8007724 <USB_GetMode>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	f040 80fb 	bne.w	800293c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f004 ffb6 	bl	80076bc <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80f1 	beq.w	800293a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f004 ffad 	bl	80076bc <USB_ReadInterrupts>
 8002762:	4603      	mov	r3, r0
 8002764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800276c:	d104      	bne.n	8002778 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002776:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f004 ff9d 	bl	80076bc <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800278c:	d104      	bne.n	8002798 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002796:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f004 ff8d 	bl	80076bc <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ac:	d104      	bne.n	80027b8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 ff7d 	bl	80076bc <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d103      	bne.n	80027d4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 ff6f 	bl	80076bc <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e8:	d120      	bne.n	800282c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80027f2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d113      	bne.n	800282c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002804:	2110      	movs	r1, #16
 8002806:	6938      	ldr	r0, [r7, #16]
 8002808:	f004 fea0 	bl	800754c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800280c:	6938      	ldr	r0, [r7, #16]
 800280e:	f004 fecf 	bl	80075b0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7a5b      	ldrb	r3, [r3, #9]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d105      	bne.n	8002826 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	4618      	mov	r0, r3
 8002822:	f004 ff8d 	bl	8007740 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 fafe 	bl	8008e28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f004 ff43 	bl	80076bc <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002840:	d102      	bne.n	8002848 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f001 fc87 	bl	8004156 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 ff35 	bl	80076bc <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d106      	bne.n	800286a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f006 fac7 	bl	8008df0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2208      	movs	r2, #8
 8002868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f004 ff24 	bl	80076bc <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800287e:	d139      	bne.n	80028f4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f004 ff98 	bl	80077ba <USB_HC_ReadInterrupt>
 800288a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e025      	b.n	80028de <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028bc:	d106      	bne.n	80028cc <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f859 	bl	800297c <HCD_HC_IN_IRQHandler>
 80028ca:	e005      	b.n	80028d8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 febb 	bl	800364e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	795b      	ldrb	r3, [r3, #5]
 80028e2:	461a      	mov	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d3d3      	bcc.n	8002892 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fedf 	bl	80076bc <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d101      	bne.n	800290c <HAL_HCD_IRQHandler+0x1ea>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_HCD_IRQHandler+0x1ec>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d014      	beq.n	800293c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0210 	bic.w	r2, r2, #16
 8002920:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f001 fb38 	bl	8003f98 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0210 	orr.w	r2, r2, #16
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	e000      	b.n	800293c <HAL_HCD_IRQHandler+0x21a>
      return;
 800293a:	bf00      	nop
    }
  }
}
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_HCD_Stop+0x16>
 8002954:	2302      	movs	r3, #2
 8002956:	e00d      	b.n	8002974 <HAL_HCD_Stop+0x32>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f005 f859 	bl	8007a1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f004 fea1 	bl	80076e2 <USB_ReadChInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d11a      	bne.n	80029e0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b6:	461a      	mov	r2, r3
 80029b8:	2304      	movs	r3, #4
 80029ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	@ 0x4d
 80029cc:	2207      	movs	r2, #7
 80029ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 feff 	bl	80077dc <USB_HC_Halt>
 80029de:	e09e      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 fe7a 	bl	80076e2 <USB_ReadChInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f8:	d11b      	bne.n	8002a32 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	334d      	adds	r3, #77	@ 0x4d
 8002a1e:	2208      	movs	r2, #8
 8002a20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fed6 	bl	80077dc <USB_HC_Halt>
 8002a30:	e075      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fe51 	bl	80076e2 <USB_ReadChInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11a      	bne.n	8002a80 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	2308      	movs	r3, #8
 8002a5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	@ 0x4d
 8002a6c:	2206      	movs	r2, #6
 8002a6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 feaf 	bl	80077dc <USB_HC_Halt>
 8002a7e:	e04e      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fe2a 	bl	80076e2 <USB_ReadChInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a98:	d11b      	bne.n	8002ad2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	334d      	adds	r3, #77	@ 0x4d
 8002abe:	2209      	movs	r2, #9
 8002ac0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fe86 	bl	80077dc <USB_HC_Halt>
 8002ad0:	e025      	b.n	8002b1e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 fe01 	bl	80076e2 <USB_ReadChInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae6:	2b80      	cmp	r3, #128	@ 0x80
 8002ae8:	d119      	bne.n	8002b1e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	334d      	adds	r3, #77	@ 0x4d
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fe5f 	bl	80077dc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 fddb 	bl	80076e2 <USB_ReadChInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b36:	d112      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fe4b 	bl	80077dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b58:	6093      	str	r3, [r2, #8]
 8002b5a:	f000 bd75 	b.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fdbb 	bl	80076e2 <USB_ReadChInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 8128 	bne.w	8002dc8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	2320      	movs	r3, #32
 8002b88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	331b      	adds	r3, #27
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d119      	bne.n	8002bd4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	331b      	adds	r3, #27
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	799b      	ldrb	r3, [r3, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3330      	adds	r3, #48	@ 0x30
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	1ac9      	subs	r1, r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4403      	add	r3, r0
 8002c10:	3338      	adds	r3, #56	@ 0x38
 8002c12:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334d      	adds	r3, #77	@ 0x4d
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3344      	adds	r3, #68	@ 0x44
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3326      	adds	r3, #38	@ 0x26
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3326      	adds	r3, #38	@ 0x26
 8002c74:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d110      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 fdaa 	bl	80077dc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2310      	movs	r3, #16
 8002c98:	6093      	str	r3, [r2, #8]
 8002c9a:	e03d      	b.n	8002d18 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3326      	adds	r3, #38	@ 0x26
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d00a      	beq.n	8002cc8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3326      	adds	r3, #38	@ 0x26
 8002cc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d127      	bne.n	8002d18 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	0151      	lsls	r1, r2, #5
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	440a      	add	r2, r1
 8002cde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ce2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ce6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334c      	adds	r3, #76	@ 0x4c
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	334c      	adds	r3, #76	@ 0x4c
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f006 f896 	bl	8008e44 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	799b      	ldrb	r3, [r3, #6]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d13b      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3338      	adds	r3, #56	@ 0x38
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4403      	add	r3, r0
 8002d40:	3328      	adds	r3, #40	@ 0x28
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	440b      	add	r3, r1
 8002d46:	1e59      	subs	r1, r3, #1
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4403      	add	r3, r0
 8002d56:	3328      	adds	r3, #40	@ 0x28
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8470 	beq.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	333c      	adds	r3, #60	@ 0x3c
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	f083 0301 	eor.w	r3, r3, #1
 8002d80:	b2d8      	uxtb	r0, r3
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	333c      	adds	r3, #60	@ 0x3c
 8002d90:	4602      	mov	r2, r0
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	f000 bc58 	b.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	333c      	adds	r3, #60	@ 0x3c
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2d8      	uxtb	r0, r3
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333c      	adds	r3, #60	@ 0x3c
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	f000 bc40 	b.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fc86 	bl	80076e2 <USB_ReadChInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d131      	bne.n	8002e44 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2320      	movs	r3, #32
 8002df0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	331a      	adds	r3, #26
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 841f 	bne.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	331b      	adds	r3, #27
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334d      	adds	r3, #77	@ 0x4d
 8002e2e:	2203      	movs	r2, #3
 8002e30:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fcce 	bl	80077dc <USB_HC_Halt>
 8002e40:	f000 bc02 	b.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 fc48 	bl	80076e2 <USB_ReadChInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	f040 8305 	bne.w	8003468 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	334d      	adds	r3, #77	@ 0x4d
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d114      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	334d      	adds	r3, #77	@ 0x4d
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	334c      	adds	r3, #76	@ 0x4c
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e2cc      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	334d      	adds	r3, #77	@ 0x4d
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d114      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334d      	adds	r3, #77	@ 0x4d
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334c      	adds	r3, #76	@ 0x4c
 8002eea:	2205      	movs	r2, #5
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e2ac      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	334d      	adds	r3, #77	@ 0x4d
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	d00b      	beq.n	8002f1e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	334d      	adds	r3, #77	@ 0x4d
 8002f16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	f040 80a6 	bne.w	800306a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	334d      	adds	r3, #77	@ 0x4d
 8002f2e:	2202      	movs	r2, #2
 8002f30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3344      	adds	r3, #68	@ 0x44
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4403      	add	r3, r0
 8002f52:	3344      	adds	r3, #68	@ 0x44
 8002f54:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3344      	adds	r3, #68	@ 0x44
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d943      	bls.n	8002ff4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3344      	adds	r3, #68	@ 0x44
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	331a      	adds	r3, #26
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d123      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	331b      	adds	r3, #27
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	331c      	adds	r3, #28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	0151      	lsls	r1, r2, #5
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	440a      	add	r2, r1
 8002fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334c      	adds	r3, #76	@ 0x4c
 8002fee:	2204      	movs	r2, #4
 8002ff0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ff2:	e229      	b.n	8003448 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	@ 0x4c
 8003004:	2202      	movs	r2, #2
 8003006:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3326      	adds	r3, #38	@ 0x26
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3326      	adds	r3, #38	@ 0x26
 800302e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003030:	2b02      	cmp	r3, #2
 8003032:	f040 8209 	bne.w	8003448 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800304c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003054:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003068:	e1ee      	b.n	8003448 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	334d      	adds	r3, #77	@ 0x4d
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b05      	cmp	r3, #5
 800307e:	f040 80c8 	bne.w	8003212 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	334d      	adds	r3, #77	@ 0x4d
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	331b      	adds	r3, #27
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 81ce 	bne.w	800344a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	3326      	adds	r3, #38	@ 0x26
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d16b      	bne.n	800319c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3348      	adds	r3, #72	@ 0x48
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4403      	add	r3, r0
 80030e4:	3348      	adds	r3, #72	@ 0x48
 80030e6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3348      	adds	r3, #72	@ 0x48
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d943      	bls.n	8003186 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3348      	adds	r3, #72	@ 0x48
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	331b      	adds	r3, #27
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3344      	adds	r3, #68	@ 0x44
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d809      	bhi.n	8003150 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	331c      	adds	r3, #28
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	0151      	lsls	r1, r2, #5
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	440a      	add	r2, r1
 8003166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800316a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334c      	adds	r3, #76	@ 0x4c
 8003180:	2204      	movs	r2, #4
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e014      	b.n	80031b0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334c      	adds	r3, #76	@ 0x4c
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e009      	b.n	80031b0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	334c      	adds	r3, #76	@ 0x4c
 80031ac:	2202      	movs	r2, #2
 80031ae:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3326      	adds	r3, #38	@ 0x26
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3326      	adds	r3, #38	@ 0x26
 80031d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d8:	2b02      	cmp	r3, #2
 80031da:	f040 8136 	bne.w	800344a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e11b      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334d      	adds	r3, #77	@ 0x4d
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b03      	cmp	r3, #3
 8003226:	f040 8081 	bne.w	800332c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334d      	adds	r3, #77	@ 0x4d
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	331b      	adds	r3, #27
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 80fa 	bne.w	800344a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	@ 0x4c
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	0151      	lsls	r1, r2, #5
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	440a      	add	r2, r1
 8003280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003288:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	0151      	lsls	r1, r2, #5
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	440a      	add	r2, r1
 80032a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	0151      	lsls	r1, r2, #5
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	440a      	add	r2, r1
 80032c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032c4:	f023 0320 	bic.w	r3, r3, #32
 80032c8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3326      	adds	r3, #38	@ 0x26
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3326      	adds	r3, #38	@ 0x26
 80032f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	f040 80a9 	bne.w	800344a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800330e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003316:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e08e      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334d      	adds	r3, #77	@ 0x4d
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b04      	cmp	r3, #4
 8003340:	d143      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334d      	adds	r3, #77	@ 0x4d
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	334c      	adds	r3, #76	@ 0x4c
 8003366:	2202      	movs	r2, #2
 8003368:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3326      	adds	r3, #38	@ 0x26
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3326      	adds	r3, #38	@ 0x26
 8003390:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003392:	2b02      	cmp	r3, #2
 8003394:	d159      	bne.n	800344a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033ac:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033b4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e03f      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334d      	adds	r3, #77	@ 0x4d
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d126      	bne.n	800342e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334d      	adds	r3, #77	@ 0x4d
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3344      	adds	r3, #68	@ 0x44
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	1c59      	adds	r1, r3, #1
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4403      	add	r3, r0
 8003414:	3344      	adds	r3, #68	@ 0x44
 8003416:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334c      	adds	r3, #76	@ 0x4c
 8003428:	2204      	movs	r2, #4
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e00d      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	334d      	adds	r3, #77	@ 0x4d
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b02      	cmp	r3, #2
 8003442:	f000 8100 	beq.w	8003646 <HCD_HC_IN_IRQHandler+0xcca>
 8003446:	e000      	b.n	800344a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003448:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334c      	adds	r3, #76	@ 0x4c
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f005 fcef 	bl	8008e44 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003466:	e0ef      	b.n	8003648 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f004 f936 	bl	80076e2 <USB_ReadChInterrupts>
 8003476:	4603      	mov	r3, r0
 8003478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d12f      	bne.n	80034e0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	2340      	movs	r3, #64	@ 0x40
 8003490:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334d      	adds	r3, #77	@ 0x4d
 80034a2:	2205      	movs	r2, #5
 80034a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	331a      	adds	r3, #26
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3344      	adds	r3, #68	@ 0x44
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 f97f 	bl	80077dc <USB_HC_Halt>
 80034de:	e0b3      	b.n	8003648 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f8fa 	bl	80076e2 <USB_ReadChInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	f040 80a7 	bne.w	8003648 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3326      	adds	r3, #38	@ 0x26
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d11b      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3344      	adds	r3, #68	@ 0x44
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334d      	adds	r3, #77	@ 0x4d
 8003534:	2204      	movs	r2, #4
 8003536:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f004 f94b 	bl	80077dc <USB_HC_Halt>
 8003546:	e03f      	b.n	80035c8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3326      	adds	r3, #38	@ 0x26
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3326      	adds	r3, #38	@ 0x26
 800356e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003570:	2b02      	cmp	r3, #2
 8003572:	d129      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3344      	adds	r3, #68	@ 0x44
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	799b      	ldrb	r3, [r3, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HCD_HC_IN_IRQHandler+0xc2a>
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	331b      	adds	r3, #27
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d110      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334d      	adds	r3, #77	@ 0x4d
 80035b6:	2204      	movs	r2, #4
 80035b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 f90a 	bl	80077dc <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	331b      	adds	r3, #27
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d129      	bne.n	8003632 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	331b      	adds	r3, #27
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	440a      	add	r2, r1
 8003608:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800360c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003610:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	440a      	add	r2, r1
 8003628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800362c:	f043 0320 	orr.w	r3, r3, #32
 8003630:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	2310      	movs	r3, #16
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	e000      	b.n	8003648 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003646:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f004 f838 	bl	80076e2 <USB_ReadChInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d11b      	bne.n	80036b4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2304      	movs	r3, #4
 800368c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334d      	adds	r3, #77	@ 0x4d
 800369e:	2207      	movs	r2, #7
 80036a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 f896 	bl	80077dc <USB_HC_Halt>
 80036b0:	f000 bc6f 	b.w	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f004 f810 	bl	80076e2 <USB_ReadChInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	f040 8082 	bne.w	80037d2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036da:	461a      	mov	r2, r3
 80036dc:	2320      	movs	r3, #32
 80036de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3319      	adds	r3, #25
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d124      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3319      	adds	r3, #25
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334c      	adds	r3, #76	@ 0x4c
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	334d      	adds	r3, #77	@ 0x4d
 800372e:	2203      	movs	r2, #3
 8003730:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f004 f84e 	bl	80077dc <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	331a      	adds	r3, #26
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	f040 841d 	bne.w	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	331b      	adds	r3, #27
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 8411 	bne.w	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	3326      	adds	r3, #38	@ 0x26
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d009      	beq.n	800379a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	331b      	adds	r3, #27
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	334d      	adds	r3, #77	@ 0x4d
 80037aa:	2203      	movs	r2, #3
 80037ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 f810 	bl	80077dc <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3344      	adds	r3, #68	@ 0x44
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e3df      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f003 ff81 	bl	80076e2 <USB_ReadChInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ea:	d111      	bne.n	8003810 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f003 ffe7 	bl	80077dc <USB_HC_Halt>
 800380e:	e3c0      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f003 ff62 	bl	80076e2 <USB_ReadChInterrupts>
 800381e:	4603      	mov	r3, r0
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d168      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3344      	adds	r3, #68	@ 0x44
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f003 ff4c 	bl	80076e2 <USB_ReadChInterrupts>
 800384a:	4603      	mov	r3, r0
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d112      	bne.n	800387a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3319      	adds	r3, #25
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003874:	461a      	mov	r2, r3
 8003876:	2340      	movs	r3, #64	@ 0x40
 8003878:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	331b      	adds	r3, #27
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d019      	beq.n	80038c4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	331b      	adds	r3, #27
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2301      	movs	r3, #1
 80038d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334d      	adds	r3, #77	@ 0x4d
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 ff72 	bl	80077dc <USB_HC_Halt>
 80038f8:	e34b      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f003 feed 	bl	80076e2 <USB_ReadChInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390e:	2b40      	cmp	r3, #64	@ 0x40
 8003910:	d139      	bne.n	8003986 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	334d      	adds	r3, #77	@ 0x4d
 8003922:	2205      	movs	r2, #5
 8003924:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	331a      	adds	r3, #26
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3319      	adds	r3, #25
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3344      	adds	r3, #68	@ 0x44
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f003 ff35 	bl	80077dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	2340      	movs	r3, #64	@ 0x40
 8003982:	6093      	str	r3, [r2, #8]
 8003984:	e305      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f003 fea7 	bl	80076e2 <USB_ReadChInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b08      	cmp	r3, #8
 800399c:	d11a      	bne.n	80039d4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2308      	movs	r3, #8
 80039ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	@ 0x4d
 80039c0:	2206      	movs	r2, #6
 80039c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 ff05 	bl	80077dc <USB_HC_Halt>
 80039d2:	e2de      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 fe80 	bl	80076e2 <USB_ReadChInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d144      	bne.n	8003a76 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3344      	adds	r3, #68	@ 0x44
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	334d      	adds	r3, #77	@ 0x4d
 8003a10:	2204      	movs	r2, #4
 8003a12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3319      	adds	r3, #25
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d114      	bne.n	8003a54 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3318      	adds	r3, #24
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3319      	adds	r3, #25
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 febd 	bl	80077dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2310      	movs	r3, #16
 8003a72:	6093      	str	r3, [r2, #8]
 8003a74:	e28d      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fe2f 	bl	80076e2 <USB_ReadChInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b80      	cmp	r3, #128	@ 0x80
 8003a8c:	d169      	bne.n	8003b62 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	799b      	ldrb	r3, [r3, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d111      	bne.n	8003aba <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334d      	adds	r3, #77	@ 0x4d
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 fe92 	bl	80077dc <USB_HC_Halt>
 8003ab8:	e049      	b.n	8003b4e <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3344      	adds	r3, #68	@ 0x44
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4403      	add	r3, r0
 8003ada:	3344      	adds	r3, #68	@ 0x44
 8003adc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d922      	bls.n	8003b3a <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3344      	adds	r3, #68	@ 0x44
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334c      	adds	r3, #76	@ 0x4c
 8003b18:	2204      	movs	r2, #4
 8003b1a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334c      	adds	r3, #76	@ 0x4c
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f005 f986 	bl	8008e44 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b38:	e009      	b.n	8003b4e <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	334c      	adds	r3, #76	@ 0x4c
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	6093      	str	r3, [r2, #8]
 8003b60:	e217      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 fdb9 	bl	80076e2 <USB_ReadChInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d11b      	bne.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334d      	adds	r3, #77	@ 0x4d
 8003b8c:	2209      	movs	r2, #9
 8003b8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fe1f 	bl	80077dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003baa:	461a      	mov	r2, r3
 8003bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bb0:	6093      	str	r3, [r2, #8]
 8003bb2:	e1ee      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fd90 	bl	80076e2 <USB_ReadChInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f040 81df 	bne.w	8003f8c <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2302      	movs	r3, #2
 8003bde:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	334d      	adds	r3, #77	@ 0x4d
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 8093 	bne.w	8003d1e <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2202      	movs	r2, #2
 8003c0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	334c      	adds	r3, #76	@ 0x4c
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3326      	adds	r3, #38	@ 0x26
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d00b      	beq.n	8003c4e <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3326      	adds	r3, #38	@ 0x26
 8003c46:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	f040 8190 	bne.w	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	799b      	ldrb	r3, [r3, #6]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	333d      	adds	r3, #61	@ 0x3d
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	f083 0301 	eor.w	r3, r3, #1
 8003c6e:	b2d8      	uxtb	r0, r3
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	333d      	adds	r3, #61	@ 0x3d
 8003c7e:	4602      	mov	r2, r0
 8003c80:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	799b      	ldrb	r3, [r3, #6]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	f040 8171 	bne.w	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3334      	adds	r3, #52	@ 0x34
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8165 	beq.w	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3334      	adds	r3, #52	@ 0x34
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4403      	add	r3, r0
 8003cc4:	3328      	adds	r3, #40	@ 0x28
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	440b      	add	r3, r1
 8003cca:	1e59      	subs	r1, r3, #1
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4403      	add	r3, r0
 8003cda:	3328      	adds	r3, #40	@ 0x28
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 813f 	beq.w	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	333d      	adds	r3, #61	@ 0x3d
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	f083 0301 	eor.w	r3, r3, #1
 8003d08:	b2d8      	uxtb	r0, r3
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	333d      	adds	r3, #61	@ 0x3d
 8003d18:	4602      	mov	r2, r0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e127      	b.n	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	334d      	adds	r3, #77	@ 0x4d
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d120      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	334d      	adds	r3, #77	@ 0x4d
 8003d44:	2202      	movs	r2, #2
 8003d46:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	331b      	adds	r3, #27
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	f040 8107 	bne.w	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	334c      	adds	r3, #76	@ 0x4c
 8003d70:	2202      	movs	r2, #2
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e0fb      	b.n	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334d      	adds	r3, #77	@ 0x4d
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d13a      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334d      	adds	r3, #77	@ 0x4d
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334c      	adds	r3, #76	@ 0x4c
 8003db0:	2202      	movs	r2, #2
 8003db2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	331b      	adds	r3, #27
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	f040 80d1 	bne.w	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	331b      	adds	r3, #27
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfe:	6053      	str	r3, [r2, #4]
 8003e00:	e0b5      	b.n	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b05      	cmp	r3, #5
 8003e16:	d114      	bne.n	8003e42 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	334d      	adds	r3, #77	@ 0x4d
 8003e28:	2202      	movs	r2, #2
 8003e2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334c      	adds	r3, #76	@ 0x4c
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e095      	b.n	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334d      	adds	r3, #77	@ 0x4d
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d114      	bne.n	8003e82 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334d      	adds	r3, #77	@ 0x4d
 8003e68:	2202      	movs	r2, #2
 8003e6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	334c      	adds	r3, #76	@ 0x4c
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e075      	b.n	8003f6e <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	334d      	adds	r3, #77	@ 0x4d
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b07      	cmp	r3, #7
 8003e96:	d00a      	beq.n	8003eae <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334d      	adds	r3, #77	@ 0x4d
 8003ea8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	d170      	bne.n	8003f90 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334d      	adds	r3, #77	@ 0x4d
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3344      	adds	r3, #68	@ 0x44
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1c59      	adds	r1, r3, #1
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4403      	add	r3, r0
 8003ee2:	3344      	adds	r3, #68	@ 0x44
 8003ee4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3344      	adds	r3, #68	@ 0x44
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d914      	bls.n	8003f26 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	3344      	adds	r3, #68	@ 0x44
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334c      	adds	r3, #76	@ 0x4c
 8003f20:	2204      	movs	r2, #4
 8003f22:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f24:	e022      	b.n	8003f6c <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	334c      	adds	r3, #76	@ 0x4c
 8003f36:	2202      	movs	r2, #2
 8003f38:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f50:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f58:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f6c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334c      	adds	r3, #76	@ 0x4c
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f004 ff5d 	bl	8008e44 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f8a:	e002      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003f90:	bf00      	nop
  }
}
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	0c5b      	lsrs	r3, r3, #17
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fcc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d004      	beq.n	8003fde <HCD_RXQLVL_IRQHandler+0x46>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	f000 80b6 	beq.w	8004148 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003fdc:	e0b7      	b.n	800414e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80b3 	beq.w	800414c <HCD_RXQLVL_IRQHandler+0x1b4>
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	332c      	adds	r3, #44	@ 0x2c
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80a7 	beq.w	800414c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3338      	adds	r3, #56	@ 0x38
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	18d1      	adds	r1, r2, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4403      	add	r3, r0
 8004022:	3334      	adds	r3, #52	@ 0x34
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4299      	cmp	r1, r3
 8004028:	f200 8083 	bhi.w	8004132 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	332c      	adds	r3, #44	@ 0x2c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	b292      	uxth	r2, r2
 8004046:	4619      	mov	r1, r3
 8004048:	f003 fae0 	bl	800760c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	332c      	adds	r3, #44	@ 0x2c
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	18d1      	adds	r1, r2, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4403      	add	r3, r0
 8004070:	332c      	adds	r3, #44	@ 0x2c
 8004072:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3338      	adds	r3, #56	@ 0x38
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	18d1      	adds	r1, r2, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4403      	add	r3, r0
 8004098:	3338      	adds	r3, #56	@ 0x38
 800409a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	0cdb      	lsrs	r3, r3, #19
 80040ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	3328      	adds	r3, #40	@ 0x28
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d13f      	bne.n	800414c <HCD_RXQLVL_IRQHandler+0x1b4>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d03c      	beq.n	800414c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040e8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040f0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	333c      	adds	r3, #60	@ 0x3c
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	f083 0301 	eor.w	r3, r3, #1
 800411a:	b2d8      	uxtb	r0, r3
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	333c      	adds	r3, #60	@ 0x3c
 800412c:	4602      	mov	r2, r0
 800412e:	701a      	strb	r2, [r3, #0]
      break;
 8004130:	e00c      	b.n	800414c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	334c      	adds	r3, #76	@ 0x4c
 8004142:	2204      	movs	r2, #4
 8004144:	701a      	strb	r2, [r3, #0]
      break;
 8004146:	e001      	b.n	800414c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800414c:	bf00      	nop
  }
}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	@ 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004182:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d10b      	bne.n	80041a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f004 fe37 	bl	8008e0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d132      	bne.n	8004216 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f043 0308 	orr.w	r3, r3, #8
 80041b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d126      	bne.n	8004210 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7a5b      	ldrb	r3, [r3, #9]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d113      	bne.n	80041f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80041d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041d4:	d106      	bne.n	80041e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 faaf 	bl	8007740 <USB_InitFSLSPClkSel>
 80041e2:	e011      	b.n	8004208 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f003 faa8 	bl	8007740 <USB_InitFSLSPClkSel>
 80041f0:	e00a      	b.n	8004208 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	79db      	ldrb	r3, [r3, #7]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d106      	bne.n	8004208 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004200:	461a      	mov	r2, r3
 8004202:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004206:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f004 fe2d 	bl	8008e68 <HAL_HCD_PortEnabled_Callback>
 800420e:	e002      	b.n	8004216 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f004 fe37 	bl	8008e84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b20      	cmp	r3, #32
 800421e:	d103      	bne.n	8004228 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f043 0320 	orr.w	r3, r3, #32
 8004226:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e12b      	b.n	80044a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc fe96 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800428e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800429e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a0:	f001 f964 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80042a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a81      	ldr	r2, [pc, #516]	@ (80044b0 <HAL_I2C_Init+0x274>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d807      	bhi.n	80042c0 <HAL_I2C_Init+0x84>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a80      	ldr	r2, [pc, #512]	@ (80044b4 <HAL_I2C_Init+0x278>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	bf94      	ite	ls
 80042b8:	2301      	movls	r3, #1
 80042ba:	2300      	movhi	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e006      	b.n	80042ce <HAL_I2C_Init+0x92>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a7d      	ldr	r2, [pc, #500]	@ (80044b8 <HAL_I2C_Init+0x27c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bf94      	ite	ls
 80042c8:	2301      	movls	r3, #1
 80042ca:	2300      	movhi	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0e7      	b.n	80044a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a78      	ldr	r2, [pc, #480]	@ (80044bc <HAL_I2C_Init+0x280>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a6a      	ldr	r2, [pc, #424]	@ (80044b0 <HAL_I2C_Init+0x274>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d802      	bhi.n	8004310 <HAL_I2C_Init+0xd4>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	e009      	b.n	8004324 <HAL_I2C_Init+0xe8>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	4a69      	ldr	r2, [pc, #420]	@ (80044c0 <HAL_I2C_Init+0x284>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	3301      	adds	r3, #1
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004336:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	495c      	ldr	r1, [pc, #368]	@ (80044b0 <HAL_I2C_Init+0x274>)
 8004340:	428b      	cmp	r3, r1
 8004342:	d819      	bhi.n	8004378 <HAL_I2C_Init+0x13c>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e59      	subs	r1, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004358:	400b      	ands	r3, r1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_I2C_Init+0x138>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1e59      	subs	r1, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	fbb1 f3f3 	udiv	r3, r1, r3
 800436c:	3301      	adds	r3, #1
 800436e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004372:	e051      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 8004374:	2304      	movs	r3, #4
 8004376:	e04f      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <HAL_I2C_Init+0x168>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e58      	subs	r0, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	440b      	add	r3, r1
 800438e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e012      	b.n	80043ca <HAL_I2C_Init+0x18e>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	0099      	lsls	r1, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ba:	3301      	adds	r3, #1
 80043bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Init+0x196>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e022      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10e      	bne.n	80043f8 <HAL_I2C_Init+0x1bc>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e58      	subs	r0, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	440b      	add	r3, r1
 80043e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f6:	e00f      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	0099      	lsls	r1, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	6809      	ldr	r1, [r1, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004446:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6911      	ldr	r1, [r2, #16]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68d2      	ldr	r2, [r2, #12]
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	430b      	orrs	r3, r1
 800445a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	000186a0 	.word	0x000186a0
 80044b4:	001e847f 	.word	0x001e847f
 80044b8:	003d08ff 	.word	0x003d08ff
 80044bc:	431bde83 	.word	0x431bde83
 80044c0:	10624dd3 	.word	0x10624dd3

080044c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d129      	bne.n	800452e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2224      	movs	r2, #36	@ 0x24
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0210 	bic.w	r2, r2, #16
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	d12a      	bne.n	80045ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2224      	movs	r2, #36	@ 0x24
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	f023 030f 	bic.w	r3, r3, #15
 800457c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b29a      	uxth	r2, r3
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	4313      	orrs	r3, r2
 8004586:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	89fa      	ldrh	r2, [r7, #14]
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0bf      	b.n	800474e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fd40 	bl	8001068 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80045fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6999      	ldr	r1, [r3, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004614:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b4a      	ldr	r3, [pc, #296]	@ (8004758 <HAL_LTDC_Init+0x19c>)
 8004630:	400b      	ands	r3, r1
 8004632:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68d9      	ldr	r1, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b3e      	ldr	r3, [pc, #248]	@ (8004758 <HAL_LTDC_Init+0x19c>)
 800465e:	400b      	ands	r3, r1
 8004660:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68d9      	ldr	r1, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6919      	ldr	r1, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b33      	ldr	r3, [pc, #204]	@ (8004758 <HAL_LTDC_Init+0x19c>)
 800468c:	400b      	ands	r3, r1
 800468e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <HAL_LTDC_Init+0x19c>)
 80046ba:	400b      	ands	r3, r1
 80046bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6959      	ldr	r1, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80046fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0206 	orr.w	r2, r2, #6
 800472a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	f000f800 	.word	0xf000f800

0800475c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d023      	beq.n	80047c6 <HAL_LTDC_IRQHandler+0x6a>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01e      	beq.n	80047c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2204      	movs	r2, #4
 80047b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f86f 	bl	80048a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d023      	beq.n	8004818 <HAL_LTDC_IRQHandler+0xbc>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01e      	beq.n	8004818 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0202 	bic.w	r2, r2, #2
 80047e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2202      	movs	r2, #2
 80047f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047f8:	f043 0202 	orr.w	r2, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2204      	movs	r2, #4
 8004806:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f846 	bl	80048a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <HAL_LTDC_IRQHandler+0xfe>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d016      	beq.n	800485a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2201      	movs	r2, #1
 8004842:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f82f 	bl	80048b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <HAL_LTDC_IRQHandler+0x140>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2208      	movs	r2, #8
 8004884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f818 	bl	80048cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_LTDC_ConfigLayer+0x1a>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e02c      	b.n	8004954 <HAL_LTDC_ConfigLayer+0x74>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2134      	movs	r1, #52	@ 0x34
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4614      	mov	r4, r2
 800491e:	461d      	mov	r5, r3
 8004920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f811 	bl	800495c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bdb0      	pop	{r4, r5, r7, pc}

0800495c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	4413      	add	r3, r2
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	01db      	lsls	r3, r3, #7
 8004988:	4413      	add	r3, r2
 800498a:	3384      	adds	r3, #132	@ 0x84
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	4611      	mov	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	01d2      	lsls	r2, r2, #7
 8004998:	440a      	add	r2, r1
 800499a:	3284      	adds	r2, #132	@ 0x84
 800499c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80049a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	01db      	lsls	r3, r3, #7
 80049c0:	440b      	add	r3, r1
 80049c2:	3384      	adds	r3, #132	@ 0x84
 80049c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049da:	4413      	add	r3, r2
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	01db      	lsls	r3, r3, #7
 80049ea:	4413      	add	r3, r2
 80049ec:	3384      	adds	r3, #132	@ 0x84
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	4611      	mov	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	01d2      	lsls	r2, r2, #7
 80049fa:	440a      	add	r2, r1
 80049fc:	3284      	adds	r2, #132	@ 0x84
 80049fe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a02:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a12:	4413      	add	r3, r2
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	01db      	lsls	r3, r3, #7
 8004a20:	440b      	add	r3, r1
 8004a22:	3384      	adds	r3, #132	@ 0x84
 8004a24:	4619      	mov	r1, r3
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4413      	add	r3, r2
 8004a38:	3384      	adds	r3, #132	@ 0x84
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	4611      	mov	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	01d2      	lsls	r2, r2, #7
 8004a46:	440a      	add	r2, r1
 8004a48:	3284      	adds	r2, #132	@ 0x84
 8004a4a:	f023 0307 	bic.w	r3, r3, #7
 8004a4e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	01db      	lsls	r3, r3, #7
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3384      	adds	r3, #132	@ 0x84
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	061b      	lsls	r3, r3, #24
 8004a80:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3384      	adds	r3, #132	@ 0x84
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	01db      	lsls	r3, r3, #7
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3384      	adds	r3, #132	@ 0x84
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004aac:	461a      	mov	r2, r3
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4619      	mov	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3384      	adds	r3, #132	@ 0x84
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	01db      	lsls	r3, r3, #7
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3384      	adds	r3, #132	@ 0x84
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	01d2      	lsls	r2, r2, #7
 8004ae6:	440a      	add	r2, r1
 8004ae8:	3284      	adds	r2, #132	@ 0x84
 8004aea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004aee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	4413      	add	r3, r2
 8004afc:	3384      	adds	r3, #132	@ 0x84
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	4413      	add	r3, r2
 8004b12:	3384      	adds	r3, #132	@ 0x84
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	01d2      	lsls	r2, r2, #7
 8004b20:	440a      	add	r2, r1
 8004b22:	3284      	adds	r2, #132	@ 0x84
 8004b24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b28:	f023 0307 	bic.w	r3, r3, #7
 8004b2c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	6809      	ldr	r1, [r1, #0]
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	01c9      	lsls	r1, r1, #7
 8004b40:	4401      	add	r1, r0
 8004b42:	3184      	adds	r1, #132	@ 0x84
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	01db      	lsls	r3, r3, #7
 8004b52:	4413      	add	r3, r2
 8004b54:	3384      	adds	r3, #132	@ 0x84
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	4413      	add	r3, r2
 8004b64:	3384      	adds	r3, #132	@ 0x84
 8004b66:	461a      	mov	r2, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	01db      	lsls	r3, r3, #7
 8004b76:	4413      	add	r3, r2
 8004b78:	3384      	adds	r3, #132	@ 0x84
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e01b      	b.n	8004bc8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e014      	b.n	8004bc8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d00b      	beq.n	8004bbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d007      	beq.n	8004bbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d003      	beq.n	8004bbe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d102      	bne.n	8004bc4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e001      	b.n	8004bc8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	01db      	lsls	r3, r3, #7
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3384      	adds	r3, #132	@ 0x84
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	01d2      	lsls	r2, r2, #7
 8004be2:	440a      	add	r2, r1
 8004be4:	3284      	adds	r2, #132	@ 0x84
 8004be6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004bea:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6859      	ldr	r1, [r3, #4]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	1acb      	subs	r3, r1, r3
 8004c02:	69f9      	ldr	r1, [r7, #28]
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6809      	ldr	r1, [r1, #0]
 8004c0e:	4608      	mov	r0, r1
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	01c9      	lsls	r1, r1, #7
 8004c14:	4401      	add	r1, r0
 8004c16:	3184      	adds	r1, #132	@ 0x84
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	01db      	lsls	r3, r3, #7
 8004c26:	4413      	add	r3, r2
 8004c28:	3384      	adds	r3, #132	@ 0x84
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	4611      	mov	r1, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	01d2      	lsls	r2, r2, #7
 8004c36:	440a      	add	r2, r1
 8004c38:	3284      	adds	r2, #132	@ 0x84
 8004c3a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c3e:	f023 0307 	bic.w	r3, r3, #7
 8004c42:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	01db      	lsls	r3, r3, #7
 8004c4e:	4413      	add	r3, r2
 8004c50:	3384      	adds	r3, #132	@ 0x84
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	01db      	lsls	r3, r3, #7
 8004c64:	4413      	add	r3, r2
 8004c66:	3384      	adds	r3, #132	@ 0x84
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	01d2      	lsls	r2, r2, #7
 8004c74:	440a      	add	r2, r1
 8004c76:	3284      	adds	r2, #132	@ 0x84
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4b88      	ldr	r3, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fc fd9c 	bl	8001880 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fc fd98 	bl	8001880 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fc fd88 	bl	8001880 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fc fd84 	bl	8001880 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fc fd3d 	bl	8001880 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fc fd39 	bl	8001880 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fc fd1c 	bl	8001880 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fc fd18 	bl	8001880 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fc fcfc 	bl	8001880 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fc fcf8 	bl	8001880 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fc fce5 	bl	8001880 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fc fce1 	bl	8001880 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fca1 	bl	8001880 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fc fc9d 	bl	8001880 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc fc62 	bl	8001880 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fc fc5e 	bl	8001880 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fc fc4c 	bl	8001880 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fc fc48 	bl	8001880 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fc fc1c 	bl	8001880 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fc fc18 	bl	8001880 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fc fbf1 	bl	8001880 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fc fbed 	bl	8001880 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fc fbda 	bl	8001880 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fc fbd6 	bl	8001880 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fc fb08 	bl	8001880 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fc fb04 	bl	8001880 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc f97a 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	08008fd0 	.word	0x08008fd0
 8005340:	20000000 	.word	0x20000000
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b094      	sub	sp, #80	@ 0x50
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	647b      	str	r3, [r7, #68]	@ 0x44
 8005354:	2300      	movs	r3, #0
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005358:	2300      	movs	r3, #0
 800535a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b79      	ldr	r3, [pc, #484]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80e1 	bhi.w	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e0db      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b73      	ldr	r3, [pc, #460]	@ (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005380:	e0db      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b73      	ldr	r3, [pc, #460]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x208>)
 8005384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005386:	e0d8      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b6f      	ldr	r3, [pc, #444]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005390:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b6d      	ldr	r3, [pc, #436]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d063      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b6a      	ldr	r3, [pc, #424]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b2:	2300      	movs	r3, #0
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	0159      	lsls	r1, r3, #5
 80053c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053cc:	0150      	lsls	r0, r2, #5
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4621      	mov	r1, r4
 80053d4:	1a51      	subs	r1, r2, r1
 80053d6:	6139      	str	r1, [r7, #16]
 80053d8:	4629      	mov	r1, r5
 80053da:	eb63 0301 	sbc.w	r3, r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	018b      	lsls	r3, r1, #6
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f6:	4651      	mov	r1, sl
 80053f8:	018a      	lsls	r2, r1, #6
 80053fa:	4651      	mov	r1, sl
 80053fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005400:	4659      	mov	r1, fp
 8005402:	eb63 0901 	sbc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	462b      	mov	r3, r5
 8005428:	eb49 0303 	adc.w	r3, r9, r3
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800543a:	4629      	mov	r1, r5
 800543c:	024b      	lsls	r3, r1, #9
 800543e:	4621      	mov	r1, r4
 8005440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005444:	4621      	mov	r1, r4
 8005446:	024a      	lsls	r2, r1, #9
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544e:	2200      	movs	r2, #0
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005458:	f7fa feca 	bl	80001f0 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	e058      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005466:	4b38      	ldr	r3, [pc, #224]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	2200      	movs	r2, #0
 800546e:	4618      	mov	r0, r3
 8005470:	4611      	mov	r1, r2
 8005472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
 800547c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	0159      	lsls	r1, r3, #5
 800548e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005492:	0150      	lsls	r0, r2, #5
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4641      	mov	r1, r8
 800549a:	ebb2 0a01 	subs.w	sl, r2, r1
 800549e:	4649      	mov	r1, r9
 80054a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054b8:	ebb2 040a 	subs.w	r4, r2, sl
 80054bc:	eb63 050b 	sbc.w	r5, r3, fp
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	00eb      	lsls	r3, r5, #3
 80054ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ce:	00e2      	lsls	r2, r4, #3
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	4643      	mov	r3, r8
 80054d6:	18e3      	adds	r3, r4, r3
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	464b      	mov	r3, r9
 80054dc:	eb45 0303 	adc.w	r3, r5, r3
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ee:	4629      	mov	r1, r5
 80054f0:	028b      	lsls	r3, r1, #10
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f8:	4621      	mov	r1, r4
 80054fa:	028a      	lsls	r2, r1, #10
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	61fa      	str	r2, [r7, #28]
 8005508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800550c:	f7fa fe70 	bl	80001f0 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	3301      	adds	r3, #1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800552a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005532:	e002      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 8005536:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800553c:	4618      	mov	r0, r3
 800553e:	3750      	adds	r7, #80	@ 0x50
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	@ (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	08008fe0 	.word	0x08008fe0

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005598:	f7ff ffdc 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0b5b      	lsrs	r3, r3, #13
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	@ (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	08008fe0 	.word	0x08008fe0

080055bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	220f      	movs	r2, #15
 80055ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055cc:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0203 	and.w	r2, r3, #3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055f0:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <HAL_RCC_GetClockConfig+0x60>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	40023c00 	.word	0x40023c00

08005620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005650:	2b00      	cmp	r3, #0
 8005652:	d075      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005654:	4b91      	ldr	r3, [pc, #580]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fc f911 	bl	8001880 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005662:	f7fc f90d 	bl	8001880 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e189      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005674:	4b8a      	ldr	r3, [pc, #552]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	019a      	lsls	r2, r3, #6
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	071b      	lsls	r3, r3, #28
 8005698:	4981      	ldr	r1, [pc, #516]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ac:	4b7c      	ldr	r3, [pc, #496]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056b2:	0f1b      	lsrs	r3, r3, #28
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	019a      	lsls	r2, r3, #6
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	431a      	orrs	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	4974      	ldr	r1, [pc, #464]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056d4:	4b72      	ldr	r3, [pc, #456]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056da:	f023 021f 	bic.w	r2, r3, #31
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	496e      	ldr	r1, [pc, #440]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	019a      	lsls	r2, r3, #6
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	071b      	lsls	r3, r3, #28
 800570c:	4964      	ldr	r1, [pc, #400]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005714:	4b61      	ldr	r3, [pc, #388]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571a:	f7fc f8b1 	bl	8001880 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005722:	f7fc f8ad 	bl	8001880 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e129      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005734:	4b5a      	ldr	r3, [pc, #360]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005754:	2b00      	cmp	r3, #0
 8005756:	d079      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005758:	4b52      	ldr	r3, [pc, #328]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800575e:	f7fc f88f 	bl	8001880 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005766:	f7fc f88b 	bl	8001880 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e107      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005778:	4b49      	ldr	r3, [pc, #292]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005784:	d0ef      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d020      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005792:	4b43      	ldr	r3, [pc, #268]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005798:	0f1b      	lsrs	r3, r3, #28
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	019a      	lsls	r2, r3, #6
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	061b      	lsls	r3, r3, #24
 80057ac:	431a      	orrs	r2, r3
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	071b      	lsls	r3, r3, #28
 80057b2:	493b      	ldr	r1, [pc, #236]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ba:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	4934      	ldr	r1, [pc, #208]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01e      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057e0:	4b2f      	ldr	r3, [pc, #188]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	0e1b      	lsrs	r3, r3, #24
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	019a      	lsls	r2, r3, #6
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	071b      	lsls	r3, r3, #28
 8005800:	4927      	ldr	r1, [pc, #156]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005808:	4b25      	ldr	r3, [pc, #148]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800580e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	4922      	ldr	r1, [pc, #136]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800581e:	4b21      	ldr	r3, [pc, #132]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005824:	f7fc f82c 	bl	8001880 <HAL_GetTick>
 8005828:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800582c:	f7fc f828 	bl	8001880 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e0a4      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800583e:	4b18      	ldr	r3, [pc, #96]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800584a:	d1ef      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 808b 	beq.w	8005970 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	4a0f      	ldr	r2, [pc, #60]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005868:	6413      	str	r3, [r2, #64]	@ 0x40
 800586a:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a0b      	ldr	r2, [pc, #44]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005880:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005882:	f7fb fffd 	bl	8001880 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005888:	e010      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fb fff9 	bl	8001880 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d909      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e075      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800589c:	42470068 	.word	0x42470068
 80058a0:	40023800 	.word	0x40023800
 80058a4:	42470070 	.word	0x42470070
 80058a8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058ac:	4b38      	ldr	r3, [pc, #224]	@ (8005990 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0e8      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b8:	4b36      	ldr	r3, [pc, #216]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02f      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d028      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058ec:	4a29      	ldr	r2, [pc, #164]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058f2:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d114      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fb ffbf 	bl	8001880 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fb ffbb 	bl	8001880 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e035      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591c:	4b1d      	ldr	r3, [pc, #116]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ee      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005934:	d10d      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005942:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800594a:	4912      	ldr	r1, [pc, #72]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4a0f      	ldr	r2, [pc, #60]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005958:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800595c:	6093      	str	r3, [r2, #8]
 800595e:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005960:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800596a:	490a      	ldr	r1, [pc, #40]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800596c:	4313      	orrs	r3, r2
 800596e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005984:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40007000 	.word	0x40007000
 8005994:	40023800 	.word	0x40023800
 8005998:	42470e40 	.word	0x42470e40
 800599c:	424711e0 	.word	0x424711e0

080059a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e025      	b.n	8005a00 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d106      	bne.n	80059ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fb fe1d 	bl	8001608 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f001 fccb 	bl	800737c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	f001 fd20 	bl	8007436 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07b      	b.n	8005b12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d108      	bne.n	8005a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a2a:	d009      	beq.n	8005a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	61da      	str	r2, [r3, #28]
 8005a32:	e005      	b.n	8005a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fc34 	bl	80012c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	ea42 0103 	orr.w	r1, r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	f003 0104 	and.w	r1, r3, #4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	f003 0210 	and.w	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e041      	b.n	8005bb0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fb fc09 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f000 fc57 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e04e      	b.n	8005c6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a23      	ldr	r2, [pc, #140]	@ (8005c7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d022      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfa:	d01d      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	@ (8005c80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d018      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	@ (8005c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00e      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d009      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a19      	ldr	r2, [pc, #100]	@ (8005c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x80>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a18      	ldr	r2, [pc, #96]	@ (8005c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d010      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	e007      	b.n	8005c6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40000c00 	.word	0x40000c00
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40001800 	.word	0x40001800

08005c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e041      	b.n	8005d2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb fb6c 	bl	800139c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fb98 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start+0x24>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e022      	b.n	8005da2 <HAL_TIM_PWM_Start+0x6a>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d109      	bne.n	8005d76 <HAL_TIM_PWM_Start+0x3e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e015      	b.n	8005da2 <HAL_TIM_PWM_Start+0x6a>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x58>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e008      	b.n	8005da2 <HAL_TIM_PWM_Start+0x6a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e07c      	b.n	8005ea4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0x82>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005db8:	e013      	b.n	8005de2 <HAL_TIM_PWM_Start+0xaa>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start+0x92>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc8:	e00b      	b.n	8005de2 <HAL_TIM_PWM_Start+0xaa>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d104      	bne.n	8005dda <HAL_TIM_PWM_Start+0xa2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd8:	e003      	b.n	8005de2 <HAL_TIM_PWM_Start+0xaa>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fe04 	bl	80069f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2d      	ldr	r2, [pc, #180]	@ (8005eac <HAL_TIM_PWM_Start+0x174>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_TIM_PWM_Start+0xcc>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb0 <HAL_TIM_PWM_Start+0x178>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_TIM_PWM_Start+0xd0>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_TIM_PWM_Start+0xd2>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a22      	ldr	r2, [pc, #136]	@ (8005eac <HAL_TIM_PWM_Start+0x174>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e30:	d01d      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb4 <HAL_TIM_PWM_Start+0x17c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d018      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb8 <HAL_TIM_PWM_Start+0x180>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <HAL_TIM_PWM_Start+0x184>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a16      	ldr	r2, [pc, #88]	@ (8005eb0 <HAL_TIM_PWM_Start+0x178>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a18      	ldr	r2, [pc, #96]	@ (8005ec0 <HAL_TIM_PWM_Start+0x188>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIM_PWM_Start+0x136>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <HAL_TIM_PWM_Start+0x18c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d010      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e90:	e007      	b.n	8005ea2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40001800 	.word	0x40001800

08005ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0202 	mvn.w	r2, #2
 8005efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa5b 	bl	80063ce <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa4d 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fa5e 	bl	80063e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d020      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0204 	mvn.w	r2, #4
 8005f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa35 	bl	80063ce <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa27 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa38 	bl	80063e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d020      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0208 	mvn.w	r2, #8
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa0f 	bl	80063ce <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa01 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa12 	bl	80063e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d020      	beq.n	8006010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0210 	mvn.w	r2, #16
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9e9 	bl	80063ce <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9db 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9ec 	bl	80063e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0201 	mvn.w	r2, #1
 800602c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fa feb4 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fd7c 	bl	8006b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00c      	beq.n	800607c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9bd 	bl	80063f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0220 	mvn.w	r2, #32
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fd4e 	bl	8006b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e0ae      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	f200 809f 	bhi.w	8006214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060d6:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006215 	.word	0x08006215
 80060e4:	08006215 	.word	0x08006215
 80060e8:	08006215 	.word	0x08006215
 80060ec:	08006151 	.word	0x08006151
 80060f0:	08006215 	.word	0x08006215
 80060f4:	08006215 	.word	0x08006215
 80060f8:	08006215 	.word	0x08006215
 80060fc:	08006193 	.word	0x08006193
 8006100:	08006215 	.word	0x08006215
 8006104:	08006215 	.word	0x08006215
 8006108:	08006215 	.word	0x08006215
 800610c:	080061d3 	.word	0x080061d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fa24 	bl	8006564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0208 	orr.w	r2, r2, #8
 800612a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	619a      	str	r2, [r3, #24]
      break;
 800614e:	e064      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fa74 	bl	8006644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800616a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800617a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	619a      	str	r2, [r3, #24]
      break;
 8006190:	e043      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fac9 	bl	8006730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0208 	orr.w	r2, r2, #8
 80061ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0204 	bic.w	r2, r2, #4
 80061bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	61da      	str	r2, [r3, #28]
      break;
 80061d0:	e023      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fb1d 	bl	8006818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	021a      	lsls	r2, r3, #8
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	61da      	str	r2, [r3, #28]
      break;
 8006212:	e002      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
      break;
 8006218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIM_ConfigClockSource+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e0b4      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x186>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800626e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006280:	d03e      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0xd4>
 8006282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006286:	f200 8087 	bhi.w	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628e:	f000 8086 	beq.w	800639e <HAL_TIM_ConfigClockSource+0x172>
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006296:	d87f      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b70      	cmp	r3, #112	@ 0x70
 800629a:	d01a      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0xa6>
 800629c:	2b70      	cmp	r3, #112	@ 0x70
 800629e:	d87b      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b60      	cmp	r3, #96	@ 0x60
 80062a2:	d050      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x11a>
 80062a4:	2b60      	cmp	r3, #96	@ 0x60
 80062a6:	d877      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b50      	cmp	r3, #80	@ 0x50
 80062aa:	d03c      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0xfa>
 80062ac:	2b50      	cmp	r3, #80	@ 0x50
 80062ae:	d873      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d058      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x13a>
 80062b4:	2b40      	cmp	r3, #64	@ 0x40
 80062b6:	d86f      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b30      	cmp	r3, #48	@ 0x30
 80062ba:	d064      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062bc:	2b30      	cmp	r3, #48	@ 0x30
 80062be:	d86b      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d060      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d867      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d05a      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062d0:	e062      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e2:	f000 fb69 	bl	80069b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	609a      	str	r2, [r3, #8]
      break;
 80062fe:	e04f      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006310:	f000 fb52 	bl	80069b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006322:	609a      	str	r2, [r3, #8]
      break;
 8006324:	e03c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	461a      	mov	r2, r3
 8006334:	f000 fac6 	bl	80068c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2150      	movs	r1, #80	@ 0x50
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fb1f 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8006344:	e02c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006352:	461a      	mov	r2, r3
 8006354:	f000 fae5 	bl	8006922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2160      	movs	r1, #96	@ 0x60
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fb0f 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8006364:	e01c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006372:	461a      	mov	r2, r3
 8006374:	f000 faa6 	bl	80068c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2140      	movs	r1, #64	@ 0x40
 800637e:	4618      	mov	r0, r3
 8006380:	f000 faff 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8006384:	e00c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f000 faf6 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8006396:	e003      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	e000      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800639e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a46      	ldr	r2, [pc, #280]	@ (8006538 <TIM_Base_SetConfig+0x12c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642a:	d00f      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a43      	ldr	r2, [pc, #268]	@ (800653c <TIM_Base_SetConfig+0x130>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00b      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a42      	ldr	r2, [pc, #264]	@ (8006540 <TIM_Base_SetConfig+0x134>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a41      	ldr	r2, [pc, #260]	@ (8006544 <TIM_Base_SetConfig+0x138>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a40      	ldr	r2, [pc, #256]	@ (8006548 <TIM_Base_SetConfig+0x13c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a35      	ldr	r2, [pc, #212]	@ (8006538 <TIM_Base_SetConfig+0x12c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d02b      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646c:	d027      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a32      	ldr	r2, [pc, #200]	@ (800653c <TIM_Base_SetConfig+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d023      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a31      	ldr	r2, [pc, #196]	@ (8006540 <TIM_Base_SetConfig+0x134>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01f      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a30      	ldr	r2, [pc, #192]	@ (8006544 <TIM_Base_SetConfig+0x138>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01b      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2f      	ldr	r2, [pc, #188]	@ (8006548 <TIM_Base_SetConfig+0x13c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d017      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2e      	ldr	r2, [pc, #184]	@ (800654c <TIM_Base_SetConfig+0x140>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2d      	ldr	r2, [pc, #180]	@ (8006550 <TIM_Base_SetConfig+0x144>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00f      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006554 <TIM_Base_SetConfig+0x148>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00b      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006558 <TIM_Base_SetConfig+0x14c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2a      	ldr	r2, [pc, #168]	@ (800655c <TIM_Base_SetConfig+0x150>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a29      	ldr	r2, [pc, #164]	@ (8006560 <TIM_Base_SetConfig+0x154>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d108      	bne.n	80064d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a10      	ldr	r2, [pc, #64]	@ (8006538 <TIM_Base_SetConfig+0x12c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_Base_SetConfig+0xf8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a12      	ldr	r2, [pc, #72]	@ (8006548 <TIM_Base_SetConfig+0x13c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d103      	bne.n	800650c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d105      	bne.n	800652a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]
  }
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40010400 	.word	0x40010400
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	40001800 	.word	0x40001800
 800655c:	40001c00 	.word	0x40001c00
 8006560:	40002000 	.word	0x40002000

08006564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0201 	bic.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f023 0302 	bic.w	r3, r3, #2
 80065ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a20      	ldr	r2, [pc, #128]	@ (800663c <TIM_OC1_SetConfig+0xd8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC1_SetConfig+0x64>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006640 <TIM_OC1_SetConfig+0xdc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10c      	bne.n	80065e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0308 	bic.w	r3, r3, #8
 80065ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a15      	ldr	r2, [pc, #84]	@ (800663c <TIM_OC1_SetConfig+0xd8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d003      	beq.n	80065f2 <TIM_OC1_SetConfig+0x8e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a14      	ldr	r2, [pc, #80]	@ (8006640 <TIM_OC1_SetConfig+0xdc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d111      	bne.n	8006616 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	621a      	str	r2, [r3, #32]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	40010000 	.word	0x40010000
 8006640:	40010400 	.word	0x40010400

08006644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f023 0210 	bic.w	r2, r3, #16
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0320 	bic.w	r3, r3, #32
 800668e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <TIM_OC2_SetConfig+0xe4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC2_SetConfig+0x68>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a21      	ldr	r2, [pc, #132]	@ (800672c <TIM_OC2_SetConfig+0xe8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10d      	bne.n	80066c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a17      	ldr	r2, [pc, #92]	@ (8006728 <TIM_OC2_SetConfig+0xe4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC2_SetConfig+0x94>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a16      	ldr	r2, [pc, #88]	@ (800672c <TIM_OC2_SetConfig+0xe8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d113      	bne.n	8006700 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40010400 	.word	0x40010400

08006730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a21      	ldr	r2, [pc, #132]	@ (8006810 <TIM_OC3_SetConfig+0xe0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_OC3_SetConfig+0x66>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a20      	ldr	r2, [pc, #128]	@ (8006814 <TIM_OC3_SetConfig+0xe4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10d      	bne.n	80067b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800679c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <TIM_OC3_SetConfig+0xe0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC3_SetConfig+0x92>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <TIM_OC3_SetConfig+0xe4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d113      	bne.n	80067ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	621a      	str	r2, [r3, #32]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40010000 	.word	0x40010000
 8006814:	40010400 	.word	0x40010400

08006818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <TIM_OC4_SetConfig+0xa4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_OC4_SetConfig+0x68>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a11      	ldr	r2, [pc, #68]	@ (80068c0 <TIM_OC4_SetConfig+0xa8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	019b      	lsls	r3, r3, #6
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 030a 	bic.w	r3, r3, #10
 8006900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006922:	b480      	push	{r7}
 8006924:	b087      	sub	sp, #28
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f023 0210 	bic.w	r2, r3, #16
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800694c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800695e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	f043 0307 	orr.w	r3, r3, #7
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	021a      	lsls	r2, r3, #8
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	431a      	orrs	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	401a      	ands	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1a      	ldr	r2, [r3, #32]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a30:	431a      	orrs	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e05a      	b.n	8006b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1d      	ldr	r2, [pc, #116]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a15      	ldr	r2, [pc, #84]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d10c      	bne.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40010400 	.word	0x40010400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40001800 	.word	0x40001800

08006b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e042      	b.n	8006bfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fa fc62 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2224      	movs	r2, #36	@ 0x24
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f973 	bl	8006e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	@ 0x28
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d175      	bne.n	8006d10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_UART_Transmit+0x2c>
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e06e      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2221      	movs	r2, #33	@ 0x21
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c42:	f7fa fe1d 	bl	8001880 <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c5c:	d108      	bne.n	8006c70 <HAL_UART_Transmit+0x6c>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c78:	e02e      	b.n	8006cd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2180      	movs	r1, #128	@ 0x80
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f848 	bl	8006d1a <UART_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e03a      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e007      	b.n	8006cca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cb      	bne.n	8006c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2140      	movs	r1, #64	@ 0x40
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f814 	bl	8006d1a <UART_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e006      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e000      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d10:	2302      	movs	r3, #2
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b086      	sub	sp, #24
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	603b      	str	r3, [r7, #0]
 8006d26:	4613      	mov	r3, r2
 8006d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2a:	e03b      	b.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d037      	beq.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d34:	f7fa fda4 	bl	8001880 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	6a3a      	ldr	r2, [r7, #32]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d302      	bcc.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e03a      	b.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d023      	beq.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b80      	cmp	r3, #128	@ 0x80
 8006d60:	d020      	beq.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b40      	cmp	r3, #64	@ 0x40
 8006d66:	d01d      	beq.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d116      	bne.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f81d 	bl	8006dcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2208      	movs	r2, #8
 8006d96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e00f      	b.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4013      	ands	r3, r2
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	bf0c      	ite	eq
 8006db4:	2301      	moveq	r3, #1
 8006db6:	2300      	movne	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d0b4      	beq.n	8006d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b095      	sub	sp, #84	@ 0x54
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006df4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d119      	bne.n	8006e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e64:	61ba      	str	r2, [r7, #24]
 8006e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e86:	bf00      	nop
 8006e88:	3754      	adds	r7, #84	@ 0x54
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e98:	b0c0      	sub	sp, #256	@ 0x100
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb0:	68d9      	ldr	r1, [r3, #12]
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	ea40 0301 	orr.w	r3, r0, r1
 8006ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006eec:	f021 010c 	bic.w	r1, r1, #12
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006efa:	430b      	orrs	r3, r1
 8006efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0e:	6999      	ldr	r1, [r3, #24]
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	ea40 0301 	orr.w	r3, r0, r1
 8006f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b8f      	ldr	r3, [pc, #572]	@ (8007160 <UART_SetConfig+0x2cc>)
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d005      	beq.n	8006f34 <UART_SetConfig+0xa0>
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8007164 <UART_SetConfig+0x2d0>)
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d104      	bne.n	8006f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f34:	f7fe fb2e 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006f38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f3c:	e003      	b.n	8006f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f7fe fb15 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8006f42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f50:	f040 810c 	bne.w	800716c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	1891      	adds	r1, r2, r2
 8006f6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f6e:	415b      	adcs	r3, r3
 8006f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f76:	4621      	mov	r1, r4
 8006f78:	eb12 0801 	adds.w	r8, r2, r1
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	eb43 0901 	adc.w	r9, r3, r1
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f96:	4690      	mov	r8, r2
 8006f98:	4699      	mov	r9, r3
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	eb18 0303 	adds.w	r3, r8, r3
 8006fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	eb49 0303 	adc.w	r3, r9, r3
 8006faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	18db      	adds	r3, r3, r3
 8006fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc8:	4613      	mov	r3, r2
 8006fca:	eb42 0303 	adc.w	r3, r2, r3
 8006fce:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fd8:	f7f9 f90a 	bl	80001f0 <__aeabi_uldivmod>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4b61      	ldr	r3, [pc, #388]	@ (8007168 <UART_SetConfig+0x2d4>)
 8006fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	011c      	lsls	r4, r3, #4
 8006fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	464b      	mov	r3, r9
 8007000:	1891      	adds	r1, r2, r2
 8007002:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007004:	415b      	adcs	r3, r3
 8007006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800700c:	4641      	mov	r1, r8
 800700e:	eb12 0a01 	adds.w	sl, r2, r1
 8007012:	4649      	mov	r1, r9
 8007014:	eb43 0b01 	adc.w	fp, r3, r1
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800702c:	4692      	mov	sl, r2
 800702e:	469b      	mov	fp, r3
 8007030:	4643      	mov	r3, r8
 8007032:	eb1a 0303 	adds.w	r3, sl, r3
 8007036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800703a:	464b      	mov	r3, r9
 800703c:	eb4b 0303 	adc.w	r3, fp, r3
 8007040:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007050:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007058:	460b      	mov	r3, r1
 800705a:	18db      	adds	r3, r3, r3
 800705c:	643b      	str	r3, [r7, #64]	@ 0x40
 800705e:	4613      	mov	r3, r2
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	647b      	str	r3, [r7, #68]	@ 0x44
 8007066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800706a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800706e:	f7f9 f8bf 	bl	80001f0 <__aeabi_uldivmod>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4611      	mov	r1, r2
 8007078:	4b3b      	ldr	r3, [pc, #236]	@ (8007168 <UART_SetConfig+0x2d4>)
 800707a:	fba3 2301 	umull	r2, r3, r3, r1
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	2264      	movs	r2, #100	@ 0x64
 8007082:	fb02 f303 	mul.w	r3, r2, r3
 8007086:	1acb      	subs	r3, r1, r3
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800708e:	4b36      	ldr	r3, [pc, #216]	@ (8007168 <UART_SetConfig+0x2d4>)
 8007090:	fba3 2302 	umull	r2, r3, r3, r2
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800709c:	441c      	add	r4, r3
 800709e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070b0:	4642      	mov	r2, r8
 80070b2:	464b      	mov	r3, r9
 80070b4:	1891      	adds	r1, r2, r2
 80070b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070b8:	415b      	adcs	r3, r3
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070c0:	4641      	mov	r1, r8
 80070c2:	1851      	adds	r1, r2, r1
 80070c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80070c6:	4649      	mov	r1, r9
 80070c8:	414b      	adcs	r3, r1
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070d8:	4659      	mov	r1, fp
 80070da:	00cb      	lsls	r3, r1, #3
 80070dc:	4651      	mov	r1, sl
 80070de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070e2:	4651      	mov	r1, sl
 80070e4:	00ca      	lsls	r2, r1, #3
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	4642      	mov	r2, r8
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070f4:	464b      	mov	r3, r9
 80070f6:	460a      	mov	r2, r1
 80070f8:	eb42 0303 	adc.w	r3, r2, r3
 80070fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800710c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007114:	460b      	mov	r3, r1
 8007116:	18db      	adds	r3, r3, r3
 8007118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800711a:	4613      	mov	r3, r2
 800711c:	eb42 0303 	adc.w	r3, r2, r3
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800712a:	f7f9 f861 	bl	80001f0 <__aeabi_uldivmod>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <UART_SetConfig+0x2d4>)
 8007134:	fba3 1302 	umull	r1, r3, r3, r2
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	2164      	movs	r1, #100	@ 0x64
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	3332      	adds	r3, #50	@ 0x32
 8007146:	4a08      	ldr	r2, [pc, #32]	@ (8007168 <UART_SetConfig+0x2d4>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f003 0207 	and.w	r2, r3, #7
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4422      	add	r2, r4
 800715a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800715c:	e106      	b.n	800736c <UART_SetConfig+0x4d8>
 800715e:	bf00      	nop
 8007160:	40011000 	.word	0x40011000
 8007164:	40011400 	.word	0x40011400
 8007168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800716c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007170:	2200      	movs	r2, #0
 8007172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007176:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800717a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	1891      	adds	r1, r2, r2
 8007184:	6239      	str	r1, [r7, #32]
 8007186:	415b      	adcs	r3, r3
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
 800718a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800718e:	4641      	mov	r1, r8
 8007190:	1854      	adds	r4, r2, r1
 8007192:	4649      	mov	r1, r9
 8007194:	eb43 0501 	adc.w	r5, r3, r1
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	00eb      	lsls	r3, r5, #3
 80071a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071a6:	00e2      	lsls	r2, r4, #3
 80071a8:	4614      	mov	r4, r2
 80071aa:	461d      	mov	r5, r3
 80071ac:	4643      	mov	r3, r8
 80071ae:	18e3      	adds	r3, r4, r3
 80071b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071b4:	464b      	mov	r3, r9
 80071b6:	eb45 0303 	adc.w	r3, r5, r3
 80071ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071da:	4629      	mov	r1, r5
 80071dc:	008b      	lsls	r3, r1, #2
 80071de:	4621      	mov	r1, r4
 80071e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e4:	4621      	mov	r1, r4
 80071e6:	008a      	lsls	r2, r1, #2
 80071e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071ec:	f7f9 f800 	bl	80001f0 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b60      	ldr	r3, [pc, #384]	@ (8007378 <UART_SetConfig+0x4e4>)
 80071f6:	fba3 2302 	umull	r2, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	011c      	lsls	r4, r3, #4
 80071fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007202:	2200      	movs	r2, #0
 8007204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007208:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800720c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	1891      	adds	r1, r2, r2
 8007216:	61b9      	str	r1, [r7, #24]
 8007218:	415b      	adcs	r3, r3
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007220:	4641      	mov	r1, r8
 8007222:	1851      	adds	r1, r2, r1
 8007224:	6139      	str	r1, [r7, #16]
 8007226:	4649      	mov	r1, r9
 8007228:	414b      	adcs	r3, r1
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007238:	4659      	mov	r1, fp
 800723a:	00cb      	lsls	r3, r1, #3
 800723c:	4651      	mov	r1, sl
 800723e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007242:	4651      	mov	r1, sl
 8007244:	00ca      	lsls	r2, r1, #3
 8007246:	4610      	mov	r0, r2
 8007248:	4619      	mov	r1, r3
 800724a:	4603      	mov	r3, r0
 800724c:	4642      	mov	r2, r8
 800724e:	189b      	adds	r3, r3, r2
 8007250:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007254:	464b      	mov	r3, r9
 8007256:	460a      	mov	r2, r1
 8007258:	eb42 0303 	adc.w	r3, r2, r3
 800725c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	67bb      	str	r3, [r7, #120]	@ 0x78
 800726a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007278:	4649      	mov	r1, r9
 800727a:	008b      	lsls	r3, r1, #2
 800727c:	4641      	mov	r1, r8
 800727e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007282:	4641      	mov	r1, r8
 8007284:	008a      	lsls	r2, r1, #2
 8007286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800728a:	f7f8 ffb1 	bl	80001f0 <__aeabi_uldivmod>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4611      	mov	r1, r2
 8007294:	4b38      	ldr	r3, [pc, #224]	@ (8007378 <UART_SetConfig+0x4e4>)
 8007296:	fba3 2301 	umull	r2, r3, r3, r1
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	2264      	movs	r2, #100	@ 0x64
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	1acb      	subs	r3, r1, r3
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	3332      	adds	r3, #50	@ 0x32
 80072a8:	4a33      	ldr	r2, [pc, #204]	@ (8007378 <UART_SetConfig+0x4e4>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072b4:	441c      	add	r4, r3
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80072be:	677a      	str	r2, [r7, #116]	@ 0x74
 80072c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072c4:	4642      	mov	r2, r8
 80072c6:	464b      	mov	r3, r9
 80072c8:	1891      	adds	r1, r2, r2
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	415b      	adcs	r3, r3
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d4:	4641      	mov	r1, r8
 80072d6:	1851      	adds	r1, r2, r1
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	4649      	mov	r1, r9
 80072dc:	414b      	adcs	r3, r1
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072ec:	4659      	mov	r1, fp
 80072ee:	00cb      	lsls	r3, r1, #3
 80072f0:	4651      	mov	r1, sl
 80072f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072f6:	4651      	mov	r1, sl
 80072f8:	00ca      	lsls	r2, r1, #3
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	4642      	mov	r2, r8
 8007302:	189b      	adds	r3, r3, r2
 8007304:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007306:	464b      	mov	r3, r9
 8007308:	460a      	mov	r2, r1
 800730a:	eb42 0303 	adc.w	r3, r2, r3
 800730e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	663b      	str	r3, [r7, #96]	@ 0x60
 800731a:	667a      	str	r2, [r7, #100]	@ 0x64
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007328:	4649      	mov	r1, r9
 800732a:	008b      	lsls	r3, r1, #2
 800732c:	4641      	mov	r1, r8
 800732e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007332:	4641      	mov	r1, r8
 8007334:	008a      	lsls	r2, r1, #2
 8007336:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800733a:	f7f8 ff59 	bl	80001f0 <__aeabi_uldivmod>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <UART_SetConfig+0x4e4>)
 8007344:	fba3 1302 	umull	r1, r3, r3, r2
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	2164      	movs	r1, #100	@ 0x64
 800734c:	fb01 f303 	mul.w	r3, r1, r3
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	3332      	adds	r3, #50	@ 0x32
 8007356:	4a08      	ldr	r2, [pc, #32]	@ (8007378 <UART_SetConfig+0x4e4>)
 8007358:	fba2 2303 	umull	r2, r3, r2, r3
 800735c:	095b      	lsrs	r3, r3, #5
 800735e:	f003 020f 	and.w	r2, r3, #15
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4422      	add	r2, r4
 800736a:	609a      	str	r2, [r3, #8]
}
 800736c:	bf00      	nop
 800736e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007372:	46bd      	mov	sp, r7
 8007374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007378:	51eb851f 	.word	0x51eb851f

0800737c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d123      	bne.n	80073d6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007396:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	6851      	ldr	r1, [r2, #4]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	4311      	orrs	r1, r2
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	68d2      	ldr	r2, [r2, #12]
 80073a8:	4311      	orrs	r1, r2
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	6912      	ldr	r2, [r2, #16]
 80073ae:	4311      	orrs	r1, r2
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	6952      	ldr	r2, [r2, #20]
 80073b4:	4311      	orrs	r1, r2
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	6992      	ldr	r2, [r2, #24]
 80073ba:	4311      	orrs	r1, r2
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	69d2      	ldr	r2, [r2, #28]
 80073c0:	4311      	orrs	r1, r2
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	6a12      	ldr	r2, [r2, #32]
 80073c6:	4311      	orrs	r1, r2
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073cc:	430a      	orrs	r2, r1
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e028      	b.n	8007428 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	69d9      	ldr	r1, [r3, #28]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4319      	orrs	r1, r3
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	430b      	orrs	r3, r1
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80073fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	6851      	ldr	r1, [r2, #4]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	6892      	ldr	r2, [r2, #8]
 8007408:	4311      	orrs	r1, r2
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	4311      	orrs	r1, r2
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	6912      	ldr	r2, [r2, #16]
 8007414:	4311      	orrs	r1, r2
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	6952      	ldr	r2, [r2, #20]
 800741a:	4311      	orrs	r1, r2
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	6992      	ldr	r2, [r2, #24]
 8007420:	430a      	orrs	r2, r1
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d128      	bne.n	800749a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	1e59      	subs	r1, r3, #1
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	3b01      	subs	r3, #1
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	4319      	orrs	r1, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	3b01      	subs	r3, #1
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	4319      	orrs	r1, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	3b01      	subs	r3, #1
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	4319      	orrs	r1, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	3b01      	subs	r3, #1
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	4319      	orrs	r1, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	3b01      	subs	r3, #1
 8007484:	051b      	lsls	r3, r3, #20
 8007486:	4319      	orrs	r1, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	3b01      	subs	r3, #1
 800748e:	061b      	lsls	r3, r3, #24
 8007490:	430b      	orrs	r3, r1
 8007492:	431a      	orrs	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	609a      	str	r2, [r3, #8]
 8007498:	e02f      	b.n	80074fa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	68d2      	ldr	r2, [r2, #12]
 80074aa:	3a01      	subs	r2, #1
 80074ac:	0311      	lsls	r1, r2, #12
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	6952      	ldr	r2, [r2, #20]
 80074b2:	3a01      	subs	r2, #1
 80074b4:	0512      	lsls	r2, r2, #20
 80074b6:	430a      	orrs	r2, r1
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	1e59      	subs	r1, r3, #1
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	4319      	orrs	r1, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	3b01      	subs	r3, #1
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	4319      	orrs	r1, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	4319      	orrs	r1, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	061b      	lsls	r3, r3, #24
 80074f2:	430b      	orrs	r3, r1
 80074f4:	431a      	orrs	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f043 0201 	orr.w	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f023 0201 	bic.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007566:	d901      	bls.n	800756c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e01b      	b.n	80075a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	daf2      	bge.n	800755a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	019b      	lsls	r3, r3, #6
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007590:	d901      	bls.n	8007596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e006      	b.n	80075a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d0f0      	beq.n	8007584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c8:	d901      	bls.n	80075ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e018      	b.n	8007600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	daf2      	bge.n	80075bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2210      	movs	r2, #16
 80075de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ec:	d901      	bls.n	80075f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e006      	b.n	8007600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d0f0      	beq.n	80075e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800760c:	b480      	push	{r7}
 800760e:	b08b      	sub	sp, #44	@ 0x2c
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	089b      	lsrs	r3, r3, #2
 8007626:	b29b      	uxth	r3, r3
 8007628:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007632:	2300      	movs	r3, #0
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	e014      	b.n	8007662 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	601a      	str	r2, [r3, #0]
    pDest++;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	3301      	adds	r3, #1
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	3301      	adds	r3, #1
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	3301      	adds	r3, #1
 8007654:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	3301      	adds	r3, #1
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	3301      	adds	r3, #1
 8007660:	623b      	str	r3, [r7, #32]
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	429a      	cmp	r2, r3
 8007668:	d3e6      	bcc.n	8007638 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800766a:	8bfb      	ldrh	r3, [r7, #30]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01e      	beq.n	80076ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800767a:	461a      	mov	r2, r3
 800767c:	f107 0310 	add.w	r3, r7, #16
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
 8007690:	b2da      	uxtb	r2, r3
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	701a      	strb	r2, [r3, #0]
      i++;
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	3301      	adds	r3, #1
 800769a:	623b      	str	r3, [r7, #32]
      pDest++;
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	3301      	adds	r3, #1
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076a2:	8bfb      	ldrh	r3, [r7, #30]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076a8:	8bfb      	ldrh	r3, [r7, #30]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ea      	bne.n	8007684 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	372c      	adds	r7, #44	@ 0x2c
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007716:	68bb      	ldr	r3, [r7, #8]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0301 	and.w	r3, r3, #1
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007778:	4313      	orrs	r3, r2
 800777a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d107      	bne.n	8007792 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007788:	461a      	mov	r2, r3
 800778a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800778e:	6053      	str	r3, [r2, #4]
 8007790:	e00c      	b.n	80077ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	2b02      	cmp	r3, #2
 8007796:	d107      	bne.n	80077a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800779e:	461a      	mov	r2, r3
 80077a0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80077a4:	6053      	str	r3, [r2, #4]
 80077a6:	e001      	b.n	80077ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	b29b      	uxth	r3, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80077dc:	b480      	push	{r7}
 80077de:	b089      	sub	sp, #36	@ 0x24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	0c9b      	lsrs	r3, r3, #18
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	0fdb      	lsrs	r3, r3, #31
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	0fdb      	lsrs	r3, r3, #31
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0320 	and.w	r3, r3, #32
 800783e:	2b20      	cmp	r3, #32
 8007840:	d10d      	bne.n	800785e <USB_HC_Halt+0x82>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <USB_HC_Halt+0x82>
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d002      	beq.n	800785a <USB_HC_Halt+0x7e>
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d101      	bne.n	800785e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	e0d8      	b.n	8007a10 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <USB_HC_Halt+0x8e>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d173      	bne.n	8007952 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	440a      	add	r2, r1
 8007880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007888:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d14a      	bne.n	800792c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d133      	bne.n	800790a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	0151      	lsls	r1, r2, #5
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	440a      	add	r2, r1
 80078b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078e0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ee:	d82e      	bhi.n	800794e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007906:	d0ec      	beq.n	80078e2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007908:	e081      	b.n	8007a0e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	440a      	add	r2, r1
 8007920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007924:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007928:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800792a:	e070      	b.n	8007a0e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007946:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800794a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800794c:	e05f      	b.n	8007a0e <USB_HC_Halt+0x232>
            break;
 800794e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007950:	e05d      	b.n	8007a0e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	440a      	add	r2, r1
 8007968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007970:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d133      	bne.n	80079ea <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	440a      	add	r2, r1
 8007998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800799c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079c0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079ce:	d81d      	bhi.n	8007a0c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e6:	d0ec      	beq.n	80079c2 <USB_HC_Halt+0x1e6>
 80079e8:	e011      	b.n	8007a0e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e000      	b.n	8007a0e <USB_HC_Halt+0x232>
          break;
 8007a0c:	bf00      	nop
    }
  }

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3724      	adds	r7, #36	@ 0x24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fd7a 	bl	800752a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a36:	2110      	movs	r1, #16
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fd87 	bl	800754c <USB_FlushTxFifo>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff fdb1 	bl	80075b0 <USB_FlushRxFifo>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e01f      	b.n	8007a9e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a92:	461a      	mov	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b0f      	cmp	r3, #15
 8007aa2:	d9dc      	bls.n	8007a5e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e034      	b.n	8007b14 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ac0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ac8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ad0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ade:	461a      	mov	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007af0:	d80c      	bhi.n	8007b0c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b08:	d0ec      	beq.n	8007ae4 <USB_StopHost+0xc8>
 8007b0a:	e000      	b.n	8007b0e <USB_StopHost+0xf2>
        break;
 8007b0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	3301      	adds	r3, #1
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d9c7      	bls.n	8007aaa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b20:	461a      	mov	r2, r3
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295
 8007b26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fce9 	bl	8007508 <USB_EnableGlobalInt>

  return ret;
 8007b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f804 	bl	8007b64 <USBH_HandleSof>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b0b      	cmp	r3, #11
 8007b74:	d10a      	bne.n	8007b8c <USBH_HandleSof+0x28>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4619      	mov	r1, r3
 8007bbc:	f000 f8ae 	bl	8007d1c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bc0:	bf00      	nop
}
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007bd8:	bf00      	nop
}
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f000 f87e 	bl	8007d1c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 f928 	bl	8008ea0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	791b      	ldrb	r3, [r3, #4]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f830 	bl	8007cbc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	795b      	ldrb	r3, [r3, #5]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f82a 	bl	8007cbc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f000 f84c 	bl	8007d1c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007caa:	2200      	movs	r2, #0
 8007cac:	4619      	mov	r1, r3
 8007cae:	f000 f835 	bl	8007d1c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	d80d      	bhi.n	8007cea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	33e0      	adds	r3, #224	@ 0xe0
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	33e0      	adds	r3, #224	@ 0xe0
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cfe:	f3ef 8305 	mrs	r3, IPSR
 8007d02:	607b      	str	r3, [r7, #4]
  return(result);
 8007d04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <osMessagePut+0x1e>
    ticks = 1;
 8007d36:	2301      	movs	r3, #1
 8007d38:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007d3a:	f7ff ffdd 	bl	8007cf8 <inHandlerMode>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d018      	beq.n	8007d76 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007d44:	f107 0210 	add.w	r2, r7, #16
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f9ae 	bl	80080b0 <xQueueGenericSendFromISR>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d001      	beq.n	8007d5e <osMessagePut+0x42>
      return osErrorOS;
 8007d5a:	23ff      	movs	r3, #255	@ 0xff
 8007d5c:	e018      	b.n	8007d90 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d014      	beq.n	8007d8e <osMessagePut+0x72>
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <osMessagePut+0x7c>)
 8007d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	e00b      	b.n	8007d8e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007d76:	f107 0108 	add.w	r1, r7, #8
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f894 	bl	8007eac <xQueueGenericSend>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d001      	beq.n	8007d8e <osMessagePut+0x72>
      return osErrorOS;
 8007d8a:	23ff      	movs	r3, #255	@ 0xff
 8007d8c:	e000      	b.n	8007d90 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d103      	bne.n	8007e04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e00c      	b.n	8007e1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3308      	adds	r3, #8
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e002      	b.n	8007e12 <vListInsert+0x2e>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d2f6      	bcs.n	8007e0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6892      	ldr	r2, [r2, #8]
 8007e6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6852      	ldr	r2, [r2, #4]
 8007e76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d103      	bne.n	8007e8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
	...

08007eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	@ 0x38
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <xQueueGenericSend+0x42>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <xQueueGenericSend+0x46>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <xQueueGenericSend+0x48>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <xQueueGenericSend+0x64>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d103      	bne.n	8007f1e <xQueueGenericSend+0x72>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <xQueueGenericSend+0x76>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <xQueueGenericSend+0x78>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10b      	bne.n	8007f40 <xQueueGenericSend+0x94>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	623b      	str	r3, [r7, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f40:	f000 fd40 	bl	80089c4 <xTaskGetSchedulerState>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <xQueueGenericSend+0xa4>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <xQueueGenericSend+0xa8>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <xQueueGenericSend+0xaa>
 8007f54:	2300      	movs	r3, #0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <xQueueGenericSend+0xc6>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fb      	str	r3, [r7, #28]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f72:	f000 fe49 	bl	8008c08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d302      	bcc.n	8007f88 <xQueueGenericSend+0xdc>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d129      	bne.n	8007fdc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f8e:	f000 f92d 	bl	80081ec <prvCopyDataToQueue>
 8007f92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d010      	beq.n	8007fbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	3324      	adds	r3, #36	@ 0x24
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fc05 	bl	80087b0 <xTaskRemoveFromEventList>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d013      	beq.n	8007fd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fac:	4b3f      	ldr	r3, [pc, #252]	@ (80080ac <xQueueGenericSend+0x200>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	e00a      	b.n	8007fd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d007      	beq.n	8007fd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fc4:	4b39      	ldr	r3, [pc, #228]	@ (80080ac <xQueueGenericSend+0x200>)
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fd4:	f000 fe4a 	bl	8008c6c <vPortExitCritical>
				return pdPASS;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e063      	b.n	80080a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fe2:	f000 fe43 	bl	8008c6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e05c      	b.n	80080a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d106      	bne.n	8007ffe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fc3f 	bl	8008878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ffe:	f000 fe35 	bl	8008c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008002:	f000 f9c7 	bl	8008394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008006:	f000 fdff 	bl	8008c08 <vPortEnterCritical>
 800800a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008010:	b25b      	sxtb	r3, r3
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008016:	d103      	bne.n	8008020 <xQueueGenericSend+0x174>
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008026:	b25b      	sxtb	r3, r3
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d103      	bne.n	8008036 <xQueueGenericSend+0x18a>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008036:	f000 fe19 	bl	8008c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800803a:	1d3a      	adds	r2, r7, #4
 800803c:	f107 0314 	add.w	r3, r7, #20
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fc2e 	bl	80088a4 <xTaskCheckForTimeOut>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d124      	bne.n	8008098 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800804e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008050:	f000 f988 	bl	8008364 <prvIsQueueFull>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d018      	beq.n	800808c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	3310      	adds	r3, #16
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	4611      	mov	r1, r2
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fb7e 	bl	8008764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800806a:	f000 f929 	bl	80082c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800806e:	f000 f99f 	bl	80083b0 <xTaskResumeAll>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	f47f af7c 	bne.w	8007f72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800807a:	4b0c      	ldr	r3, [pc, #48]	@ (80080ac <xQueueGenericSend+0x200>)
 800807c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	e772      	b.n	8007f72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800808c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800808e:	f000 f917 	bl	80082c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008092:	f000 f98d 	bl	80083b0 <xTaskResumeAll>
 8008096:	e76c      	b.n	8007f72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800809a:	f000 f911 	bl	80082c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800809e:	f000 f987 	bl	80083b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3738      	adds	r7, #56	@ 0x38
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b090      	sub	sp, #64	@ 0x40
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10b      	bne.n	80080e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d103      	bne.n	80080ee <xQueueGenericSendFromISR+0x3e>
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <xQueueGenericSendFromISR+0x42>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <xQueueGenericSendFromISR+0x44>
 80080f2:	2300      	movs	r3, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d103      	bne.n	800811e <xQueueGenericSendFromISR+0x6e>
 8008116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <xQueueGenericSendFromISR+0x72>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <xQueueGenericSendFromISR+0x74>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10b      	bne.n	8008140 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	623b      	str	r3, [r7, #32]
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008140:	f000 fe14 	bl	8008d6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008144:	f3ef 8211 	mrs	r2, BASEPRI
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61fa      	str	r2, [r7, #28]
 800815a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800815c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800815e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008168:	429a      	cmp	r2, r3
 800816a:	d302      	bcc.n	8008172 <xQueueGenericSendFromISR+0xc2>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d12f      	bne.n	80081d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008178:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008180:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008188:	f000 f830 	bl	80081ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800818c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008194:	d112      	bne.n	80081bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d016      	beq.n	80081cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	3324      	adds	r3, #36	@ 0x24
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fb04 	bl	80087b0 <xTaskRemoveFromEventList>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00e      	beq.n	80081cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e007      	b.n	80081cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081c0:	3301      	adds	r3, #1
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	b25a      	sxtb	r2, r3
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80081cc:	2301      	movs	r3, #1
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80081d0:	e001      	b.n	80081d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3740      	adds	r7, #64	@ 0x40
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d14d      	bne.n	80082ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 fbf2 	bl	8008a00 <xTaskPriorityDisinherit>
 800821c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	e043      	b.n	80082ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d119      	bne.n	8008260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6858      	ldr	r0, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008234:	461a      	mov	r2, r3
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	f000 fea6 	bl	8008f88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008244:	441a      	add	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	429a      	cmp	r2, r3
 8008254:	d32b      	bcc.n	80082ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e026      	b.n	80082ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68d8      	ldr	r0, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008268:	461a      	mov	r2, r3
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	f000 fe8c 	bl	8008f88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008278:	425b      	negs	r3, r3
 800827a:	441a      	add	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d207      	bcs.n	800829c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008294:	425b      	negs	r3, r3
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d105      	bne.n	80082ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80082b6:	697b      	ldr	r3, [r7, #20]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082c8:	f000 fc9e 	bl	8008c08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082d4:	e011      	b.n	80082fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d012      	beq.n	8008304 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3324      	adds	r3, #36	@ 0x24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fa64 	bl	80087b0 <xTaskRemoveFromEventList>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082ee:	f000 fb3d 	bl	800896c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dce9      	bgt.n	80082d6 <prvUnlockQueue+0x16>
 8008302:	e000      	b.n	8008306 <prvUnlockQueue+0x46>
					break;
 8008304:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	22ff      	movs	r2, #255	@ 0xff
 800830a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800830e:	f000 fcad 	bl	8008c6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008312:	f000 fc79 	bl	8008c08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800831c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800831e:	e011      	b.n	8008344 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d012      	beq.n	800834e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3310      	adds	r3, #16
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fa3f 	bl	80087b0 <xTaskRemoveFromEventList>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008338:	f000 fb18 	bl	800896c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	3b01      	subs	r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dce9      	bgt.n	8008320 <prvUnlockQueue+0x60>
 800834c:	e000      	b.n	8008350 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800834e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	22ff      	movs	r2, #255	@ 0xff
 8008354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008358:	f000 fc88 	bl	8008c6c <vPortExitCritical>
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800836c:	f000 fc4c 	bl	8008c08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	429a      	cmp	r2, r3
 800837a:	d102      	bne.n	8008382 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e001      	b.n	8008386 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008386:	f000 fc71 	bl	8008c6c <vPortExitCritical>

	return xReturn;
 800838a:	68fb      	ldr	r3, [r7, #12]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008398:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <vTaskSuspendAll+0x18>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	4a03      	ldr	r2, [pc, #12]	@ (80083ac <vTaskSuspendAll+0x18>)
 80083a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083a2:	bf00      	nop
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	2000044c 	.word	0x2000044c

080083b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083be:	4b42      	ldr	r3, [pc, #264]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <xTaskResumeAll+0x2e>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	603b      	str	r3, [r7, #0]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083de:	f000 fc13 	bl	8008c08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083e2:	4b39      	ldr	r3, [pc, #228]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4a37      	ldr	r2, [pc, #220]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ec:	4b36      	ldr	r3, [pc, #216]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d161      	bne.n	80084b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083f4:	4b35      	ldr	r3, [pc, #212]	@ (80084cc <xTaskResumeAll+0x11c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05d      	beq.n	80084b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083fc:	e02e      	b.n	800845c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b34      	ldr	r3, [pc, #208]	@ (80084d0 <xTaskResumeAll+0x120>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3318      	adds	r3, #24
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fd23 	bl	8007e56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fd1e 	bl	8007e56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841e:	2201      	movs	r2, #1
 8008420:	409a      	lsls	r2, r3
 8008422:	4b2c      	ldr	r3, [pc, #176]	@ (80084d4 <xTaskResumeAll+0x124>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4313      	orrs	r3, r2
 8008428:	4a2a      	ldr	r2, [pc, #168]	@ (80084d4 <xTaskResumeAll+0x124>)
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4a27      	ldr	r2, [pc, #156]	@ (80084d8 <xTaskResumeAll+0x128>)
 800843a:	441a      	add	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3304      	adds	r3, #4
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f7ff fcaa 	bl	8007d9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844c:	4b23      	ldr	r3, [pc, #140]	@ (80084dc <xTaskResumeAll+0x12c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008452:	429a      	cmp	r2, r3
 8008454:	d302      	bcc.n	800845c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008456:	4b22      	ldr	r3, [pc, #136]	@ (80084e0 <xTaskResumeAll+0x130>)
 8008458:	2201      	movs	r2, #1
 800845a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800845c:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <xTaskResumeAll+0x120>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1cc      	bne.n	80083fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800846a:	f000 fa8b 	bl	8008984 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800846e:	4b1d      	ldr	r3, [pc, #116]	@ (80084e4 <xTaskResumeAll+0x134>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d010      	beq.n	800849c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800847a:	f000 f837 	bl	80084ec <xTaskIncrementTick>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008484:	4b16      	ldr	r3, [pc, #88]	@ (80084e0 <xTaskResumeAll+0x130>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3b01      	subs	r3, #1
 800848e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1f1      	bne.n	800847a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008496:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <xTaskResumeAll+0x134>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800849c:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <xTaskResumeAll+0x130>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d009      	beq.n	80084b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084a8:	4b0f      	ldr	r3, [pc, #60]	@ (80084e8 <xTaskResumeAll+0x138>)
 80084aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084b8:	f000 fbd8 	bl	8008c6c <vPortExitCritical>

	return xAlreadyYielded;
 80084bc:	68bb      	ldr	r3, [r7, #8]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	2000044c 	.word	0x2000044c
 80084cc:	2000042c 	.word	0x2000042c
 80084d0:	20000404 	.word	0x20000404
 80084d4:	20000434 	.word	0x20000434
 80084d8:	20000370 	.word	0x20000370
 80084dc:	2000036c 	.word	0x2000036c
 80084e0:	20000440 	.word	0x20000440
 80084e4:	2000043c 	.word	0x2000043c
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008634 <xTaskIncrementTick+0x148>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f040 808f 	bne.w	800861e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008500:	4b4d      	ldr	r3, [pc, #308]	@ (8008638 <xTaskIncrementTick+0x14c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008508:	4a4b      	ldr	r2, [pc, #300]	@ (8008638 <xTaskIncrementTick+0x14c>)
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d121      	bne.n	8008558 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008514:	4b49      	ldr	r3, [pc, #292]	@ (800863c <xTaskIncrementTick+0x150>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <xTaskIncrementTick+0x4a>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	603b      	str	r3, [r7, #0]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <xTaskIncrementTick+0x46>
 8008536:	4b41      	ldr	r3, [pc, #260]	@ (800863c <xTaskIncrementTick+0x150>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	4b40      	ldr	r3, [pc, #256]	@ (8008640 <xTaskIncrementTick+0x154>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a3e      	ldr	r2, [pc, #248]	@ (800863c <xTaskIncrementTick+0x150>)
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	4a3e      	ldr	r2, [pc, #248]	@ (8008640 <xTaskIncrementTick+0x154>)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	4b3e      	ldr	r3, [pc, #248]	@ (8008644 <xTaskIncrementTick+0x158>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	4a3c      	ldr	r2, [pc, #240]	@ (8008644 <xTaskIncrementTick+0x158>)
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	f000 fa16 	bl	8008984 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008558:	4b3b      	ldr	r3, [pc, #236]	@ (8008648 <xTaskIncrementTick+0x15c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	429a      	cmp	r2, r3
 8008560:	d348      	bcc.n	80085f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008562:	4b36      	ldr	r3, [pc, #216]	@ (800863c <xTaskIncrementTick+0x150>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d104      	bne.n	8008576 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800856c:	4b36      	ldr	r3, [pc, #216]	@ (8008648 <xTaskIncrementTick+0x15c>)
 800856e:	f04f 32ff 	mov.w	r2, #4294967295
 8008572:	601a      	str	r2, [r3, #0]
					break;
 8008574:	e03e      	b.n	80085f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008576:	4b31      	ldr	r3, [pc, #196]	@ (800863c <xTaskIncrementTick+0x150>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	429a      	cmp	r2, r3
 800858c:	d203      	bcs.n	8008596 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800858e:	4a2e      	ldr	r2, [pc, #184]	@ (8008648 <xTaskIncrementTick+0x15c>)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008594:	e02e      	b.n	80085f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	3304      	adds	r3, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fc5b 	bl	8007e56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	3318      	adds	r3, #24
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff fc52 	bl	8007e56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b6:	2201      	movs	r2, #1
 80085b8:	409a      	lsls	r2, r3
 80085ba:	4b24      	ldr	r3, [pc, #144]	@ (800864c <xTaskIncrementTick+0x160>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4313      	orrs	r3, r2
 80085c0:	4a22      	ldr	r2, [pc, #136]	@ (800864c <xTaskIncrementTick+0x160>)
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c8:	4613      	mov	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008650 <xTaskIncrementTick+0x164>)
 80085d2:	441a      	add	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	3304      	adds	r3, #4
 80085d8:	4619      	mov	r1, r3
 80085da:	4610      	mov	r0, r2
 80085dc:	f7ff fbde 	bl	8007d9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008654 <xTaskIncrementTick+0x168>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d3b9      	bcc.n	8008562 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80085ee:	2301      	movs	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f2:	e7b6      	b.n	8008562 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085f4:	4b17      	ldr	r3, [pc, #92]	@ (8008654 <xTaskIncrementTick+0x168>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4915      	ldr	r1, [pc, #84]	@ (8008650 <xTaskIncrementTick+0x164>)
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d901      	bls.n	8008610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008610:	4b11      	ldr	r3, [pc, #68]	@ (8008658 <xTaskIncrementTick+0x16c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	e004      	b.n	8008628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800861e:	4b0f      	ldr	r3, [pc, #60]	@ (800865c <xTaskIncrementTick+0x170>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	4a0d      	ldr	r2, [pc, #52]	@ (800865c <xTaskIncrementTick+0x170>)
 8008626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008628:	697b      	ldr	r3, [r7, #20]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	2000044c 	.word	0x2000044c
 8008638:	20000430 	.word	0x20000430
 800863c:	200003fc 	.word	0x200003fc
 8008640:	20000400 	.word	0x20000400
 8008644:	20000444 	.word	0x20000444
 8008648:	20000448 	.word	0x20000448
 800864c:	20000434 	.word	0x20000434
 8008650:	20000370 	.word	0x20000370
 8008654:	2000036c 	.word	0x2000036c
 8008658:	20000440 	.word	0x20000440
 800865c:	2000043c 	.word	0x2000043c

08008660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008666:	4b3a      	ldr	r3, [pc, #232]	@ (8008750 <vTaskSwitchContext+0xf0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800866e:	4b39      	ldr	r3, [pc, #228]	@ (8008754 <vTaskSwitchContext+0xf4>)
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008674:	e067      	b.n	8008746 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8008676:	4b37      	ldr	r3, [pc, #220]	@ (8008754 <vTaskSwitchContext+0xf4>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800867c:	4b36      	ldr	r3, [pc, #216]	@ (8008758 <vTaskSwitchContext+0xf8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	61fb      	str	r3, [r7, #28]
 8008684:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	429a      	cmp	r2, r3
 8008692:	d111      	bne.n	80086b8 <vTaskSwitchContext+0x58>
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	3304      	adds	r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	429a      	cmp	r2, r3
 800869e:	d10b      	bne.n	80086b8 <vTaskSwitchContext+0x58>
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	3308      	adds	r3, #8
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d105      	bne.n	80086b8 <vTaskSwitchContext+0x58>
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	330c      	adds	r3, #12
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d008      	beq.n	80086ca <vTaskSwitchContext+0x6a>
 80086b8:	4b27      	ldr	r3, [pc, #156]	@ (8008758 <vTaskSwitchContext+0xf8>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	4b26      	ldr	r3, [pc, #152]	@ (8008758 <vTaskSwitchContext+0xf8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3334      	adds	r3, #52	@ 0x34
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7f7 ff0b 	bl	80004e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b24      	ldr	r3, [pc, #144]	@ (800875c <vTaskSwitchContext+0xfc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	fab3 f383 	clz	r3, r3
 80086d6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	f1c3 031f 	rsb	r3, r3, #31
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	491f      	ldr	r1, [pc, #124]	@ (8008760 <vTaskSwitchContext+0x100>)
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <vTaskSwitchContext+0xac>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	607b      	str	r3, [r7, #4]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <vTaskSwitchContext+0xa8>
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4a12      	ldr	r2, [pc, #72]	@ (8008760 <vTaskSwitchContext+0x100>)
 8008718:	4413      	add	r3, r2
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	3308      	adds	r3, #8
 800872e:	429a      	cmp	r2, r3
 8008730:	d104      	bne.n	800873c <vTaskSwitchContext+0xdc>
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	605a      	str	r2, [r3, #4]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	4a05      	ldr	r2, [pc, #20]	@ (8008758 <vTaskSwitchContext+0xf8>)
 8008744:	6013      	str	r3, [r2, #0]
}
 8008746:	bf00      	nop
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	2000044c 	.word	0x2000044c
 8008754:	20000440 	.word	0x20000440
 8008758:	2000036c 	.word	0x2000036c
 800875c:	20000434 	.word	0x20000434
 8008760:	20000370 	.word	0x20000370

08008764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60fb      	str	r3, [r7, #12]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800878c:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <vTaskPlaceOnEventList+0x48>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3318      	adds	r3, #24
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff fb25 	bl	8007de4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800879a:	2101      	movs	r1, #1
 800879c:	6838      	ldr	r0, [r7, #0]
 800879e:	f000 f9b7 	bl	8008b10 <prvAddCurrentTaskToDelayedList>
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	2000036c 	.word	0x2000036c

080087b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	60fb      	str	r3, [r7, #12]
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	e7fd      	b.n	80087da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	3318      	adds	r3, #24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fb37 	bl	8007e56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008860 <xTaskRemoveFromEventList+0xb0>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11c      	bne.n	800882a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fb2e 	bl	8007e56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fe:	2201      	movs	r2, #1
 8008800:	409a      	lsls	r2, r3
 8008802:	4b18      	ldr	r3, [pc, #96]	@ (8008864 <xTaskRemoveFromEventList+0xb4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4313      	orrs	r3, r2
 8008808:	4a16      	ldr	r2, [pc, #88]	@ (8008864 <xTaskRemoveFromEventList+0xb4>)
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4a13      	ldr	r2, [pc, #76]	@ (8008868 <xTaskRemoveFromEventList+0xb8>)
 800881a:	441a      	add	r2, r3
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f7ff faba 	bl	8007d9c <vListInsertEnd>
 8008828:	e005      	b.n	8008836 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3318      	adds	r3, #24
 800882e:	4619      	mov	r1, r3
 8008830:	480e      	ldr	r0, [pc, #56]	@ (800886c <xTaskRemoveFromEventList+0xbc>)
 8008832:	f7ff fab3 	bl	8007d9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883a:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <xTaskRemoveFromEventList+0xc0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008840:	429a      	cmp	r2, r3
 8008842:	d905      	bls.n	8008850 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008844:	2301      	movs	r3, #1
 8008846:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008848:	4b0a      	ldr	r3, [pc, #40]	@ (8008874 <xTaskRemoveFromEventList+0xc4>)
 800884a:	2201      	movs	r2, #1
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e001      	b.n	8008854 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008854:	697b      	ldr	r3, [r7, #20]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	2000044c 	.word	0x2000044c
 8008864:	20000434 	.word	0x20000434
 8008868:	20000370 	.word	0x20000370
 800886c:	20000404 	.word	0x20000404
 8008870:	2000036c 	.word	0x2000036c
 8008874:	20000440 	.word	0x20000440

08008878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008880:	4b06      	ldr	r3, [pc, #24]	@ (800889c <vTaskInternalSetTimeOutState+0x24>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <vTaskInternalSetTimeOutState+0x28>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	605a      	str	r2, [r3, #4]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000444 	.word	0x20000444
 80088a0:	20000430 	.word	0x20000430

080088a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	613b      	str	r3, [r7, #16]
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60fb      	str	r3, [r7, #12]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80088ea:	f000 f98d 	bl	8008c08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <xTaskCheckForTimeOut+0xc0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008906:	d102      	bne.n	800890e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008908:	2300      	movs	r3, #0
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	e023      	b.n	8008956 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b15      	ldr	r3, [pc, #84]	@ (8008968 <xTaskCheckForTimeOut+0xc4>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d007      	beq.n	800892a <xTaskCheckForTimeOut+0x86>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	429a      	cmp	r2, r3
 8008922:	d302      	bcc.n	800892a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008924:	2301      	movs	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
 8008928:	e015      	b.n	8008956 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	429a      	cmp	r2, r3
 8008932:	d20b      	bcs.n	800894c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	1ad2      	subs	r2, r2, r3
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ff99 	bl	8008878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008946:	2300      	movs	r3, #0
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	e004      	b.n	8008956 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008952:	2301      	movs	r3, #1
 8008954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008956:	f000 f989 	bl	8008c6c <vPortExitCritical>

	return xReturn;
 800895a:	69fb      	ldr	r3, [r7, #28]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000430 	.word	0x20000430
 8008968:	20000444 	.word	0x20000444

0800896c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008970:	4b03      	ldr	r3, [pc, #12]	@ (8008980 <vTaskMissedYield+0x14>)
 8008972:	2201      	movs	r2, #1
 8008974:	601a      	str	r2, [r3, #0]
}
 8008976:	bf00      	nop
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	20000440 	.word	0x20000440

08008984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800898a:	4b0c      	ldr	r3, [pc, #48]	@ (80089bc <prvResetNextTaskUnblockTime+0x38>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008994:	4b0a      	ldr	r3, [pc, #40]	@ (80089c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800899c:	e008      	b.n	80089b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800899e:	4b07      	ldr	r3, [pc, #28]	@ (80089bc <prvResetNextTaskUnblockTime+0x38>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4a04      	ldr	r2, [pc, #16]	@ (80089c0 <prvResetNextTaskUnblockTime+0x3c>)
 80089ae:	6013      	str	r3, [r2, #0]
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	200003fc 	.word	0x200003fc
 80089c0:	20000448 	.word	0x20000448

080089c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089ca:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <xTaskGetSchedulerState+0x34>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d102      	bne.n	80089d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089d2:	2301      	movs	r3, #1
 80089d4:	607b      	str	r3, [r7, #4]
 80089d6:	e008      	b.n	80089ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d8:	4b08      	ldr	r3, [pc, #32]	@ (80089fc <xTaskGetSchedulerState+0x38>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089e0:	2302      	movs	r3, #2
 80089e2:	607b      	str	r3, [r7, #4]
 80089e4:	e001      	b.n	80089ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089ea:	687b      	ldr	r3, [r7, #4]
	}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	20000438 	.word	0x20000438
 80089fc:	2000044c 	.word	0x2000044c

08008a00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d070      	beq.n	8008af8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a16:	4b3b      	ldr	r3, [pc, #236]	@ (8008b04 <xTaskPriorityDisinherit+0x104>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d00b      	beq.n	8008a38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	60fb      	str	r3, [r7, #12]
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	60bb      	str	r3, [r7, #8]
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a5c:	1e5a      	subs	r2, r3, #1
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d044      	beq.n	8008af8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d140      	bne.n	8008af8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff f9eb 	bl	8007e56 <uxListRemove>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d115      	bne.n	8008ab2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8a:	491f      	ldr	r1, [pc, #124]	@ (8008b08 <xTaskPriorityDisinherit+0x108>)
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <xTaskPriorityDisinherit+0xb2>
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	43da      	mvns	r2, r3
 8008aa8:	4b18      	ldr	r3, [pc, #96]	@ (8008b0c <xTaskPriorityDisinherit+0x10c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4013      	ands	r3, r2
 8008aae:	4a17      	ldr	r2, [pc, #92]	@ (8008b0c <xTaskPriorityDisinherit+0x10c>)
 8008ab0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abe:	f1c3 0207 	rsb	r2, r3, #7
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aca:	2201      	movs	r2, #1
 8008acc:	409a      	lsls	r2, r3
 8008ace:	4b0f      	ldr	r3, [pc, #60]	@ (8008b0c <xTaskPriorityDisinherit+0x10c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8008b0c <xTaskPriorityDisinherit+0x10c>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a08      	ldr	r2, [pc, #32]	@ (8008b08 <xTaskPriorityDisinherit+0x108>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7ff f954 	bl	8007d9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008af8:	697b      	ldr	r3, [r7, #20]
	}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	2000036c 	.word	0x2000036c
 8008b08:	20000370 	.word	0x20000370
 8008b0c:	20000434 	.word	0x20000434

08008b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b1a:	4b29      	ldr	r3, [pc, #164]	@ (8008bc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b20:	4b28      	ldr	r3, [pc, #160]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f995 	bl	8007e56 <uxListRemove>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b32:	4b24      	ldr	r3, [pc, #144]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	2201      	movs	r2, #1
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43da      	mvns	r2, r3
 8008b40:	4b21      	ldr	r3, [pc, #132]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4013      	ands	r3, r2
 8008b46:	4a20      	ldr	r2, [pc, #128]	@ (8008bc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d10a      	bne.n	8008b68 <prvAddCurrentTaskToDelayedList+0x58>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b58:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	4619      	mov	r1, r3
 8008b60:	481a      	ldr	r0, [pc, #104]	@ (8008bcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b62:	f7ff f91b 	bl	8007d9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b66:	e026      	b.n	8008bb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b70:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d209      	bcs.n	8008b94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b80:	4b13      	ldr	r3, [pc, #76]	@ (8008bd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7ff f929 	bl	8007de4 <vListInsert>
}
 8008b92:	e010      	b.n	8008bb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b94:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	f7ff f91f 	bl	8007de4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d202      	bcs.n	8008bb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008bb0:	4a09      	ldr	r2, [pc, #36]	@ (8008bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6013      	str	r3, [r2, #0]
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000430 	.word	0x20000430
 8008bc4:	2000036c 	.word	0x2000036c
 8008bc8:	20000434 	.word	0x20000434
 8008bcc:	20000418 	.word	0x20000418
 8008bd0:	20000400 	.word	0x20000400
 8008bd4:	200003fc 	.word	0x200003fc
 8008bd8:	20000448 	.word	0x20000448
 8008bdc:	00000000 	.word	0x00000000

08008be0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <pxCurrentTCBConst2>)
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	f380 8809 	msr	PSP, r0
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	4770      	bx	lr
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst2>:
 8008c00:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c22:	4b10      	ldr	r3, [pc, #64]	@ (8008c64 <vPortEnterCritical+0x5c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3301      	adds	r3, #1
 8008c28:	4a0e      	ldr	r2, [pc, #56]	@ (8008c64 <vPortEnterCritical+0x5c>)
 8008c2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c64 <vPortEnterCritical+0x5c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d110      	bne.n	8008c56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c34:	4b0c      	ldr	r3, [pc, #48]	@ (8008c68 <vPortEnterCritical+0x60>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	603b      	str	r3, [r7, #0]
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	e7fd      	b.n	8008c52 <vPortEnterCritical+0x4a>
	}
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	2000000c 	.word	0x2000000c
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c72:	4b12      	ldr	r3, [pc, #72]	@ (8008cbc <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <vPortExitCritical+0x26>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	607b      	str	r3, [r7, #4]
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	e7fd      	b.n	8008c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c92:	4b0a      	ldr	r3, [pc, #40]	@ (8008cbc <vPortExitCritical+0x50>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	4a08      	ldr	r2, [pc, #32]	@ (8008cbc <vPortExitCritical+0x50>)
 8008c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c9c:	4b07      	ldr	r3, [pc, #28]	@ (8008cbc <vPortExitCritical+0x50>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d105      	bne.n	8008cb0 <vPortExitCritical+0x44>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	f383 8811 	msr	BASEPRI, r3
}
 8008cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	2000000c 	.word	0x2000000c

08008cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cc0:	f3ef 8009 	mrs	r0, PSP
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	4b15      	ldr	r3, [pc, #84]	@ (8008d20 <pxCurrentTCBConst>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	f01e 0f10 	tst.w	lr, #16
 8008cd0:	bf08      	it	eq
 8008cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cda:	6010      	str	r0, [r2, #0]
 8008cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ce4:	f380 8811 	msr	BASEPRI, r0
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f7ff fcb6 	bl	8008660 <vTaskSwitchContext>
 8008cf4:	f04f 0000 	mov.w	r0, #0
 8008cf8:	f380 8811 	msr	BASEPRI, r0
 8008cfc:	bc09      	pop	{r0, r3}
 8008cfe:	6819      	ldr	r1, [r3, #0]
 8008d00:	6808      	ldr	r0, [r1, #0]
 8008d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d06:	f01e 0f10 	tst.w	lr, #16
 8008d0a:	bf08      	it	eq
 8008d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d10:	f380 8809 	msr	PSP, r0
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w

08008d20 <pxCurrentTCBConst>:
 8008d20:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop

08008d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	607b      	str	r3, [r7, #4]
}
 8008d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d42:	f7ff fbd3 	bl	80084ec <xTaskIncrementTick>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d4c:	4b06      	ldr	r3, [pc, #24]	@ (8008d68 <SysTick_Handler+0x40>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	f383 8811 	msr	BASEPRI, r3
}
 8008d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d72:	f3ef 8305 	mrs	r3, IPSR
 8008d76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b0f      	cmp	r3, #15
 8008d7c:	d915      	bls.n	8008daa <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d7e:	4a18      	ldr	r2, [pc, #96]	@ (8008de0 <vPortValidateInterruptPriority+0x74>)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d88:	4b16      	ldr	r3, [pc, #88]	@ (8008de4 <vPortValidateInterruptPriority+0x78>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	7afa      	ldrb	r2, [r7, #11]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d20b      	bcs.n	8008daa <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	607b      	str	r3, [r7, #4]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008daa:	4b0f      	ldr	r3, [pc, #60]	@ (8008de8 <vPortValidateInterruptPriority+0x7c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008db2:	4b0e      	ldr	r3, [pc, #56]	@ (8008dec <vPortValidateInterruptPriority+0x80>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d90b      	bls.n	8008dd2 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	603b      	str	r3, [r7, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <vPortValidateInterruptPriority+0x62>
	}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000e3f0 	.word	0xe000e3f0
 8008de4:	20000450 	.word	0x20000450
 8008de8:	e000ed0c 	.word	0xe000ed0c
 8008dec:	20000454 	.word	0x20000454

08008df0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fe9e 	bl	8007b40 <USBH_LL_IncTimer>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fee2 	bl	8007be4 <USBH_LL_Connect>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fef7 	bl	8007c2a <USBH_LL_Disconnect>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
 8008e50:	4613      	mov	r3, r2
 8008e52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe ff17 	bl	8007c8e <USBH_LL_NotifyURBChange>
#endif
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fe8c 	bl	8007b94 <USBH_LL_PortEnabled>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fe98 	bl	8007bc8 <USBH_LL_PortDisabled>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f9 fd43 	bl	8002942 <HAL_HCD_Stop>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f808 	bl	8008ed8 <USBH_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d817      	bhi.n	8008f1c <USBH_Get_USB_Status+0x44>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <USBH_Get_USB_Status+0x1c>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f0b 	.word	0x08008f0b
 8008efc:	08008f11 	.word	0x08008f11
 8008f00:	08008f17 	.word	0x08008f17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
    break;
 8008f08:	e00b      	b.n	8008f22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0e:	e008      	b.n	8008f22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
    break;
 8008f14:	e005      	b.n	8008f22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f16:	2302      	movs	r3, #2
 8008f18:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1a:	e002      	b.n	8008f22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	bf00      	nop
  }
  return usb_status;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <memset>:
 8008f30:	4402      	add	r2, r0
 8008f32:	4603      	mov	r3, r0
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d100      	bne.n	8008f3a <memset+0xa>
 8008f38:	4770      	bx	lr
 8008f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3e:	e7f9      	b.n	8008f34 <memset+0x4>

08008f40 <__libc_init_array>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4d0d      	ldr	r5, [pc, #52]	@ (8008f78 <__libc_init_array+0x38>)
 8008f44:	4c0d      	ldr	r4, [pc, #52]	@ (8008f7c <__libc_init_array+0x3c>)
 8008f46:	1b64      	subs	r4, r4, r5
 8008f48:	10a4      	asrs	r4, r4, #2
 8008f4a:	2600      	movs	r6, #0
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	d109      	bne.n	8008f64 <__libc_init_array+0x24>
 8008f50:	4d0b      	ldr	r5, [pc, #44]	@ (8008f80 <__libc_init_array+0x40>)
 8008f52:	4c0c      	ldr	r4, [pc, #48]	@ (8008f84 <__libc_init_array+0x44>)
 8008f54:	f000 f826 	bl	8008fa4 <_init>
 8008f58:	1b64      	subs	r4, r4, r5
 8008f5a:	10a4      	asrs	r4, r4, #2
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	42a6      	cmp	r6, r4
 8008f60:	d105      	bne.n	8008f6e <__libc_init_array+0x2e>
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
 8008f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f68:	4798      	blx	r3
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7ee      	b.n	8008f4c <__libc_init_array+0xc>
 8008f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f72:	4798      	blx	r3
 8008f74:	3601      	adds	r6, #1
 8008f76:	e7f2      	b.n	8008f5e <__libc_init_array+0x1e>
 8008f78:	08008ff0 	.word	0x08008ff0
 8008f7c:	08008ff0 	.word	0x08008ff0
 8008f80:	08008ff0 	.word	0x08008ff0
 8008f84:	08008ff4 	.word	0x08008ff4

08008f88 <memcpy>:
 8008f88:	440a      	add	r2, r1
 8008f8a:	4291      	cmp	r1, r2
 8008f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f90:	d100      	bne.n	8008f94 <memcpy+0xc>
 8008f92:	4770      	bx	lr
 8008f94:	b510      	push	{r4, lr}
 8008f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9e:	4291      	cmp	r1, r2
 8008fa0:	d1f9      	bne.n	8008f96 <memcpy+0xe>
 8008fa2:	bd10      	pop	{r4, pc}

08008fa4 <_init>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr

08008fb0 <_fini>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr
