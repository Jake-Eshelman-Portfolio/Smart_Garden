
Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08008fec  08008fec  00009fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009018  08009018  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009018  08009018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009020  08009020  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009020  08009020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009024  08009024  0000a024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009028  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b010  2**0
                  CONTENTS
 10 .bss          00000828  20000010  20000010  0000b010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000838  20000838  0000b010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ab1  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000518c  00000000  00000000  00031af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  00036c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a39  00000000  00000000  00038e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aaa3  00000000  00000000  0003a869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000293e0  00000000  00000000  0006530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100640  00000000  00000000  0008e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018ed2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000090c8  00000000  00000000  0018ed70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00197e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008fd4 	.word	0x08008fd4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008fd4 	.word	0x08008fd4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b5b0      	push	{r4, r5, r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 f9a3 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f83d 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fb41 	bl	8000b8c <MX_GPIO_Init>
  MX_ADC1_Init();
 800050a:	f000 f8a3 	bl	8000654 <MX_ADC1_Init>
  MX_CRC_Init();
 800050e:	f000 f8f3 	bl	80006f8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000512:	f000 f905 	bl	8000720 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000516:	f000 fae9 	bl	8000aec <MX_FMC_Init>
  MX_I2C3_Init();
 800051a:	f000 f933 	bl	8000784 <MX_I2C3_Init>
  MX_LTDC_Init();
 800051e:	f000 f971 	bl	8000804 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000522:	f000 f9ef 	bl	8000904 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000526:	f000 fa23 	bl	8000970 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800052a:	f000 fab5 	bl	8000a98 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800052e:	f000 fa6f 	bl	8000a10 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 8000532:	f000 fc53 	bl	8000ddc <Motor_Init>
  Motor_SetSpeed(65535);
 8000536:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800053a:	f000 fc59 	bl	8000df0 <Motor_SetSpeed>

  char msg[] = "Init complete!\r\n";
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <main+0x80>)
 8000540:	1d3c      	adds	r4, r7, #4
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	2210      	movs	r2, #16
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x84>)
 8000556:	f006 fb6f 	bl	8006c38 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Motor_Forward();
 800055a:	f000 fc5b 	bl	8000e14 <Motor_Forward>
	  HAL_Delay(2000);  // Delay for 2000 milliseconds (2 seconds)
 800055e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000562:	f001 f9b3 	bl	80018cc <HAL_Delay>
	  Motor_Stop();
 8000566:	f000 fc65 	bl	8000e34 <Motor_Stop>
	  HAL_Delay(2000);  // Delay for another 2 seconds before repeating
 800056a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800056e:	f001 f9ad 	bl	80018cc <HAL_Delay>
	  Motor_Forward();
 8000572:	bf00      	nop
 8000574:	e7f1      	b.n	800055a <main+0x62>
 8000576:	bf00      	nop
 8000578:	08008fec 	.word	0x08008fec
 800057c:	200002a0 	.word	0x200002a0

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 fce6 	bl	8008f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	@ (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	@ (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005cc:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f8:	2348      	movs	r3, #72	@ 0x48
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000600:	2303      	movs	r3, #3
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fb59 	bl	8004cc0 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000614:	f000 fbdc 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f004 fdbb 	bl	80051b0 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 fbc6 	bl	8000dd0 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	@ 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000692:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_ADC1_Init+0x98>)
 8000694:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <MX_ADC1_Init+0xa0>)
 8000696:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069e:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_ADC1_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b2:	480e      	ldr	r0, [pc, #56]	@ (80006ec <MX_ADC1_Init+0x98>)
 80006b4:	f001 f92e 	bl	8001914 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fb87 	bl	8000dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006c2:	2305      	movs	r3, #5
 80006c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	@ (80006ec <MX_ADC1_Init+0x98>)
 80006d4:	f001 f962 	bl	800199c <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 fb77 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_CRC_Init+0x20>)
 80006fe:	4a07      	ldr	r2, [pc, #28]	@ (800071c <MX_CRC_Init+0x24>)
 8000700:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_CRC_Init+0x20>)
 8000704:	f001 fc5a 	bl	8001fbc <HAL_CRC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800070e:	f000 fb5f 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000074 	.word	0x20000074
 800071c:	40023000 	.word	0x40023000

08000720 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_DMA2D_Init+0x60>)
 8000728:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_DMA2D_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_DMA2D_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_DMA2D_Init+0x5c>)
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000756:	f001 fc4d 	bl	8001ff4 <HAL_DMA2D_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000760:	f000 fb36 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000764:	2101      	movs	r1, #1
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_DMA2D_Init+0x5c>)
 8000768:	f001 fd9e 	bl	80022a8 <HAL_DMA2D_ConfigLayer>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000772:	f000 fb2d 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000007c 	.word	0x2000007c
 8000780:	4002b000 	.word	0x4002b000

08000784 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_I2C3_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_I2C3_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_I2C3_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <MX_I2C3_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_I2C3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_I2C3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007c2:	f003 fd55 	bl	8004270 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fb00 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007d4:	f003 fe90 	bl	80044f8 <HAL_I2CEx_ConfigAnalogFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007de:	f000 faf7 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C3_Init+0x74>)
 80007e6:	f003 fec3 	bl	8004570 <HAL_I2CEx_ConfigDigitalFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 faee 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000bc 	.word	0x200000bc
 80007fc:	40005c00 	.word	0x40005c00
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	@ 0x38
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2234      	movs	r2, #52	@ 0x34
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f008 fba5 	bl	8008f60 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000816:	4b39      	ldr	r3, [pc, #228]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000818:	4a39      	ldr	r2, [pc, #228]	@ (8000900 <MX_LTDC_Init+0xfc>)
 800081a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800081c:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000822:	4b36      	ldr	r3, [pc, #216]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000828:	4b34      	ldr	r3, [pc, #208]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800082e:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000834:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000836:	2209      	movs	r2, #9
 8000838:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800083a:	4b30      	ldr	r3, [pc, #192]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800083c:	2201      	movs	r2, #1
 800083e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000840:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000842:	221d      	movs	r2, #29
 8000844:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000846:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000848:	2203      	movs	r2, #3
 800084a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800084e:	f240 120d 	movw	r2, #269	@ 0x10d
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000856:	f240 1243 	movw	r2, #323	@ 0x143
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800085e:	f240 1217 	movw	r2, #279	@ 0x117
 8000862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000866:	f240 1247 	movw	r2, #327	@ 0x147
 800086a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000874:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800087c:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <MX_LTDC_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000884:	481d      	ldr	r0, [pc, #116]	@ (80008fc <MX_LTDC_Init+0xf8>)
 8000886:	f003 feb3 	bl	80045f0 <HAL_LTDC_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 fa9e 	bl	8000dd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000898:	23f0      	movs	r3, #240	@ 0xf0
 800089a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008a0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008a4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008aa:	23ff      	movs	r3, #255	@ 0xff
 80008ac:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008b6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008b8:	2307      	movs	r3, #7
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008bc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80008c2:	23f0      	movs	r3, #240	@ 0xf0
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80008c6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008ca:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_LTDC_Init+0xf8>)
 80008e6:	f004 f815 	bl	8004914 <HAL_LTDC_ConfigLayer>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008f0:	f000 fa6e 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3738      	adds	r7, #56	@ 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000110 	.word	0x20000110
 8000900:	40016800 	.word	0x40016800

08000904 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_SPI5_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <MX_SPI5_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_SPI5_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_SPI5_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000938:	2218      	movs	r2, #24
 800093a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_SPI5_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_SPI5_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_SPI5_Init+0x64>)
 8000956:	f005 f871 	bl	8005a3c <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 fa36 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001b8 	.word	0x200001b8
 800096c:	40015000 	.word	0x40015000

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_TIM1_Init+0x98>)
 800098e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <MX_TIM1_Init+0x9c>)
 8000990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_TIM1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_TIM1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b8:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009ba:	f005 f8c8 	bl	8005b4e <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 fa04 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009d6:	f005 fc43 	bl	8006260 <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009e0:	f000 f9f6 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_TIM1_Init+0x98>)
 80009f2:	f006 f841 	bl	8006a78 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009fc:	f000 f9e8 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000210 	.word	0x20000210
 8000a0c:	40010000 	.word	0x40010000

08000a10 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a94 <MX_TIM9_Init+0x84>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a30:	2247      	movs	r2, #71	@ 0x47
 8000a32:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a3c:	2263      	movs	r2, #99	@ 0x63
 8000a3e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000a4c:	4810      	ldr	r0, [pc, #64]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a4e:	f005 f93d 	bl	8005ccc <HAL_TIM_PWM_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f000 f9ba 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5c:	2360      	movs	r3, #96	@ 0x60
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000a60:	2332      	movs	r3, #50	@ 0x32
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a74:	f005 fb32 	bl	80060dc <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000a7e:	f000 f9a7 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000a82:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM9_Init+0x80>)
 8000a84:	f000 fcc6 	bl	8001414 <HAL_TIM_MspPostInit>

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000258 	.word	0x20000258
 8000a94:	40014000 	.word	0x40014000

08000a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <MX_USART1_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	f006 f862 	bl	8006b98 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f979 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002a0 	.word	0x200002a0
 8000ae8:	40011000 	.word	0x40011000

08000aec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	@ (8000b88 <MX_FMC_Init+0x9c>)
 8000b08:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b24:	2240      	movs	r2, #64	@ 0x40
 8000b26:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b2e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b3c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b50:	2307      	movs	r3, #7
 8000b52:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b6e:	f004 ff31 	bl	80059d4 <HAL_SDRAM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b78:	f000 f92a 	bl	8000dd0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200002e8 	.word	0x200002e8
 8000b88:	a0000140 	.word	0xa0000140

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	@ 0x38
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
 8000ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a7a      	ldr	r2, [pc, #488]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b78      	ldr	r3, [pc, #480]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	4b74      	ldr	r3, [pc, #464]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a73      	ldr	r2, [pc, #460]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b71      	ldr	r3, [pc, #452]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	4b6d      	ldr	r3, [pc, #436]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a6c      	ldr	r2, [pc, #432]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b6a      	ldr	r3, [pc, #424]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	4b66      	ldr	r3, [pc, #408]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a65      	ldr	r2, [pc, #404]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b63      	ldr	r3, [pc, #396]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b5f      	ldr	r3, [pc, #380]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b58      	ldr	r3, [pc, #352]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a57      	ldr	r2, [pc, #348]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a50      	ldr	r2, [pc, #320]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2116      	movs	r1, #22
 8000c86:	4844      	ldr	r0, [pc, #272]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000c88:	f001 fd4c 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	4842      	ldr	r0, [pc, #264]	@ (8000d9c <MX_GPIO_Init+0x210>)
 8000c92:	f001 fd47 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c9c:	4840      	ldr	r0, [pc, #256]	@ (8000da0 <MX_GPIO_Init+0x214>)
 8000c9e:	f001 fd41 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000ca8:	483e      	ldr	r0, [pc, #248]	@ (8000da4 <MX_GPIO_Init+0x218>)
 8000caa:	f001 fd3b 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin;
 8000cae:	2316      	movs	r3, #22
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4834      	ldr	r0, [pc, #208]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000cc6:	f001 fb81 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cca:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482e      	ldr	r0, [pc, #184]	@ (8000d9c <MX_GPIO_Init+0x210>)
 8000ce2:	f001 fb73 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4827      	ldr	r0, [pc, #156]	@ (8000d9c <MX_GPIO_Init+0x210>)
 8000cfe:	f001 fb65 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d02:	2320      	movs	r3, #32
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d06:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4820      	ldr	r0, [pc, #128]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000d18:	f001 fb58 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481e      	ldr	r0, [pc, #120]	@ (8000da8 <MX_GPIO_Init+0x21c>)
 8000d30:	f001 fb4c 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <MX_GPIO_Init+0x214>)
 8000d4a:	f001 fb3f 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d4e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <MX_GPIO_Init+0x214>)
 8000d68:	f001 fb30 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d6c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <MX_GPIO_Init+0x218>)
 8000d86:	f001 fb21 	bl	80023cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3738      	adds	r7, #56	@ 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	40021800 	.word	0x40021800
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dbe:	f000 fd65 	bl	800188c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <Motor_Init>:

// Global variables
extern TIM_HandleTypeDef htim9;  // Assuming TIM9 for PWM

void Motor_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Start PWM on PE5
 8000de0:	2100      	movs	r1, #0
 8000de2:	4802      	ldr	r0, [pc, #8]	@ (8000dec <Motor_Init+0x10>)
 8000de4:	f004 ffc2 	bl	8005d6c <HAL_TIM_PWM_Start>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000258 	.word	0x20000258

08000df0 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
    // Assuming 16-bit timer, adjust if different
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <Motor_SetSpeed+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000258 	.word	0x20000258

08000e14 <Motor_Forward>:

void Motor_Forward(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <Motor_Forward+0x1c>)
 8000e1e:	f001 fc81 	bl	8002724 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2104      	movs	r1, #4
 8000e26:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <Motor_Forward+0x1c>)
 8000e28:	f001 fc7c 	bl	8002724 <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40020800 	.word	0x40020800

08000e34 <Motor_Stop>:
    HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, GPIO_PIN_SET);
}

void Motor_Stop(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <Motor_Stop+0x1c>)
 8000e3e:	f001 fc71 	bl	8002724 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2104      	movs	r1, #4
 8000e46:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <Motor_Stop+0x1c>)
 8000e48:	f001 fc6c 	bl	8002724 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40020800 	.word	0x40020800

08000e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_MspInit+0x54>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a11      	ldr	r2, [pc, #68]	@ (8000ea8 <HAL_MspInit+0x54>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <HAL_MspInit+0x54>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_MspInit+0x54>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_MspInit+0x54>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_MspInit+0x54>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	210f      	movs	r1, #15
 8000e96:	f06f 0001 	mvn.w	r0, #1
 8000e9a:	f001 f865 	bl	8001f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <HAL_ADC_MspInit+0x7c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d127      	bne.n	8000f1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <HAL_ADC_MspInit+0x80>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <HAL_ADC_MspInit+0x80>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <HAL_ADC_MspInit+0x80>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_ADC_MspInit+0x80>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <HAL_ADC_MspInit+0x80>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_ADC_MspInit+0x80>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f06:	2320      	movs	r3, #32
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <HAL_ADC_MspInit+0x84>)
 8000f1a:	f001 fa57 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <HAL_CRC_MspInit+0x3c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a09      	ldr	r2, [pc, #36]	@ (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023000 	.word	0x40023000
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <HAL_DMA2D_MspInit+0x48>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d115      	bne.n	8000fb6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_DMA2D_MspInit+0x4c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <HAL_DMA2D_MspInit+0x4c>)
 8000f94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_DMA2D_MspInit+0x4c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	205a      	movs	r0, #90	@ 0x5a
 8000fac:	f000 ffdc 	bl	8001f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fb0:	205a      	movs	r0, #90	@ 0x5a
 8000fb2:	f000 fff5 	bl	8001fa0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	4002b000 	.word	0x4002b000
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a29      	ldr	r2, [pc, #164]	@ (800108c <HAL_I2C_MspInit+0xc4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d14b      	bne.n	8001082 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a27      	ldr	r2, [pc, #156]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001034:	2304      	movs	r3, #4
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4815      	ldr	r0, [pc, #84]	@ (8001094 <HAL_I2C_MspInit+0xcc>)
 8001040:	f001 f9c4 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104a:	2312      	movs	r3, #18
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001056:	2304      	movs	r3, #4
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <HAL_I2C_MspInit+0xd0>)
 8001062:	f001 f9b3 	bl	80023cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8001070:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_I2C_MspInit+0xc8>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	@ 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005c00 	.word	0x40005c00
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09a      	sub	sp, #104	@ 0x68
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b8:	2230      	movs	r2, #48	@ 0x30
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 ff4f 	bl	8008f60 <memset>
  if(hltdc->Instance==LTDC)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a85      	ldr	r2, [pc, #532]	@ (80012dc <HAL_LTDC_MspInit+0x240>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f040 8102 	bne.w	80012d2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010ce:	2308      	movs	r3, #8
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80010d2:	2332      	movs	r3, #50	@ 0x32
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010da:	2300      	movs	r3, #0
 80010dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fab6 	bl	8005654 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80010ee:	f7ff fe6f 	bl	8000dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	4b7a      	ldr	r3, [pc, #488]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a79      	ldr	r2, [pc, #484]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 80010fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b77      	ldr	r3, [pc, #476]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800110a:	623b      	str	r3, [r7, #32]
 800110c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	4b73      	ldr	r3, [pc, #460]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a72      	ldr	r2, [pc, #456]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b70      	ldr	r3, [pc, #448]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b6c      	ldr	r3, [pc, #432]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a6b      	ldr	r2, [pc, #428]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b69      	ldr	r3, [pc, #420]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b65      	ldr	r3, [pc, #404]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a64      	ldr	r2, [pc, #400]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b62      	ldr	r3, [pc, #392]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b5e      	ldr	r3, [pc, #376]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a5d      	ldr	r2, [pc, #372]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 800116c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b5b      	ldr	r3, [pc, #364]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b57      	ldr	r3, [pc, #348]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a56      	ldr	r2, [pc, #344]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b54      	ldr	r3, [pc, #336]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b50      	ldr	r3, [pc, #320]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a4f      	ldr	r2, [pc, #316]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <HAL_LTDC_MspInit+0x244>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c8:	230e      	movs	r3, #14
 80011ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d0:	4619      	mov	r1, r3
 80011d2:	4844      	ldr	r0, [pc, #272]	@ (80012e4 <HAL_LTDC_MspInit+0x248>)
 80011d4:	f001 f8fa 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011d8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80011dc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ea:	230e      	movs	r3, #14
 80011ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f2:	4619      	mov	r1, r3
 80011f4:	483c      	ldr	r0, [pc, #240]	@ (80012e8 <HAL_LTDC_MspInit+0x24c>)
 80011f6:	f001 f8e9 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011fa:	2303      	movs	r3, #3
 80011fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800120a:	2309      	movs	r3, #9
 800120c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001212:	4619      	mov	r1, r3
 8001214:	4835      	ldr	r0, [pc, #212]	@ (80012ec <HAL_LTDC_MspInit+0x250>)
 8001216:	f001 f8d9 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800121a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800121e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122c:	230e      	movs	r3, #14
 800122e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001234:	4619      	mov	r1, r3
 8001236:	482d      	ldr	r0, [pc, #180]	@ (80012ec <HAL_LTDC_MspInit+0x250>)
 8001238:	f001 f8c8 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800123c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001240:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124e:	230e      	movs	r3, #14
 8001250:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001252:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001256:	4619      	mov	r1, r3
 8001258:	4825      	ldr	r0, [pc, #148]	@ (80012f0 <HAL_LTDC_MspInit+0x254>)
 800125a:	f001 f8b7 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800125e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001262:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001270:	230e      	movs	r3, #14
 8001272:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001278:	4619      	mov	r1, r3
 800127a:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <HAL_LTDC_MspInit+0x258>)
 800127c:	f001 f8a6 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001280:	2348      	movs	r3, #72	@ 0x48
 8001282:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001290:	230e      	movs	r3, #14
 8001292:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001294:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001298:	4619      	mov	r1, r3
 800129a:	4817      	ldr	r0, [pc, #92]	@ (80012f8 <HAL_LTDC_MspInit+0x25c>)
 800129c:	f001 f896 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012b2:	2309      	movs	r3, #9
 80012b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <HAL_LTDC_MspInit+0x254>)
 80012be:	f001 f885 	bl	80023cc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2058      	movs	r0, #88	@ 0x58
 80012c8:	f000 fe4e 	bl	8001f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012cc:	2058      	movs	r0, #88	@ 0x58
 80012ce:	f000 fe67 	bl	8001fa0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80012d2:	bf00      	nop
 80012d4:	3768      	adds	r7, #104	@ 0x68
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40016800 	.word	0x40016800
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00

080012fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <HAL_SPI_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12c      	bne.n	8001378 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_SPI_MspInit+0x88>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a17      	ldr	r2, [pc, #92]	@ (8001384 <HAL_SPI_MspInit+0x88>)
 8001328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_SPI_MspInit+0x88>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_SPI_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <HAL_SPI_MspInit+0x88>)
 8001344:	f043 0320 	orr.w	r3, r3, #32
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_SPI_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001356:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001368:	2305      	movs	r3, #5
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <HAL_SPI_MspInit+0x8c>)
 8001374:	f001 f82a 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	@ 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40015000 	.word	0x40015000
 8001384:	40023800 	.word	0x40023800
 8001388:	40021400 	.word	0x40021400

0800138c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_TIM_Base_MspInit+0x3c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10d      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_TIM_Base_MspInit+0x40>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10d      	bne.n	80013fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_TIM_PWM_MspInit+0x40>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <HAL_TIM_PWM_MspInit+0x40>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_TIM_PWM_MspInit+0x40>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40014000 	.word	0x40014000
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <HAL_TIM_MspPostInit+0x68>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11d      	bne.n	8001472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_TIM_MspPostInit+0x6c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <HAL_TIM_MspPostInit+0x6c>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_TIM_MspPostInit+0x6c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001452:	2320      	movs	r3, #32
 8001454:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001462:	2303      	movs	r3, #3
 8001464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <HAL_TIM_MspPostInit+0x70>)
 800146e:	f000 ffad 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40014000 	.word	0x40014000
 8001480:	40023800 	.word	0x40023800
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_UART_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12c      	bne.n	8001504 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_UART_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f4:	2307      	movs	r3, #7
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_UART_MspInit+0x8c>)
 8001500:	f000 ff64 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40011000 	.word	0x40011000
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800152c:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <HAL_FMC_MspInit+0x104>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d16f      	bne.n	8001614 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001534:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_FMC_MspInit+0x104>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <HAL_FMC_MspInit+0x108>)
 8001540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001542:	4a37      	ldr	r2, [pc, #220]	@ (8001620 <HAL_FMC_MspInit+0x108>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6393      	str	r3, [r2, #56]	@ 0x38
 800154a:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <HAL_FMC_MspInit+0x108>)
 800154c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001556:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800155a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001568:	230c      	movs	r3, #12
 800156a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4619      	mov	r1, r3
 8001570:	482c      	ldr	r0, [pc, #176]	@ (8001624 <HAL_FMC_MspInit+0x10c>)
 8001572:	f000 ff2b 	bl	80023cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001576:	2301      	movs	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001586:	230c      	movs	r3, #12
 8001588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4826      	ldr	r0, [pc, #152]	@ (8001628 <HAL_FMC_MspInit+0x110>)
 8001590:	f000 ff1c 	bl	80023cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001594:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001598:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	481f      	ldr	r0, [pc, #124]	@ (800162c <HAL_FMC_MspInit+0x114>)
 80015b0:	f000 ff0c 	bl	80023cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80015b8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4818      	ldr	r0, [pc, #96]	@ (8001630 <HAL_FMC_MspInit+0x118>)
 80015d0:	f000 fefc 	bl	80023cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015d4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80015d8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e6:	230c      	movs	r3, #12
 80015e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4811      	ldr	r0, [pc, #68]	@ (8001634 <HAL_FMC_MspInit+0x11c>)
 80015f0:	f000 feec 	bl	80023cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015f4:	2360      	movs	r3, #96	@ 0x60
 80015f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001604:	230c      	movs	r3, #12
 8001606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	480a      	ldr	r0, [pc, #40]	@ (8001638 <HAL_FMC_MspInit+0x120>)
 800160e:	f000 fedd 	bl	80023cc <HAL_GPIO_Init>
 8001612:	e000      	b.n	8001616 <HAL_FMC_MspInit+0xfe>
    return;
 8001614:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000031c 	.word	0x2000031c
 8001620:	40023800 	.word	0x40023800
 8001624:	40021400 	.word	0x40021400
 8001628:	40020800 	.word	0x40020800
 800162c:	40021800 	.word	0x40021800
 8001630:	40021000 	.word	0x40021000
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001644:	f7ff ff68 	bl	8001518 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	@ 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <HAL_InitTick+0xe4>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a32      	ldr	r2, [pc, #200]	@ (8001734 <HAL_InitTick+0xe4>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <HAL_InitTick+0xe4>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800167c:	f107 0210 	add.w	r2, r7, #16
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f003 ffb2 	bl	80055f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001696:	f003 ff83 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 800169a:	6378      	str	r0, [r7, #52]	@ 0x34
 800169c:	e004      	b.n	80016a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800169e:	f003 ff7f 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 80016a2:	4603      	mov	r3, r0
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016aa:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	3b01      	subs	r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016b6:	4b21      	ldr	r3, [pc, #132]	@ (800173c <HAL_InitTick+0xec>)
 80016b8:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <HAL_InitTick+0xf0>)
 80016ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_InitTick+0xec>)
 80016be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_InitTick+0xec>)
 80016c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_InitTick+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_InitTick+0xec>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_InitTick+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016dc:	4817      	ldr	r0, [pc, #92]	@ (800173c <HAL_InitTick+0xec>)
 80016de:	f004 fa36 	bl	8005b4e <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d11b      	bne.n	8001728 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016f0:	4812      	ldr	r0, [pc, #72]	@ (800173c <HAL_InitTick+0xec>)
 80016f2:	f004 fa7b 	bl	8005bec <HAL_TIM_Base_Start_IT>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001700:	2b00      	cmp	r3, #0
 8001702:	d111      	bne.n	8001728 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001704:	2036      	movs	r0, #54	@ 0x36
 8001706:	f000 fc4b 	bl	8001fa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d808      	bhi.n	8001722 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	2036      	movs	r0, #54	@ 0x36
 8001716:	f000 fc27 	bl	8001f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <HAL_InitTick+0xf4>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e002      	b.n	8001728 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800172c:	4618      	mov	r0, r3
 800172e:	3738      	adds	r7, #56	@ 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	431bde83 	.word	0x431bde83
 800173c:	20000320 	.word	0x20000320
 8001740:	40001000 	.word	0x40001000
 8001744:	20000004 	.word	0x20000004

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <UsageFault_Handler+0x4>

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM6_DAC_IRQHandler+0x10>)
 8001786:	f004 fbb9 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000320 	.word	0x20000320

08001794 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <OTG_HS_IRQHandler+0x10>)
 800179a:	f000 ffdc 	bl	8002756 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000458 	.word	0x20000458

080017a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <LTDC_IRQHandler+0x10>)
 80017ae:	f002 ffef 	bl	8004790 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000110 	.word	0x20000110

080017bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <DMA2D_IRQHandler+0x10>)
 80017c2:	f000 fc60 	bl	8002086 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000007c 	.word	0x2000007c

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800182c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f8:	f7ff ffea 	bl	80017d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	@ (8001834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	@ (8001840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001822:	f007 fba5 	bl	8008f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7fe fe67 	bl	80004f8 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800182c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001838:	08009028 	.word	0x08009028
  ldr r2, =_sbss
 800183c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001840:	20000838 	.word	0x20000838

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	@ (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 fb6e 	bl	8001f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff feea 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff faea 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000368 	.word	0x20000368

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000368 	.word	0x20000368

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e033      	b.n	8001992 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff faba 	bl	8000eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800195a:	f023 0302 	bic.w	r3, r3, #2
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f94a 	bl	8001c00 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40
 8001982:	e001      	b.n	8001988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1c>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e113      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x244>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d925      	bls.n	8001a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68d9      	ldr	r1, [r3, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	3b1e      	subs	r3, #30
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43da      	mvns	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	400a      	ands	r2, r1
 80019ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68d9      	ldr	r1, [r3, #12]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	4603      	mov	r3, r0
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4403      	add	r3, r0
 8001a06:	3b1e      	subs	r3, #30
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	e022      	b.n	8001a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	2207      	movs	r2, #7
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	400a      	ands	r2, r1
 8001a36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6919      	ldr	r1, [r3, #16]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4403      	add	r3, r0
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d824      	bhi.n	8001aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b05      	subs	r3, #5
 8001a74:	221f      	movs	r2, #31
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b05      	subs	r3, #5
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aaa:	e04c      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d824      	bhi.n	8001afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b23      	subs	r3, #35	@ 0x23
 8001ac6:	221f      	movs	r2, #31
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43da      	mvns	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b23      	subs	r3, #35	@ 0x23
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001afc:	e023      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3b41      	subs	r3, #65	@ 0x41
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	@ 0x41
 8001b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b46:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_ADC_ConfigChannel+0x250>)
 8001b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a28      	ldr	r2, [pc, #160]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x254>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d10f      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d8>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b12      	cmp	r3, #18
 8001b5a:	d10b      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x254>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x258>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d003      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0x1f4>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b11      	cmp	r3, #17
 8001b8e:	d122      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x258>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d111      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x25c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <HAL_ADC_ConfigChannel+0x260>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9a      	lsrs	r2, r3, #18
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	10000012 	.word	0x10000012
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c08:	4b79      	ldr	r3, [pc, #484]	@ (8001df0 <ADC_Init+0x1f0>)
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	021a      	lsls	r2, r3, #8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c92:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <ADC_Init+0x1f4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d022      	beq.n	8001cde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	e00f      	b.n	8001cfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cfc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0202 	bic.w	r2, r2, #2
 8001d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e1b      	ldrb	r3, [r3, #24]
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6859      	ldr	r1, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	3b01      	subs	r3, #1
 8001d58:	035a      	lsls	r2, r3, #13
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	e007      	b.n	8001d74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d72:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	051a      	lsls	r2, r3, #20
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001db6:	025a      	lsls	r2, r3, #9
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	029a      	lsls	r2, r3, #10
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40012300 	.word	0x40012300
 8001df4:	0f000001 	.word	0x0f000001

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	@ (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	@ (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	@ (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	@ 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff4c 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7a:	f7ff ff61 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	6978      	ldr	r0, [r7, #20]
 8001f86:	f7ff ffb1 	bl	8001eec <NVIC_EncodePriority>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff80 	bl	8001e98 <__NVIC_SetPriority>
}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff54 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	795b      	ldrb	r3, [r3, #5]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe ffa8 	bl	8000f34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e03b      	b.n	800207e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe ffac 	bl	8000f78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002044:	f023 0107 	bic.w	r1, r3, #7
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800205e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68d1      	ldr	r1, [r2, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	430b      	orrs	r3, r1
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d026      	beq.n	80020f6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d021      	beq.n	80020f6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020c0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d026      	beq.n	800214e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d021      	beq.n	800214e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002118:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2220      	movs	r2, #32
 8002120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002126:	f043 0202 	orr.w	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2204      	movs	r2, #4
 8002132:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d026      	beq.n	80021a6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800215e:	2b00      	cmp	r3, #0
 8002160:	d021      	beq.n	80021a6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002170:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2208      	movs	r2, #8
 8002178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00e      	beq.n	80021d8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2204      	movs	r2, #4
 80021d0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f853 	bl	800227e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d024      	beq.n	800222c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01f      	beq.n	800222c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2202      	movs	r2, #2
 8002202:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01f      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01a      	beq.n	8002276 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800224e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2210      	movs	r2, #16
 8002256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f80e 	bl	8002292 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA2D_ConfigLayer+0x20>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e079      	b.n	80023bc <HAL_DMA2D_ConfigLayer+0x114>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	3318      	adds	r3, #24
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80022f2:	4b35      	ldr	r3, [pc, #212]	@ (80023c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80022f4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b0a      	cmp	r3, #10
 80022fc:	d003      	beq.n	8002306 <HAL_DMA2D_ConfigLayer+0x5e>
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d107      	bne.n	8002316 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e005      	b.n	8002322 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	061b      	lsls	r3, r3, #24
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d120      	bne.n	800236a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	ea02 0103 	and.w	r1, r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	430a      	orrs	r2, r1
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b0a      	cmp	r3, #10
 8002350:	d003      	beq.n	800235a <HAL_DMA2D_ConfigLayer+0xb2>
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b09      	cmp	r3, #9
 8002358:	d127      	bne.n	80023aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
 8002368:	e01f      	b.n	80023aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	ea02 0103 	and.w	r1, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	430a      	orrs	r2, r1
 8002380:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b0a      	cmp	r3, #10
 8002392:	d003      	beq.n	800239c <HAL_DMA2D_ConfigLayer+0xf4>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b09      	cmp	r3, #9
 800239a:	d106      	bne.n	80023aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80023a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	ff03000f 	.word	0xff03000f

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e177      	b.n	80026d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 8166 	bne.w	80026d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d005      	beq.n	800241e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241a:	2b02      	cmp	r3, #2
 800241c:	d130      	bne.n	8002480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0201 	and.w	r2, r3, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b03      	cmp	r3, #3
 800248a:	d017      	beq.n	80024bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d123      	bne.n	8002510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80c0 	beq.w	80026d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b66      	ldr	r3, [pc, #408]	@ (80026f0 <HAL_GPIO_Init+0x324>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a65      	ldr	r2, [pc, #404]	@ (80026f0 <HAL_GPIO_Init+0x324>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b63      	ldr	r3, [pc, #396]	@ (80026f0 <HAL_GPIO_Init+0x324>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256e:	4a61      	ldr	r2, [pc, #388]	@ (80026f4 <HAL_GPIO_Init+0x328>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a58      	ldr	r2, [pc, #352]	@ (80026f8 <HAL_GPIO_Init+0x32c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d037      	beq.n	800260a <HAL_GPIO_Init+0x23e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a57      	ldr	r2, [pc, #348]	@ (80026fc <HAL_GPIO_Init+0x330>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_GPIO_Init+0x23a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a56      	ldr	r2, [pc, #344]	@ (8002700 <HAL_GPIO_Init+0x334>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02b      	beq.n	8002602 <HAL_GPIO_Init+0x236>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a55      	ldr	r2, [pc, #340]	@ (8002704 <HAL_GPIO_Init+0x338>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d025      	beq.n	80025fe <HAL_GPIO_Init+0x232>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a54      	ldr	r2, [pc, #336]	@ (8002708 <HAL_GPIO_Init+0x33c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <HAL_GPIO_Init+0x22e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a53      	ldr	r2, [pc, #332]	@ (800270c <HAL_GPIO_Init+0x340>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x22a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	@ (8002710 <HAL_GPIO_Init+0x344>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a51      	ldr	r2, [pc, #324]	@ (8002714 <HAL_GPIO_Init+0x348>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a50      	ldr	r2, [pc, #320]	@ (8002718 <HAL_GPIO_Init+0x34c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	@ (800271c <HAL_GPIO_Init+0x350>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x21a>
 80025e2:	2309      	movs	r3, #9
 80025e4:	e012      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025e6:	230a      	movs	r3, #10
 80025e8:	e010      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025ea:	2308      	movs	r3, #8
 80025ec:	e00e      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00c      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x240>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x240>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x240>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_GPIO_Init+0x328>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_GPIO_Init+0x354>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a34      	ldr	r2, [pc, #208]	@ (8002720 <HAL_GPIO_Init+0x354>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_GPIO_Init+0x354>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a29      	ldr	r2, [pc, #164]	@ (8002720 <HAL_GPIO_Init+0x354>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_GPIO_Init+0x354>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_GPIO_Init+0x354>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_GPIO_Init+0x354>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <HAL_GPIO_Init+0x354>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f ae84 	bls.w	80023e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40021400 	.word	0x40021400
 8002710:	40021800 	.word	0x40021800
 8002714:	40021c00 	.word	0x40021c00
 8002718:	40022000 	.word	0x40022000
 800271c:	40022400 	.word	0x40022400
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 fff3 	bl	8007758 <USB_GetMode>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 80fb 	bne.w	8002970 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 ffb6 	bl	80076f0 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80f1 	beq.w	800296e <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f004 ffad 	bl	80076f0 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027a0:	d104      	bne.n	80027ac <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80027aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 ff9d 	bl	80076f0 <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027c0:	d104      	bne.n	80027cc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027ca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 ff8d 	bl	80076f0 <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e0:	d104      	bne.n	80027ec <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 ff7d 	bl	80076f0 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d103      	bne.n	8002808 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2202      	movs	r2, #2
 8002806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f004 ff6f 	bl	80076f0 <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800281c:	d120      	bne.n	8002860 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002826:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d113      	bne.n	8002860 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002838:	2110      	movs	r1, #16
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f004 fea0 	bl	8007580 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002840:	6938      	ldr	r0, [r7, #16]
 8002842:	f004 fecf 	bl	80075e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7a5b      	ldrb	r3, [r3, #9]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d105      	bne.n	800285a <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f004 ff8d 	bl	8007774 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f006 fafc 	bl	8008e58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 ff43 	bl	80076f0 <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002874:	d102      	bne.n	800287c <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f001 fc87 	bl	800418a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f004 ff35 	bl	80076f0 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d106      	bne.n	800289e <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f006 fac5 	bl	8008e20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2208      	movs	r2, #8
 800289c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 ff24 	bl	80076f0 <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028b2:	d139      	bne.n	8002928 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 ff98 	bl	80077ee <USB_HC_ReadInterrupt>
 80028be:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e025      	b.n	8002912 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f0:	d106      	bne.n	8002900 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f859 	bl	80029b0 <HCD_HC_IN_IRQHandler>
 80028fe:	e005      	b.n	800290c <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 febb 	bl	8003682 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	795b      	ldrb	r3, [r3, #5]
 8002916:	461a      	mov	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4293      	cmp	r3, r2
 800291c:	d3d3      	bcc.n	80028c6 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fedf 	bl	80076f0 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b10      	cmp	r3, #16
 800293a:	d101      	bne.n	8002940 <HAL_HCD_IRQHandler+0x1ea>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_HCD_IRQHandler+0x1ec>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d014      	beq.n	8002970 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0210 	bic.w	r2, r2, #16
 8002954:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f001 fb38 	bl	8003fcc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0210 	orr.w	r2, r2, #16
 800296a:	619a      	str	r2, [r3, #24]
 800296c:	e000      	b.n	8002970 <HAL_HCD_IRQHandler+0x21a>
      return;
 800296e:	bf00      	nop
    }
  }
}
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_HCD_Stop+0x16>
 8002988:	2302      	movs	r3, #2
 800298a:	e00d      	b.n	80029a8 <HAL_HCD_Stop+0x32>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f005 f859 	bl	8007a50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 fea1 	bl	8007716 <USB_ReadChInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d11a      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	2304      	movs	r3, #4
 80029ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	334d      	adds	r3, #77	@ 0x4d
 8002a00:	2207      	movs	r2, #7
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 feff 	bl	8007810 <USB_HC_Halt>
 8002a12:	e09e      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fe7a 	bl	8007716 <USB_ReadChInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2c:	d11b      	bne.n	8002a66 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	334d      	adds	r3, #77	@ 0x4d
 8002a52:	2208      	movs	r2, #8
 8002a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fed6 	bl	8007810 <USB_HC_Halt>
 8002a64:	e075      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fe51 	bl	8007716 <USB_ReadChInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11a      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	2206      	movs	r2, #6
 8002aa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 feaf 	bl	8007810 <USB_HC_Halt>
 8002ab2:	e04e      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 fe2a 	bl	8007716 <USB_ReadChInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002acc:	d11b      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334d      	adds	r3, #77	@ 0x4d
 8002af2:	2209      	movs	r2, #9
 8002af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fe86 	bl	8007810 <USB_HC_Halt>
 8002b04:	e025      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 fe01 	bl	8007716 <USB_ReadChInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b80      	cmp	r3, #128	@ 0x80
 8002b1c:	d119      	bne.n	8002b52 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334d      	adds	r3, #77	@ 0x4d
 8002b40:	2207      	movs	r2, #7
 8002b42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fe5f 	bl	8007810 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 fddb 	bl	8007716 <USB_ReadChInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b6a:	d112      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 fe4b 	bl	8007810 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b8c:	6093      	str	r3, [r2, #8]
 8002b8e:	f000 bd75 	b.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fdbb 	bl	8007716 <USB_ReadChInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f040 8128 	bne.w	8002dfc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2320      	movs	r3, #32
 8002bbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	331b      	adds	r3, #27
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d119      	bne.n	8002c08 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	331b      	adds	r3, #27
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	0151      	lsls	r1, r2, #5
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	799b      	ldrb	r3, [r3, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3330      	adds	r3, #48	@ 0x30
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	1ac9      	subs	r1, r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4403      	add	r3, r0
 8002c44:	3338      	adds	r3, #56	@ 0x38
 8002c46:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334d      	adds	r3, #77	@ 0x4d
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3344      	adds	r3, #68	@ 0x44
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2301      	movs	r3, #1
 8002c80:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3326      	adds	r3, #38	@ 0x26
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3326      	adds	r3, #38	@ 0x26
 8002ca8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d110      	bne.n	8002cd0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fdaa 	bl	8007810 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2310      	movs	r3, #16
 8002ccc:	6093      	str	r3, [r2, #8]
 8002cce:	e03d      	b.n	8002d4c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3326      	adds	r3, #38	@ 0x26
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d00a      	beq.n	8002cfc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3326      	adds	r3, #38	@ 0x26
 8002cf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d127      	bne.n	8002d4c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d1a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	334c      	adds	r3, #76	@ 0x4c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334c      	adds	r3, #76	@ 0x4c
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f006 f894 	bl	8008e74 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	799b      	ldrb	r3, [r3, #6]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d13b      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3338      	adds	r3, #56	@ 0x38
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4403      	add	r3, r0
 8002d74:	3328      	adds	r3, #40	@ 0x28
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	440b      	add	r3, r1
 8002d7a:	1e59      	subs	r1, r3, #1
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4403      	add	r3, r0
 8002d8a:	3328      	adds	r3, #40	@ 0x28
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8470 	beq.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	333c      	adds	r3, #60	@ 0x3c
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2d8      	uxtb	r0, r3
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	333c      	adds	r3, #60	@ 0x3c
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	f000 bc58 	b.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	333c      	adds	r3, #60	@ 0x3c
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	f083 0301 	eor.w	r3, r3, #1
 8002de4:	b2d8      	uxtb	r0, r3
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	333c      	adds	r3, #60	@ 0x3c
 8002df4:	4602      	mov	r2, r0
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	f000 bc40 	b.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f004 fc86 	bl	8007716 <USB_ReadChInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d131      	bne.n	8002e78 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2320      	movs	r3, #32
 8002e24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	331a      	adds	r3, #26
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 841f 	bne.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	331b      	adds	r3, #27
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	334d      	adds	r3, #77	@ 0x4d
 8002e62:	2203      	movs	r2, #3
 8002e64:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fcce 	bl	8007810 <USB_HC_Halt>
 8002e74:	f000 bc02 	b.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f004 fc48 	bl	8007716 <USB_ReadChInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	f040 8305 	bne.w	800349c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334d      	adds	r3, #77	@ 0x4d
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d114      	bne.n	8002ee4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334d      	adds	r3, #77	@ 0x4d
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	334c      	adds	r3, #76	@ 0x4c
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e2cc      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334d      	adds	r3, #77	@ 0x4d
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d114      	bne.n	8002f24 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	334d      	adds	r3, #77	@ 0x4d
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334c      	adds	r3, #76	@ 0x4c
 8002f1e:	2205      	movs	r2, #5
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e2ac      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	334d      	adds	r3, #77	@ 0x4d
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b07      	cmp	r3, #7
 8002f38:	d00b      	beq.n	8002f52 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334d      	adds	r3, #77	@ 0x4d
 8002f4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	f040 80a6 	bne.w	800309e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	334d      	adds	r3, #77	@ 0x4d
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3344      	adds	r3, #68	@ 0x44
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4403      	add	r3, r0
 8002f86:	3344      	adds	r3, #68	@ 0x44
 8002f88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3344      	adds	r3, #68	@ 0x44
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d943      	bls.n	8003028 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3344      	adds	r3, #68	@ 0x44
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	331a      	adds	r3, #26
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d123      	bne.n	8003012 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	331b      	adds	r3, #27
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	331c      	adds	r3, #28
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	0151      	lsls	r1, r2, #5
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	440a      	add	r2, r1
 8003008:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800300c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003010:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	334c      	adds	r3, #76	@ 0x4c
 8003022:	2204      	movs	r2, #4
 8003024:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003026:	e229      	b.n	800347c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	334c      	adds	r3, #76	@ 0x4c
 8003038:	2202      	movs	r2, #2
 800303a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3326      	adds	r3, #38	@ 0x26
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3326      	adds	r3, #38	@ 0x26
 8003062:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003064:	2b02      	cmp	r3, #2
 8003066:	f040 8209 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003080:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003088:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800309c:	e1ee      	b.n	800347c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	334d      	adds	r3, #77	@ 0x4d
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	f040 80c8 	bne.w	8003246 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	334d      	adds	r3, #77	@ 0x4d
 80030c6:	2202      	movs	r2, #2
 80030c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	331b      	adds	r3, #27
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 81ce 	bne.w	800347e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3326      	adds	r3, #38	@ 0x26
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d16b      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3348      	adds	r3, #72	@ 0x48
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4403      	add	r3, r0
 8003118:	3348      	adds	r3, #72	@ 0x48
 800311a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3348      	adds	r3, #72	@ 0x48
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d943      	bls.n	80031ba <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3348      	adds	r3, #72	@ 0x48
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	331b      	adds	r3, #27
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3344      	adds	r3, #68	@ 0x44
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d809      	bhi.n	8003184 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	331c      	adds	r3, #28
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	0151      	lsls	r1, r2, #5
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	440a      	add	r2, r1
 800319a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800319e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	@ 0x4c
 80031b4:	2204      	movs	r2, #4
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e014      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	334c      	adds	r3, #76	@ 0x4c
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e009      	b.n	80031e4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	334c      	adds	r3, #76	@ 0x4c
 80031e0:	2202      	movs	r2, #2
 80031e2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3326      	adds	r3, #38	@ 0x26
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3326      	adds	r3, #38	@ 0x26
 800320a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800320c:	2b02      	cmp	r3, #2
 800320e:	f040 8136 	bne.w	800347e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003228:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003230:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e11b      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b03      	cmp	r3, #3
 800325a:	f040 8081 	bne.w	8003360 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	331b      	adds	r3, #27
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 80fa 	bne.w	800347e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334c      	adds	r3, #76	@ 0x4c
 800329a:	2202      	movs	r2, #2
 800329c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	0151      	lsls	r1, r2, #5
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	440a      	add	r2, r1
 80032b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032bc:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	0151      	lsls	r1, r2, #5
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	440a      	add	r2, r1
 80032d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032dc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	0151      	lsls	r1, r2, #5
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	440a      	add	r2, r1
 80032f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032f8:	f023 0320 	bic.w	r3, r3, #32
 80032fc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3326      	adds	r3, #38	@ 0x26
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3326      	adds	r3, #38	@ 0x26
 8003324:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003326:	2b02      	cmp	r3, #2
 8003328:	f040 80a9 	bne.w	800347e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003342:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800334a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e08e      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334d      	adds	r3, #77	@ 0x4d
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d143      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	334d      	adds	r3, #77	@ 0x4d
 8003386:	2202      	movs	r2, #2
 8003388:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334c      	adds	r3, #76	@ 0x4c
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3326      	adds	r3, #38	@ 0x26
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3326      	adds	r3, #38	@ 0x26
 80033c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d159      	bne.n	800347e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033e0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033e8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e03f      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	334d      	adds	r3, #77	@ 0x4d
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d126      	bne.n	8003462 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	334d      	adds	r3, #77	@ 0x4d
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3344      	adds	r3, #68	@ 0x44
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	1c59      	adds	r1, r3, #1
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4403      	add	r3, r0
 8003448:	3344      	adds	r3, #68	@ 0x44
 800344a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334c      	adds	r3, #76	@ 0x4c
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e00d      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	334d      	adds	r3, #77	@ 0x4d
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	f000 8100 	beq.w	800367a <HCD_HC_IN_IRQHandler+0xcca>
 800347a:	e000      	b.n	800347e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	334c      	adds	r3, #76	@ 0x4c
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f005 fced 	bl	8008e74 <HAL_HCD_HC_NotifyURBChange_Callback>
 800349a:	e0ef      	b.n	800367c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 f936 	bl	8007716 <USB_ReadChInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d12f      	bne.n	8003514 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c0:	461a      	mov	r2, r3
 80034c2:	2340      	movs	r3, #64	@ 0x40
 80034c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334d      	adds	r3, #77	@ 0x4d
 80034d6:	2205      	movs	r2, #5
 80034d8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	331a      	adds	r3, #26
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3344      	adds	r3, #68	@ 0x44
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f004 f97f 	bl	8007810 <USB_HC_Halt>
 8003512:	e0b3      	b.n	800367c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f004 f8fa 	bl	8007716 <USB_ReadChInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	f040 80a7 	bne.w	800367c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3326      	adds	r3, #38	@ 0x26
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d11b      	bne.n	800357c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3344      	adds	r3, #68	@ 0x44
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	334d      	adds	r3, #77	@ 0x4d
 8003568:	2204      	movs	r2, #4
 800356a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f004 f94b 	bl	8007810 <USB_HC_Halt>
 800357a:	e03f      	b.n	80035fc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3326      	adds	r3, #38	@ 0x26
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3326      	adds	r3, #38	@ 0x26
 80035a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d129      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3344      	adds	r3, #68	@ 0x44
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	799b      	ldrb	r3, [r3, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HCD_HC_IN_IRQHandler+0xc2a>
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	331b      	adds	r3, #27
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d110      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334d      	adds	r3, #77	@ 0x4d
 80035ea:	2204      	movs	r2, #4
 80035ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f90a 	bl	8007810 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	331b      	adds	r3, #27
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d129      	bne.n	8003666 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	331b      	adds	r3, #27
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	0151      	lsls	r1, r2, #5
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	440a      	add	r2, r1
 800363c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003644:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	0151      	lsls	r1, r2, #5
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	440a      	add	r2, r1
 800365c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003672:	461a      	mov	r2, r3
 8003674:	2310      	movs	r3, #16
 8003676:	6093      	str	r3, [r2, #8]
 8003678:	e000      	b.n	800367c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800367a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f004 f838 	bl	8007716 <USB_ReadChInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036bc:	461a      	mov	r2, r3
 80036be:	2304      	movs	r3, #4
 80036c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	334d      	adds	r3, #77	@ 0x4d
 80036d2:	2207      	movs	r2, #7
 80036d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f896 	bl	8007810 <USB_HC_Halt>
 80036e4:	f000 bc6f 	b.w	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 f810 	bl	8007716 <USB_ReadChInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	f040 8082 	bne.w	8003806 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370e:	461a      	mov	r2, r3
 8003710:	2320      	movs	r3, #32
 8003712:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3319      	adds	r3, #25
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d124      	bne.n	8003774 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3319      	adds	r3, #25
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	334c      	adds	r3, #76	@ 0x4c
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	334d      	adds	r3, #77	@ 0x4d
 8003762:	2203      	movs	r2, #3
 8003764:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f004 f84e 	bl	8007810 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	331a      	adds	r3, #26
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 841d 	bne.w	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	331b      	adds	r3, #27
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 8411 	bne.w	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3326      	adds	r3, #38	@ 0x26
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d009      	beq.n	80037ce <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	331b      	adds	r3, #27
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	334d      	adds	r3, #77	@ 0x4d
 80037de:	2203      	movs	r2, #3
 80037e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 f810 	bl	8007810 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3344      	adds	r3, #68	@ 0x44
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	e3df      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f003 ff81 	bl	8007716 <USB_ReadChInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381e:	d111      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003832:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f003 ffe7 	bl	8007810 <USB_HC_Halt>
 8003842:	e3c0      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f003 ff62 	bl	8007716 <USB_ReadChInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d168      	bne.n	800392e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3344      	adds	r3, #68	@ 0x44
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f003 ff4c 	bl	8007716 <USB_ReadChInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d112      	bne.n	80038ae <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3319      	adds	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a8:	461a      	mov	r2, r3
 80038aa:	2340      	movs	r3, #64	@ 0x40
 80038ac:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	331b      	adds	r3, #27
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d019      	beq.n	80038f8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	331b      	adds	r3, #27
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	0151      	lsls	r1, r2, #5
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	440a      	add	r2, r1
 80038ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334d      	adds	r3, #77	@ 0x4d
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f003 ff72 	bl	8007810 <USB_HC_Halt>
 800392c:	e34b      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f003 feed 	bl	8007716 <USB_ReadChInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d139      	bne.n	80039ba <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	334d      	adds	r3, #77	@ 0x4d
 8003956:	2205      	movs	r2, #5
 8003958:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	331a      	adds	r3, #26
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	3319      	adds	r3, #25
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3344      	adds	r3, #68	@ 0x44
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 ff35 	bl	8007810 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b2:	461a      	mov	r2, r3
 80039b4:	2340      	movs	r3, #64	@ 0x40
 80039b6:	6093      	str	r3, [r2, #8]
 80039b8:	e305      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fea7 	bl	8007716 <USB_ReadChInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11a      	bne.n	8003a08 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039de:	461a      	mov	r2, r3
 80039e0:	2308      	movs	r3, #8
 80039e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	334d      	adds	r3, #77	@ 0x4d
 80039f4:	2206      	movs	r2, #6
 80039f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 ff05 	bl	8007810 <USB_HC_Halt>
 8003a06:	e2de      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fe80 	bl	8007716 <USB_ReadChInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d144      	bne.n	8003aaa <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3344      	adds	r3, #68	@ 0x44
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	334d      	adds	r3, #77	@ 0x4d
 8003a44:	2204      	movs	r2, #4
 8003a46:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3319      	adds	r3, #25
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d114      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3319      	adds	r3, #25
 8003a84:	2201      	movs	r2, #1
 8003a86:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f003 febd 	bl	8007810 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
 8003aa8:	e28d      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 fe2f 	bl	8007716 <USB_ReadChInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b80      	cmp	r3, #128	@ 0x80
 8003ac0:	d169      	bne.n	8003b96 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	799b      	ldrb	r3, [r3, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d111      	bne.n	8003aee <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334d      	adds	r3, #77	@ 0x4d
 8003ada:	2207      	movs	r2, #7
 8003adc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 fe92 	bl	8007810 <USB_HC_Halt>
 8003aec:	e049      	b.n	8003b82 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3344      	adds	r3, #68	@ 0x44
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4403      	add	r3, r0
 8003b0e:	3344      	adds	r3, #68	@ 0x44
 8003b10:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3344      	adds	r3, #68	@ 0x44
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d922      	bls.n	8003b6e <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3344      	adds	r3, #68	@ 0x44
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334c      	adds	r3, #76	@ 0x4c
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334c      	adds	r3, #76	@ 0x4c
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 f984 	bl	8008e74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b6c:	e009      	b.n	8003b82 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	334c      	adds	r3, #76	@ 0x4c
 8003b7e:	2202      	movs	r2, #2
 8003b80:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	6093      	str	r3, [r2, #8]
 8003b94:	e217      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 fdb9 	bl	8007716 <USB_ReadChInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bae:	d11b      	bne.n	8003be8 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	334d      	adds	r3, #77	@ 0x4d
 8003bc0:	2209      	movs	r2, #9
 8003bc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fe1f 	bl	8007810 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003be4:	6093      	str	r3, [r2, #8]
 8003be6:	e1ee      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fd90 	bl	8007716 <USB_ReadChInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	f040 81df 	bne.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2302      	movs	r3, #2
 8003c12:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334d      	adds	r3, #77	@ 0x4d
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 8093 	bne.w	8003d52 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334d      	adds	r3, #77	@ 0x4d
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	334c      	adds	r3, #76	@ 0x4c
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3326      	adds	r3, #38	@ 0x26
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d00b      	beq.n	8003c82 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3326      	adds	r3, #38	@ 0x26
 8003c7a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	f040 8190 	bne.w	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	799b      	ldrb	r3, [r3, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d115      	bne.n	8003cb6 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	333d      	adds	r3, #61	@ 0x3d
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	f083 0301 	eor.w	r3, r3, #1
 8003ca2:	b2d8      	uxtb	r0, r3
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	333d      	adds	r3, #61	@ 0x3d
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	799b      	ldrb	r3, [r3, #6]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f040 8171 	bne.w	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3334      	adds	r3, #52	@ 0x34
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8165 	beq.w	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3334      	adds	r3, #52	@ 0x34
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	3328      	adds	r3, #40	@ 0x28
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	440b      	add	r3, r1
 8003cfe:	1e59      	subs	r1, r3, #1
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	3328      	adds	r3, #40	@ 0x28
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d16:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 813f 	beq.w	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	333d      	adds	r3, #61	@ 0x3d
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	f083 0301 	eor.w	r3, r3, #1
 8003d3c:	b2d8      	uxtb	r0, r3
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	333d      	adds	r3, #61	@ 0x3d
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e127      	b.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334d      	adds	r3, #77	@ 0x4d
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d120      	bne.n	8003daa <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	334d      	adds	r3, #77	@ 0x4d
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	331b      	adds	r3, #27
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	f040 8107 	bne.w	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	334c      	adds	r3, #76	@ 0x4c
 8003da4:	2202      	movs	r2, #2
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e0fb      	b.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334d      	adds	r3, #77	@ 0x4d
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d13a      	bne.n	8003e36 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	334d      	adds	r3, #77	@ 0x4d
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	334c      	adds	r3, #76	@ 0x4c
 8003de4:	2202      	movs	r2, #2
 8003de6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	331b      	adds	r3, #27
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	f040 80d1 	bne.w	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	331b      	adds	r3, #27
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e32:	6053      	str	r3, [r2, #4]
 8003e34:	e0b5      	b.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	334d      	adds	r3, #77	@ 0x4d
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d114      	bne.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	334d      	adds	r3, #77	@ 0x4d
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	334c      	adds	r3, #76	@ 0x4c
 8003e70:	2202      	movs	r2, #2
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e095      	b.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	334d      	adds	r3, #77	@ 0x4d
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b06      	cmp	r3, #6
 8003e8a:	d114      	bne.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	334d      	adds	r3, #77	@ 0x4d
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	334c      	adds	r3, #76	@ 0x4c
 8003eb0:	2205      	movs	r2, #5
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e075      	b.n	8003fa2 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	334d      	adds	r3, #77	@ 0x4d
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	d00a      	beq.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	334d      	adds	r3, #77	@ 0x4d
 8003edc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ede:	2b09      	cmp	r3, #9
 8003ee0:	d170      	bne.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334d      	adds	r3, #77	@ 0x4d
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3344      	adds	r3, #68	@ 0x44
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1c59      	adds	r1, r3, #1
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4403      	add	r3, r0
 8003f16:	3344      	adds	r3, #68	@ 0x44
 8003f18:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3344      	adds	r3, #68	@ 0x44
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d914      	bls.n	8003f5a <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3344      	adds	r3, #68	@ 0x44
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	334c      	adds	r3, #76	@ 0x4c
 8003f54:	2204      	movs	r2, #4
 8003f56:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f58:	e022      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	334c      	adds	r3, #76	@ 0x4c
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f84:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f8c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fa0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	334c      	adds	r3, #76	@ 0x4c
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f004 ff5b 	bl	8008e74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fbe:	e002      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003fc4:	bf00      	nop
  }
}
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	0c5b      	lsrs	r3, r3, #17
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004000:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d004      	beq.n	8004012 <HCD_RXQLVL_IRQHandler+0x46>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b05      	cmp	r3, #5
 800400c:	f000 80b6 	beq.w	800417c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004010:	e0b7      	b.n	8004182 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80b3 	beq.w	8004180 <HCD_RXQLVL_IRQHandler+0x1b4>
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	332c      	adds	r3, #44	@ 0x2c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a7 	beq.w	8004180 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3338      	adds	r3, #56	@ 0x38
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	18d1      	adds	r1, r2, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4403      	add	r3, r0
 8004056:	3334      	adds	r3, #52	@ 0x34
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4299      	cmp	r1, r3
 800405c:	f200 8083 	bhi.w	8004166 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	332c      	adds	r3, #44	@ 0x2c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	b292      	uxth	r2, r2
 800407a:	4619      	mov	r1, r3
 800407c:	f003 fae0 	bl	8007640 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	332c      	adds	r3, #44	@ 0x2c
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	18d1      	adds	r1, r2, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	332c      	adds	r3, #44	@ 0x2c
 80040a6:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3338      	adds	r3, #56	@ 0x38
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	18d1      	adds	r1, r2, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4403      	add	r3, r0
 80040cc:	3338      	adds	r3, #56	@ 0x38
 80040ce:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	0cdb      	lsrs	r3, r3, #19
 80040e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	3328      	adds	r3, #40	@ 0x28
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d13f      	bne.n	8004180 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d03c      	beq.n	8004180 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800411c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004124:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	333c      	adds	r3, #60	@ 0x3c
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	f083 0301 	eor.w	r3, r3, #1
 800414e:	b2d8      	uxtb	r0, r3
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	333c      	adds	r3, #60	@ 0x3c
 8004160:	4602      	mov	r2, r0
 8004162:	701a      	strb	r2, [r3, #0]
      break;
 8004164:	e00c      	b.n	8004180 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	334c      	adds	r3, #76	@ 0x4c
 8004176:	2204      	movs	r2, #4
 8004178:	701a      	strb	r2, [r3, #0]
      break;
 800417a:	e001      	b.n	8004180 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800417c:	bf00      	nop
 800417e:	e000      	b.n	8004182 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004180:	bf00      	nop
  }
}
 8004182:	bf00      	nop
 8004184:	3728      	adds	r7, #40	@ 0x28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80041b6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d10b      	bne.n	80041da <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f004 fe35 	bl	8008e3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d132      	bne.n	800424a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f043 0308 	orr.w	r3, r3, #8
 80041ea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d126      	bne.n	8004244 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7a5b      	ldrb	r3, [r3, #9]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d113      	bne.n	8004226 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004204:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004208:	d106      	bne.n	8004218 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f003 faaf 	bl	8007774 <USB_InitFSLSPClkSel>
 8004216:	e011      	b.n	800423c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f003 faa8 	bl	8007774 <USB_InitFSLSPClkSel>
 8004224:	e00a      	b.n	800423c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	79db      	ldrb	r3, [r3, #7]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d106      	bne.n	800423c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004234:	461a      	mov	r2, r3
 8004236:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800423a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f004 fe2b 	bl	8008e98 <HAL_HCD_PortEnabled_Callback>
 8004242:	e002      	b.n	800424a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f004 fe35 	bl	8008eb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d103      	bne.n	800425c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e12b      	b.n	80044da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fe96 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d4:	f001 f964 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 80042d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a81      	ldr	r2, [pc, #516]	@ (80044e4 <HAL_I2C_Init+0x274>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d807      	bhi.n	80042f4 <HAL_I2C_Init+0x84>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a80      	ldr	r2, [pc, #512]	@ (80044e8 <HAL_I2C_Init+0x278>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e006      	b.n	8004302 <HAL_I2C_Init+0x92>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a7d      	ldr	r2, [pc, #500]	@ (80044ec <HAL_I2C_Init+0x27c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bf94      	ite	ls
 80042fc:	2301      	movls	r3, #1
 80042fe:	2300      	movhi	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0e7      	b.n	80044da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a78      	ldr	r2, [pc, #480]	@ (80044f0 <HAL_I2C_Init+0x280>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0c9b      	lsrs	r3, r3, #18
 8004314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a6a      	ldr	r2, [pc, #424]	@ (80044e4 <HAL_I2C_Init+0x274>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d802      	bhi.n	8004344 <HAL_I2C_Init+0xd4>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
 8004342:	e009      	b.n	8004358 <HAL_I2C_Init+0xe8>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	4a69      	ldr	r2, [pc, #420]	@ (80044f4 <HAL_I2C_Init+0x284>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	3301      	adds	r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	430b      	orrs	r3, r1
 800435e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800436a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	495c      	ldr	r1, [pc, #368]	@ (80044e4 <HAL_I2C_Init+0x274>)
 8004374:	428b      	cmp	r3, r1
 8004376:	d819      	bhi.n	80043ac <HAL_I2C_Init+0x13c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e59      	subs	r1, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	fbb1 f3f3 	udiv	r3, r1, r3
 8004386:	1c59      	adds	r1, r3, #1
 8004388:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800438c:	400b      	ands	r3, r1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_I2C_Init+0x138>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e59      	subs	r1, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a6:	e051      	b.n	800444c <HAL_I2C_Init+0x1dc>
 80043a8:	2304      	movs	r3, #4
 80043aa:	e04f      	b.n	800444c <HAL_I2C_Init+0x1dc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d111      	bne.n	80043d8 <HAL_I2C_Init+0x168>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e58      	subs	r0, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e012      	b.n	80043fe <HAL_I2C_Init+0x18e>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e58      	subs	r0, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	0099      	lsls	r1, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Init+0x196>
 8004402:	2301      	movs	r3, #1
 8004404:	e022      	b.n	800444c <HAL_I2C_Init+0x1dc>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10e      	bne.n	800442c <HAL_I2C_Init+0x1bc>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1e58      	subs	r0, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	460b      	mov	r3, r1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	440b      	add	r3, r1
 800441c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004420:	3301      	adds	r3, #1
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800442a:	e00f      	b.n	800444c <HAL_I2C_Init+0x1dc>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	0099      	lsls	r1, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	6809      	ldr	r1, [r1, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800447a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6911      	ldr	r1, [r2, #16]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	430b      	orrs	r3, r1
 800448e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	000186a0 	.word	0x000186a0
 80044e8:	001e847f 	.word	0x001e847f
 80044ec:	003d08ff 	.word	0x003d08ff
 80044f0:	431bde83 	.word	0x431bde83
 80044f4:	10624dd3 	.word	0x10624dd3

080044f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b20      	cmp	r3, #32
 800450c:	d129      	bne.n	8004562 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2224      	movs	r2, #36	@ 0x24
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0210 	bic.w	r2, r2, #16
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b20      	cmp	r3, #32
 8004588:	d12a      	bne.n	80045e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2224      	movs	r2, #36	@ 0x24
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045aa:	89fb      	ldrh	r3, [r7, #14]
 80045ac:	f023 030f 	bic.w	r3, r3, #15
 80045b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	89fb      	ldrh	r3, [r7, #14]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	89fa      	ldrh	r2, [r7, #14]
 80045c2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0bf      	b.n	8004782 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fd40 	bl	800109c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004632:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004648:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_LTDC_Init+0x19c>)
 8004664:	400b      	ands	r3, r1
 8004666:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68d9      	ldr	r1, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b3e      	ldr	r3, [pc, #248]	@ (800478c <HAL_LTDC_Init+0x19c>)
 8004692:	400b      	ands	r3, r1
 8004694:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6919      	ldr	r1, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b33      	ldr	r3, [pc, #204]	@ (800478c <HAL_LTDC_Init+0x19c>)
 80046c0:	400b      	ands	r3, r1
 80046c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6959      	ldr	r1, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b27      	ldr	r3, [pc, #156]	@ (800478c <HAL_LTDC_Init+0x19c>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6959      	ldr	r1, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0206 	orr.w	r2, r2, #6
 800475e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	f000f800 	.word	0xf000f800

08004790 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d023      	beq.n	80047fa <HAL_LTDC_IRQHandler+0x6a>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01e      	beq.n	80047fa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2204      	movs	r2, #4
 80047d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2204      	movs	r2, #4
 80047e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f86f 	bl	80048d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d023      	beq.n	800484c <HAL_LTDC_IRQHandler+0xbc>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01e      	beq.n	800484c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0202 	bic.w	r2, r2, #2
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800482c:	f043 0202 	orr.w	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2204      	movs	r2, #4
 800483a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f846 	bl	80048d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01b      	beq.n	800488e <HAL_LTDC_IRQHandler+0xfe>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d016      	beq.n	800488e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f82f 	bl	80048ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_LTDC_IRQHandler+0x140>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0208 	bic.w	r2, r2, #8
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2208      	movs	r2, #8
 80048b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f818 	bl	8004900 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004914:	b5b0      	push	{r4, r5, r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_LTDC_ConfigLayer+0x1a>
 800492a:	2302      	movs	r3, #2
 800492c:	e02c      	b.n	8004988 <HAL_LTDC_ConfigLayer+0x74>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2134      	movs	r1, #52	@ 0x34
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800495c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f811 	bl	8004990 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bdb0      	pop	{r4, r5, r7, pc}

08004990 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	@ 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	4413      	add	r3, r2
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4413      	add	r3, r2
 80049be:	3384      	adds	r3, #132	@ 0x84
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	4611      	mov	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	01d2      	lsls	r2, r2, #7
 80049cc:	440a      	add	r2, r1
 80049ce:	3284      	adds	r2, #132	@ 0x84
 80049d0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80049d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049e6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049e8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	440b      	add	r3, r1
 80049f6:	3384      	adds	r3, #132	@ 0x84
 80049f8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a0e:	4413      	add	r3, r2
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	01db      	lsls	r3, r3, #7
 8004a1e:	4413      	add	r3, r2
 8004a20:	3384      	adds	r3, #132	@ 0x84
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	01d2      	lsls	r2, r2, #7
 8004a2e:	440a      	add	r2, r1
 8004a30:	3284      	adds	r2, #132	@ 0x84
 8004a32:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a46:	4413      	add	r3, r2
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	440b      	add	r3, r1
 8004a56:	3384      	adds	r3, #132	@ 0x84
 8004a58:	4619      	mov	r1, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	01db      	lsls	r3, r3, #7
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3384      	adds	r3, #132	@ 0x84
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	4611      	mov	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	01d2      	lsls	r2, r2, #7
 8004a7a:	440a      	add	r2, r1
 8004a7c:	3284      	adds	r2, #132	@ 0x84
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
 8004a82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	@ 0x84
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3384      	adds	r3, #132	@ 0x84
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3384      	adds	r3, #132	@ 0x84
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	440b      	add	r3, r1
 8004af6:	3384      	adds	r3, #132	@ 0x84
 8004af8:	4619      	mov	r1, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3384      	adds	r3, #132	@ 0x84
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4611      	mov	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	01d2      	lsls	r2, r2, #7
 8004b1a:	440a      	add	r2, r1
 8004b1c:	3284      	adds	r2, #132	@ 0x84
 8004b1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	4413      	add	r3, r2
 8004b30:	3384      	adds	r3, #132	@ 0x84
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	4413      	add	r3, r2
 8004b46:	3384      	adds	r3, #132	@ 0x84
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	01d2      	lsls	r2, r2, #7
 8004b54:	440a      	add	r2, r1
 8004b56:	3284      	adds	r2, #132	@ 0x84
 8004b58:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b5c:	f023 0307 	bic.w	r3, r3, #7
 8004b60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	6809      	ldr	r1, [r1, #0]
 8004b6e:	4608      	mov	r0, r1
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	01c9      	lsls	r1, r1, #7
 8004b74:	4401      	add	r1, r0
 8004b76:	3184      	adds	r1, #132	@ 0x84
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	01db      	lsls	r3, r3, #7
 8004b86:	4413      	add	r3, r2
 8004b88:	3384      	adds	r3, #132	@ 0x84
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	01db      	lsls	r3, r3, #7
 8004b96:	4413      	add	r3, r2
 8004b98:	3384      	adds	r3, #132	@ 0x84
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	3384      	adds	r3, #132	@ 0x84
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e01b      	b.n	8004bfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	e014      	b.n	8004bfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00b      	beq.n	8004bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d007      	beq.n	8004bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d003      	beq.n	8004bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bee:	2b07      	cmp	r3, #7
 8004bf0:	d102      	bne.n	8004bf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e001      	b.n	8004bfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	01db      	lsls	r3, r3, #7
 8004c06:	4413      	add	r3, r2
 8004c08:	3384      	adds	r3, #132	@ 0x84
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	4611      	mov	r1, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	01d2      	lsls	r2, r2, #7
 8004c16:	440a      	add	r2, r1
 8004c18:	3284      	adds	r2, #132	@ 0x84
 8004c1a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1acb      	subs	r3, r1, r3
 8004c36:	69f9      	ldr	r1, [r7, #28]
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	6809      	ldr	r1, [r1, #0]
 8004c42:	4608      	mov	r0, r1
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	01c9      	lsls	r1, r1, #7
 8004c48:	4401      	add	r1, r0
 8004c4a:	3184      	adds	r1, #132	@ 0x84
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	01db      	lsls	r3, r3, #7
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3384      	adds	r3, #132	@ 0x84
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	4611      	mov	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	01d2      	lsls	r2, r2, #7
 8004c6a:	440a      	add	r2, r1
 8004c6c:	3284      	adds	r2, #132	@ 0x84
 8004c6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	01db      	lsls	r3, r3, #7
 8004c82:	4413      	add	r3, r2
 8004c84:	3384      	adds	r3, #132	@ 0x84
 8004c86:	461a      	mov	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4413      	add	r3, r2
 8004c9a:	3384      	adds	r3, #132	@ 0x84
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	01d2      	lsls	r2, r2, #7
 8004ca8:	440a      	add	r2, r1
 8004caa:	3284      	adds	r2, #132	@ 0x84
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e267      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d075      	beq.n	8004dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cde:	4b88      	ldr	r3, [pc, #544]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d00c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cea:	4b85      	ldr	r3, [pc, #532]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d112      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cf6:	4b82      	ldr	r3, [pc, #520]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d02:	d10b      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	4b7e      	ldr	r3, [pc, #504]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05b      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x108>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d157      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e242      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	d106      	bne.n	8004d34 <HAL_RCC_OscConfig+0x74>
 8004d26:	4b76      	ldr	r3, [pc, #472]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a75      	ldr	r2, [pc, #468]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e01d      	b.n	8004d70 <HAL_RCC_OscConfig+0xb0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x98>
 8004d3e:	4b70      	ldr	r3, [pc, #448]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a6f      	ldr	r2, [pc, #444]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0xb0>
 8004d58:	4b69      	ldr	r3, [pc, #420]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a68      	ldr	r2, [pc, #416]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b66      	ldr	r3, [pc, #408]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a65      	ldr	r2, [pc, #404]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fc fd9c 	bl	80018b4 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fc fd98 	bl	80018b4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e207      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d92:	4b5b      	ldr	r3, [pc, #364]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0xc0>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fc fd88 	bl	80018b4 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fc fd84 	bl	80018b4 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e1f3      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dba:	4b51      	ldr	r3, [pc, #324]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0xe8>
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d063      	beq.n	8004e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de2:	4b47      	ldr	r3, [pc, #284]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d11c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dee:	4b44      	ldr	r3, [pc, #272]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d116      	bne.n	8004e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfa:	4b41      	ldr	r3, [pc, #260]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_RCC_OscConfig+0x152>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e1c7      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	4b3b      	ldr	r3, [pc, #236]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4937      	ldr	r1, [pc, #220]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e26:	e03a      	b.n	8004e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e30:	4b34      	ldr	r3, [pc, #208]	@ (8004f04 <HAL_RCC_OscConfig+0x244>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fd3d 	bl	80018b4 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fc fd39 	bl	80018b4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e1a8      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e50:	4b2b      	ldr	r3, [pc, #172]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b28      	ldr	r3, [pc, #160]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4925      	ldr	r1, [pc, #148]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
 8004e70:	e015      	b.n	8004e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e72:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <HAL_RCC_OscConfig+0x244>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fc fd1c 	bl	80018b4 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fc fd18 	bl	80018b4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e187      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e92:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d036      	beq.n	8004f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb2:	4b15      	ldr	r3, [pc, #84]	@ (8004f08 <HAL_RCC_OscConfig+0x248>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc fcfc 	bl	80018b4 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fc fcf8 	bl	80018b4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e167      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x200>
 8004ede:	e01b      	b.n	8004f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee0:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <HAL_RCC_OscConfig+0x248>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fc fce5 	bl	80018b4 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	e00e      	b.n	8004f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eee:	f7fc fce1 	bl	80018b4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d907      	bls.n	8004f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e150      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
 8004f00:	40023800 	.word	0x40023800
 8004f04:	42470000 	.word	0x42470000
 8004f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	4b88      	ldr	r3, [pc, #544]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ea      	bne.n	8004eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8097 	beq.w	8005054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2a:	4b81      	ldr	r3, [pc, #516]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10f      	bne.n	8004f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f46:	4b7a      	ldr	r3, [pc, #488]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b77      	ldr	r3, [pc, #476]	@ (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f62:	4b74      	ldr	r3, [pc, #464]	@ (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a73      	ldr	r2, [pc, #460]	@ (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fc fca1 	bl	80018b4 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fc fc9d 	bl	80018b4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e10c      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b6a      	ldr	r3, [pc, #424]	@ (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x2ea>
 8004f9c:	4b64      	ldr	r3, [pc, #400]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa0:	4a63      	ldr	r2, [pc, #396]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa8:	e01c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x324>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x30c>
 8004fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x324>
 8004fcc:	4b58      	ldr	r3, [pc, #352]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd0:	4a57      	ldr	r2, [pc, #348]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd8:	4b55      	ldr	r3, [pc, #340]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fdc:	4a54      	ldr	r2, [pc, #336]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fde:	f023 0304 	bic.w	r3, r3, #4
 8004fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d015      	beq.n	8005018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fc fc62 	bl	80018b4 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fc fc5e 	bl	80018b4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0cb      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500a:	4b49      	ldr	r3, [pc, #292]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ee      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x334>
 8005016:	e014      	b.n	8005042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005018:	f7fc fc4c 	bl	80018b4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fc fc48 	bl	80018b4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0b5      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005036:	4b3e      	ldr	r3, [pc, #248]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1ee      	bne.n	8005020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005048:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	4a38      	ldr	r2, [pc, #224]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80a1 	beq.w	80051a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800505e:	4b34      	ldr	r3, [pc, #208]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b08      	cmp	r3, #8
 8005068:	d05c      	beq.n	8005124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d141      	bne.n	80050f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b31      	ldr	r3, [pc, #196]	@ (8005138 <HAL_RCC_OscConfig+0x478>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fc fc1c 	bl	80018b4 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fc fc18 	bl	80018b4 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e087      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	3b01      	subs	r3, #1
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	491b      	ldr	r1, [pc, #108]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005138 <HAL_RCC_OscConfig+0x478>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fc fbf1 	bl	80018b4 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fc fbed 	bl	80018b4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e05c      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x416>
 80050f4:	e054      	b.n	80051a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	4b10      	ldr	r3, [pc, #64]	@ (8005138 <HAL_RCC_OscConfig+0x478>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fc fbda 	bl	80018b4 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005104:	f7fc fbd6 	bl	80018b4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e045      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005116:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <HAL_RCC_OscConfig+0x470>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x444>
 8005122:	e03d      	b.n	80051a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d107      	bne.n	800513c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e038      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000
 8005138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800513c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <HAL_RCC_OscConfig+0x4ec>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d028      	beq.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d121      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d11a      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005174:	4293      	cmp	r3, r2
 8005176:	d111      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	3b01      	subs	r3, #1
 8005186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d107      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800

080051b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0cc      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051c4:	4b68      	ldr	r3, [pc, #416]	@ (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d90c      	bls.n	80051ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b65      	ldr	r3, [pc, #404]	@ (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b63      	ldr	r3, [pc, #396]	@ (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0b8      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d020      	beq.n	800523a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005204:	4b59      	ldr	r3, [pc, #356]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a58      	ldr	r2, [pc, #352]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800520e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800521c:	4b53      	ldr	r3, [pc, #332]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a52      	ldr	r2, [pc, #328]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b50      	ldr	r3, [pc, #320]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	494d      	ldr	r1, [pc, #308]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d044      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	4b47      	ldr	r3, [pc, #284]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d119      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07f      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d003      	beq.n	800526e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800526a:	2b03      	cmp	r3, #3
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	4b3f      	ldr	r3, [pc, #252]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e06f      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527e:	4b3b      	ldr	r3, [pc, #236]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e067      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800528e:	4b37      	ldr	r3, [pc, #220]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f023 0203 	bic.w	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4934      	ldr	r1, [pc, #208]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052a0:	f7fc fb08 	bl	80018b4 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	e00a      	b.n	80052be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a8:	f7fc fb04 	bl	80018b4 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e04f      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052be:	4b2b      	ldr	r3, [pc, #172]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 020c 	and.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d1eb      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d20c      	bcs.n	80052f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b22      	ldr	r3, [pc, #136]	@ (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b20      	ldr	r3, [pc, #128]	@ (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e032      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005304:	4b19      	ldr	r3, [pc, #100]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4916      	ldr	r1, [pc, #88]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005322:	4b12      	ldr	r3, [pc, #72]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	490e      	ldr	r1, [pc, #56]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005336:	f000 f821 	bl	800537c <HAL_RCC_GetSysClockFreq>
 800533a:	4602      	mov	r2, r0
 800533c:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	490a      	ldr	r1, [pc, #40]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	5ccb      	ldrb	r3, [r1, r3]
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	4a09      	ldr	r2, [pc, #36]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <HAL_RCC_ClockConfig+0x1c8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc f97a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40023c00 	.word	0x40023c00
 800536c:	40023800 	.word	0x40023800
 8005370:	08009000 	.word	0x08009000
 8005374:	20000000 	.word	0x20000000
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800537c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005380:	b094      	sub	sp, #80	@ 0x50
 8005382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	647b      	str	r3, [r7, #68]	@ 0x44
 8005388:	2300      	movs	r3, #0
 800538a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538c:	2300      	movs	r3, #0
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005394:	4b79      	ldr	r3, [pc, #484]	@ (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	2b08      	cmp	r3, #8
 800539e:	d00d      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x40>
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	f200 80e1 	bhi.w	8005568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x34>
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ae:	e0db      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4b73      	ldr	r3, [pc, #460]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x204>)
 80053b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80053b4:	e0db      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053b6:	4b73      	ldr	r3, [pc, #460]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x208>)
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ba:	e0d8      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053bc:	4b6f      	ldr	r3, [pc, #444]	@ (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053c6:	4b6d      	ldr	r3, [pc, #436]	@ (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d063      	beq.n	800549a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d2:	4b6a      	ldr	r3, [pc, #424]	@ (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	2200      	movs	r2, #0
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e6:	2300      	movs	r3, #0
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	0159      	lsls	r1, r3, #5
 80053fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005400:	0150      	lsls	r0, r2, #5
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4621      	mov	r1, r4
 8005408:	1a51      	subs	r1, r2, r1
 800540a:	6139      	str	r1, [r7, #16]
 800540c:	4629      	mov	r1, r5
 800540e:	eb63 0301 	sbc.w	r3, r3, r1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005420:	4659      	mov	r1, fp
 8005422:	018b      	lsls	r3, r1, #6
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800542a:	4651      	mov	r1, sl
 800542c:	018a      	lsls	r2, r1, #6
 800542e:	4651      	mov	r1, sl
 8005430:	ebb2 0801 	subs.w	r8, r2, r1
 8005434:	4659      	mov	r1, fp
 8005436:	eb63 0901 	sbc.w	r9, r3, r1
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800544e:	4690      	mov	r8, r2
 8005450:	4699      	mov	r9, r3
 8005452:	4623      	mov	r3, r4
 8005454:	eb18 0303 	adds.w	r3, r8, r3
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	462b      	mov	r3, r5
 800545c:	eb49 0303 	adc.w	r3, r9, r3
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800546e:	4629      	mov	r1, r5
 8005470:	024b      	lsls	r3, r1, #9
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005478:	4621      	mov	r1, r4
 800547a:	024a      	lsls	r2, r1, #9
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005482:	2200      	movs	r2, #0
 8005484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800548c:	f7fa feb0 	bl	80001f0 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005498:	e058      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549a:	4b38      	ldr	r3, [pc, #224]	@ (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	2200      	movs	r2, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	4611      	mov	r1, r2
 80054a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	2300      	movs	r3, #0
 80054ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	f04f 0000 	mov.w	r0, #0
 80054bc:	f04f 0100 	mov.w	r1, #0
 80054c0:	0159      	lsls	r1, r3, #5
 80054c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c6:	0150      	lsls	r0, r2, #5
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4641      	mov	r1, r8
 80054ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80054d2:	4649      	mov	r1, r9
 80054d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054ec:	ebb2 040a 	subs.w	r4, r2, sl
 80054f0:	eb63 050b 	sbc.w	r5, r3, fp
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	00eb      	lsls	r3, r5, #3
 80054fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005502:	00e2      	lsls	r2, r4, #3
 8005504:	4614      	mov	r4, r2
 8005506:	461d      	mov	r5, r3
 8005508:	4643      	mov	r3, r8
 800550a:	18e3      	adds	r3, r4, r3
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	464b      	mov	r3, r9
 8005510:	eb45 0303 	adc.w	r3, r5, r3
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005522:	4629      	mov	r1, r5
 8005524:	028b      	lsls	r3, r1, #10
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800552c:	4621      	mov	r1, r4
 800552e:	028a      	lsls	r2, r1, #10
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005536:	2200      	movs	r2, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	61fa      	str	r2, [r7, #28]
 800553c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005540:	f7fa fe56 	bl	80001f0 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800554c:	4b0b      	ldr	r3, [pc, #44]	@ (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	3301      	adds	r3, #1
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800555c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800555e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005566:	e002      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <HAL_RCC_GetSysClockFreq+0x204>)
 800556a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800556c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800556e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005570:	4618      	mov	r0, r3
 8005572:	3750      	adds	r7, #80	@ 0x50
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800
 8005580:	00f42400 	.word	0x00f42400
 8005584:	007a1200 	.word	0x007a1200

08005588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800558c:	4b03      	ldr	r3, [pc, #12]	@ (800559c <HAL_RCC_GetHCLKFreq+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000000 	.word	0x20000000

080055a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055a4:	f7ff fff0 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0a9b      	lsrs	r3, r3, #10
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4903      	ldr	r1, [pc, #12]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40023800 	.word	0x40023800
 80055c4:	08009010 	.word	0x08009010

080055c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055cc:	f7ff ffdc 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	0b5b      	lsrs	r3, r3, #13
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4903      	ldr	r1, [pc, #12]	@ (80055ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40023800 	.word	0x40023800
 80055ec:	08009010 	.word	0x08009010

080055f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	220f      	movs	r2, #15
 80055fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005600:	4b12      	ldr	r3, [pc, #72]	@ (800564c <HAL_RCC_GetClockConfig+0x5c>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0203 	and.w	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800560c:	4b0f      	ldr	r3, [pc, #60]	@ (800564c <HAL_RCC_GetClockConfig+0x5c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005618:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <HAL_RCC_GetClockConfig+0x5c>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005624:	4b09      	ldr	r3, [pc, #36]	@ (800564c <HAL_RCC_GetClockConfig+0x5c>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005632:	4b07      	ldr	r3, [pc, #28]	@ (8005650 <HAL_RCC_GetClockConfig+0x60>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	601a      	str	r2, [r3, #0]
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	40023c00 	.word	0x40023c00

08005654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005684:	2b00      	cmp	r3, #0
 8005686:	d075      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005688:	4b91      	ldr	r3, [pc, #580]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800568e:	f7fc f911 	bl	80018b4 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005696:	f7fc f90d 	bl	80018b4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e189      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a8:	4b8a      	ldr	r3, [pc, #552]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	019a      	lsls	r2, r3, #6
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	4981      	ldr	r1, [pc, #516]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01f      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056e0:	4b7c      	ldr	r3, [pc, #496]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e6:	0f1b      	lsrs	r3, r3, #28
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	019a      	lsls	r2, r3, #6
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	431a      	orrs	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	071b      	lsls	r3, r3, #28
 8005700:	4974      	ldr	r1, [pc, #464]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005708:	4b72      	ldr	r3, [pc, #456]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800570e:	f023 021f 	bic.w	r2, r3, #31
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	3b01      	subs	r3, #1
 8005718:	496e      	ldr	r1, [pc, #440]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	019a      	lsls	r2, r3, #6
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	071b      	lsls	r3, r3, #28
 8005740:	4964      	ldr	r1, [pc, #400]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005748:	4b61      	ldr	r3, [pc, #388]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800574e:	f7fc f8b1 	bl	80018b4 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005756:	f7fc f8ad 	bl	80018b4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e129      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005768:	4b5a      	ldr	r3, [pc, #360]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005788:	2b00      	cmp	r3, #0
 800578a:	d079      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800578c:	4b52      	ldr	r3, [pc, #328]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005792:	f7fc f88f 	bl	80018b4 <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800579a:	f7fc f88b 	bl	80018b4 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e107      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ac:	4b49      	ldr	r3, [pc, #292]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057b8:	d0ef      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d020      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057c6:	4b43      	ldr	r3, [pc, #268]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057cc:	0f1b      	lsrs	r3, r3, #28
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	019a      	lsls	r2, r3, #6
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	431a      	orrs	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	071b      	lsls	r3, r3, #28
 80057e6:	493b      	ldr	r1, [pc, #236]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ee:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	4934      	ldr	r1, [pc, #208]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01e      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005814:	4b2f      	ldr	r3, [pc, #188]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581a:	0e1b      	lsrs	r3, r3, #24
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	019a      	lsls	r2, r3, #6
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	071b      	lsls	r3, r3, #28
 8005834:	4927      	ldr	r1, [pc, #156]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800583c:	4b25      	ldr	r3, [pc, #148]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005842:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	4922      	ldr	r1, [pc, #136]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005852:	4b21      	ldr	r3, [pc, #132]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005858:	f7fc f82c 	bl	80018b4 <HAL_GetTick>
 800585c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005860:	f7fc f828 	bl	80018b4 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e0a4      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005872:	4b18      	ldr	r3, [pc, #96]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800587a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800587e:	d1ef      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 808b 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	4a0f      	ldr	r2, [pc, #60]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589c:	6413      	str	r3, [r2, #64]	@ 0x40
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058aa:	4b0c      	ldr	r3, [pc, #48]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a0b      	ldr	r2, [pc, #44]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058b6:	f7fb fffd 	bl	80018b4 <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058bc:	e010      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fb fff9 	bl	80018b4 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d909      	bls.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e075      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80058d0:	42470068 	.word	0x42470068
 80058d4:	40023800 	.word	0x40023800
 80058d8:	42470070 	.word	0x42470070
 80058dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058e0:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0e8      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ec:	4b36      	ldr	r3, [pc, #216]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	429a      	cmp	r2, r3
 8005908:	d028      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800590a:	4b2f      	ldr	r3, [pc, #188]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005912:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005914:	4b2d      	ldr	r3, [pc, #180]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800591a:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005920:	4a29      	ldr	r2, [pc, #164]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005926:	4b28      	ldr	r3, [pc, #160]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d114      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005932:	f7fb ffbf 	bl	80018b4 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005938:	e00a      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fb ffbb 	bl	80018b4 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e035      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	4b1d      	ldr	r3, [pc, #116]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ee      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005968:	d10d      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800596a:	4b17      	ldr	r3, [pc, #92]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800597a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800597e:	4912      	ldr	r1, [pc, #72]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]
 8005984:	e005      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005986:	4b10      	ldr	r3, [pc, #64]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	4a0f      	ldr	r2, [pc, #60]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800598c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005990:	6093      	str	r3, [r2, #8]
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005994:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599e:	490a      	ldr	r1, [pc, #40]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80059b6:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40007000 	.word	0x40007000
 80059c8:	40023800 	.word	0x40023800
 80059cc:	42470e40 	.word	0x42470e40
 80059d0:	424711e0 	.word	0x424711e0

080059d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e025      	b.n	8005a34 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fb fe1d 	bl	800163c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f001 fccb 	bl	80073b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	461a      	mov	r2, r3
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	f001 fd20 	bl	800746a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07b      	b.n	8005b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a5e:	d009      	beq.n	8005a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]
 8005a66:	e005      	b.n	8005a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fb fc34 	bl	80012fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af8:	ea42 0103 	orr.w	r1, r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f003 0104 	and.w	r1, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	f003 0210 	and.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e041      	b.n	8005be4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb fc09 	bl	800138c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 fc57 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e04e      	b.n	8005ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a23      	ldr	r2, [pc, #140]	@ (8005cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2e:	d01d      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	@ (8005cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a19      	ldr	r2, [pc, #100]	@ (8005cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d111      	bne.n	8005c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d010      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	e007      	b.n	8005ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40001800 	.word	0x40001800

08005ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb fb6c 	bl	80013d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 fb98 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x24>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e022      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x6a>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d109      	bne.n	8005daa <HAL_TIM_PWM_Start+0x3e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e015      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x6a>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d109      	bne.n	8005dc4 <HAL_TIM_PWM_Start+0x58>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e008      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x6a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e07c      	b.n	8005ed8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Start+0x82>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dec:	e013      	b.n	8005e16 <HAL_TIM_PWM_Start+0xaa>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x92>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	e00b      	b.n	8005e16 <HAL_TIM_PWM_Start+0xaa>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xa2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0c:	e003      	b.n	8005e16 <HAL_TIM_PWM_Start+0xaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2202      	movs	r2, #2
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fe04 	bl	8006a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee0 <HAL_TIM_PWM_Start+0x174>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIM_PWM_Start+0xcc>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <HAL_TIM_PWM_Start+0x178>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d101      	bne.n	8005e3c <HAL_TIM_PWM_Start+0xd0>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_TIM_PWM_Start+0xd2>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a22      	ldr	r2, [pc, #136]	@ (8005ee0 <HAL_TIM_PWM_Start+0x174>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e64:	d01d      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <HAL_TIM_PWM_Start+0x17c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	@ (8005eec <HAL_TIM_PWM_Start+0x180>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <HAL_TIM_PWM_Start+0x184>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a16      	ldr	r2, [pc, #88]	@ (8005ee4 <HAL_TIM_PWM_Start+0x178>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a18      	ldr	r2, [pc, #96]	@ (8005ef4 <HAL_TIM_PWM_Start+0x188>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x136>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <HAL_TIM_PWM_Start+0x18c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b06      	cmp	r3, #6
 8005eb2:	d010      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec4:	e007      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0201 	orr.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40001800 	.word	0x40001800

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0202 	mvn.w	r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa5b 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa4d 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fa5e 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0204 	mvn.w	r2, #4
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa35 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa27 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fa38 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa0f 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa01 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fa12 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0210 	mvn.w	r2, #16
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2208      	movs	r2, #8
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9e9 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9db 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f9ec 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0201 	mvn.w	r2, #1
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fa fea2 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00c      	beq.n	800608c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fd7c 	bl	8006b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00c      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f9bd 	bl	800642a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00c      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0220 	mvn.w	r2, #32
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fd4e 	bl	8006b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0ae      	b.n	8006258 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b0c      	cmp	r3, #12
 8006106:	f200 809f 	bhi.w	8006248 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800610a:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006145 	.word	0x08006145
 8006114:	08006249 	.word	0x08006249
 8006118:	08006249 	.word	0x08006249
 800611c:	08006249 	.word	0x08006249
 8006120:	08006185 	.word	0x08006185
 8006124:	08006249 	.word	0x08006249
 8006128:	08006249 	.word	0x08006249
 800612c:	08006249 	.word	0x08006249
 8006130:	080061c7 	.word	0x080061c7
 8006134:	08006249 	.word	0x08006249
 8006138:	08006249 	.word	0x08006249
 800613c:	08006249 	.word	0x08006249
 8006140:	08006207 	.word	0x08006207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fa24 	bl	8006598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0208 	orr.w	r2, r2, #8
 800615e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0204 	bic.w	r2, r2, #4
 800616e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6999      	ldr	r1, [r3, #24]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	619a      	str	r2, [r3, #24]
      break;
 8006182:	e064      	b.n	800624e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa74 	bl	8006678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6999      	ldr	r1, [r3, #24]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	021a      	lsls	r2, r3, #8
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	619a      	str	r2, [r3, #24]
      break;
 80061c4:	e043      	b.n	800624e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fac9 	bl	8006764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0208 	orr.w	r2, r2, #8
 80061e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0204 	bic.w	r2, r2, #4
 80061f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69d9      	ldr	r1, [r3, #28]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	61da      	str	r2, [r3, #28]
      break;
 8006204:	e023      	b.n	800624e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fb1d 	bl	800684c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	021a      	lsls	r2, r3, #8
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	61da      	str	r2, [r3, #28]
      break;
 8006246:	e002      	b.n	800624e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	75fb      	strb	r3, [r7, #23]
      break;
 800624c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006256:	7dfb      	ldrb	r3, [r7, #23]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIM_ConfigClockSource+0x1c>
 8006278:	2302      	movs	r3, #2
 800627a:	e0b4      	b.n	80063e6 <HAL_TIM_ConfigClockSource+0x186>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800629a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b4:	d03e      	beq.n	8006334 <HAL_TIM_ConfigClockSource+0xd4>
 80062b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ba:	f200 8087 	bhi.w	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c2:	f000 8086 	beq.w	80063d2 <HAL_TIM_ConfigClockSource+0x172>
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ca:	d87f      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b70      	cmp	r3, #112	@ 0x70
 80062ce:	d01a      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0xa6>
 80062d0:	2b70      	cmp	r3, #112	@ 0x70
 80062d2:	d87b      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b60      	cmp	r3, #96	@ 0x60
 80062d6:	d050      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x11a>
 80062d8:	2b60      	cmp	r3, #96	@ 0x60
 80062da:	d877      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b50      	cmp	r3, #80	@ 0x50
 80062de:	d03c      	beq.n	800635a <HAL_TIM_ConfigClockSource+0xfa>
 80062e0:	2b50      	cmp	r3, #80	@ 0x50
 80062e2:	d873      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b40      	cmp	r3, #64	@ 0x40
 80062e6:	d058      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x13a>
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d86f      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b30      	cmp	r3, #48	@ 0x30
 80062ee:	d064      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	2b30      	cmp	r3, #48	@ 0x30
 80062f2:	d86b      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d060      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x15a>
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d867      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d05c      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x15a>
 8006300:	2b10      	cmp	r3, #16
 8006302:	d05a      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	e062      	b.n	80063cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006316:	f000 fb69 	bl	80069ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	609a      	str	r2, [r3, #8]
      break;
 8006332:	e04f      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	f000 fb52 	bl	80069ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006356:	609a      	str	r2, [r3, #8]
      break;
 8006358:	e03c      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006366:	461a      	mov	r2, r3
 8006368:	f000 fac6 	bl	80068f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2150      	movs	r1, #80	@ 0x50
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fb1f 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 8006378:	e02c      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006386:	461a      	mov	r2, r3
 8006388:	f000 fae5 	bl	8006956 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2160      	movs	r1, #96	@ 0x60
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fb0f 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 8006398:	e01c      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	461a      	mov	r2, r3
 80063a8:	f000 faa6 	bl	80068f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2140      	movs	r1, #64	@ 0x40
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 faff 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 80063b8:	e00c      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f000 faf6 	bl	80069b6 <TIM_ITRx_SetConfig>
      break;
 80063ca:	e003      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
      break;
 80063d0:	e000      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a46      	ldr	r2, [pc, #280]	@ (800656c <TIM_Base_SetConfig+0x12c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a43      	ldr	r2, [pc, #268]	@ (8006570 <TIM_Base_SetConfig+0x130>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a42      	ldr	r2, [pc, #264]	@ (8006574 <TIM_Base_SetConfig+0x134>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a41      	ldr	r2, [pc, #260]	@ (8006578 <TIM_Base_SetConfig+0x138>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a40      	ldr	r2, [pc, #256]	@ (800657c <TIM_Base_SetConfig+0x13c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a35      	ldr	r2, [pc, #212]	@ (800656c <TIM_Base_SetConfig+0x12c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d02b      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a0:	d027      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a32      	ldr	r2, [pc, #200]	@ (8006570 <TIM_Base_SetConfig+0x130>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d023      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a31      	ldr	r2, [pc, #196]	@ (8006574 <TIM_Base_SetConfig+0x134>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01f      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a30      	ldr	r2, [pc, #192]	@ (8006578 <TIM_Base_SetConfig+0x138>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01b      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2f      	ldr	r2, [pc, #188]	@ (800657c <TIM_Base_SetConfig+0x13c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d017      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006580 <TIM_Base_SetConfig+0x140>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006584 <TIM_Base_SetConfig+0x144>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00f      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006588 <TIM_Base_SetConfig+0x148>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00b      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2b      	ldr	r2, [pc, #172]	@ (800658c <TIM_Base_SetConfig+0x14c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d007      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <TIM_Base_SetConfig+0x150>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <TIM_Base_SetConfig+0x154>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d108      	bne.n	8006504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a10      	ldr	r2, [pc, #64]	@ (800656c <TIM_Base_SetConfig+0x12c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a12      	ldr	r2, [pc, #72]	@ (800657c <TIM_Base_SetConfig+0x13c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d103      	bne.n	8006540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	611a      	str	r2, [r3, #16]
  }
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40010400 	.word	0x40010400
 8006580:	40014000 	.word	0x40014000
 8006584:	40014400 	.word	0x40014400
 8006588:	40014800 	.word	0x40014800
 800658c:	40001800 	.word	0x40001800
 8006590:	40001c00 	.word	0x40001c00
 8006594:	40002000 	.word	0x40002000

08006598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f023 0201 	bic.w	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 0302 	bic.w	r3, r3, #2
 80065e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <TIM_OC1_SetConfig+0xd8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC1_SetConfig+0x64>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <TIM_OC1_SetConfig+0xdc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10c      	bne.n	8006616 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0308 	bic.w	r3, r3, #8
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0304 	bic.w	r3, r3, #4
 8006614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a15      	ldr	r2, [pc, #84]	@ (8006670 <TIM_OC1_SetConfig+0xd8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_OC1_SetConfig+0x8e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a14      	ldr	r2, [pc, #80]	@ (8006674 <TIM_OC1_SetConfig+0xdc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d111      	bne.n	800664a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800662c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400

08006678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f023 0210 	bic.w	r2, r3, #16
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0320 	bic.w	r3, r3, #32
 80066c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a22      	ldr	r2, [pc, #136]	@ (800675c <TIM_OC2_SetConfig+0xe4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0x68>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a21      	ldr	r2, [pc, #132]	@ (8006760 <TIM_OC2_SetConfig+0xe8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10d      	bne.n	80066fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a17      	ldr	r2, [pc, #92]	@ (800675c <TIM_OC2_SetConfig+0xe4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC2_SetConfig+0x94>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a16      	ldr	r2, [pc, #88]	@ (8006760 <TIM_OC2_SetConfig+0xe8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d113      	bne.n	8006734 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800671a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40010000 	.word	0x40010000
 8006760:	40010400 	.word	0x40010400

08006764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a21      	ldr	r2, [pc, #132]	@ (8006844 <TIM_OC3_SetConfig+0xe0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC3_SetConfig+0x66>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a20      	ldr	r2, [pc, #128]	@ (8006848 <TIM_OC3_SetConfig+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d10d      	bne.n	80067e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a16      	ldr	r2, [pc, #88]	@ (8006844 <TIM_OC3_SetConfig+0xe0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_OC3_SetConfig+0x92>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <TIM_OC3_SetConfig+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d113      	bne.n	800681e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	621a      	str	r2, [r3, #32]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400

0800684c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a12      	ldr	r2, [pc, #72]	@ (80068f0 <TIM_OC4_SetConfig+0xa4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC4_SetConfig+0x68>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <TIM_OC4_SetConfig+0xa8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d109      	bne.n	80068c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	019b      	lsls	r3, r3, #6
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f023 0201 	bic.w	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 030a 	bic.w	r3, r3, #10
 8006934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006956:	b480      	push	{r7}
 8006958:	b087      	sub	sp, #28
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f023 0210 	bic.w	r2, r3, #16
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006992:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f043 0307 	orr.w	r3, r3, #7
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	021a      	lsls	r2, r3, #8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	2201      	movs	r2, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	401a      	ands	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	fa01 f303 	lsl.w	r3, r1, r3
 8006a64:	431a      	orrs	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e05a      	b.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a21      	ldr	r2, [pc, #132]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d022      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006adc:	d01d      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d018      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00e      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a18      	ldr	r2, [pc, #96]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a17      	ldr	r2, [pc, #92]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a15      	ldr	r2, [pc, #84]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d10c      	bne.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40000c00 	.word	0x40000c00
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40001800 	.word	0x40001800

08006b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e042      	b.n	8006c30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fa fc62 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f973 	bl	8006ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d175      	bne.n	8006d44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Transmit+0x2c>
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e06e      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2221      	movs	r2, #33	@ 0x21
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c76:	f7fa fe1d 	bl	80018b4 <HAL_GetTick>
 8006c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c90:	d108      	bne.n	8006ca4 <HAL_UART_Transmit+0x6c>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e003      	b.n	8006cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cac:	e02e      	b.n	8006d0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	@ 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f848 	bl	8006d4e <UART_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e03a      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	3302      	adds	r3, #2
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e007      	b.n	8006cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1cb      	bne.n	8006cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2140      	movs	r1, #64	@ 0x40
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f814 	bl	8006d4e <UART_WaitOnFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e006      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e000      	b.n	8006d46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d44:	2302      	movs	r3, #2
  }
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5e:	e03b      	b.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d037      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d68:	f7fa fda4 	bl	80018b4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	6a3a      	ldr	r2, [r7, #32]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e03a      	b.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d023      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b80      	cmp	r3, #128	@ 0x80
 8006d94:	d020      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b40      	cmp	r3, #64	@ 0x40
 8006d9a:	d01d      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d116      	bne.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f81d 	bl	8006e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e00f      	b.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4013      	ands	r3, r2
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bf0c      	ite	eq
 8006de8:	2301      	moveq	r3, #1
 8006dea:	2300      	movne	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d0b4      	beq.n	8006d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b095      	sub	sp, #84	@ 0x54
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e28:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3314      	adds	r3, #20
 8006e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d119      	bne.n	8006eac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f023 0310 	bic.w	r3, r3, #16
 8006e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e98:	61ba      	str	r2, [r7, #24]
 8006e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006eba:	bf00      	nop
 8006ebc:	3754      	adds	r7, #84	@ 0x54
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ecc:	b0c0      	sub	sp, #256	@ 0x100
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	68d9      	ldr	r1, [r3, #12]
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	ea40 0301 	orr.w	r3, r0, r1
 8006ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f20:	f021 010c 	bic.w	r1, r1, #12
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f42:	6999      	ldr	r1, [r3, #24]
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	ea40 0301 	orr.w	r3, r0, r1
 8006f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8f      	ldr	r3, [pc, #572]	@ (8007194 <UART_SetConfig+0x2cc>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d005      	beq.n	8006f68 <UART_SetConfig+0xa0>
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b8d      	ldr	r3, [pc, #564]	@ (8007198 <UART_SetConfig+0x2d0>)
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d104      	bne.n	8006f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f68:	f7fe fb2e 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 8006f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f70:	e003      	b.n	8006f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f72:	f7fe fb15 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8006f76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f84:	f040 810c 	bne.w	80071a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	1891      	adds	r1, r2, r2
 8006fa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fa2:	415b      	adcs	r3, r3
 8006fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006faa:	4621      	mov	r1, r4
 8006fac:	eb12 0801 	adds.w	r8, r2, r1
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	eb43 0901 	adc.w	r9, r3, r1
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fca:	4690      	mov	r8, r2
 8006fcc:	4699      	mov	r9, r3
 8006fce:	4623      	mov	r3, r4
 8006fd0:	eb18 0303 	adds.w	r3, r8, r3
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fd8:	462b      	mov	r3, r5
 8006fda:	eb49 0303 	adc.w	r3, r9, r3
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	18db      	adds	r3, r3, r3
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	eb42 0303 	adc.w	r3, r2, r3
 8007002:	657b      	str	r3, [r7, #84]	@ 0x54
 8007004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800700c:	f7f9 f8f0 	bl	80001f0 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4b61      	ldr	r3, [pc, #388]	@ (800719c <UART_SetConfig+0x2d4>)
 8007016:	fba3 2302 	umull	r2, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	011c      	lsls	r4, r3, #4
 800701e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007022:	2200      	movs	r2, #0
 8007024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007028:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800702c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	1891      	adds	r1, r2, r2
 8007036:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007038:	415b      	adcs	r3, r3
 800703a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800703c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007040:	4641      	mov	r1, r8
 8007042:	eb12 0a01 	adds.w	sl, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0b01 	adc.w	fp, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800705c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007060:	4692      	mov	sl, r2
 8007062:	469b      	mov	fp, r3
 8007064:	4643      	mov	r3, r8
 8007066:	eb1a 0303 	adds.w	r3, sl, r3
 800706a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800706e:	464b      	mov	r3, r9
 8007070:	eb4b 0303 	adc.w	r3, fp, r3
 8007074:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007084:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800708c:	460b      	mov	r3, r1
 800708e:	18db      	adds	r3, r3, r3
 8007090:	643b      	str	r3, [r7, #64]	@ 0x40
 8007092:	4613      	mov	r3, r2
 8007094:	eb42 0303 	adc.w	r3, r2, r3
 8007098:	647b      	str	r3, [r7, #68]	@ 0x44
 800709a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800709e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070a2:	f7f9 f8a5 	bl	80001f0 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	4b3b      	ldr	r3, [pc, #236]	@ (800719c <UART_SetConfig+0x2d4>)
 80070ae:	fba3 2301 	umull	r2, r3, r3, r1
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2264      	movs	r2, #100	@ 0x64
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	1acb      	subs	r3, r1, r3
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070c2:	4b36      	ldr	r3, [pc, #216]	@ (800719c <UART_SetConfig+0x2d4>)
 80070c4:	fba3 2302 	umull	r2, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070d0:	441c      	add	r4, r3
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	1891      	adds	r1, r2, r2
 80070ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070ec:	415b      	adcs	r3, r3
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070f4:	4641      	mov	r1, r8
 80070f6:	1851      	adds	r1, r2, r1
 80070f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80070fa:	4649      	mov	r1, r9
 80070fc:	414b      	adcs	r3, r1
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800710c:	4659      	mov	r1, fp
 800710e:	00cb      	lsls	r3, r1, #3
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007116:	4651      	mov	r1, sl
 8007118:	00ca      	lsls	r2, r1, #3
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	4603      	mov	r3, r0
 8007120:	4642      	mov	r2, r8
 8007122:	189b      	adds	r3, r3, r2
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007128:	464b      	mov	r3, r9
 800712a:	460a      	mov	r2, r1
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007140:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007148:	460b      	mov	r3, r1
 800714a:	18db      	adds	r3, r3, r3
 800714c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800714e:	4613      	mov	r3, r2
 8007150:	eb42 0303 	adc.w	r3, r2, r3
 8007154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800715a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800715e:	f7f9 f847 	bl	80001f0 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <UART_SetConfig+0x2d4>)
 8007168:	fba3 1302 	umull	r1, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	2164      	movs	r1, #100	@ 0x64
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	3332      	adds	r3, #50	@ 0x32
 800717a:	4a08      	ldr	r2, [pc, #32]	@ (800719c <UART_SetConfig+0x2d4>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f003 0207 	and.w	r2, r3, #7
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4422      	add	r2, r4
 800718e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007190:	e106      	b.n	80073a0 <UART_SetConfig+0x4d8>
 8007192:	bf00      	nop
 8007194:	40011000 	.word	0x40011000
 8007198:	40011400 	.word	0x40011400
 800719c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071b2:	4642      	mov	r2, r8
 80071b4:	464b      	mov	r3, r9
 80071b6:	1891      	adds	r1, r2, r2
 80071b8:	6239      	str	r1, [r7, #32]
 80071ba:	415b      	adcs	r3, r3
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071c2:	4641      	mov	r1, r8
 80071c4:	1854      	adds	r4, r2, r1
 80071c6:	4649      	mov	r1, r9
 80071c8:	eb43 0501 	adc.w	r5, r3, r1
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	00eb      	lsls	r3, r5, #3
 80071d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071da:	00e2      	lsls	r2, r4, #3
 80071dc:	4614      	mov	r4, r2
 80071de:	461d      	mov	r5, r3
 80071e0:	4643      	mov	r3, r8
 80071e2:	18e3      	adds	r3, r4, r3
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071e8:	464b      	mov	r3, r9
 80071ea:	eb45 0303 	adc.w	r3, r5, r3
 80071ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800720e:	4629      	mov	r1, r5
 8007210:	008b      	lsls	r3, r1, #2
 8007212:	4621      	mov	r1, r4
 8007214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007218:	4621      	mov	r1, r4
 800721a:	008a      	lsls	r2, r1, #2
 800721c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007220:	f7f8 ffe6 	bl	80001f0 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b60      	ldr	r3, [pc, #384]	@ (80073ac <UART_SetConfig+0x4e4>)
 800722a:	fba3 2302 	umull	r2, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	011c      	lsls	r4, r3, #4
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800723c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	61b9      	str	r1, [r7, #24]
 800724c:	415b      	adcs	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6139      	str	r1, [r7, #16]
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800729e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072ac:	4649      	mov	r1, r9
 80072ae:	008b      	lsls	r3, r1, #2
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b6:	4641      	mov	r1, r8
 80072b8:	008a      	lsls	r2, r1, #2
 80072ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072be:	f7f8 ff97 	bl	80001f0 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	4b38      	ldr	r3, [pc, #224]	@ (80073ac <UART_SetConfig+0x4e4>)
 80072ca:	fba3 2301 	umull	r2, r3, r3, r1
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	2264      	movs	r2, #100	@ 0x64
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	1acb      	subs	r3, r1, r3
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	3332      	adds	r3, #50	@ 0x32
 80072dc:	4a33      	ldr	r2, [pc, #204]	@ (80073ac <UART_SetConfig+0x4e4>)
 80072de:	fba2 2303 	umull	r2, r3, r2, r3
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072e8:	441c      	add	r4, r3
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ee:	2200      	movs	r2, #0
 80072f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80072f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80072f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	1891      	adds	r1, r2, r2
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	415b      	adcs	r3, r3
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007308:	4641      	mov	r1, r8
 800730a:	1851      	adds	r1, r2, r1
 800730c:	6039      	str	r1, [r7, #0]
 800730e:	4649      	mov	r1, r9
 8007310:	414b      	adcs	r3, r1
 8007312:	607b      	str	r3, [r7, #4]
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007320:	4659      	mov	r1, fp
 8007322:	00cb      	lsls	r3, r1, #3
 8007324:	4651      	mov	r1, sl
 8007326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800732a:	4651      	mov	r1, sl
 800732c:	00ca      	lsls	r2, r1, #3
 800732e:	4610      	mov	r0, r2
 8007330:	4619      	mov	r1, r3
 8007332:	4603      	mov	r3, r0
 8007334:	4642      	mov	r2, r8
 8007336:	189b      	adds	r3, r3, r2
 8007338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800733a:	464b      	mov	r3, r9
 800733c:	460a      	mov	r2, r1
 800733e:	eb42 0303 	adc.w	r3, r2, r3
 8007342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	663b      	str	r3, [r7, #96]	@ 0x60
 800734e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800735c:	4649      	mov	r1, r9
 800735e:	008b      	lsls	r3, r1, #2
 8007360:	4641      	mov	r1, r8
 8007362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007366:	4641      	mov	r1, r8
 8007368:	008a      	lsls	r2, r1, #2
 800736a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800736e:	f7f8 ff3f 	bl	80001f0 <__aeabi_uldivmod>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <UART_SetConfig+0x4e4>)
 8007378:	fba3 1302 	umull	r1, r3, r3, r2
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	2164      	movs	r1, #100	@ 0x64
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	3332      	adds	r3, #50	@ 0x32
 800738a:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <UART_SetConfig+0x4e4>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f003 020f 	and.w	r2, r3, #15
 8007396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4422      	add	r2, r4
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ac:	51eb851f 	.word	0x51eb851f

080073b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d123      	bne.n	800740a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80073ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	6851      	ldr	r1, [r2, #4]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	6892      	ldr	r2, [r2, #8]
 80073d6:	4311      	orrs	r1, r2
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	68d2      	ldr	r2, [r2, #12]
 80073dc:	4311      	orrs	r1, r2
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	6912      	ldr	r2, [r2, #16]
 80073e2:	4311      	orrs	r1, r2
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	6952      	ldr	r2, [r2, #20]
 80073e8:	4311      	orrs	r1, r2
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	6992      	ldr	r2, [r2, #24]
 80073ee:	4311      	orrs	r1, r2
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	69d2      	ldr	r2, [r2, #28]
 80073f4:	4311      	orrs	r1, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	6a12      	ldr	r2, [r2, #32]
 80073fa:	4311      	orrs	r1, r2
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007400:	430a      	orrs	r2, r1
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e028      	b.n	800745c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	69d9      	ldr	r1, [r3, #28]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	4319      	orrs	r1, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	430b      	orrs	r3, r1
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007430:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	6851      	ldr	r1, [r2, #4]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	6892      	ldr	r2, [r2, #8]
 800743c:	4311      	orrs	r1, r2
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	68d2      	ldr	r2, [r2, #12]
 8007442:	4311      	orrs	r1, r2
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	6912      	ldr	r2, [r2, #16]
 8007448:	4311      	orrs	r1, r2
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	6952      	ldr	r2, [r2, #20]
 800744e:	4311      	orrs	r1, r2
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	6992      	ldr	r2, [r2, #24]
 8007454:	430a      	orrs	r2, r1
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d128      	bne.n	80074ce <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	1e59      	subs	r1, r3, #1
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	3b01      	subs	r3, #1
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4319      	orrs	r1, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	3b01      	subs	r3, #1
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	4319      	orrs	r1, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	031b      	lsls	r3, r3, #12
 80074a6:	4319      	orrs	r1, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	4319      	orrs	r1, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	051b      	lsls	r3, r3, #20
 80074ba:	4319      	orrs	r1, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	061b      	lsls	r3, r3, #24
 80074c4:	430b      	orrs	r3, r1
 80074c6:	431a      	orrs	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	e02f      	b.n	800752e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	68d2      	ldr	r2, [r2, #12]
 80074de:	3a01      	subs	r2, #1
 80074e0:	0311      	lsls	r1, r2, #12
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	6952      	ldr	r2, [r2, #20]
 80074e6:	3a01      	subs	r2, #1
 80074e8:	0512      	lsls	r2, r2, #20
 80074ea:	430a      	orrs	r2, r1
 80074ec:	431a      	orrs	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	1e59      	subs	r1, r3, #1
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	3b01      	subs	r3, #1
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	4319      	orrs	r1, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	3b01      	subs	r3, #1
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	4319      	orrs	r1, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	3b01      	subs	r3, #1
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	4319      	orrs	r1, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	3b01      	subs	r3, #1
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	430b      	orrs	r3, r1
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f043 0201 	orr.w	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800759a:	d901      	bls.n	80075a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e01b      	b.n	80075d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	daf2      	bge.n	800758e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	019b      	lsls	r3, r3, #6
 80075b0:	f043 0220 	orr.w	r2, r3, #32
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c4:	d901      	bls.n	80075ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e006      	b.n	80075d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d0f0      	beq.n	80075b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075fc:	d901      	bls.n	8007602 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e018      	b.n	8007634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	daf2      	bge.n	80075f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2210      	movs	r2, #16
 8007612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007620:	d901      	bls.n	8007626 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e006      	b.n	8007634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b10      	cmp	r3, #16
 8007630:	d0f0      	beq.n	8007614 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007640:	b480      	push	{r7}
 8007642:	b08b      	sub	sp, #44	@ 0x2c
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	089b      	lsrs	r3, r3, #2
 800765a:	b29b      	uxth	r3, r3
 800765c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007666:	2300      	movs	r3, #0
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	e014      	b.n	8007696 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	601a      	str	r2, [r3, #0]
    pDest++;
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	3301      	adds	r3, #1
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	3301      	adds	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	3301      	adds	r3, #1
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	3301      	adds	r3, #1
 800768e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	3301      	adds	r3, #1
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	429a      	cmp	r2, r3
 800769c:	d3e6      	bcc.n	800766c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800769e:	8bfb      	ldrh	r3, [r7, #30]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01e      	beq.n	80076e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ae:	461a      	mov	r2, r3
 80076b0:	f107 0310 	add.w	r3, r7, #16
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	701a      	strb	r2, [r3, #0]
      i++;
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	3301      	adds	r3, #1
 80076ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	3301      	adds	r3, #1
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076d6:	8bfb      	ldrh	r3, [r7, #30]
 80076d8:	3b01      	subs	r3, #1
 80076da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076dc:	8bfb      	ldrh	r3, [r7, #30]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1ea      	bne.n	80076b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	372c      	adds	r7, #44	@ 0x2c
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4013      	ands	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007708:	68fb      	ldr	r3, [r7, #12]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4013      	ands	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800774a:	68bb      	ldr	r3, [r7, #8]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f003 0301 	and.w	r3, r3, #1
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80077ac:	4313      	orrs	r3, r2
 80077ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d107      	bne.n	80077c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077bc:	461a      	mov	r2, r3
 80077be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80077c2:	6053      	str	r3, [r2, #4]
 80077c4:	e00c      	b.n	80077e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d107      	bne.n	80077dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077d2:	461a      	mov	r2, r3
 80077d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80077d8:	6053      	str	r3, [r2, #4]
 80077da:	e001      	b.n	80077e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	b29b      	uxth	r3, r3
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007810:	b480      	push	{r7}
 8007812:	b089      	sub	sp, #36	@ 0x24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	0c9b      	lsrs	r3, r3, #18
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	4413      	add	r3, r2
 8007846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	0fdb      	lsrs	r3, r3, #31
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	0fdb      	lsrs	r3, r3, #31
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b20      	cmp	r3, #32
 8007874:	d10d      	bne.n	8007892 <USB_HC_Halt+0x82>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <USB_HC_Halt+0x82>
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d002      	beq.n	800788e <USB_HC_Halt+0x7e>
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b03      	cmp	r3, #3
 800788c:	d101      	bne.n	8007892 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	e0d8      	b.n	8007a44 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <USB_HC_Halt+0x8e>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d173      	bne.n	8007986 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078bc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d14a      	bne.n	8007960 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d133      	bne.n	800793e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	440a      	add	r2, r1
 800790c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007910:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007914:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3301      	adds	r3, #1
 800791a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007922:	d82e      	bhi.n	8007982 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800793a:	d0ec      	beq.n	8007916 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800793c:	e081      	b.n	8007a42 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	440a      	add	r2, r1
 8007954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007958:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800795c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800795e:	e070      	b.n	8007a42 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	440a      	add	r2, r1
 8007976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800797a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800797e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007980:	e05f      	b.n	8007a42 <USB_HC_Halt+0x232>
            break;
 8007982:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007984:	e05d      	b.n	8007a42 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	440a      	add	r2, r1
 800799c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d133      	bne.n	8007a1e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079f4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a02:	d81d      	bhi.n	8007a40 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a1a:	d0ec      	beq.n	80079f6 <USB_HC_Halt+0x1e6>
 8007a1c:	e011      	b.n	8007a42 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e000      	b.n	8007a42 <USB_HC_Halt+0x232>
          break;
 8007a40:	bf00      	nop
    }
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3724      	adds	r7, #36	@ 0x24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff fd7a 	bl	800755e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a6a:	2110      	movs	r1, #16
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fd87 	bl	8007580 <USB_FlushTxFifo>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fdb1 	bl	80075e4 <USB_FlushRxFifo>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61bb      	str	r3, [r7, #24]
 8007a90:	e01f      	b.n	8007ad2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ab8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b0f      	cmp	r3, #15
 8007ad6:	d9dc      	bls.n	8007a92 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61bb      	str	r3, [r7, #24]
 8007adc:	e034      	b.n	8007b48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007af4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007afc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b12:	461a      	mov	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b24:	d80c      	bhi.n	8007b40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b3c:	d0ec      	beq.n	8007b18 <USB_StopHost+0xc8>
 8007b3e:	e000      	b.n	8007b42 <USB_StopHost+0xf2>
        break;
 8007b40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	3301      	adds	r3, #1
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b0f      	cmp	r3, #15
 8007b4c:	d9c7      	bls.n	8007ade <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b54:	461a      	mov	r2, r3
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fce9 	bl	800753c <USB_EnableGlobalInt>

  return ret;
 8007b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f804 	bl	8007b98 <USBH_HandleSof>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b0b      	cmp	r3, #11
 8007ba8:	d10a      	bne.n	8007bc0 <USBH_HandleSof+0x28>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007bec:	2200      	movs	r2, #0
 8007bee:	4619      	mov	r1, r3
 8007bf0:	f000 f8ae 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bf4:	bf00      	nop
}
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007c0c:	bf00      	nop
}
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f000 f87e 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 f926 	bl	8008ed0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	791b      	ldrb	r3, [r3, #4]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f830 	bl	8007cf0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	795b      	ldrb	r3, [r3, #5]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f82a 	bl	8007cf0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f000 f84c 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f000 f835 	bl	8007d50 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	2b0f      	cmp	r3, #15
 8007d00:	d80d      	bhi.n	8007d1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	33e0      	adds	r3, #224	@ 0xe0
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	33e0      	adds	r3, #224	@ 0xe0
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d32:	f3ef 8305 	mrs	r3, IPSR
 8007d36:	607b      	str	r3, [r7, #4]
  return(result);
 8007d38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <osMessagePut+0x1e>
    ticks = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007d6e:	f7ff ffdd 	bl	8007d2c <inHandlerMode>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007d78:	f107 0210 	add.w	r2, r7, #16
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	2300      	movs	r3, #0
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f9ae 	bl	80080e4 <xQueueGenericSendFromISR>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d001      	beq.n	8007d92 <osMessagePut+0x42>
      return osErrorOS;
 8007d8e:	23ff      	movs	r3, #255	@ 0xff
 8007d90:	e018      	b.n	8007dc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d014      	beq.n	8007dc2 <osMessagePut+0x72>
 8007d98:	4b0c      	ldr	r3, [pc, #48]	@ (8007dcc <osMessagePut+0x7c>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	e00b      	b.n	8007dc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007daa:	f107 0108 	add.w	r1, r7, #8
 8007dae:	2300      	movs	r3, #0
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f894 	bl	8007ee0 <xQueueGenericSend>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d001      	beq.n	8007dc2 <osMessagePut+0x72>
      return osErrorOS;
 8007dbe:	23ff      	movs	r3, #255	@ 0xff
 8007dc0:	e000      	b.n	8007dc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d103      	bne.n	8007e38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e00c      	b.n	8007e52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e002      	b.n	8007e46 <vListInsert+0x2e>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d2f6      	bcs.n	8007e40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6892      	ldr	r2, [r2, #8]
 8007ea0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6852      	ldr	r2, [r2, #4]
 8007eaa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d103      	bne.n	8007ebe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	1e5a      	subs	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	@ 0x38
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	e7fd      	b.n	8007f10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <xQueueGenericSend+0x42>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <xQueueGenericSend+0x46>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e000      	b.n	8007f28 <xQueueGenericSend+0x48>
 8007f26:	2300      	movs	r3, #0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10b      	bne.n	8007f44 <xQueueGenericSend+0x64>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	e7fd      	b.n	8007f40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d103      	bne.n	8007f52 <xQueueGenericSend+0x72>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <xQueueGenericSend+0x76>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <xQueueGenericSend+0x78>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <xQueueGenericSend+0x94>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	623b      	str	r3, [r7, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f74:	f000 fd40 	bl	80089f8 <xTaskGetSchedulerState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <xQueueGenericSend+0xa4>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <xQueueGenericSend+0xa8>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e000      	b.n	8007f8a <xQueueGenericSend+0xaa>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <xQueueGenericSend+0xc6>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	61fb      	str	r3, [r7, #28]
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fa6:	f000 fe47 	bl	8008c38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d302      	bcc.n	8007fbc <xQueueGenericSend+0xdc>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d129      	bne.n	8008010 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fc2:	f000 f92d 	bl	8008220 <prvCopyDataToQueue>
 8007fc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d010      	beq.n	8007ff2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	3324      	adds	r3, #36	@ 0x24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fc05 	bl	80087e4 <xTaskRemoveFromEventList>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d013      	beq.n	8008008 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80080e0 <xQueueGenericSend+0x200>)
 8007fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	e00a      	b.n	8008008 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ff8:	4b39      	ldr	r3, [pc, #228]	@ (80080e0 <xQueueGenericSend+0x200>)
 8007ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008008:	f000 fe48 	bl	8008c9c <vPortExitCritical>
				return pdPASS;
 800800c:	2301      	movs	r3, #1
 800800e:	e063      	b.n	80080d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008016:	f000 fe41 	bl	8008c9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800801a:	2300      	movs	r3, #0
 800801c:	e05c      	b.n	80080d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800801e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008020:	2b00      	cmp	r3, #0
 8008022:	d106      	bne.n	8008032 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fc3f 	bl	80088ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800802e:	2301      	movs	r3, #1
 8008030:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008032:	f000 fe33 	bl	8008c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008036:	f000 f9c7 	bl	80083c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800803a:	f000 fdfd 	bl	8008c38 <vPortEnterCritical>
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008044:	b25b      	sxtb	r3, r3
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d103      	bne.n	8008054 <xQueueGenericSend+0x174>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800805a:	b25b      	sxtb	r3, r3
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d103      	bne.n	800806a <xQueueGenericSend+0x18a>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800806a:	f000 fe17 	bl	8008c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800806e:	1d3a      	adds	r2, r7, #4
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fc2e 	bl	80088d8 <xTaskCheckForTimeOut>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d124      	bne.n	80080cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008082:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008084:	f000 f988 	bl	8008398 <prvIsQueueFull>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d018      	beq.n	80080c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800808e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008090:	3310      	adds	r3, #16
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fb7e 	bl	8008798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800809c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800809e:	f000 f929 	bl	80082f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080a2:	f000 f99f 	bl	80083e4 <xTaskResumeAll>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f47f af7c 	bne.w	8007fa6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80080ae:	4b0c      	ldr	r3, [pc, #48]	@ (80080e0 <xQueueGenericSend+0x200>)
 80080b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	e772      	b.n	8007fa6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080c2:	f000 f917 	bl	80082f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080c6:	f000 f98d 	bl	80083e4 <xTaskResumeAll>
 80080ca:	e76c      	b.n	8007fa6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080ce:	f000 f911 	bl	80082f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080d2:	f000 f987 	bl	80083e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3738      	adds	r7, #56	@ 0x38
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b090      	sub	sp, #64	@ 0x40
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80080f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	e7fd      	b.n	8008110 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <xQueueGenericSendFromISR+0x3e>
 800811a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <xQueueGenericSendFromISR+0x42>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <xQueueGenericSendFromISR+0x44>
 8008126:	2300      	movs	r3, #0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d103      	bne.n	8008152 <xQueueGenericSendFromISR+0x6e>
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <xQueueGenericSendFromISR+0x72>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <xQueueGenericSendFromISR+0x74>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	623b      	str	r3, [r7, #32]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008174:	f000 fe12 	bl	8008d9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008178:	f3ef 8211 	mrs	r2, BASEPRI
 800817c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	61fa      	str	r2, [r7, #28]
 800818e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008190:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008192:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <xQueueGenericSendFromISR+0xc2>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d12f      	bne.n	8008206 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081bc:	f000 f830 	bl	8008220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d112      	bne.n	80081f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d016      	beq.n	8008200 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	3324      	adds	r3, #36	@ 0x24
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fb04 	bl	80087e4 <xTaskRemoveFromEventList>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00e      	beq.n	8008200 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e007      	b.n	8008200 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081f4:	3301      	adds	r3, #1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	b25a      	sxtb	r2, r3
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008200:	2301      	movs	r3, #1
 8008202:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008204:	e001      	b.n	800820a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008206:	2300      	movs	r3, #0
 8008208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800820a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008214:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008218:	4618      	mov	r0, r3
 800821a:	3740      	adds	r7, #64	@ 0x40
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10d      	bne.n	800825a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d14d      	bne.n	80082e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fbf2 	bl	8008a34 <xTaskPriorityDisinherit>
 8008250:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	e043      	b.n	80082e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d119      	bne.n	8008294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6858      	ldr	r0, [r3, #4]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008268:	461a      	mov	r2, r3
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	f000 fea4 	bl	8008fb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008278:	441a      	add	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	429a      	cmp	r2, r3
 8008288:	d32b      	bcc.n	80082e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	e026      	b.n	80082e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68d8      	ldr	r0, [r3, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829c:	461a      	mov	r2, r3
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	f000 fe8a 	bl	8008fb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ac:	425b      	negs	r3, r3
 80082ae:	441a      	add	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d207      	bcs.n	80082d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c8:	425b      	negs	r3, r3
 80082ca:	441a      	add	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d105      	bne.n	80082e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3b01      	subs	r3, #1
 80082e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80082ea:	697b      	ldr	r3, [r7, #20]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082fc:	f000 fc9c 	bl	8008c38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008308:	e011      	b.n	800832e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830e:	2b00      	cmp	r3, #0
 8008310:	d012      	beq.n	8008338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3324      	adds	r3, #36	@ 0x24
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fa64 	bl	80087e4 <xTaskRemoveFromEventList>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008322:	f000 fb3d 	bl	80089a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	3b01      	subs	r3, #1
 800832a:	b2db      	uxtb	r3, r3
 800832c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800832e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dce9      	bgt.n	800830a <prvUnlockQueue+0x16>
 8008336:	e000      	b.n	800833a <prvUnlockQueue+0x46>
					break;
 8008338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	22ff      	movs	r2, #255	@ 0xff
 800833e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008342:	f000 fcab 	bl	8008c9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008346:	f000 fc77 	bl	8008c38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008352:	e011      	b.n	8008378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d012      	beq.n	8008382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3310      	adds	r3, #16
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fa3f 	bl	80087e4 <xTaskRemoveFromEventList>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800836c:	f000 fb18 	bl	80089a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	3b01      	subs	r3, #1
 8008374:	b2db      	uxtb	r3, r3
 8008376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	dce9      	bgt.n	8008354 <prvUnlockQueue+0x60>
 8008380:	e000      	b.n	8008384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	22ff      	movs	r2, #255	@ 0xff
 8008388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800838c:	f000 fc86 	bl	8008c9c <vPortExitCritical>
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083a0:	f000 fc4a 	bl	8008c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d102      	bne.n	80083b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e001      	b.n	80083ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ba:	f000 fc6f 	bl	8008c9c <vPortExitCritical>

	return xReturn;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <vTaskSuspendAll+0x18>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	4a03      	ldr	r2, [pc, #12]	@ (80083e0 <vTaskSuspendAll+0x18>)
 80083d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083d6:	bf00      	nop
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	2000044c 	.word	0x2000044c

080083e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083f2:	4b42      	ldr	r3, [pc, #264]	@ (80084fc <xTaskResumeAll+0x118>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10b      	bne.n	8008412 <xTaskResumeAll+0x2e>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	603b      	str	r3, [r7, #0]
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008412:	f000 fc11 	bl	8008c38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008416:	4b39      	ldr	r3, [pc, #228]	@ (80084fc <xTaskResumeAll+0x118>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a37      	ldr	r2, [pc, #220]	@ (80084fc <xTaskResumeAll+0x118>)
 800841e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008420:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <xTaskResumeAll+0x118>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d161      	bne.n	80084ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008428:	4b35      	ldr	r3, [pc, #212]	@ (8008500 <xTaskResumeAll+0x11c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05d      	beq.n	80084ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008430:	e02e      	b.n	8008490 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008432:	4b34      	ldr	r3, [pc, #208]	@ (8008504 <xTaskResumeAll+0x120>)
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3318      	adds	r3, #24
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff fd23 	bl	8007e8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fd1e 	bl	8007e8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008452:	2201      	movs	r2, #1
 8008454:	409a      	lsls	r2, r3
 8008456:	4b2c      	ldr	r3, [pc, #176]	@ (8008508 <xTaskResumeAll+0x124>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4313      	orrs	r3, r2
 800845c:	4a2a      	ldr	r2, [pc, #168]	@ (8008508 <xTaskResumeAll+0x124>)
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4a27      	ldr	r2, [pc, #156]	@ (800850c <xTaskResumeAll+0x128>)
 800846e:	441a      	add	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3304      	adds	r3, #4
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7ff fcaa 	bl	8007dd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008480:	4b23      	ldr	r3, [pc, #140]	@ (8008510 <xTaskResumeAll+0x12c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008486:	429a      	cmp	r2, r3
 8008488:	d302      	bcc.n	8008490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800848a:	4b22      	ldr	r3, [pc, #136]	@ (8008514 <xTaskResumeAll+0x130>)
 800848c:	2201      	movs	r2, #1
 800848e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008490:	4b1c      	ldr	r3, [pc, #112]	@ (8008504 <xTaskResumeAll+0x120>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1cc      	bne.n	8008432 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800849e:	f000 fa8b 	bl	80089b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008518 <xTaskResumeAll+0x134>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d010      	beq.n	80084d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084ae:	f000 f837 	bl	8008520 <xTaskIncrementTick>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084b8:	4b16      	ldr	r3, [pc, #88]	@ (8008514 <xTaskResumeAll+0x130>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f1      	bne.n	80084ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084ca:	4b13      	ldr	r3, [pc, #76]	@ (8008518 <xTaskResumeAll+0x134>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084d0:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <xTaskResumeAll+0x130>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084dc:	4b0f      	ldr	r3, [pc, #60]	@ (800851c <xTaskResumeAll+0x138>)
 80084de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ec:	f000 fbd6 	bl	8008c9c <vPortExitCritical>

	return xAlreadyYielded;
 80084f0:	68bb      	ldr	r3, [r7, #8]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000044c 	.word	0x2000044c
 8008500:	2000042c 	.word	0x2000042c
 8008504:	20000404 	.word	0x20000404
 8008508:	20000434 	.word	0x20000434
 800850c:	20000370 	.word	0x20000370
 8008510:	2000036c 	.word	0x2000036c
 8008514:	20000440 	.word	0x20000440
 8008518:	2000043c 	.word	0x2000043c
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852a:	4b4f      	ldr	r3, [pc, #316]	@ (8008668 <xTaskIncrementTick+0x148>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f040 808f 	bne.w	8008652 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008534:	4b4d      	ldr	r3, [pc, #308]	@ (800866c <xTaskIncrementTick+0x14c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800853c:	4a4b      	ldr	r2, [pc, #300]	@ (800866c <xTaskIncrementTick+0x14c>)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d121      	bne.n	800858c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008548:	4b49      	ldr	r3, [pc, #292]	@ (8008670 <xTaskIncrementTick+0x150>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	603b      	str	r3, [r7, #0]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xTaskIncrementTick+0x46>
 800856a:	4b41      	ldr	r3, [pc, #260]	@ (8008670 <xTaskIncrementTick+0x150>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	4b40      	ldr	r3, [pc, #256]	@ (8008674 <xTaskIncrementTick+0x154>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a3e      	ldr	r2, [pc, #248]	@ (8008670 <xTaskIncrementTick+0x150>)
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4a3e      	ldr	r2, [pc, #248]	@ (8008674 <xTaskIncrementTick+0x154>)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	4b3e      	ldr	r3, [pc, #248]	@ (8008678 <xTaskIncrementTick+0x158>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a3c      	ldr	r2, [pc, #240]	@ (8008678 <xTaskIncrementTick+0x158>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	f000 fa16 	bl	80089b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800858c:	4b3b      	ldr	r3, [pc, #236]	@ (800867c <xTaskIncrementTick+0x15c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	429a      	cmp	r2, r3
 8008594:	d348      	bcc.n	8008628 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008596:	4b36      	ldr	r3, [pc, #216]	@ (8008670 <xTaskIncrementTick+0x150>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a0:	4b36      	ldr	r3, [pc, #216]	@ (800867c <xTaskIncrementTick+0x15c>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
					break;
 80085a8:	e03e      	b.n	8008628 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085aa:	4b31      	ldr	r3, [pc, #196]	@ (8008670 <xTaskIncrementTick+0x150>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d203      	bcs.n	80085ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085c2:	4a2e      	ldr	r2, [pc, #184]	@ (800867c <xTaskIncrementTick+0x15c>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085c8:	e02e      	b.n	8008628 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fc5b 	bl	8007e8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3318      	adds	r3, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fc52 	bl	8007e8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ea:	2201      	movs	r2, #1
 80085ec:	409a      	lsls	r2, r3
 80085ee:	4b24      	ldr	r3, [pc, #144]	@ (8008680 <xTaskIncrementTick+0x160>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	4a22      	ldr	r2, [pc, #136]	@ (8008680 <xTaskIncrementTick+0x160>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4a1f      	ldr	r2, [pc, #124]	@ (8008684 <xTaskIncrementTick+0x164>)
 8008606:	441a      	add	r2, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7ff fbde 	bl	8007dd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <xTaskIncrementTick+0x168>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	429a      	cmp	r2, r3
 8008620:	d3b9      	bcc.n	8008596 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008622:	2301      	movs	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008626:	e7b6      	b.n	8008596 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008628:	4b17      	ldr	r3, [pc, #92]	@ (8008688 <xTaskIncrementTick+0x168>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862e:	4915      	ldr	r1, [pc, #84]	@ (8008684 <xTaskIncrementTick+0x164>)
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	440b      	add	r3, r1
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d901      	bls.n	8008644 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008644:	4b11      	ldr	r3, [pc, #68]	@ (800868c <xTaskIncrementTick+0x16c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800864c:	2301      	movs	r3, #1
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	e004      	b.n	800865c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008652:	4b0f      	ldr	r3, [pc, #60]	@ (8008690 <xTaskIncrementTick+0x170>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	4a0d      	ldr	r2, [pc, #52]	@ (8008690 <xTaskIncrementTick+0x170>)
 800865a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800865c:	697b      	ldr	r3, [r7, #20]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2000044c 	.word	0x2000044c
 800866c:	20000430 	.word	0x20000430
 8008670:	200003fc 	.word	0x200003fc
 8008674:	20000400 	.word	0x20000400
 8008678:	20000444 	.word	0x20000444
 800867c:	20000448 	.word	0x20000448
 8008680:	20000434 	.word	0x20000434
 8008684:	20000370 	.word	0x20000370
 8008688:	2000036c 	.word	0x2000036c
 800868c:	20000440 	.word	0x20000440
 8008690:	2000043c 	.word	0x2000043c

08008694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800869a:	4b3a      	ldr	r3, [pc, #232]	@ (8008784 <vTaskSwitchContext+0xf0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086a2:	4b39      	ldr	r3, [pc, #228]	@ (8008788 <vTaskSwitchContext+0xf4>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086a8:	e067      	b.n	800877a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80086aa:	4b37      	ldr	r3, [pc, #220]	@ (8008788 <vTaskSwitchContext+0xf4>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80086b0:	4b36      	ldr	r3, [pc, #216]	@ (800878c <vTaskSwitchContext+0xf8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80086bc:	61bb      	str	r3, [r7, #24]
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d111      	bne.n	80086ec <vTaskSwitchContext+0x58>
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	3304      	adds	r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d10b      	bne.n	80086ec <vTaskSwitchContext+0x58>
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	3308      	adds	r3, #8
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d105      	bne.n	80086ec <vTaskSwitchContext+0x58>
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	330c      	adds	r3, #12
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d008      	beq.n	80086fe <vTaskSwitchContext+0x6a>
 80086ec:	4b27      	ldr	r3, [pc, #156]	@ (800878c <vTaskSwitchContext+0xf8>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	4b26      	ldr	r3, [pc, #152]	@ (800878c <vTaskSwitchContext+0xf8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3334      	adds	r3, #52	@ 0x34
 80086f6:	4619      	mov	r1, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	f7f7 fef1 	bl	80004e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fe:	4b24      	ldr	r3, [pc, #144]	@ (8008790 <vTaskSwitchContext+0xfc>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	fab3 f383 	clz	r3, r3
 800870a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	f1c3 031f 	rsb	r3, r3, #31
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	491f      	ldr	r1, [pc, #124]	@ (8008794 <vTaskSwitchContext+0x100>)
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10b      	bne.n	8008740 <vTaskSwitchContext+0xac>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	607b      	str	r3, [r7, #4]
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	e7fd      	b.n	800873c <vTaskSwitchContext+0xa8>
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a12      	ldr	r2, [pc, #72]	@ (8008794 <vTaskSwitchContext+0x100>)
 800874c:	4413      	add	r3, r2
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3308      	adds	r3, #8
 8008762:	429a      	cmp	r2, r3
 8008764:	d104      	bne.n	8008770 <vTaskSwitchContext+0xdc>
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	605a      	str	r2, [r3, #4]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	4a05      	ldr	r2, [pc, #20]	@ (800878c <vTaskSwitchContext+0xf8>)
 8008778:	6013      	str	r3, [r2, #0]
}
 800877a:	bf00      	nop
 800877c:	3720      	adds	r7, #32
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	2000044c 	.word	0x2000044c
 8008788:	20000440 	.word	0x20000440
 800878c:	2000036c 	.word	0x2000036c
 8008790:	20000434 	.word	0x20000434
 8008794:	20000370 	.word	0x20000370

08008798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60fb      	str	r3, [r7, #12]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087c0:	4b07      	ldr	r3, [pc, #28]	@ (80087e0 <vTaskPlaceOnEventList+0x48>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3318      	adds	r3, #24
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff fb25 	bl	8007e18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087ce:	2101      	movs	r1, #1
 80087d0:	6838      	ldr	r0, [r7, #0]
 80087d2:	f000 f9b7 	bl	8008b44 <prvAddCurrentTaskToDelayedList>
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	2000036c 	.word	0x2000036c

080087e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10b      	bne.n	8008812 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60fb      	str	r3, [r7, #12]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	3318      	adds	r3, #24
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fb37 	bl	8007e8a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800881c:	4b1d      	ldr	r3, [pc, #116]	@ (8008894 <xTaskRemoveFromEventList+0xb0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d11c      	bne.n	800885e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	3304      	adds	r3, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff fb2e 	bl	8007e8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008832:	2201      	movs	r2, #1
 8008834:	409a      	lsls	r2, r3
 8008836:	4b18      	ldr	r3, [pc, #96]	@ (8008898 <xTaskRemoveFromEventList+0xb4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4313      	orrs	r3, r2
 800883c:	4a16      	ldr	r2, [pc, #88]	@ (8008898 <xTaskRemoveFromEventList+0xb4>)
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a13      	ldr	r2, [pc, #76]	@ (800889c <xTaskRemoveFromEventList+0xb8>)
 800884e:	441a      	add	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f7ff faba 	bl	8007dd0 <vListInsertEnd>
 800885c:	e005      	b.n	800886a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3318      	adds	r3, #24
 8008862:	4619      	mov	r1, r3
 8008864:	480e      	ldr	r0, [pc, #56]	@ (80088a0 <xTaskRemoveFromEventList+0xbc>)
 8008866:	f7ff fab3 	bl	8007dd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <xTaskRemoveFromEventList+0xc0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008874:	429a      	cmp	r2, r3
 8008876:	d905      	bls.n	8008884 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008878:	2301      	movs	r3, #1
 800887a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800887c:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <xTaskRemoveFromEventList+0xc4>)
 800887e:	2201      	movs	r2, #1
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	e001      	b.n	8008888 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008888:	697b      	ldr	r3, [r7, #20]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	2000044c 	.word	0x2000044c
 8008898:	20000434 	.word	0x20000434
 800889c:	20000370 	.word	0x20000370
 80088a0:	20000404 	.word	0x20000404
 80088a4:	2000036c 	.word	0x2000036c
 80088a8:	20000440 	.word	0x20000440

080088ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <vTaskInternalSetTimeOutState+0x24>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088bc:	4b05      	ldr	r3, [pc, #20]	@ (80088d4 <vTaskInternalSetTimeOutState+0x28>)
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	605a      	str	r2, [r3, #4]
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	20000444 	.word	0x20000444
 80088d4:	20000430 	.word	0x20000430

080088d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	613b      	str	r3, [r7, #16]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10b      	bne.n	800891e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	60fb      	str	r3, [r7, #12]
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	e7fd      	b.n	800891a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800891e:	f000 f98b 	bl	8008c38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008922:	4b1d      	ldr	r3, [pc, #116]	@ (8008998 <xTaskCheckForTimeOut+0xc0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d102      	bne.n	8008942 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e023      	b.n	800898a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4b15      	ldr	r3, [pc, #84]	@ (800899c <xTaskCheckForTimeOut+0xc4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d007      	beq.n	800895e <xTaskCheckForTimeOut+0x86>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e015      	b.n	800898a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d20b      	bcs.n	8008980 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ff99 	bl	80088ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e004      	b.n	800898a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008986:	2301      	movs	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800898a:	f000 f987 	bl	8008c9c <vPortExitCritical>

	return xReturn;
 800898e:	69fb      	ldr	r3, [r7, #28]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000430 	.word	0x20000430
 800899c:	20000444 	.word	0x20000444

080089a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089a4:	4b03      	ldr	r3, [pc, #12]	@ (80089b4 <vTaskMissedYield+0x14>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
}
 80089aa:	bf00      	nop
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	20000440 	.word	0x20000440

080089b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089be:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	@ (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295
 80089ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089d0:	e008      	b.n	80089e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a04      	ldr	r2, [pc, #16]	@ (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	200003fc 	.word	0x200003fc
 80089f4:	20000448 	.word	0x20000448

080089f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	@ (8008a2c <xTaskGetSchedulerState+0x34>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a06:	2301      	movs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	e008      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0c:	4b08      	ldr	r3, [pc, #32]	@ (8008a30 <xTaskGetSchedulerState+0x38>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a14:	2302      	movs	r3, #2
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	e001      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a1e:	687b      	ldr	r3, [r7, #4]
	}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20000438 	.word	0x20000438
 8008a30:	2000044c 	.word	0x2000044c

08008a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d070      	beq.n	8008b2c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8008b38 <xTaskPriorityDisinherit+0x104>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d00b      	beq.n	8008a6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	60fb      	str	r3, [r7, #12]
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10b      	bne.n	8008a8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60bb      	str	r3, [r7, #8]
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	e7fd      	b.n	8008a88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a90:	1e5a      	subs	r2, r3, #1
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d044      	beq.n	8008b2c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d140      	bne.n	8008b2c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff f9eb 	bl	8007e8a <uxListRemove>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d115      	bne.n	8008ae6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abe:	491f      	ldr	r1, [pc, #124]	@ (8008b3c <xTaskPriorityDisinherit+0x108>)
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <xTaskPriorityDisinherit+0xb2>
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43da      	mvns	r2, r3
 8008adc:	4b18      	ldr	r3, [pc, #96]	@ (8008b40 <xTaskPriorityDisinherit+0x10c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	4a17      	ldr	r2, [pc, #92]	@ (8008b40 <xTaskPriorityDisinherit+0x10c>)
 8008ae4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	f1c3 0207 	rsb	r2, r3, #7
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	2201      	movs	r2, #1
 8008b00:	409a      	lsls	r2, r3
 8008b02:	4b0f      	ldr	r3, [pc, #60]	@ (8008b40 <xTaskPriorityDisinherit+0x10c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	4a0d      	ldr	r2, [pc, #52]	@ (8008b40 <xTaskPriorityDisinherit+0x10c>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <xTaskPriorityDisinherit+0x108>)
 8008b1a:	441a      	add	r2, r3
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7ff f954 	bl	8007dd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b2c:	697b      	ldr	r3, [r7, #20]
	}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000036c 	.word	0x2000036c
 8008b3c:	20000370 	.word	0x20000370
 8008b40:	20000434 	.word	0x20000434

08008b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b4e:	4b29      	ldr	r3, [pc, #164]	@ (8008bf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b54:	4b28      	ldr	r3, [pc, #160]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff f995 	bl	8007e8a <uxListRemove>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b66:	4b24      	ldr	r3, [pc, #144]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	43da      	mvns	r2, r3
 8008b74:	4b21      	ldr	r3, [pc, #132]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	4a20      	ldr	r2, [pc, #128]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d10a      	bne.n	8008b9c <prvAddCurrentTaskToDelayedList+0x58>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4619      	mov	r1, r3
 8008b94:	481a      	ldr	r0, [pc, #104]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b96:	f7ff f91b 	bl	8007dd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b9a:	e026      	b.n	8008bea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ba4:	4b14      	ldr	r3, [pc, #80]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d209      	bcs.n	8008bc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb4:	4b13      	ldr	r3, [pc, #76]	@ (8008c04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7ff f929 	bl	8007e18 <vListInsert>
}
 8008bc6:	e010      	b.n	8008bea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f7ff f91f 	bl	8007e18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bda:	4b0c      	ldr	r3, [pc, #48]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d202      	bcs.n	8008bea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008be4:	4a09      	ldr	r2, [pc, #36]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6013      	str	r3, [r2, #0]
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000430 	.word	0x20000430
 8008bf8:	2000036c 	.word	0x2000036c
 8008bfc:	20000434 	.word	0x20000434
 8008c00:	20000418 	.word	0x20000418
 8008c04:	20000400 	.word	0x20000400
 8008c08:	200003fc 	.word	0x200003fc
 8008c0c:	20000448 	.word	0x20000448

08008c10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <pxCurrentTCBConst2>)
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f380 8809 	msr	PSP, r0
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	4770      	bx	lr
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst2>:
 8008c30:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	607b      	str	r3, [r7, #4]
}
 8008c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c52:	4b10      	ldr	r3, [pc, #64]	@ (8008c94 <vPortEnterCritical+0x5c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3301      	adds	r3, #1
 8008c58:	4a0e      	ldr	r2, [pc, #56]	@ (8008c94 <vPortEnterCritical+0x5c>)
 8008c5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c94 <vPortEnterCritical+0x5c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d110      	bne.n	8008c86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c64:	4b0c      	ldr	r3, [pc, #48]	@ (8008c98 <vPortEnterCritical+0x60>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	603b      	str	r3, [r7, #0]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <vPortEnterCritical+0x4a>
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000000c 	.word	0x2000000c
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ca2:	4b12      	ldr	r3, [pc, #72]	@ (8008cec <vPortExitCritical+0x50>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10b      	bne.n	8008cc2 <vPortExitCritical+0x26>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	607b      	str	r3, [r7, #4]
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cec <vPortExitCritical+0x50>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	4a08      	ldr	r2, [pc, #32]	@ (8008cec <vPortExitCritical+0x50>)
 8008cca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ccc:	4b07      	ldr	r3, [pc, #28]	@ (8008cec <vPortExitCritical+0x50>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <vPortExitCritical+0x44>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f383 8811 	msr	BASEPRI, r3
}
 8008cde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	2000000c 	.word	0x2000000c

08008cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cf0:	f3ef 8009 	mrs	r0, PSP
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4b15      	ldr	r3, [pc, #84]	@ (8008d50 <pxCurrentTCBConst>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	f01e 0f10 	tst.w	lr, #16
 8008d00:	bf08      	it	eq
 8008d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0a:	6010      	str	r0, [r2, #0]
 8008d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d14:	f380 8811 	msr	BASEPRI, r0
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f7ff fcb8 	bl	8008694 <vTaskSwitchContext>
 8008d24:	f04f 0000 	mov.w	r0, #0
 8008d28:	f380 8811 	msr	BASEPRI, r0
 8008d2c:	bc09      	pop	{r0, r3}
 8008d2e:	6819      	ldr	r1, [r3, #0]
 8008d30:	6808      	ldr	r0, [r1, #0]
 8008d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d36:	f01e 0f10 	tst.w	lr, #16
 8008d3a:	bf08      	it	eq
 8008d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d40:	f380 8809 	msr	PSP, r0
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	f3af 8000 	nop.w

08008d50 <pxCurrentTCBConst>:
 8008d50:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop

08008d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	607b      	str	r3, [r7, #4]
}
 8008d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d72:	f7ff fbd5 	bl	8008520 <xTaskIncrementTick>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d7c:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <SysTick_Handler+0x40>)
 8008d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	2300      	movs	r3, #0
 8008d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f383 8811 	msr	BASEPRI, r3
}
 8008d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008da2:	f3ef 8305 	mrs	r3, IPSR
 8008da6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b0f      	cmp	r3, #15
 8008dac:	d915      	bls.n	8008dda <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dae:	4a18      	ldr	r2, [pc, #96]	@ (8008e10 <vPortValidateInterruptPriority+0x74>)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008db8:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <vPortValidateInterruptPriority+0x78>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	7afa      	ldrb	r2, [r7, #11]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d20b      	bcs.n	8008dda <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	607b      	str	r3, [r7, #4]
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	e7fd      	b.n	8008dd6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dda:	4b0f      	ldr	r3, [pc, #60]	@ (8008e18 <vPortValidateInterruptPriority+0x7c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008de2:	4b0e      	ldr	r3, [pc, #56]	@ (8008e1c <vPortValidateInterruptPriority+0x80>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d90b      	bls.n	8008e02 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	603b      	str	r3, [r7, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <vPortValidateInterruptPriority+0x62>
	}
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e3f0 	.word	0xe000e3f0
 8008e14:	20000450 	.word	0x20000450
 8008e18:	e000ed0c 	.word	0xe000ed0c
 8008e1c:	20000454 	.word	0x20000454

08008e20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fea0 	bl	8007b74 <USBH_LL_IncTimer>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe fee4 	bl	8007c18 <USBH_LL_Connect>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fef9 	bl	8007c5e <USBH_LL_Disconnect>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
 8008e80:	4613      	mov	r3, r2
 8008e82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe ff19 	bl	8007cc2 <USBH_LL_NotifyURBChange>
#endif
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fe8e 	bl	8007bc8 <USBH_LL_PortEnabled>
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fe9a 	bl	8007bfc <USBH_LL_PortDisabled>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f9 fd45 	bl	8002976 <HAL_HCD_Stop>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f808 	bl	8008f08 <USBH_Get_USB_Status>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d817      	bhi.n	8008f4c <USBH_Get_USB_Status+0x44>
 8008f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <USBH_Get_USB_Status+0x1c>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f35 	.word	0x08008f35
 8008f28:	08008f3b 	.word	0x08008f3b
 8008f2c:	08008f41 	.word	0x08008f41
 8008f30:	08008f47 	.word	0x08008f47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
    break;
 8008f38:	e00b      	b.n	8008f52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3e:	e008      	b.n	8008f52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]
    break;
 8008f44:	e005      	b.n	8008f52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f46:	2302      	movs	r3, #2
 8008f48:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4a:	e002      	b.n	8008f52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f50:	bf00      	nop
  }
  return usb_status;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <memset>:
 8008f60:	4402      	add	r2, r0
 8008f62:	4603      	mov	r3, r0
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d100      	bne.n	8008f6a <memset+0xa>
 8008f68:	4770      	bx	lr
 8008f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6e:	e7f9      	b.n	8008f64 <memset+0x4>

08008f70 <__libc_init_array>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	4d0d      	ldr	r5, [pc, #52]	@ (8008fa8 <__libc_init_array+0x38>)
 8008f74:	4c0d      	ldr	r4, [pc, #52]	@ (8008fac <__libc_init_array+0x3c>)
 8008f76:	1b64      	subs	r4, r4, r5
 8008f78:	10a4      	asrs	r4, r4, #2
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	42a6      	cmp	r6, r4
 8008f7e:	d109      	bne.n	8008f94 <__libc_init_array+0x24>
 8008f80:	4d0b      	ldr	r5, [pc, #44]	@ (8008fb0 <__libc_init_array+0x40>)
 8008f82:	4c0c      	ldr	r4, [pc, #48]	@ (8008fb4 <__libc_init_array+0x44>)
 8008f84:	f000 f826 	bl	8008fd4 <_init>
 8008f88:	1b64      	subs	r4, r4, r5
 8008f8a:	10a4      	asrs	r4, r4, #2
 8008f8c:	2600      	movs	r6, #0
 8008f8e:	42a6      	cmp	r6, r4
 8008f90:	d105      	bne.n	8008f9e <__libc_init_array+0x2e>
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f98:	4798      	blx	r3
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7ee      	b.n	8008f7c <__libc_init_array+0xc>
 8008f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa2:	4798      	blx	r3
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	e7f2      	b.n	8008f8e <__libc_init_array+0x1e>
 8008fa8:	08009020 	.word	0x08009020
 8008fac:	08009020 	.word	0x08009020
 8008fb0:	08009020 	.word	0x08009020
 8008fb4:	08009024 	.word	0x08009024

08008fb8 <memcpy>:
 8008fb8:	440a      	add	r2, r1
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fc0:	d100      	bne.n	8008fc4 <memcpy+0xc>
 8008fc2:	4770      	bx	lr
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fce:	4291      	cmp	r1, r2
 8008fd0:	d1f9      	bne.n	8008fc6 <memcpy+0xe>
 8008fd2:	bd10      	pop	{r4, pc}

08008fd4 <_init>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr

08008fe0 <_fini>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	bf00      	nop
 8008fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe6:	bc08      	pop	{r3}
 8008fe8:	469e      	mov	lr, r3
 8008fea:	4770      	bx	lr
