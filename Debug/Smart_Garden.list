
Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800af5c  0800af5c  0000bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0d4  0800b0d4  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0d4  0800b0d4  0000c0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0dc  0800b0dc  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0dc  0800b0dc  0000c0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0e0  0800b0e0  0000c0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b0e4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d06c  2**0
                  CONTENTS
 10 .bss          00000978  2000006c  2000006c  0000d06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009e4  200009e4  0000d06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027e9a  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005685  00000000  00000000  00034f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a8  00000000  00000000  0003a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae5  00000000  00000000  0003c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8d2  00000000  00000000  0003e34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ae3a  00000000  00000000  0006ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010288b  00000000  00000000  00095a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001982e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009bb4  00000000  00000000  00198328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001a1edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af44 	.word	0x0800af44

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800af44 	.word	0x0800af44

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <MX_I2C3_Init+0x78>)
 800059e:	4a1d      	ldr	r2, [pc, #116]	@ (8000614 <MX_I2C3_Init+0x7c>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 30000; // changed from 100000
 80005a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005a4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005a8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005d6:	480e      	ldr	r0, [pc, #56]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005d8:	f004 f804 	bl	80045e4 <HAL_I2C_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80005e2:	f000 fd47 	bl	8001074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005ea:	f005 f81f 	bl	800562c <HAL_I2CEx_ConfigAnalogFilter>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C3_Init+0x60>
  {
    Error_Handler();
 80005f4:	f000 fd3e 	bl	8001074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005fc:	f005 f852 	bl	80056a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C3_Init+0x72>
  {
    Error_Handler();
 8000606:	f000 fd35 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000088 	.word	0x20000088
 8000614:	40005c00 	.word	0x40005c00

08000618 <read_temperature>:
  * @param None
  * @retval None
  */

void read_temperature()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af04      	add	r7, sp, #16
	uint8_t busy_data;

	HAL_StatusTypeDef status;

	// Sensor reads once for previous value then updates with recent value. Get old value first to update register
	status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, TEMPERATURE_REGISTER, I2C_MEMADD_SIZE_8BIT, temperature_data, TEMPERATURE_READ_SIZE, HAL_MAX_DELAY);
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2302      	movs	r3, #2
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	2205      	movs	r2, #5
 8000632:	2140      	movs	r1, #64	@ 0x40
 8000634:	4825      	ldr	r0, [pc, #148]	@ (80006cc <read_temperature+0xb4>)
 8000636:	f004 fa13 	bl	8004a60 <HAL_I2C_Mem_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]


     // Wait for measurement to complete
    busy_data = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	71fb      	strb	r3, [r7, #7]
    while (busy_data == 1)
 8000642:	e00f      	b.n	8000664 <read_temperature+0x4c>
    {
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1 , BUSY_REGISTER, I2C_MEMADD_SIZE_8BIT, &busy_data, 1, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	2301      	movs	r3, #1
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	2209      	movs	r2, #9
 8000656:	2140      	movs	r1, #64	@ 0x40
 8000658:	481c      	ldr	r0, [pc, #112]	@ (80006cc <read_temperature+0xb4>)
 800065a:	f004 fa01 	bl	8004a60 <HAL_I2C_Mem_Read>
        HAL_Delay(10); // Short delay to avoid flooding the I2C bus -- add a timeout here too probably
 800065e:	200a      	movs	r0, #10
 8000660:	f001 faee 	bl	8001c40 <HAL_Delay>
    while (busy_data == 1)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d0ec      	beq.n	8000644 <read_temperature+0x2c>
    }

	status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, TEMPERATURE_REGISTER, I2C_MEMADD_SIZE_8BIT, temperature_data, TEMPERATURE_READ_SIZE, HAL_MAX_DELAY);
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2302      	movs	r3, #2
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	2205      	movs	r2, #5
 800067e:	2140      	movs	r1, #64	@ 0x40
 8000680:	4812      	ldr	r0, [pc, #72]	@ (80006cc <read_temperature+0xb4>)
 8000682:	f004 f9ed 	bl	8004a60 <HAL_I2C_Mem_Read>
 8000686:	4603      	mov	r3, r0
 8000688:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10d      	bne.n	80006ac <read_temperature+0x94>
	{
		uint16_t combined_temperature = temperature_data[0] << 8 | temperature_data[1];
 8000690:	7a3b      	ldrb	r3, [r7, #8]
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b21a      	sxth	r2, r3
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	b21b      	sxth	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b21b      	sxth	r3, r3
 800069e:	81bb      	strh	r3, [r7, #12]
		printf("Temperature read successfully from sensor: %d \r\n", combined_temperature);
 80006a0:	89bb      	ldrh	r3, [r7, #12]
 80006a2:	4619      	mov	r1, r3
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <read_temperature+0xb8>)
 80006a6:	f009 ff2b 	bl	800a500 <iprintf>
 80006aa:	e004      	b.n	80006b6 <read_temperature+0x9e>
	}
	else
	{
		printf("Temperature failed with status: %d \r\n", status);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <read_temperature+0xbc>)
 80006b2:	f009 ff25 	bl	800a500 <iprintf>
	}
	fflush(stdout); // Ensure buffer is flushed
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <read_temperature+0xc0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4618      	mov	r0, r3
 80006be:	f009 fe49 	bl	800a354 <fflush>

}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000088 	.word	0x20000088
 80006d0:	0800af5c 	.word	0x0800af5c
 80006d4:	0800af90 	.word	0x0800af90
 80006d8:	2000001c 	.word	0x2000001c

080006dc <sensor_diagnostic>:

void sensor_diagnostic()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af04      	add	r7, sp, #16
    uint8_t data[2];
    HAL_StatusTypeDef status;

    // Read sensor version
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, 0x07, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	463b      	mov	r3, r7
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2207      	movs	r2, #7
 80006f4:	2140      	movs	r1, #64	@ 0x40
 80006f6:	483a      	ldr	r0, [pc, #232]	@ (80007e0 <sensor_diagnostic+0x104>)
 80006f8:	f004 f9b2 	bl	8004a60 <HAL_I2C_Mem_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]
    printf("Sensor version: 0x%02X, Status: %d\r\n", data[0], status);
 8000700:	783b      	ldrb	r3, [r7, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	461a      	mov	r2, r3
 8000708:	4836      	ldr	r0, [pc, #216]	@ (80007e4 <sensor_diagnostic+0x108>)
 800070a:	f009 fef9 	bl	800a500 <iprintf>

    // Reset sensor
    status = HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS << 1, 0x06, I2C_MEMADD_SIZE_8BIT, NULL, 0, HAL_MAX_DELAY);
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2300      	movs	r3, #0
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	2300      	movs	r3, #0
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	2206      	movs	r2, #6
 8000720:	2140      	movs	r1, #64	@ 0x40
 8000722:	482f      	ldr	r0, [pc, #188]	@ (80007e0 <sensor_diagnostic+0x104>)
 8000724:	f004 f8a2 	bl	800486c <HAL_I2C_Mem_Write>
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
    printf("Reset status: %d\r\n", status);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4619      	mov	r1, r3
 8000730:	482d      	ldr	r0, [pc, #180]	@ (80007e8 <sensor_diagnostic+0x10c>)
 8000732:	f009 fee5 	bl	800a500 <iprintf>
    HAL_Delay(100); // Wait after reset
 8000736:	2064      	movs	r0, #100	@ 0x64
 8000738:	f001 fa82 	bl	8001c40 <HAL_Delay>

    // Trigger temperature measurement
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, 0x05, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2302      	movs	r3, #2
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	463b      	mov	r3, r7
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2205      	movs	r2, #5
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	4823      	ldr	r0, [pc, #140]	@ (80007e0 <sensor_diagnostic+0x104>)
 8000752:	f004 f985 	bl	8004a60 <HAL_I2C_Mem_Read>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    printf("Temperature trigger status: %d\r\n", status);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4619      	mov	r1, r3
 800075e:	4823      	ldr	r0, [pc, #140]	@ (80007ec <sensor_diagnostic+0x110>)
 8000760:	f009 fece 	bl	800a500 <iprintf>

    // Immediately check busy status
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, 0x09, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2301      	movs	r3, #1
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	463b      	mov	r3, r7
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2301      	movs	r3, #1
 8000774:	2209      	movs	r2, #9
 8000776:	2140      	movs	r1, #64	@ 0x40
 8000778:	4819      	ldr	r0, [pc, #100]	@ (80007e0 <sensor_diagnostic+0x104>)
 800077a:	f004 f971 	bl	8004a60 <HAL_I2C_Mem_Read>
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    printf("Immediate busy status: %d, Value: %d\r\n", status, data[0]);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	783a      	ldrb	r2, [r7, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4819      	ldr	r0, [pc, #100]	@ (80007f0 <sensor_diagnostic+0x114>)
 800078a:	f009 feb9 	bl	800a500 <iprintf>


    // Read light
    status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, 0x04, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	2302      	movs	r3, #2
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	463b      	mov	r3, r7
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	2204      	movs	r2, #4
 80007a0:	2140      	movs	r1, #64	@ 0x40
 80007a2:	480f      	ldr	r0, [pc, #60]	@ (80007e0 <sensor_diagnostic+0x104>)
 80007a4:	f004 f95c 	bl	8004a60 <HAL_I2C_Mem_Read>
 80007a8:	4603      	mov	r3, r0
 80007aa:	71fb      	strb	r3, [r7, #7]
    if (status == HAL_OK) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d10d      	bne.n	80007ce <sensor_diagnostic+0xf2>
        uint16_t light = (data[0] << 8) | data[1];
 80007b2:	783b      	ldrb	r3, [r7, #0]
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	787b      	ldrb	r3, [r7, #1]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	80bb      	strh	r3, [r7, #4]
        printf("Light raw: %d \r\n", light);
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	4619      	mov	r1, r3
 80007c6:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <sensor_diagnostic+0x118>)
 80007c8:	f009 fe9a 	bl	800a500 <iprintf>
    } else {
        printf("Light read failed, status: %d\r\n", status);
    }
}
 80007cc:	e004      	b.n	80007d8 <sensor_diagnostic+0xfc>
        printf("Light read failed, status: %d\r\n", status);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <sensor_diagnostic+0x11c>)
 80007d4:	f009 fe94 	bl	800a500 <iprintf>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000088 	.word	0x20000088
 80007e4:	0800afb8 	.word	0x0800afb8
 80007e8:	0800afe0 	.word	0x0800afe0
 80007ec:	0800aff4 	.word	0x0800aff4
 80007f0:	0800b018 	.word	0x0800b018
 80007f4:	0800b040 	.word	0x0800b040
 80007f8:	0800b054 	.word	0x0800b054

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f001 f9db 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f84d 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 fb11 	bl	8000e30 <MX_GPIO_Init>
  MX_ADC1_Init();
 800080e:	f000 f8b3 	bl	8000978 <MX_ADC1_Init>
  MX_CRC_Init();
 8000812:	f000 f903 	bl	8000a1c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000816:	f000 f915 	bl	8000a44 <MX_DMA2D_Init>
  MX_FMC_Init();
 800081a:	f000 fab9 	bl	8000d90 <MX_FMC_Init>
  MX_I2C3_Init();
 800081e:	f7ff febb 	bl	8000598 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000822:	f000 f941 	bl	8000aa8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000826:	f000 f9bf 	bl	8000ba8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800082a:	f000 f9f3 	bl	8000c14 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800082e:	f000 fa85 	bl	8000d3c <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8000832:	f000 fa3f 	bl	8000cb4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 8000836:	f000 fc23 	bl	8001080 <Motor_Init>
  Motor_SetSpeed(100);
 800083a:	2064      	movs	r0, #100	@ 0x64
 800083c:	f000 fc2a 	bl	8001094 <Motor_SetSpeed>

  char msg[] = "Init complete!\r\n";
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <main+0x74>)
 8000842:	1d3c      	adds	r4, r7, #4
 8000844:	461d      	mov	r5, r3
 8000846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084a:	682b      	ldr	r3, [r5, #0]
 800084c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 800084e:	1d39      	adds	r1, r7, #4
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2210      	movs	r2, #16
 8000856:	4807      	ldr	r0, [pc, #28]	@ (8000874 <main+0x78>)
 8000858:	f007 fa88 	bl	8007d6c <HAL_UART_Transmit>
  sensor_diagnostic();
 800085c:	f7ff ff3e 	bl	80006dc <sensor_diagnostic>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Motor_Forward();
	  HAL_Delay(5000);
 8000860:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000864:	f001 f9ec 	bl	8001c40 <HAL_Delay>
	  read_temperature();
 8000868:	f7ff fed6 	bl	8000618 <read_temperature>
	  HAL_Delay(5000);
 800086c:	bf00      	nop
 800086e:	e7f7      	b.n	8000860 <main+0x64>
 8000870:	0800b074 	.word	0x0800b074
 8000874:	200002fc 	.word	0x200002fc

08000878 <_write>:
  /* USER CODE END 3 */
}


int _write(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	b29a      	uxth	r2, r3
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <_write+0x28>)
 8000890:	f007 fa6c 	bl	8007d6c <HAL_UART_Transmit>
    return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200002fc 	.word	0x200002fc

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	@ 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f009 fe79 	bl	800a5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <SystemClock_Config+0xcc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a20      	ldr	r2, [pc, #128]	@ (8000974 <SystemClock_Config+0xd0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800091c:	2348      	movs	r3, #72	@ 0x48
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000924:	2303      	movs	r3, #3
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fa61 	bl	8005df4 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000938:	f000 fb9c 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	2102      	movs	r1, #2
 8000958:	4618      	mov	r0, r3
 800095a:	f005 fcc3 	bl	80062e4 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000964:	f000 fb86 	bl	8001074 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3750      	adds	r7, #80	@ 0x50
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_ADC1_Init+0x98>)
 800098c:	4a21      	ldr	r2, [pc, #132]	@ (8000a14 <MX_ADC1_Init+0x9c>)
 800098e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_ADC1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_ADC1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_ADC1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b0:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009b8:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <MX_ADC1_Init+0xa0>)
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009d8:	f001 f956 	bl	8001c88 <HAL_ADC_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fb47 	bl	8001074 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009e6:	2305      	movs	r3, #5
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_ADC1_Init+0x98>)
 80009f8:	f001 f98a 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a02:	f000 fb37 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000dc 	.word	0x200000dc
 8000a14:	40012000 	.word	0x40012000
 8000a18:	0f000001 	.word	0x0f000001

08000a1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_CRC_Init+0x20>)
 8000a22:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <MX_CRC_Init+0x24>)
 8000a24:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_CRC_Init+0x20>)
 8000a28:	f001 fc82 	bl	8002330 <HAL_CRC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a32:	f000 fb1f 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000124 	.word	0x20000124
 8000a40:	40023000 	.word	0x40023000

08000a44 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a4a:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <MX_DMA2D_Init+0x60>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a78:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a7a:	f001 fc75 	bl	8002368 <HAL_DMA2D_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a84:	f000 faf6 	bl	8001074 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_DMA2D_Init+0x5c>)
 8000a8c:	f001 fdc6 	bl	800261c <HAL_DMA2D_ConfigLayer>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a96:	f000 faed 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000012c 	.word	0x2000012c
 8000aa4:	4002b000 	.word	0x4002b000

08000aa8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	@ 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2234      	movs	r2, #52	@ 0x34
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f009 fd78 	bl	800a5aa <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000aba:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000abc:	4a39      	ldr	r2, [pc, #228]	@ (8000ba4 <MX_LTDC_Init+0xfc>)
 8000abe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ac6:	4b36      	ldr	r3, [pc, #216]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000acc:	4b34      	ldr	r3, [pc, #208]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000ad8:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ada:	2209      	movs	r2, #9
 8000adc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000ade:	4b30      	ldr	r3, [pc, #192]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000ae6:	221d      	movs	r2, #29
 8000ae8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000aea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000aec:	2203      	movs	r2, #3
 8000aee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000af0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000af2:	f240 120d 	movw	r2, #269	@ 0x10d
 8000af6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000afa:	f240 1243 	movw	r2, #323	@ 0x143
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b02:	f240 1217 	movw	r2, #279	@ 0x117
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b0a:	f240 1247 	movw	r2, #327	@ 0x147
 8000b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b10:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b18:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b28:	481d      	ldr	r0, [pc, #116]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b2a:	f004 fdfb 	bl	8005724 <HAL_LTDC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 fa9e 	bl	8001074 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000b3c:	23f0      	movs	r3, #240	@ 0xf0
 8000b3e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000b44:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b48:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b4e:	23ff      	movs	r3, #255	@ 0xff
 8000b50:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b5a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b60:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000b66:	23f0      	movs	r3, #240	@ 0xf0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000b6a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_LTDC_Init+0xf8>)
 8000b8a:	f004 ff5d 	bl	8005a48 <HAL_LTDC_ConfigLayer>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000b94:	f000 fa6e 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	@ 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000016c 	.word	0x2000016c
 8000ba4:	40016800 	.word	0x40016800

08000ba8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bae:	4a18      	ldr	r2, [pc, #96]	@ (8000c10 <MX_SPI5_Init+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bdc:	2218      	movs	r2, #24
 8000bde:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_SPI5_Init+0x64>)
 8000bfa:	f005 ffb9 	bl	8006b70 <HAL_SPI_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c04:	f000 fa36 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000214 	.word	0x20000214
 8000c10:	40015000 	.word	0x40015000

08000c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c32:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb0 <MX_TIM1_Init+0x9c>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5c:	4813      	ldr	r0, [pc, #76]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c5e:	f006 f810 	bl	8006c82 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 fa04 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c7a:	f006 fb8b 	bl	8007394 <HAL_TIM_ConfigClockSource>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c84:	f000 f9f6 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_TIM1_Init+0x98>)
 8000c96:	f006 ff89 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ca0:	f000 f9e8 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000026c 	.word	0x2000026c
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000cce:	4a1a      	ldr	r2, [pc, #104]	@ (8000d38 <MX_TIM9_Init+0x84>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000cd4:	2247      	movs	r2, #71	@ 0x47
 8000cd6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000ce0:	2263      	movs	r2, #99	@ 0x63
 8000ce2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000cf0:	4810      	ldr	r0, [pc, #64]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000cf2:	f006 f885 	bl	8006e00 <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 f9ba 	bl	8001074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	@ 0x60
 8000d02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000d04:	2332      	movs	r3, #50	@ 0x32
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000d18:	f006 fa7a 	bl	8007210 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000d22:	f000 f9a7 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <MX_TIM9_Init+0x80>)
 8000d28:	f000 fca6 	bl	8001678 <HAL_TIM_MspPostInit>

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200002b4 	.word	0x200002b4
 8000d38:	40014000 	.word	0x40014000

08000d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_USART1_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d74:	f006 ffaa 	bl	8007ccc <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f979 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200002fc 	.word	0x200002fc
 8000d8c:	40011000 	.word	0x40011000

08000d90 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000daa:	4a20      	ldr	r2, [pc, #128]	@ (8000e2c <MX_FMC_Init+0x9c>)
 8000dac:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000dc8:	2240      	movs	r2, #64	@ 0x40
 8000dca:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000dce:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000dd2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000dda:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000de0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000dea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000df4:	2307      	movs	r3, #7
 8000df6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e00:	2303      	movs	r3, #3
 8000e02:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_FMC_Init+0x98>)
 8000e12:	f005 fe79 	bl	8006b08 <HAL_SDRAM_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e1c:	f000 f92a 	bl	8001074 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000344 	.word	0x20000344
 8000e2c:	a0000140 	.word	0xa0000140

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	@ 0x38
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a7a      	ldr	r2, [pc, #488]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b78      	ldr	r3, [pc, #480]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	623b      	str	r3, [r7, #32]
 8000e60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	4b74      	ldr	r3, [pc, #464]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a73      	ldr	r2, [pc, #460]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b71      	ldr	r3, [pc, #452]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	4b6d      	ldr	r3, [pc, #436]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a6c      	ldr	r2, [pc, #432]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	4b66      	ldr	r3, [pc, #408]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a65      	ldr	r2, [pc, #404]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b63      	ldr	r3, [pc, #396]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b5f      	ldr	r3, [pc, #380]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b58      	ldr	r3, [pc, #352]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a57      	ldr	r2, [pc, #348]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b55      	ldr	r3, [pc, #340]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b51      	ldr	r3, [pc, #324]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b4e      	ldr	r3, [pc, #312]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a49      	ldr	r2, [pc, #292]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b47      	ldr	r3, [pc, #284]	@ (8001038 <MX_GPIO_Init+0x208>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2116      	movs	r1, #22
 8000f2a:	4844      	ldr	r0, [pc, #272]	@ (800103c <MX_GPIO_Init+0x20c>)
 8000f2c:	f001 fdb4 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	4842      	ldr	r0, [pc, #264]	@ (8001040 <MX_GPIO_Init+0x210>)
 8000f36:	f001 fdaf 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000f40:	4840      	ldr	r0, [pc, #256]	@ (8001044 <MX_GPIO_Init+0x214>)
 8000f42:	f001 fda9 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000f4c:	483e      	ldr	r0, [pc, #248]	@ (8001048 <MX_GPIO_Init+0x218>)
 8000f4e:	f001 fda3 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin;
 8000f52:	2316      	movs	r3, #22
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4834      	ldr	r0, [pc, #208]	@ (800103c <MX_GPIO_Init+0x20c>)
 8000f6a:	f001 fbe9 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000f6e:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	482e      	ldr	r0, [pc, #184]	@ (8001040 <MX_GPIO_Init+0x210>)
 8000f86:	f001 fbdb 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4827      	ldr	r0, [pc, #156]	@ (8001040 <MX_GPIO_Init+0x210>)
 8000fa2:	f001 fbcd 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000faa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4820      	ldr	r0, [pc, #128]	@ (800103c <MX_GPIO_Init+0x20c>)
 8000fbc:	f001 fbc0 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481e      	ldr	r0, [pc, #120]	@ (800104c <MX_GPIO_Init+0x21c>)
 8000fd4:	f001 fbb4 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000fd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4815      	ldr	r0, [pc, #84]	@ (8001044 <MX_GPIO_Init+0x214>)
 8000fee:	f001 fba7 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ff2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	480e      	ldr	r0, [pc, #56]	@ (8001044 <MX_GPIO_Init+0x214>)
 800100c:	f001 fb98 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001010:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <MX_GPIO_Init+0x218>)
 800102a:	f001 fb89 	bl	8002740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102e:	bf00      	nop
 8001030:	3738      	adds	r7, #56	@ 0x38
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020800 	.word	0x40020800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021800 	.word	0x40021800
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001062:	f000 fdcd 	bl	8001c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40001000 	.word	0x40001000

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <Error_Handler+0x8>

08001080 <Motor_Init>:

// Global variables
extern TIM_HandleTypeDef htim9;  // Assuming TIM9 for PWM

void Motor_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Start PWM on PE5
 8001084:	2100      	movs	r1, #0
 8001086:	4802      	ldr	r0, [pc, #8]	@ (8001090 <Motor_Init+0x10>)
 8001088:	f005 ff0a 	bl	8006ea0 <HAL_TIM_PWM_Start>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002b4 	.word	0x200002b4

08001094 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
    // Assuming 16-bit timer, adjust if different
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <Motor_SetSpeed+0x20>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	88fa      	ldrh	r2, [r7, #6]
 80010a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200002b4 	.word	0x200002b4

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_MspInit+0x54>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <HAL_MspInit+0x54>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_MspInit+0x54>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_MspInit+0x54>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_MspInit+0x54>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <HAL_MspInit+0x54>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	210f      	movs	r1, #15
 80010fa:	f06f 0001 	mvn.w	r0, #1
 80010fe:	f001 f8ed 	bl	80022dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a17      	ldr	r2, [pc, #92]	@ (800118c <HAL_ADC_MspInit+0x7c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d127      	bne.n	8001182 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_ADC_MspInit+0x80>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <HAL_ADC_MspInit+0x80>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_ADC_MspInit+0x80>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <HAL_ADC_MspInit+0x80>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_ADC_MspInit+0x80>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_ADC_MspInit+0x80>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800116a:	2320      	movs	r3, #32
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	2303      	movs	r3, #3
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_ADC_MspInit+0x84>)
 800117e:	f001 fadf 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40012000 	.word	0x40012000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <HAL_CRC_MspInit+0x3c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10d      	bne.n	80011c6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_CRC_MspInit+0x40>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a09      	ldr	r2, [pc, #36]	@ (80011d8 <HAL_CRC_MspInit+0x40>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <HAL_CRC_MspInit+0x40>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023000 	.word	0x40023000
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <HAL_DMA2D_MspInit+0x48>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d115      	bne.n	800121a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_DMA2D_MspInit+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <HAL_DMA2D_MspInit+0x4c>)
 80011f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_DMA2D_MspInit+0x4c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	205a      	movs	r0, #90	@ 0x5a
 8001210:	f001 f864 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001214:	205a      	movs	r0, #90	@ 0x5a
 8001216:	f001 f87d 	bl	8002314 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	4002b000 	.word	0x4002b000
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <HAL_I2C_MspInit+0xc4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d14b      	bne.n	80012e6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a20      	ldr	r2, [pc, #128]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001286:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001298:	2304      	movs	r3, #4
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4815      	ldr	r0, [pc, #84]	@ (80012f8 <HAL_I2C_MspInit+0xcc>)
 80012a4:	f001 fa4c 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80012a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012ba:	2304      	movs	r3, #4
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <HAL_I2C_MspInit+0xd0>)
 80012c6:	f001 fa3b 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 80012d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_I2C_MspInit+0xc8>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005c00 	.word	0x40005c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020000 	.word	0x40020000

08001300 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b09a      	sub	sp, #104	@ 0x68
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131c:	2230      	movs	r2, #48	@ 0x30
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f009 f942 	bl	800a5aa <memset>
  if(hltdc->Instance==LTDC)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a85      	ldr	r2, [pc, #532]	@ (8001540 <HAL_LTDC_MspInit+0x240>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f040 8102 	bne.w	8001536 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001332:	2308      	movs	r3, #8
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001336:	2332      	movs	r3, #50	@ 0x32
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800133e:	2300      	movs	r3, #0
 8001340:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fa1e 	bl	8006788 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001352:	f7ff fe8f 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	4b7a      	ldr	r3, [pc, #488]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a79      	ldr	r2, [pc, #484]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b77      	ldr	r3, [pc, #476]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	4b73      	ldr	r3, [pc, #460]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a72      	ldr	r2, [pc, #456]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b70      	ldr	r3, [pc, #448]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b6c      	ldr	r3, [pc, #432]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a6b      	ldr	r2, [pc, #428]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b69      	ldr	r3, [pc, #420]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b65      	ldr	r3, [pc, #404]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a64      	ldr	r2, [pc, #400]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b62      	ldr	r3, [pc, #392]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a5d      	ldr	r2, [pc, #372]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b57      	ldr	r3, [pc, #348]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a56      	ldr	r2, [pc, #344]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b54      	ldr	r3, [pc, #336]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b50      	ldr	r3, [pc, #320]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a4f      	ldr	r2, [pc, #316]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b4d      	ldr	r3, [pc, #308]	@ (8001544 <HAL_LTDC_MspInit+0x244>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800141a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800141e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800142c:	230e      	movs	r3, #14
 800142e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001434:	4619      	mov	r1, r3
 8001436:	4844      	ldr	r0, [pc, #272]	@ (8001548 <HAL_LTDC_MspInit+0x248>)
 8001438:	f001 f982 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800143c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001440:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800144e:	230e      	movs	r3, #14
 8001450:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	@ (800154c <HAL_LTDC_MspInit+0x24c>)
 800145a:	f001 f971 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800145e:	2303      	movs	r3, #3
 8001460:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800146e:	2309      	movs	r3, #9
 8001470:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001476:	4619      	mov	r1, r3
 8001478:	4835      	ldr	r0, [pc, #212]	@ (8001550 <HAL_LTDC_MspInit+0x250>)
 800147a:	f001 f961 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800147e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001482:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001490:	230e      	movs	r3, #14
 8001492:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001498:	4619      	mov	r1, r3
 800149a:	482d      	ldr	r0, [pc, #180]	@ (8001550 <HAL_LTDC_MspInit+0x250>)
 800149c:	f001 f950 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80014a0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80014a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b2:	230e      	movs	r3, #14
 80014b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014ba:	4619      	mov	r1, r3
 80014bc:	4825      	ldr	r0, [pc, #148]	@ (8001554 <HAL_LTDC_MspInit+0x254>)
 80014be:	f001 f93f 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80014c2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80014c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d4:	230e      	movs	r3, #14
 80014d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014dc:	4619      	mov	r1, r3
 80014de:	481e      	ldr	r0, [pc, #120]	@ (8001558 <HAL_LTDC_MspInit+0x258>)
 80014e0:	f001 f92e 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80014e4:	2348      	movs	r3, #72	@ 0x48
 80014e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014f4:	230e      	movs	r3, #14
 80014f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014fc:	4619      	mov	r1, r3
 80014fe:	4817      	ldr	r0, [pc, #92]	@ (800155c <HAL_LTDC_MspInit+0x25c>)
 8001500:	f001 f91e 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001504:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001508:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001516:	2309      	movs	r3, #9
 8001518:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <HAL_LTDC_MspInit+0x254>)
 8001522:	f001 f90d 	bl	8002740 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	2058      	movs	r0, #88	@ 0x58
 800152c:	f000 fed6 	bl	80022dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001530:	2058      	movs	r0, #88	@ 0x58
 8001532:	f000 feef 	bl	8002314 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3768      	adds	r7, #104	@ 0x68
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40016800 	.word	0x40016800
 8001544:	40023800 	.word	0x40023800
 8001548:	40021400 	.word	0x40021400
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40021800 	.word	0x40021800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00

08001560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	@ (80015e4 <HAL_SPI_MspInit+0x84>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d12c      	bne.n	80015dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <HAL_SPI_MspInit+0x88>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_SPI_MspInit+0x88>)
 800158c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001590:	6453      	str	r3, [r2, #68]	@ 0x44
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_SPI_MspInit+0x88>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_SPI_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_SPI_MspInit+0x88>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_SPI_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80015ba:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015cc:	2305      	movs	r3, #5
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <HAL_SPI_MspInit+0x8c>)
 80015d8:	f001 f8b2 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40015000 	.word	0x40015000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40021400 	.word	0x40021400

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_TIM_Base_MspInit+0x3c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10d      	bne.n	800161e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_TIM_Base_MspInit+0x40>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <HAL_TIM_Base_MspInit+0x40>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <HAL_TIM_Base_MspInit+0x40>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40010000 	.word	0x40010000
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <HAL_TIM_PWM_MspInit+0x3c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10d      	bne.n	8001662 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_TIM_PWM_MspInit+0x40>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_TIM_PWM_MspInit+0x40>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <HAL_TIM_PWM_MspInit+0x40>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40014000 	.word	0x40014000
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <HAL_TIM_MspPostInit+0x68>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11d      	bne.n	80016d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <HAL_TIM_MspPostInit+0x6c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <HAL_TIM_MspPostInit+0x6c>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_TIM_MspPostInit+0x6c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016b6:	2320      	movs	r3, #32
 80016b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_TIM_MspPostInit+0x70>)
 80016d2:	f001 f835 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40014000 	.word	0x40014000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <HAL_UART_MspInit+0x84>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12c      	bne.n	8001768 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_UART_MspInit+0x88>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_UART_MspInit+0x88>)
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_UART_MspInit+0x88>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <HAL_UART_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <HAL_UART_MspInit+0x88>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_UART_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001746:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001758:	2307      	movs	r3, #7
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <HAL_UART_MspInit+0x8c>)
 8001764:	f000 ffec 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40011000 	.word	0x40011000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001790:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <HAL_FMC_MspInit+0x104>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d16f      	bne.n	8001878 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001798:	4b39      	ldr	r3, [pc, #228]	@ (8001880 <HAL_FMC_MspInit+0x104>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <HAL_FMC_MspInit+0x108>)
 80017a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a6:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <HAL_FMC_MspInit+0x108>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6393      	str	r3, [r2, #56]	@ 0x38
 80017ae:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <HAL_FMC_MspInit+0x108>)
 80017b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80017ba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80017be:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017cc:	230c      	movs	r3, #12
 80017ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	482c      	ldr	r0, [pc, #176]	@ (8001888 <HAL_FMC_MspInit+0x10c>)
 80017d6:	f000 ffb3 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80017da:	2301      	movs	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ea:	230c      	movs	r3, #12
 80017ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4826      	ldr	r0, [pc, #152]	@ (800188c <HAL_FMC_MspInit+0x110>)
 80017f4:	f000 ffa4 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80017f8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80017fc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800180a:	230c      	movs	r3, #12
 800180c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	481f      	ldr	r0, [pc, #124]	@ (8001890 <HAL_FMC_MspInit+0x114>)
 8001814:	f000 ff94 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001818:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800181c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800182a:	230c      	movs	r3, #12
 800182c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4818      	ldr	r0, [pc, #96]	@ (8001894 <HAL_FMC_MspInit+0x118>)
 8001834:	f000 ff84 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001838:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800183c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184a:	230c      	movs	r3, #12
 800184c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4811      	ldr	r0, [pc, #68]	@ (8001898 <HAL_FMC_MspInit+0x11c>)
 8001854:	f000 ff74 	bl	8002740 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001858:	2360      	movs	r3, #96	@ 0x60
 800185a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001868:	230c      	movs	r3, #12
 800186a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	480a      	ldr	r0, [pc, #40]	@ (800189c <HAL_FMC_MspInit+0x120>)
 8001872:	f000 ff65 	bl	8002740 <HAL_GPIO_Init>
 8001876:	e000      	b.n	800187a <HAL_FMC_MspInit+0xfe>
    return;
 8001878:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000378 	.word	0x20000378
 8001884:	40023800 	.word	0x40023800
 8001888:	40021400 	.word	0x40021400
 800188c:	40020800 	.word	0x40020800
 8001890:	40021800 	.word	0x40021800
 8001894:	40021000 	.word	0x40021000
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40020400 	.word	0x40020400

080018a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018a8:	f7ff ff68 	bl	800177c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	@ 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <HAL_InitTick+0xe4>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	4a32      	ldr	r2, [pc, #200]	@ (8001998 <HAL_InitTick+0xe4>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d4:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <HAL_InitTick+0xe4>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e0:	f107 0210 	add.w	r2, r7, #16
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 ff1a 	bl	8006724 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fa:	f004 feeb 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 80018fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8001900:	e004      	b.n	800190c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001902:	f004 fee7 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 8001906:	4603      	mov	r3, r0
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <HAL_InitTick+0xe8>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	3b01      	subs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <HAL_InitTick+0xec>)
 800191c:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <HAL_InitTick+0xf0>)
 800191e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <HAL_InitTick+0xec>)
 8001922:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001928:	4a1d      	ldr	r2, [pc, #116]	@ (80019a0 <HAL_InitTick+0xec>)
 800192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_InitTick+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <HAL_InitTick+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_InitTick+0xec>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001940:	4817      	ldr	r0, [pc, #92]	@ (80019a0 <HAL_InitTick+0xec>)
 8001942:	f005 f99e 	bl	8006c82 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800194c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11b      	bne.n	800198c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001954:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <HAL_InitTick+0xec>)
 8001956:	f005 f9e3 	bl	8006d20 <HAL_TIM_Base_Start_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001960:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001968:	2036      	movs	r0, #54	@ 0x36
 800196a:	f000 fcd3 	bl	8002314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d808      	bhi.n	8001986 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	2036      	movs	r0, #54	@ 0x36
 800197a:	f000 fcaf 	bl	80022dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <HAL_InitTick+0xf4>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e002      	b.n	800198c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800198c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001990:	4618      	mov	r0, r3
 8001992:	3738      	adds	r7, #56	@ 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	431bde83 	.word	0x431bde83
 80019a0:	2000037c 	.word	0x2000037c
 80019a4:	40001000 	.word	0x40001000
 80019a8:	20000004 	.word	0x20000004

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <TIM6_DAC_IRQHandler+0x10>)
 80019ea:	f005 fb21 	bl	8007030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000037c 	.word	0x2000037c

080019f8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <OTG_HS_IRQHandler+0x10>)
 80019fe:	f001 f864 	bl	8002aca <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200004b8 	.word	0x200004b8

08001a0c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <LTDC_IRQHandler+0x10>)
 8001a12:	f003 ff57 	bl	80058c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000016c 	.word	0x2000016c

08001a20 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA2D_IRQHandler+0x10>)
 8001a26:	f000 fce8 	bl	80023fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000012c 	.word	0x2000012c

08001a34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00a      	b.n	8001a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a46:	f3af 8000 	nop.w
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf0      	blt.n	8001a46 <_read+0x12>
  }

  return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a96:	605a      	str	r2, [r3, #4]
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f008 fdae 	bl	800a668 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20030000 	.word	0x20030000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	200003c4 	.word	0x200003c4
 8001b40:	200009e8 	.word	0x200009e8

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f008 fd6d 	bl	800a674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7fe fe2f 	bl	80007fc <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ba0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bac:	0800b0e4 	.word	0x0800b0e4
  ldr r2, =_sbss
 8001bb0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bb4:	200009e4 	.word	0x200009e4

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_Init+0x40>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_Init+0x40>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_Init+0x40>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 fb6e 	bl	80022c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fe62 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fa62 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008
 8001c24:	200003c8 	.word	0x200003c8

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200003c8 	.word	0x200003c8

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008

08001c88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e033      	b.n	8001d06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fa32 	bl	8001110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cce:	f023 0302 	bic.w	r3, r3, #2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f94a 	bl	8001f74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1c>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e113      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x244>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	d925      	bls.n	8001d88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68d9      	ldr	r1, [r3, #12]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68d9      	ldr	r1, [r3, #12]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	4603      	mov	r3, r0
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4403      	add	r3, r0
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	e022      	b.n	8001dce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6919      	ldr	r1, [r3, #16]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4403      	add	r3, r0
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d824      	bhi.n	8001e20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b05      	subs	r3, #5
 8001de8:	221f      	movs	r2, #31
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b05      	subs	r3, #5
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1e:	e04c      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d824      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b23      	subs	r3, #35	@ 0x23
 8001e3a:	221f      	movs	r2, #31
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43da      	mvns	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	400a      	ands	r2, r1
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b23      	subs	r3, #35	@ 0x23
 8001e64:	fa00 f203 	lsl.w	r2, r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e70:	e023      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b41      	subs	r3, #65	@ 0x41
 8001e84:	221f      	movs	r2, #31
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b41      	subs	r3, #65	@ 0x41
 8001eae:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_ADC_ConfigChannel+0x250>)
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a28      	ldr	r2, [pc, #160]	@ (8001f64 <HAL_ADC_ConfigChannel+0x254>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <HAL_ADC_ConfigChannel+0x254>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12b      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x23a>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <HAL_ADC_ConfigChannel+0x258>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x1f4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b11      	cmp	r3, #17
 8001f02:	d122      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <HAL_ADC_ConfigChannel+0x258>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d111      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_ADC_ConfigChannel+0x25c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a11      	ldr	r2, [pc, #68]	@ (8001f70 <HAL_ADC_ConfigChannel+0x260>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9a      	lsrs	r2, r3, #18
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	40012000 	.word	0x40012000
 8001f68:	10000012 	.word	0x10000012
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7c:	4b79      	ldr	r3, [pc, #484]	@ (8002164 <ADC_Init+0x1f0>)
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	4a58      	ldr	r2, [pc, #352]	@ (8002168 <ADC_Init+0x1f4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800201a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800203c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e00f      	b.n	8002072 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002070:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0202 	bic.w	r2, r2, #2
 8002080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7e1b      	ldrb	r3, [r3, #24]
 800208c:	005a      	lsls	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	3b01      	subs	r3, #1
 80020cc:	035a      	lsls	r2, r3, #13
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e007      	b.n	80020e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	3b01      	subs	r3, #1
 8002104:	051a      	lsls	r2, r3, #20
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800211c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800212a:	025a      	lsls	r2, r3, #9
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6899      	ldr	r1, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	029a      	lsls	r2, r3, #10
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40012300 	.word	0x40012300
 8002168:	0f000001 	.word	0x0f000001

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	@ (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	@ (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4c 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ee:	f7ff ff61 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7ff ffb1 	bl	8002260 <NVIC_EncodePriority>
 80022fe:	4602      	mov	r2, r0
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff80 	bl	800220c <__NVIC_SetPriority>
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff54 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00e      	b.n	8002360 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	795b      	ldrb	r3, [r3, #5]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe ff20 	bl	8001198 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e03b      	b.n	80023f2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe ff24 	bl	80011dc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b8:	f023 0107 	bic.w	r1, r3, #7
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d1      	ldr	r1, [r2, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	430b      	orrs	r3, r1
 80023e0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d026      	beq.n	800246a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d021      	beq.n	800246a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002434:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d026      	beq.n	80024c2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d021      	beq.n	80024c2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800248c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2220      	movs	r2, #32
 8002494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249a:	f043 0202 	orr.w	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2204      	movs	r2, #4
 80024a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d026      	beq.n	800251a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d021      	beq.n	800251a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2208      	movs	r2, #8
 80024ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f2:	f043 0204 	orr.w	r2, r3, #4
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2204      	movs	r2, #4
 80024fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00e      	beq.n	800254c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2204      	movs	r2, #4
 8002544:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f853 	bl	80025f2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d024      	beq.n	80025a0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01f      	beq.n	80025a0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01f      	beq.n	80025ea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01a      	beq.n	80025ea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2210      	movs	r2, #16
 80025ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f80e 	bl	8002606 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_DMA2D_ConfigLayer+0x20>
 8002638:	2302      	movs	r3, #2
 800263a:	e079      	b.n	8002730 <HAL_DMA2D_ConfigLayer+0x114>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	3318      	adds	r3, #24
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002666:	4b35      	ldr	r3, [pc, #212]	@ (800273c <HAL_DMA2D_ConfigLayer+0x120>)
 8002668:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b0a      	cmp	r3, #10
 8002670:	d003      	beq.n	800267a <HAL_DMA2D_ConfigLayer+0x5e>
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b09      	cmp	r3, #9
 8002678:	d107      	bne.n	800268a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e005      	b.n	8002696 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d120      	bne.n	80026de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	ea02 0103 	and.w	r1, r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b0a      	cmp	r3, #10
 80026c4:	d003      	beq.n	80026ce <HAL_DMA2D_ConfigLayer+0xb2>
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	d127      	bne.n	800271e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
 80026dc:	e01f      	b.n	800271e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	ea02 0103 	and.w	r1, r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b0a      	cmp	r3, #10
 8002706:	d003      	beq.n	8002710 <HAL_DMA2D_ConfigLayer+0xf4>
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b09      	cmp	r3, #9
 800270e:	d106      	bne.n	800271e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800271c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	ff03000f 	.word	0xff03000f

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e177      	b.n	8002a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 8166 	bne.w	8002a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d005      	beq.n	8002792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	2b02      	cmp	r3, #2
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80c0 	beq.w	8002a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b66      	ldr	r3, [pc, #408]	@ (8002a64 <HAL_GPIO_Init+0x324>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	4a65      	ldr	r2, [pc, #404]	@ (8002a64 <HAL_GPIO_Init+0x324>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d6:	4b63      	ldr	r3, [pc, #396]	@ (8002a64 <HAL_GPIO_Init+0x324>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e2:	4a61      	ldr	r2, [pc, #388]	@ (8002a68 <HAL_GPIO_Init+0x328>)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a58      	ldr	r2, [pc, #352]	@ (8002a6c <HAL_GPIO_Init+0x32c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d037      	beq.n	800297e <HAL_GPIO_Init+0x23e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a57      	ldr	r2, [pc, #348]	@ (8002a70 <HAL_GPIO_Init+0x330>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_GPIO_Init+0x23a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a56      	ldr	r2, [pc, #344]	@ (8002a74 <HAL_GPIO_Init+0x334>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02b      	beq.n	8002976 <HAL_GPIO_Init+0x236>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a55      	ldr	r2, [pc, #340]	@ (8002a78 <HAL_GPIO_Init+0x338>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x232>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a54      	ldr	r2, [pc, #336]	@ (8002a7c <HAL_GPIO_Init+0x33c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x22e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a53      	ldr	r2, [pc, #332]	@ (8002a80 <HAL_GPIO_Init+0x340>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x22a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	@ (8002a84 <HAL_GPIO_Init+0x344>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x226>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a51      	ldr	r2, [pc, #324]	@ (8002a88 <HAL_GPIO_Init+0x348>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x222>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a50      	ldr	r2, [pc, #320]	@ (8002a8c <HAL_GPIO_Init+0x34c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x21e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4f      	ldr	r2, [pc, #316]	@ (8002a90 <HAL_GPIO_Init+0x350>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x21a>
 8002956:	2309      	movs	r3, #9
 8002958:	e012      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800295a:	230a      	movs	r3, #10
 800295c:	e010      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800295e:	2308      	movs	r3, #8
 8002960:	e00e      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002962:	2307      	movs	r3, #7
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002966:	2306      	movs	r3, #6
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002990:	4935      	ldr	r1, [pc, #212]	@ (8002a68 <HAL_GPIO_Init+0x328>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c2:	4a34      	ldr	r2, [pc, #208]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ec:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f2:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a16:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a40:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <HAL_GPIO_Init+0x354>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f ae84 	bls.w	800275c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	@ 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022400 	.word	0x40022400
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f005 fed3 	bl	800888c <USB_GetMode>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f040 80fb 	bne.w	8002ce4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f005 fe96 	bl	8008824 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80f1 	beq.w	8002ce2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 fe8d 	bl	8008824 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b14:	d104      	bne.n	8002b20 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b1e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f005 fe7d 	bl	8008824 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b34:	d104      	bne.n	8002b40 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f005 fe6d 	bl	8008824 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b54:	d104      	bne.n	8002b60 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b5e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 fe5d 	bl	8008824 <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d103      	bne.n	8002b7c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f005 fe4f 	bl	8008824 <USB_ReadInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b90:	d120      	bne.n	8002bd4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002b9a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d113      	bne.n	8002bd4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002bac:	2110      	movs	r1, #16
 8002bae:	6938      	ldr	r0, [r7, #16]
 8002bb0:	f005 fd80 	bl	80086b4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002bb4:	6938      	ldr	r0, [r7, #16]
 8002bb6:	f005 fdaf 	bl	8008718 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7a5b      	ldrb	r3, [r3, #9]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d105      	bne.n	8002bce <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 fe6d 	bl	80088a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f007 f9e2 	bl	8009f98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 fe23 	bl	8008824 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be8:	d102      	bne.n	8002bf0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f001 fc87 	bl	80044fe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f005 fe15 	bl	8008824 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d106      	bne.n	8002c12 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f007 f9ab 	bl	8009f60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fe04 	bl	8008824 <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c26:	d139      	bne.n	8002c9c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 fe78 	bl	8008922 <USB_HC_ReadInterrupt>
 8002c32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e025      	b.n	8002c86 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c64:	d106      	bne.n	8002c74 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f859 	bl	8002d24 <HCD_HC_IN_IRQHandler>
 8002c72:	e005      	b.n	8002c80 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 febb 	bl	80039f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3301      	adds	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	795b      	ldrb	r3, [r3, #5]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d3d3      	bcc.n	8002c3a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 fdbf 	bl	8008824 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d101      	bne.n	8002cb4 <HAL_HCD_IRQHandler+0x1ea>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_HCD_IRQHandler+0x1ec>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d014      	beq.n	8002ce4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0210 	bic.w	r2, r2, #16
 8002cc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f001 fb38 	bl	8004340 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0210 	orr.w	r2, r2, #16
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	e000      	b.n	8002ce4 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002ce2:	bf00      	nop
    }
  }
}
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_HCD_Stop+0x16>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e00d      	b.n	8002d1c <HAL_HCD_Stop+0x32>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f005 ff39 	bl	8008b84 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f005 fd81 	bl	800884a <USB_ReadChInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d11a      	bne.n	8002d88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2304      	movs	r3, #4
 8002d62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	334d      	adds	r3, #77	@ 0x4d
 8002d74:	2207      	movs	r2, #7
 8002d76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 fddf 	bl	8008944 <USB_HC_Halt>
 8002d86:	e09e      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 fd5a 	bl	800884a <USB_ReadChInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da0:	d11b      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334d      	adds	r3, #77	@ 0x4d
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 fdb6 	bl	8008944 <USB_HC_Halt>
 8002dd8:	e075      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f005 fd31 	bl	800884a <USB_ReadChInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11a      	bne.n	8002e28 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2308      	movs	r3, #8
 8002e02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334d      	adds	r3, #77	@ 0x4d
 8002e14:	2206      	movs	r2, #6
 8002e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 fd8f 	bl	8008944 <USB_HC_Halt>
 8002e26:	e04e      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fd0a 	bl	800884a <USB_ReadChInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e40:	d11b      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	334d      	adds	r3, #77	@ 0x4d
 8002e66:	2209      	movs	r2, #9
 8002e68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f005 fd66 	bl	8008944 <USB_HC_Halt>
 8002e78:	e025      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 fce1 	bl	800884a <USB_ReadChInterrupts>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d119      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334d      	adds	r3, #77	@ 0x4d
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f005 fd3f 	bl	8008944 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 fcbb 	bl	800884a <USB_ReadChInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ede:	d112      	bne.n	8002f06 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fd2b 	bl	8008944 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	f000 bd75 	b.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 fc9b 	bl	800884a <USB_ReadChInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 8128 	bne.w	8003170 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2320      	movs	r3, #32
 8002f30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	331b      	adds	r3, #27
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d119      	bne.n	8002f7c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	331b      	adds	r3, #27
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	0151      	lsls	r1, r2, #5
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	440a      	add	r2, r1
 8002f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	799b      	ldrb	r3, [r3, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01b      	beq.n	8002fbc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3330      	adds	r3, #48	@ 0x30
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	1ac9      	subs	r1, r1, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	3338      	adds	r3, #56	@ 0x38
 8002fba:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	334d      	adds	r3, #77	@ 0x4d
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3344      	adds	r3, #68	@ 0x44
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3326      	adds	r3, #38	@ 0x26
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3326      	adds	r3, #38	@ 0x26
 800301c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800301e:	2b02      	cmp	r3, #2
 8003020:	d110      	bne.n	8003044 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f005 fc8a 	bl	8008944 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2310      	movs	r3, #16
 8003040:	6093      	str	r3, [r2, #8]
 8003042:	e03d      	b.n	80030c0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3326      	adds	r3, #38	@ 0x26
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d00a      	beq.n	8003070 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3326      	adds	r3, #38	@ 0x26
 800306a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800306c:	2b01      	cmp	r3, #1
 800306e:	d127      	bne.n	80030c0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	0151      	lsls	r1, r2, #5
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	440a      	add	r2, r1
 8003086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800308a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800308e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334c      	adds	r3, #76	@ 0x4c
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	334c      	adds	r3, #76	@ 0x4c
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f006 ff7a 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d13b      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3338      	adds	r3, #56	@ 0x38
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4403      	add	r3, r0
 80030e8:	3328      	adds	r3, #40	@ 0x28
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	440b      	add	r3, r1
 80030ee:	1e59      	subs	r1, r3, #1
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4403      	add	r3, r0
 80030fe:	3328      	adds	r3, #40	@ 0x28
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	fbb1 f3f3 	udiv	r3, r1, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8470 	beq.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333c      	adds	r3, #60	@ 0x3c
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333c      	adds	r3, #60	@ 0x3c
 8003138:	4602      	mov	r2, r0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	f000 bc58 	b.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	333c      	adds	r3, #60	@ 0x3c
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2d8      	uxtb	r0, r3
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	333c      	adds	r3, #60	@ 0x3c
 8003168:	4602      	mov	r2, r0
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	f000 bc40 	b.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f005 fb66 	bl	800884a <USB_ReadChInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d131      	bne.n	80031ec <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003194:	461a      	mov	r2, r3
 8003196:	2320      	movs	r3, #32
 8003198:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	331a      	adds	r3, #26
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 841f 	bne.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	331b      	adds	r3, #27
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334d      	adds	r3, #77	@ 0x4d
 80031d6:	2203      	movs	r2, #3
 80031d8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fbae 	bl	8008944 <USB_HC_Halt>
 80031e8:	f000 bc02 	b.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 fb28 	bl	800884a <USB_ReadChInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	f040 8305 	bne.w	8003810 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2302      	movs	r3, #2
 8003216:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334d      	adds	r3, #77	@ 0x4d
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d114      	bne.n	8003258 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334d      	adds	r3, #77	@ 0x4d
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e2cc      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d114      	bne.n	8003298 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334c      	adds	r3, #76	@ 0x4c
 8003292:	2205      	movs	r2, #5
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e2ac      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	@ 0x4d
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b07      	cmp	r3, #7
 80032ac:	d00b      	beq.n	80032c6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334d      	adds	r3, #77	@ 0x4d
 80032be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	f040 80a6 	bne.w	8003412 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	334d      	adds	r3, #77	@ 0x4d
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3344      	adds	r3, #68	@ 0x44
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1c59      	adds	r1, r3, #1
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4403      	add	r3, r0
 80032fa:	3344      	adds	r3, #68	@ 0x44
 80032fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3344      	adds	r3, #68	@ 0x44
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d943      	bls.n	800339c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3344      	adds	r3, #68	@ 0x44
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	331a      	adds	r3, #26
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d123      	bne.n	8003386 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	331b      	adds	r3, #27
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	331c      	adds	r3, #28
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003384:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	@ 0x4c
 8003396:	2204      	movs	r2, #4
 8003398:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800339a:	e229      	b.n	80037f0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334c      	adds	r3, #76	@ 0x4c
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3326      	adds	r3, #38	@ 0x26
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3326      	adds	r3, #38	@ 0x26
 80033d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f040 8209 	bne.w	80037f0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003410:	e1ee      	b.n	80037f0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	@ 0x4d
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b05      	cmp	r3, #5
 8003426:	f040 80c8 	bne.w	80035ba <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	334d      	adds	r3, #77	@ 0x4d
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	331b      	adds	r3, #27
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	f040 81ce 	bne.w	80037f2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3326      	adds	r3, #38	@ 0x26
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d16b      	bne.n	8003544 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3348      	adds	r3, #72	@ 0x48
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1c59      	adds	r1, r3, #1
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4403      	add	r3, r0
 800348c:	3348      	adds	r3, #72	@ 0x48
 800348e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3348      	adds	r3, #72	@ 0x48
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d943      	bls.n	800352e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3348      	adds	r3, #72	@ 0x48
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	331b      	adds	r3, #27
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	@ 0x44
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d809      	bhi.n	80034f8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	331c      	adds	r3, #28
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	440a      	add	r2, r1
 800350e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003516:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334c      	adds	r3, #76	@ 0x4c
 8003528:	2204      	movs	r2, #4
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e014      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334c      	adds	r3, #76	@ 0x4c
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e009      	b.n	8003558 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	334c      	adds	r3, #76	@ 0x4c
 8003554:	2202      	movs	r2, #2
 8003556:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3326      	adds	r3, #38	@ 0x26
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3326      	adds	r3, #38	@ 0x26
 800357e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003580:	2b02      	cmp	r3, #2
 8003582:	f040 8136 	bne.w	80037f2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800359c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035a4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e11b      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	334d      	adds	r3, #77	@ 0x4d
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	f040 8081 	bne.w	80036d4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	334d      	adds	r3, #77	@ 0x4d
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	331b      	adds	r3, #27
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 80fa 	bne.w	80037f2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334c      	adds	r3, #76	@ 0x4c
 800360e:	2202      	movs	r2, #2
 8003610:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	440a      	add	r2, r1
 8003628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800362c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003630:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	440a      	add	r2, r1
 8003648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003650:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	440a      	add	r2, r1
 8003668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800366c:	f023 0320 	bic.w	r3, r3, #32
 8003670:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3326      	adds	r3, #38	@ 0x26
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3326      	adds	r3, #38	@ 0x26
 8003698:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800369a:	2b02      	cmp	r3, #2
 800369c:	f040 80a9 	bne.w	80037f2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e08e      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334d      	adds	r3, #77	@ 0x4d
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d143      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	334d      	adds	r3, #77	@ 0x4d
 80036fa:	2202      	movs	r2, #2
 80036fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	334c      	adds	r3, #76	@ 0x4c
 800370e:	2202      	movs	r2, #2
 8003710:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3326      	adds	r3, #38	@ 0x26
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3326      	adds	r3, #38	@ 0x26
 8003738:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800373a:	2b02      	cmp	r3, #2
 800373c:	d159      	bne.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003754:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800375c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e03f      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	334d      	adds	r3, #77	@ 0x4d
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d126      	bne.n	80037d6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334d      	adds	r3, #77	@ 0x4d
 8003798:	2202      	movs	r2, #2
 800379a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3344      	adds	r3, #68	@ 0x44
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4403      	add	r3, r0
 80037bc:	3344      	adds	r3, #68	@ 0x44
 80037be:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2204      	movs	r2, #4
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e00d      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334d      	adds	r3, #77	@ 0x4d
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f000 8100 	beq.w	80039ee <HCD_HC_IN_IRQHandler+0xcca>
 80037ee:	e000      	b.n	80037f2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037f0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334c      	adds	r3, #76	@ 0x4c
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f006 fbd3 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800380e:	e0ef      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f005 f816 	bl	800884a <USB_ReadChInterrupts>
 800381e:	4603      	mov	r3, r0
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d12f      	bne.n	8003888 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2340      	movs	r3, #64	@ 0x40
 8003838:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334d      	adds	r3, #77	@ 0x4d
 800384a:	2205      	movs	r2, #5
 800384c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	331a      	adds	r3, #26
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3344      	adds	r3, #68	@ 0x44
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f005 f85f 	bl	8008944 <USB_HC_Halt>
 8003886:	e0b3      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f004 ffda 	bl	800884a <USB_ReadChInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	f040 80a7 	bne.w	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3326      	adds	r3, #38	@ 0x26
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d11b      	bne.n	80038f0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3344      	adds	r3, #68	@ 0x44
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334d      	adds	r3, #77	@ 0x4d
 80038dc:	2204      	movs	r2, #4
 80038de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f005 f82b 	bl	8008944 <USB_HC_Halt>
 80038ee:	e03f      	b.n	8003970 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3326      	adds	r3, #38	@ 0x26
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3326      	adds	r3, #38	@ 0x26
 8003916:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003918:	2b02      	cmp	r3, #2
 800391a:	d129      	bne.n	8003970 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3344      	adds	r3, #68	@ 0x44
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	799b      	ldrb	r3, [r3, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HCD_HC_IN_IRQHandler+0xc2a>
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	331b      	adds	r3, #27
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d110      	bne.n	8003970 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	334d      	adds	r3, #77	@ 0x4d
 800395e:	2204      	movs	r2, #4
 8003960:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f004 ffea 	bl	8008944 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	331b      	adds	r3, #27
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d129      	bne.n	80039da <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	331b      	adds	r3, #27
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039d4:	f043 0320 	orr.w	r3, r3, #32
 80039d8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e6:	461a      	mov	r2, r3
 80039e8:	2310      	movs	r3, #16
 80039ea:	6093      	str	r3, [r2, #8]
 80039ec:	e000      	b.n	80039f0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80039ee:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 ff18 	bl	800884a <USB_ReadChInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d11b      	bne.n	8003a5c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	2304      	movs	r3, #4
 8003a34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	334d      	adds	r3, #77	@ 0x4d
 8003a46:	2207      	movs	r2, #7
 8003a48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 ff76 	bl	8008944 <USB_HC_Halt>
 8003a58:	f000 bc6f 	b.w	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 fef0 	bl	800884a <USB_ReadChInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	f040 8082 	bne.w	8003b7a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a82:	461a      	mov	r2, r3
 8003a84:	2320      	movs	r3, #32
 8003a86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3319      	adds	r3, #25
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d124      	bne.n	8003ae8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3319      	adds	r3, #25
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334c      	adds	r3, #76	@ 0x4c
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334d      	adds	r3, #77	@ 0x4d
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f004 ff2e 	bl	8008944 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	331a      	adds	r3, #26
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	f040 841d 	bne.w	800433a <HCD_HC_OUT_IRQHandler+0x944>
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	331b      	adds	r3, #27
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 8411 	bne.w	800433a <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3326      	adds	r3, #38	@ 0x26
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d009      	beq.n	8003b42 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	331b      	adds	r3, #27
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	334d      	adds	r3, #77	@ 0x4d
 8003b52:	2203      	movs	r2, #3
 8003b54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 fef0 	bl	8008944 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	3344      	adds	r3, #68	@ 0x44
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e3df      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 fe61 	bl	800884a <USB_ReadChInterrupts>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b92:	d111      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ba6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f004 fec7 	bl	8008944 <USB_HC_Halt>
 8003bb6:	e3c0      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 fe42 	bl	800884a <USB_ReadChInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d168      	bne.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3344      	adds	r3, #68	@ 0x44
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f004 fe2c 	bl	800884a <USB_ReadChInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b40      	cmp	r3, #64	@ 0x40
 8003bfa:	d112      	bne.n	8003c22 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3319      	adds	r3, #25
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2340      	movs	r3, #64	@ 0x40
 8003c20:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	331b      	adds	r3, #27
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d019      	beq.n	8003c6c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	331b      	adds	r3, #27
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	334d      	adds	r3, #77	@ 0x4d
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 fe52 	bl	8008944 <USB_HC_Halt>
 8003ca0:	e34b      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 fdcd 	bl	800884a <USB_ReadChInterrupts>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b40      	cmp	r3, #64	@ 0x40
 8003cb8:	d139      	bne.n	8003d2e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334d      	adds	r3, #77	@ 0x4d
 8003cca:	2205      	movs	r2, #5
 8003ccc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	331a      	adds	r3, #26
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3319      	adds	r3, #25
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3344      	adds	r3, #68	@ 0x44
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f004 fe15 	bl	8008944 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d26:	461a      	mov	r2, r3
 8003d28:	2340      	movs	r3, #64	@ 0x40
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e305      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 fd87 	bl	800884a <USB_ReadChInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11a      	bne.n	8003d7c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d52:	461a      	mov	r2, r3
 8003d54:	2308      	movs	r3, #8
 8003d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	334d      	adds	r3, #77	@ 0x4d
 8003d68:	2206      	movs	r2, #6
 8003d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f004 fde5 	bl	8008944 <USB_HC_Halt>
 8003d7a:	e2de      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 fd60 	bl	800884a <USB_ReadChInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d144      	bne.n	8003e1e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3344      	adds	r3, #68	@ 0x44
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	334d      	adds	r3, #77	@ 0x4d
 8003db8:	2204      	movs	r2, #4
 8003dba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3319      	adds	r3, #25
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d114      	bne.n	8003dfc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3318      	adds	r3, #24
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3319      	adds	r3, #25
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 fd9d 	bl	8008944 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e16:	461a      	mov	r2, r3
 8003e18:	2310      	movs	r3, #16
 8003e1a:	6093      	str	r3, [r2, #8]
 8003e1c:	e28d      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 fd0f 	bl	800884a <USB_ReadChInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b80      	cmp	r3, #128	@ 0x80
 8003e34:	d169      	bne.n	8003f0a <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	799b      	ldrb	r3, [r3, #6]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d111      	bne.n	8003e62 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	334d      	adds	r3, #77	@ 0x4d
 8003e4e:	2207      	movs	r2, #7
 8003e50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f004 fd72 	bl	8008944 <USB_HC_Halt>
 8003e60:	e049      	b.n	8003ef6 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3344      	adds	r3, #68	@ 0x44
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1c59      	adds	r1, r3, #1
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4403      	add	r3, r0
 8003e82:	3344      	adds	r3, #68	@ 0x44
 8003e84:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	3344      	adds	r3, #68	@ 0x44
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d922      	bls.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3344      	adds	r3, #68	@ 0x44
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	334c      	adds	r3, #76	@ 0x4c
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	334c      	adds	r3, #76	@ 0x4c
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f006 f86a 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ee0:	e009      	b.n	8003ef6 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334c      	adds	r3, #76	@ 0x4c
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f02:	461a      	mov	r2, r3
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	6093      	str	r3, [r2, #8]
 8003f08:	e217      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f004 fc99 	bl	800884a <USB_ReadChInterrupts>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f22:	d11b      	bne.n	8003f5c <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	2209      	movs	r2, #9
 8003f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f004 fcff 	bl	8008944 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f58:	6093      	str	r3, [r2, #8]
 8003f5a:	e1ee      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 fc70 	bl	800884a <USB_ReadChInterrupts>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 81df 	bne.w	8004334 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f82:	461a      	mov	r2, r3
 8003f84:	2302      	movs	r3, #2
 8003f86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334d      	adds	r3, #77	@ 0x4d
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	f040 8093 	bne.w	80040c6 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	334d      	adds	r3, #77	@ 0x4d
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	334c      	adds	r3, #76	@ 0x4c
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3326      	adds	r3, #38	@ 0x26
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d00b      	beq.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3326      	adds	r3, #38	@ 0x26
 8003fee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	f040 8190 	bne.w	8004316 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	799b      	ldrb	r3, [r3, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	333d      	adds	r3, #61	@ 0x3d
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	f083 0301 	eor.w	r3, r3, #1
 8004016:	b2d8      	uxtb	r0, r3
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	333d      	adds	r3, #61	@ 0x3d
 8004026:	4602      	mov	r2, r0
 8004028:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	799b      	ldrb	r3, [r3, #6]
 800402e:	2b01      	cmp	r3, #1
 8004030:	f040 8171 	bne.w	8004316 <HCD_HC_OUT_IRQHandler+0x920>
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	3334      	adds	r3, #52	@ 0x34
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8165 	beq.w	8004316 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3334      	adds	r3, #52	@ 0x34
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4403      	add	r3, r0
 800406c:	3328      	adds	r3, #40	@ 0x28
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	440b      	add	r3, r1
 8004072:	1e59      	subs	r1, r3, #1
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4403      	add	r3, r0
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	fbb1 f3f3 	udiv	r3, r1, r3
 800408a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 813f 	beq.w	8004316 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	333d      	adds	r3, #61	@ 0x3d
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	f083 0301 	eor.w	r3, r3, #1
 80040b0:	b2d8      	uxtb	r0, r3
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	333d      	adds	r3, #61	@ 0x3d
 80040c0:	4602      	mov	r2, r0
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e127      	b.n	8004316 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334d      	adds	r3, #77	@ 0x4d
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d120      	bne.n	800411e <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	334d      	adds	r3, #77	@ 0x4d
 80040ec:	2202      	movs	r2, #2
 80040ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	331b      	adds	r3, #27
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	f040 8107 	bne.w	8004316 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	334c      	adds	r3, #76	@ 0x4c
 8004118:	2202      	movs	r2, #2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e0fb      	b.n	8004316 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334d      	adds	r3, #77	@ 0x4d
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d13a      	bne.n	80041aa <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	334d      	adds	r3, #77	@ 0x4d
 8004144:	2202      	movs	r2, #2
 8004146:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	334c      	adds	r3, #76	@ 0x4c
 8004158:	2202      	movs	r2, #2
 800415a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	331b      	adds	r3, #27
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 80d1 	bne.w	8004316 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	331b      	adds	r3, #27
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	0151      	lsls	r1, r2, #5
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	440a      	add	r2, r1
 800419e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a6:	6053      	str	r3, [r2, #4]
 80041a8:	e0b5      	b.n	8004316 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	334d      	adds	r3, #77	@ 0x4d
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d114      	bne.n	80041ea <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	@ 0x4d
 80041d0:	2202      	movs	r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	334c      	adds	r3, #76	@ 0x4c
 80041e4:	2202      	movs	r2, #2
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e095      	b.n	8004316 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334d      	adds	r3, #77	@ 0x4d
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b06      	cmp	r3, #6
 80041fe:	d114      	bne.n	800422a <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334d      	adds	r3, #77	@ 0x4d
 8004210:	2202      	movs	r2, #2
 8004212:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	334c      	adds	r3, #76	@ 0x4c
 8004224:	2205      	movs	r2, #5
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	e075      	b.n	8004316 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	334d      	adds	r3, #77	@ 0x4d
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b07      	cmp	r3, #7
 800423e:	d00a      	beq.n	8004256 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	334d      	adds	r3, #77	@ 0x4d
 8004250:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004252:	2b09      	cmp	r3, #9
 8004254:	d170      	bne.n	8004338 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	334d      	adds	r3, #77	@ 0x4d
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3344      	adds	r3, #68	@ 0x44
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	1c59      	adds	r1, r3, #1
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4403      	add	r3, r0
 800428a:	3344      	adds	r3, #68	@ 0x44
 800428c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3344      	adds	r3, #68	@ 0x44
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d914      	bls.n	80042ce <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3344      	adds	r3, #68	@ 0x44
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	334c      	adds	r3, #76	@ 0x4c
 80042c8:	2204      	movs	r2, #4
 80042ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042cc:	e022      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	334c      	adds	r3, #76	@ 0x4c
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042f8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004300:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004314:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	334c      	adds	r3, #76	@ 0x4c
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f005 fe41 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004332:	e002      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004334:	bf00      	nop
 8004336:	e000      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004338:	bf00      	nop
  }
}
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	@ 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	0c5b      	lsrs	r3, r3, #17
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004374:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d004      	beq.n	8004386 <HCD_RXQLVL_IRQHandler+0x46>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b05      	cmp	r3, #5
 8004380:	f000 80b6 	beq.w	80044f0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004384:	e0b7      	b.n	80044f6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80b3 	beq.w	80044f4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	332c      	adds	r3, #44	@ 0x2c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80a7 	beq.w	80044f4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3338      	adds	r3, #56	@ 0x38
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	18d1      	adds	r1, r2, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4403      	add	r3, r0
 80043ca:	3334      	adds	r3, #52	@ 0x34
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4299      	cmp	r1, r3
 80043d0:	f200 8083 	bhi.w	80044da <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	332c      	adds	r3, #44	@ 0x2c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	b292      	uxth	r2, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	f004 f9c0 	bl	8008774 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	332c      	adds	r3, #44	@ 0x2c
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	18d1      	adds	r1, r2, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4403      	add	r3, r0
 8004418:	332c      	adds	r3, #44	@ 0x2c
 800441a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3338      	adds	r3, #56	@ 0x38
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	18d1      	adds	r1, r2, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4403      	add	r3, r0
 8004440:	3338      	adds	r3, #56	@ 0x38
 8004442:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	0cdb      	lsrs	r3, r3, #19
 8004454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004458:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3328      	adds	r3, #40	@ 0x28
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4293      	cmp	r3, r2
 8004472:	d13f      	bne.n	80044f4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03c      	beq.n	80044f4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004490:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004498:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	333c      	adds	r3, #60	@ 0x3c
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	f083 0301 	eor.w	r3, r3, #1
 80044c2:	b2d8      	uxtb	r0, r3
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	333c      	adds	r3, #60	@ 0x3c
 80044d4:	4602      	mov	r2, r0
 80044d6:	701a      	strb	r2, [r3, #0]
      break;
 80044d8:	e00c      	b.n	80044f4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	334c      	adds	r3, #76	@ 0x4c
 80044ea:	2204      	movs	r2, #4
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e001      	b.n	80044f4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044f4:	bf00      	nop
  }
}
 80044f6:	bf00      	nop
 80044f8:	3728      	adds	r7, #40	@ 0x28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800452a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d10b      	bne.n	800454e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f005 fd1b 	bl	8009f7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d132      	bne.n	80045be <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f043 0308 	orr.w	r3, r3, #8
 800455e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d126      	bne.n	80045b8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7a5b      	ldrb	r3, [r3, #9]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d113      	bne.n	800459a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800457c:	d106      	bne.n	800458c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2102      	movs	r1, #2
 8004584:	4618      	mov	r0, r3
 8004586:	f004 f98f 	bl	80088a8 <USB_InitFSLSPClkSel>
 800458a:	e011      	b.n	80045b0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f004 f988 	bl	80088a8 <USB_InitFSLSPClkSel>
 8004598:	e00a      	b.n	80045b0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	79db      	ldrb	r3, [r3, #7]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d106      	bne.n	80045b0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045a8:	461a      	mov	r2, r3
 80045aa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80045ae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f005 fd11 	bl	8009fd8 <HAL_HCD_PortEnabled_Callback>
 80045b6:	e002      	b.n	80045be <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f005 fd1b 	bl	8009ff4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d103      	bne.n	80045d0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f043 0320 	orr.w	r3, r3, #32
 80045ce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6013      	str	r3, [r2, #0]
}
 80045dc:	bf00      	nop
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e12b      	b.n	800484e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fe0e 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	@ 0x24
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004648:	f002 f844 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 800464c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a81      	ldr	r2, [pc, #516]	@ (8004858 <HAL_I2C_Init+0x274>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d807      	bhi.n	8004668 <HAL_I2C_Init+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a80      	ldr	r2, [pc, #512]	@ (800485c <HAL_I2C_Init+0x278>)
 800465c:	4293      	cmp	r3, r2
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e006      	b.n	8004676 <HAL_I2C_Init+0x92>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a7d      	ldr	r2, [pc, #500]	@ (8004860 <HAL_I2C_Init+0x27c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0e7      	b.n	800484e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a78      	ldr	r2, [pc, #480]	@ (8004864 <HAL_I2C_Init+0x280>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004858 <HAL_I2C_Init+0x274>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d802      	bhi.n	80046b8 <HAL_I2C_Init+0xd4>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	e009      	b.n	80046cc <HAL_I2C_Init+0xe8>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	4a69      	ldr	r2, [pc, #420]	@ (8004868 <HAL_I2C_Init+0x284>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	3301      	adds	r3, #1
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	495c      	ldr	r1, [pc, #368]	@ (8004858 <HAL_I2C_Init+0x274>)
 80046e8:	428b      	cmp	r3, r1
 80046ea:	d819      	bhi.n	8004720 <HAL_I2C_Init+0x13c>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e59      	subs	r1, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004700:	400b      	ands	r3, r1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_I2C_Init+0x138>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e59      	subs	r1, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fbb1 f3f3 	udiv	r3, r1, r3
 8004714:	3301      	adds	r3, #1
 8004716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471a:	e051      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 800471c:	2304      	movs	r3, #4
 800471e:	e04f      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d111      	bne.n	800474c <HAL_I2C_Init+0x168>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e012      	b.n	8004772 <HAL_I2C_Init+0x18e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Init+0x196>
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10e      	bne.n	80047a0 <HAL_I2C_Init+0x1bc>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1e58      	subs	r0, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	440b      	add	r3, r1
 8004790:	fbb0 f3f3 	udiv	r3, r0, r3
 8004794:	3301      	adds	r3, #1
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800479e:	e00f      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	0099      	lsls	r1, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6809      	ldr	r1, [r1, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6911      	ldr	r1, [r2, #16]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	4311      	orrs	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	430b      	orrs	r3, r1
 8004802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	000186a0 	.word	0x000186a0
 800485c:	001e847f 	.word	0x001e847f
 8004860:	003d08ff 	.word	0x003d08ff
 8004864:	431bde83 	.word	0x431bde83
 8004868:	10624dd3 	.word	0x10624dd3

0800486c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	460b      	mov	r3, r1
 8004880:	813b      	strh	r3, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004886:	f7fd f9cf 	bl	8001c28 <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	f040 80d9 	bne.w	8004a4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2319      	movs	r3, #25
 80048a0:	2201      	movs	r2, #1
 80048a2:	496d      	ldr	r1, [pc, #436]	@ (8004a58 <HAL_I2C_Mem_Write+0x1ec>)
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fc8b 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0cc      	b.n	8004a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_I2C_Mem_Write+0x56>
 80048be:	2302      	movs	r3, #2
 80048c0:	e0c5      	b.n	8004a4e <HAL_I2C_Mem_Write+0x1e2>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d007      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2221      	movs	r2, #33	@ 0x21
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2240      	movs	r2, #64	@ 0x40
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a4d      	ldr	r2, [pc, #308]	@ (8004a5c <HAL_I2C_Mem_Write+0x1f0>)
 8004928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800492a:	88f8      	ldrh	r0, [r7, #6]
 800492c:	893a      	ldrh	r2, [r7, #8]
 800492e:	8979      	ldrh	r1, [r7, #10]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4603      	mov	r3, r0
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fac2 	bl	8004ec4 <I2C_RequestMemoryWrite>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d052      	beq.n	80049ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e081      	b.n	8004a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fd50 	bl	80053f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2b04      	cmp	r3, #4
 8004960:	d107      	bne.n	8004972 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06b      	b.n	8004a4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d11b      	bne.n	80049ec <HAL_I2C_Mem_Write+0x180>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d017      	beq.n	80049ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1aa      	bne.n	800494a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fd43 	bl	8005484 <I2C_WaitOnBTFFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d107      	bne.n	8004a1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e016      	b.n	8004a4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	00100002 	.word	0x00100002
 8004a5c:	ffff0000 	.word	0xffff0000

08004a60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	@ 0x30
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a7a:	f7fd f8d5 	bl	8001c28 <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	f040 8214 	bne.w	8004eb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2319      	movs	r3, #25
 8004a94:	2201      	movs	r2, #1
 8004a96:	497b      	ldr	r1, [pc, #492]	@ (8004c84 <HAL_I2C_Mem_Read+0x224>)
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fb91 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e207      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Mem_Read+0x56>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e200      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d007      	beq.n	8004adc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2222      	movs	r2, #34	@ 0x22
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2240      	movs	r2, #64	@ 0x40
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004c88 <HAL_I2C_Mem_Read+0x228>)
 8004b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b1e:	88f8      	ldrh	r0, [r7, #6]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	8979      	ldrh	r1, [r7, #10]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fa5e 	bl	8004ff0 <I2C_RequestMemoryRead>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1bc      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d113      	bne.n	8004b6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e190      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d11b      	bne.n	8004bae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e170      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d11b      	bne.n	8004bee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	e150      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c04:	e144      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	f200 80f1 	bhi.w	8004df2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d123      	bne.n	8004c60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fc79 	bl	8005514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e145      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c5e:	e117      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d14e      	bne.n	8004d06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6e:	2200      	movs	r2, #0
 8004c70:	4906      	ldr	r1, [pc, #24]	@ (8004c8c <HAL_I2C_Mem_Read+0x22c>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 faa4 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e11a      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
 8004c82:	bf00      	nop
 8004c84:	00100002 	.word	0x00100002
 8004c88:	ffff0000 	.word	0xffff0000
 8004c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d04:	e0c4      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	496c      	ldr	r1, [pc, #432]	@ (8004ec0 <HAL_I2C_Mem_Read+0x460>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fa55 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0cb      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4955      	ldr	r1, [pc, #340]	@ (8004ec0 <HAL_I2C_Mem_Read+0x460>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fa27 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e09d      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004df0:	e04e      	b.n	8004e90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fb8c 	bl	8005514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e058      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d124      	bne.n	8004e90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d107      	bne.n	8004e5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f47f aeb6 	bne.w	8004c06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3728      	adds	r7, #40	@ 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	00010004 	.word	0x00010004

08004ec4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f960 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f14:	d103      	bne.n	8004f1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e05f      	b.n	8004fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	492d      	ldr	r1, [pc, #180]	@ (8004fec <I2C_RequestMemoryWrite+0x128>)
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f9bb 	bl	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e04c      	b.n	8004fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fa46 	bl	80053f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d107      	bne.n	8004f86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e02b      	b.n	8004fe2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]
 8004f9a:	e021      	b.n	8004fe0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f9c:	893b      	ldrh	r3, [r7, #8]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fa20 	bl	80053f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d107      	bne.n	8004fd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e005      	b.n	8004fe2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd6:	893b      	ldrh	r3, [r7, #8]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	00010002 	.word	0x00010002

08004ff0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	817b      	strh	r3, [r7, #10]
 8005002:	460b      	mov	r3, r1
 8005004:	813b      	strh	r3, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005018:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2200      	movs	r2, #0
 8005032:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8c2 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005050:	d103      	bne.n	800505a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005058:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0aa      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800505e:	897b      	ldrh	r3, [r7, #10]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800506c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	4952      	ldr	r1, [pc, #328]	@ (80051bc <I2C_RequestMemoryRead+0x1cc>)
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f91d 	bl	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e097      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509c:	6a39      	ldr	r1, [r7, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f9a8 	bl	80053f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d107      	bne.n	80050c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e076      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050cc:	893b      	ldrh	r3, [r7, #8]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]
 80050d6:	e021      	b.n	800511c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050d8:	893b      	ldrh	r3, [r7, #8]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	b29b      	uxth	r3, r3
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f982 	bl	80053f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d107      	bne.n	800510e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e050      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005112:	893b      	ldrh	r3, [r7, #8]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511e:	6a39      	ldr	r1, [r7, #32]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f967 	bl	80053f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	2b04      	cmp	r3, #4
 8005132:	d107      	bne.n	8005144 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005142:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e035      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005156:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2200      	movs	r2, #0
 8005160:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f82b 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517e:	d103      	bne.n	8005188 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e013      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800518c:	897b      	ldrh	r3, [r7, #10]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	b2da      	uxtb	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	4906      	ldr	r1, [pc, #24]	@ (80051bc <I2C_RequestMemoryRead+0x1cc>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f886 	bl	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	00010002 	.word	0x00010002

080051c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d0:	e048      	b.n	8005264 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d044      	beq.n	8005264 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fc fd25 	bl	8001c28 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d139      	bne.n	8005264 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10d      	bne.n	8005216 <I2C_WaitOnFlagUntilTimeout+0x56>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	43da      	mvns	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4013      	ands	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	e00c      	b.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	43da      	mvns	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	429a      	cmp	r2, r3
 8005234:	d116      	bne.n	8005264 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e023      	b.n	80052ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10d      	bne.n	800528a <I2C_WaitOnFlagUntilTimeout+0xca>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	43da      	mvns	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	e00c      	b.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	43da      	mvns	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4013      	ands	r3, r2
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d093      	beq.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c2:	e071      	b.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d2:	d123      	bne.n	800531c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e067      	b.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d041      	beq.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005324:	f7fc fc80 	bl	8001c28 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d302      	bcc.n	800533a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d136      	bne.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10c      	bne.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	43da      	mvns	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e00b      	b.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	43da      	mvns	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4013      	ands	r3, r2
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d016      	beq.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e021      	b.n	80053ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	0c1b      	lsrs	r3, r3, #16
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10c      	bne.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	43da      	mvns	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4013      	ands	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e00b      	b.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f47f af6d 	bne.w	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005400:	e034      	b.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f8e3 	bl	80055ce <I2C_IsAcknowledgeFailed>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e034      	b.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d028      	beq.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fc fc05 	bl	8001c28 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11d      	bne.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543a:	2b80      	cmp	r3, #128	@ 0x80
 800543c:	d016      	beq.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e007      	b.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005476:	2b80      	cmp	r3, #128	@ 0x80
 8005478:	d1c3      	bne.n	8005402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005490:	e034      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f89b 	bl	80055ce <I2C_IsAcknowledgeFailed>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e034      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d028      	beq.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fc fbbd 	bl	8001c28 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11d      	bne.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d016      	beq.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e007      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d1c3      	bne.n	8005492 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005520:	e049      	b.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d119      	bne.n	8005564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0210 	mvn.w	r2, #16
 8005538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e030      	b.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fc fb60 	bl	8001c28 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11d      	bne.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b40      	cmp	r3, #64	@ 0x40
 8005586:	d016      	beq.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e007      	b.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c0:	2b40      	cmp	r3, #64	@ 0x40
 80055c2:	d1ae      	bne.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e4:	d11b      	bne.n	800561e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	d129      	bne.n	8005696 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2224      	movs	r2, #36	@ 0x24
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0210 	bic.w	r2, r2, #16
 8005668:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d12a      	bne.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2224      	movs	r2, #36	@ 0x24
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	f023 030f 	bic.w	r3, r3, #15
 80056e4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	89fa      	ldrh	r2, [r7, #14]
 80056f6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e0bf      	b.n	80058b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb fdd8 	bl	8001300 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005766:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6999      	ldr	r1, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800577c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6899      	ldr	r1, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b4a      	ldr	r3, [pc, #296]	@ (80058c0 <HAL_LTDC_Init+0x19c>)
 8005798:	400b      	ands	r3, r1
 800579a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6899      	ldr	r1, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68d9      	ldr	r1, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b3e      	ldr	r3, [pc, #248]	@ (80058c0 <HAL_LTDC_Init+0x19c>)
 80057c6:	400b      	ands	r3, r1
 80057c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68d9      	ldr	r1, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6919      	ldr	r1, [r3, #16]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_LTDC_Init+0x19c>)
 80057f4:	400b      	ands	r3, r1
 80057f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6919      	ldr	r1, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6959      	ldr	r1, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b27      	ldr	r3, [pc, #156]	@ (80058c0 <HAL_LTDC_Init+0x19c>)
 8005822:	400b      	ands	r3, r1
 8005824:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6959      	ldr	r1, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0206 	orr.w	r2, r2, #6
 8005892:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	f000f800 	.word	0xf000f800

080058c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d023      	beq.n	800592e <HAL_LTDC_IRQHandler+0x6a>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01e      	beq.n	800592e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2204      	movs	r2, #4
 8005906:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800590e:	f043 0201 	orr.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2204      	movs	r2, #4
 800591c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f86f 	bl	8005a0c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d023      	beq.n	8005980 <HAL_LTDC_IRQHandler+0xbc>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01e      	beq.n	8005980 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0202 	bic.w	r2, r2, #2
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2202      	movs	r2, #2
 8005958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005960:	f043 0202 	orr.w	r2, r3, #2
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2204      	movs	r2, #4
 800596e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f846 	bl	8005a0c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01b      	beq.n	80059c2 <HAL_LTDC_IRQHandler+0xfe>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d016      	beq.n	80059c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f82f 	bl	8005a20 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <HAL_LTDC_IRQHandler+0x140>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0208 	bic.w	r2, r2, #8
 80059e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2208      	movs	r2, #8
 80059ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f818 	bl	8005a34 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a48:	b5b0      	push	{r4, r5, r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_LTDC_ConfigLayer+0x1a>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e02c      	b.n	8005abc <HAL_LTDC_ConfigLayer+0x74>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2134      	movs	r1, #52	@ 0x34
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4614      	mov	r4, r2
 8005a86:	461d      	mov	r5, r3
 8005a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f811 	bl	8005ac4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bdb0      	pop	{r4, r5, r7, pc}

08005ac4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae0:	4413      	add	r3, r2
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	01db      	lsls	r3, r3, #7
 8005af0:	4413      	add	r3, r2
 8005af2:	3384      	adds	r3, #132	@ 0x84
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	4611      	mov	r1, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	01d2      	lsls	r2, r2, #7
 8005b00:	440a      	add	r2, r1
 8005b02:	3284      	adds	r2, #132	@ 0x84
 8005b04:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b1a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b1c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	01db      	lsls	r3, r3, #7
 8005b28:	440b      	add	r3, r1
 8005b2a:	3384      	adds	r3, #132	@ 0x84
 8005b2c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b42:	4413      	add	r3, r2
 8005b44:	041b      	lsls	r3, r3, #16
 8005b46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	01db      	lsls	r3, r3, #7
 8005b52:	4413      	add	r3, r2
 8005b54:	3384      	adds	r3, #132	@ 0x84
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	01d2      	lsls	r2, r2, #7
 8005b62:	440a      	add	r2, r1
 8005b64:	3284      	adds	r2, #132	@ 0x84
 8005b66:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b7a:	4413      	add	r3, r2
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	01db      	lsls	r3, r3, #7
 8005b88:	440b      	add	r3, r1
 8005b8a:	3384      	adds	r3, #132	@ 0x84
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	01db      	lsls	r3, r3, #7
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3384      	adds	r3, #132	@ 0x84
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	4611      	mov	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	01d2      	lsls	r2, r2, #7
 8005bae:	440a      	add	r2, r1
 8005bb0:	3284      	adds	r2, #132	@ 0x84
 8005bb2:	f023 0307 	bic.w	r3, r3, #7
 8005bb6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	01db      	lsls	r3, r3, #7
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3384      	adds	r3, #132	@ 0x84
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	061b      	lsls	r3, r3, #24
 8005be8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3384      	adds	r3, #132	@ 0x84
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	01db      	lsls	r3, r3, #7
 8005c04:	4413      	add	r3, r2
 8005c06:	3384      	adds	r3, #132	@ 0x84
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c14:	461a      	mov	r2, r3
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	01db      	lsls	r3, r3, #7
 8005c28:	440b      	add	r3, r1
 8005c2a:	3384      	adds	r3, #132	@ 0x84
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	01db      	lsls	r3, r3, #7
 8005c3e:	4413      	add	r3, r2
 8005c40:	3384      	adds	r3, #132	@ 0x84
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	01d2      	lsls	r2, r2, #7
 8005c4e:	440a      	add	r2, r1
 8005c50:	3284      	adds	r2, #132	@ 0x84
 8005c52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	01db      	lsls	r3, r3, #7
 8005c62:	4413      	add	r3, r2
 8005c64:	3384      	adds	r3, #132	@ 0x84
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	01db      	lsls	r3, r3, #7
 8005c78:	4413      	add	r3, r2
 8005c7a:	3384      	adds	r3, #132	@ 0x84
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	4611      	mov	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	01d2      	lsls	r2, r2, #7
 8005c88:	440a      	add	r2, r1
 8005c8a:	3284      	adds	r2, #132	@ 0x84
 8005c8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	6809      	ldr	r1, [r1, #0]
 8005ca2:	4608      	mov	r0, r1
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	01c9      	lsls	r1, r1, #7
 8005ca8:	4401      	add	r1, r0
 8005caa:	3184      	adds	r1, #132	@ 0x84
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	01db      	lsls	r3, r3, #7
 8005cba:	4413      	add	r3, r2
 8005cbc:	3384      	adds	r3, #132	@ 0x84
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	01db      	lsls	r3, r3, #7
 8005cca:	4413      	add	r3, r2
 8005ccc:	3384      	adds	r3, #132	@ 0x84
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	01db      	lsls	r3, r3, #7
 8005cde:	4413      	add	r3, r2
 8005ce0:	3384      	adds	r3, #132	@ 0x84
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e01b      	b.n	8005d30 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005d00:	2303      	movs	r3, #3
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	e014      	b.n	8005d30 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d00b      	beq.n	8005d26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d007      	beq.n	8005d26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d003      	beq.n	8005d26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d22:	2b07      	cmp	r3, #7
 8005d24:	d102      	bne.n	8005d2c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005d26:	2302      	movs	r3, #2
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	e001      	b.n	8005d30 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	01db      	lsls	r3, r3, #7
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3384      	adds	r3, #132	@ 0x84
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	4611      	mov	r1, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	01d2      	lsls	r2, r2, #7
 8005d4a:	440a      	add	r2, r1
 8005d4c:	3284      	adds	r2, #132	@ 0x84
 8005d4e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	fb02 f303 	mul.w	r3, r2, r3
 8005d5e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	1acb      	subs	r3, r1, r3
 8005d6a:	69f9      	ldr	r1, [r7, #28]
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	6809      	ldr	r1, [r1, #0]
 8005d76:	4608      	mov	r0, r1
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	01c9      	lsls	r1, r1, #7
 8005d7c:	4401      	add	r1, r0
 8005d7e:	3184      	adds	r1, #132	@ 0x84
 8005d80:	4313      	orrs	r3, r2
 8005d82:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	01db      	lsls	r3, r3, #7
 8005d8e:	4413      	add	r3, r2
 8005d90:	3384      	adds	r3, #132	@ 0x84
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	01d2      	lsls	r2, r2, #7
 8005d9e:	440a      	add	r2, r1
 8005da0:	3284      	adds	r2, #132	@ 0x84
 8005da2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	01db      	lsls	r3, r3, #7
 8005db6:	4413      	add	r3, r2
 8005db8:	3384      	adds	r3, #132	@ 0x84
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	01db      	lsls	r3, r3, #7
 8005dcc:	4413      	add	r3, r2
 8005dce:	3384      	adds	r3, #132	@ 0x84
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	01d2      	lsls	r2, r2, #7
 8005ddc:	440a      	add	r2, r1
 8005dde:	3284      	adds	r2, #132	@ 0x84
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	6013      	str	r3, [r2, #0]
}
 8005de6:	bf00      	nop
 8005de8:	3724      	adds	r7, #36	@ 0x24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e267      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d075      	beq.n	8005efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e12:	4b88      	ldr	r3, [pc, #544]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d00c      	beq.n	8005e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b85      	ldr	r3, [pc, #532]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d112      	bne.n	8005e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2a:	4b82      	ldr	r3, [pc, #520]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e36:	d10b      	bne.n	8005e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	4b7e      	ldr	r3, [pc, #504]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05b      	beq.n	8005efc <HAL_RCC_OscConfig+0x108>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d157      	bne.n	8005efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e242      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d106      	bne.n	8005e68 <HAL_RCC_OscConfig+0x74>
 8005e5a:	4b76      	ldr	r3, [pc, #472]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a75      	ldr	r2, [pc, #468]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e01d      	b.n	8005ea4 <HAL_RCC_OscConfig+0xb0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e70:	d10c      	bne.n	8005e8c <HAL_RCC_OscConfig+0x98>
 8005e72:	4b70      	ldr	r3, [pc, #448]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6f      	ldr	r2, [pc, #444]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a6c      	ldr	r2, [pc, #432]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e00b      	b.n	8005ea4 <HAL_RCC_OscConfig+0xb0>
 8005e8c:	4b69      	ldr	r3, [pc, #420]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a68      	ldr	r2, [pc, #416]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	4b66      	ldr	r3, [pc, #408]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a65      	ldr	r2, [pc, #404]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d013      	beq.n	8005ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eac:	f7fb febc 	bl	8001c28 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb4:	f7fb feb8 	bl	8001c28 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	@ 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e207      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0xc0>
 8005ed2:	e014      	b.n	8005efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fb fea8 	bl	8001c28 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005edc:	f7fb fea4 	bl	8001c28 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b64      	cmp	r3, #100	@ 0x64
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e1f3      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eee:	4b51      	ldr	r3, [pc, #324]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0xe8>
 8005efa:	e000      	b.n	8005efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d063      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f16:	4b47      	ldr	r3, [pc, #284]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d11c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f22:	4b44      	ldr	r3, [pc, #272]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d116      	bne.n	8005f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2e:	4b41      	ldr	r3, [pc, #260]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_RCC_OscConfig+0x152>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d001      	beq.n	8005f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e1c7      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f46:	4b3b      	ldr	r3, [pc, #236]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4937      	ldr	r1, [pc, #220]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5a:	e03a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d020      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f64:	4b34      	ldr	r3, [pc, #208]	@ (8006038 <HAL_RCC_OscConfig+0x244>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6a:	f7fb fe5d 	bl	8001c28 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f72:	f7fb fe59 	bl	8001c28 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e1a8      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f84:	4b2b      	ldr	r3, [pc, #172]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f90:	4b28      	ldr	r3, [pc, #160]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4925      	ldr	r1, [pc, #148]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]
 8005fa4:	e015      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa6:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <HAL_RCC_OscConfig+0x244>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fb fe3c 	bl	8001c28 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb4:	f7fb fe38 	bl	8001c28 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e187      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d036      	beq.n	800604c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d016      	beq.n	8006014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <HAL_RCC_OscConfig+0x248>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fb fe1c 	bl	8001c28 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff4:	f7fb fe18 	bl	8001c28 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e167      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8006008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x200>
 8006012:	e01b      	b.n	800604c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006014:	4b09      	ldr	r3, [pc, #36]	@ (800603c <HAL_RCC_OscConfig+0x248>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800601a:	f7fb fe05 	bl	8001c28 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006020:	e00e      	b.n	8006040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006022:	f7fb fe01 	bl	8001c28 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d907      	bls.n	8006040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e150      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
 8006034:	40023800 	.word	0x40023800
 8006038:	42470000 	.word	0x42470000
 800603c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006040:	4b88      	ldr	r3, [pc, #544]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1ea      	bne.n	8006022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8097 	beq.w	8006188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800605a:	2300      	movs	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800605e:	4b81      	ldr	r3, [pc, #516]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	4b7d      	ldr	r3, [pc, #500]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	4a7c      	ldr	r2, [pc, #496]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006078:	6413      	str	r3, [r2, #64]	@ 0x40
 800607a:	4b7a      	ldr	r3, [pc, #488]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006086:	2301      	movs	r3, #1
 8006088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608a:	4b77      	ldr	r3, [pc, #476]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d118      	bne.n	80060c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006096:	4b74      	ldr	r3, [pc, #464]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a73      	ldr	r2, [pc, #460]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 800609c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060a2:	f7fb fdc1 	bl	8001c28 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060aa:	f7fb fdbd 	bl	8001c28 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e10c      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d106      	bne.n	80060de <HAL_RCC_OscConfig+0x2ea>
 80060d0:	4b64      	ldr	r3, [pc, #400]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a63      	ldr	r2, [pc, #396]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
 80060dc:	e01c      	b.n	8006118 <HAL_RCC_OscConfig+0x324>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d10c      	bne.n	8006100 <HAL_RCC_OscConfig+0x30c>
 80060e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060ec:	f043 0304 	orr.w	r3, r3, #4
 80060f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060fe:	e00b      	b.n	8006118 <HAL_RCC_OscConfig+0x324>
 8006100:	4b58      	ldr	r3, [pc, #352]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a57      	ldr	r2, [pc, #348]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
 800610c:	4b55      	ldr	r3, [pc, #340]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	4a54      	ldr	r2, [pc, #336]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006112:	f023 0304 	bic.w	r3, r3, #4
 8006116:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fb fd82 	bl	8001c28 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006126:	e00a      	b.n	800613e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006128:	f7fb fd7e 	bl	8001c28 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006136:	4293      	cmp	r3, r2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e0cb      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613e:	4b49      	ldr	r3, [pc, #292]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0ee      	beq.n	8006128 <HAL_RCC_OscConfig+0x334>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614c:	f7fb fd6c 	bl	8001c28 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006152:	e00a      	b.n	800616a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006154:	f7fb fd68 	bl	8001c28 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0b5      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616a:	4b3e      	ldr	r3, [pc, #248]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800616c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1ee      	bne.n	8006154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d105      	bne.n	8006188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800617c:	4b39      	ldr	r3, [pc, #228]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	4a38      	ldr	r2, [pc, #224]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006186:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80a1 	beq.w	80062d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006192:	4b34      	ldr	r3, [pc, #208]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b08      	cmp	r3, #8
 800619c:	d05c      	beq.n	8006258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d141      	bne.n	800622a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	4b31      	ldr	r3, [pc, #196]	@ (800626c <HAL_RCC_OscConfig+0x478>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fb fd3c 	bl	8001c28 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fb fd38 	bl	8001c28 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e087      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c6:	4b27      	ldr	r3, [pc, #156]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	3b01      	subs	r3, #1
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	491b      	ldr	r1, [pc, #108]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fc:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <HAL_RCC_OscConfig+0x478>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006202:	f7fb fd11 	bl	8001c28 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620a:	f7fb fd0d 	bl	8001c28 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e05c      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621c:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x416>
 8006228:	e054      	b.n	80062d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <HAL_RCC_OscConfig+0x478>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fb fcfa 	bl	8001c28 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006238:	f7fb fcf6 	bl	8001c28 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e045      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x444>
 8006256:	e03d      	b.n	80062d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d107      	bne.n	8006270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e038      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
 8006264:	40023800 	.word	0x40023800
 8006268:	40007000 	.word	0x40007000
 800626c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006270:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <HAL_RCC_OscConfig+0x4ec>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d028      	beq.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006288:	429a      	cmp	r2, r3
 800628a:	d121      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d11a      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062a0:	4013      	ands	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d111      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	3b01      	subs	r3, #1
 80062ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d107      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d001      	beq.n	80062d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40023800 	.word	0x40023800

080062e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0cc      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b68      	ldr	r3, [pc, #416]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d90c      	bls.n	8006320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b65      	ldr	r3, [pc, #404]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800630e:	4b63      	ldr	r3, [pc, #396]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d001      	beq.n	8006320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0b8      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d020      	beq.n	800636e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006338:	4b59      	ldr	r3, [pc, #356]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4a58      	ldr	r2, [pc, #352]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006350:	4b53      	ldr	r3, [pc, #332]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a52      	ldr	r2, [pc, #328]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800635a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800635c:	4b50      	ldr	r3, [pc, #320]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	494d      	ldr	r1, [pc, #308]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	4313      	orrs	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d044      	beq.n	8006404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006382:	4b47      	ldr	r3, [pc, #284]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d119      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e07f      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d003      	beq.n	80063a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a2:	4b3f      	ldr	r3, [pc, #252]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e06f      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b2:	4b3b      	ldr	r3, [pc, #236]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e067      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c2:	4b37      	ldr	r3, [pc, #220]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4934      	ldr	r1, [pc, #208]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d4:	f7fb fc28 	bl	8001c28 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fb fc24 	bl	8001c28 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e04f      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	4b2b      	ldr	r3, [pc, #172]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 020c 	and.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d1eb      	bne.n	80063dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b25      	ldr	r3, [pc, #148]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d20c      	bcs.n	800642c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b22      	ldr	r3, [pc, #136]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b20      	ldr	r3, [pc, #128]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e032      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006438:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4916      	ldr	r1, [pc, #88]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	4313      	orrs	r3, r2
 8006448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006456:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	490e      	ldr	r1, [pc, #56]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800646a:	f000 f821 	bl	80064b0 <HAL_RCC_GetSysClockFreq>
 800646e:	4602      	mov	r2, r0
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	091b      	lsrs	r3, r3, #4
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	490a      	ldr	r1, [pc, #40]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 800647c:	5ccb      	ldrb	r3, [r1, r3]
 800647e:	fa22 f303 	lsr.w	r3, r2, r3
 8006482:	4a09      	ldr	r2, [pc, #36]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <HAL_RCC_ClockConfig+0x1c8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fb fa12 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40023c00 	.word	0x40023c00
 80064a0:	40023800 	.word	0x40023800
 80064a4:	0800b088 	.word	0x0800b088
 80064a8:	20000000 	.word	0x20000000
 80064ac:	20000004 	.word	0x20000004

080064b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b4:	b094      	sub	sp, #80	@ 0x50
 80064b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80064bc:	2300      	movs	r3, #0
 80064be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c0:	2300      	movs	r3, #0
 80064c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064c8:	4b79      	ldr	r3, [pc, #484]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 030c 	and.w	r3, r3, #12
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d00d      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x40>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	f200 80e1 	bhi.w	800669c <HAL_RCC_GetSysClockFreq+0x1ec>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x34>
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d003      	beq.n	80064ea <HAL_RCC_GetSysClockFreq+0x3a>
 80064e2:	e0db      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064e4:	4b73      	ldr	r3, [pc, #460]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80064e6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80064e8:	e0db      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ea:	4b73      	ldr	r3, [pc, #460]	@ (80066b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80064ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064ee:	e0d8      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064f0:	4b6f      	ldr	r3, [pc, #444]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064fa:	4b6d      	ldr	r3, [pc, #436]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d063      	beq.n	80065ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006506:	4b6a      	ldr	r3, [pc, #424]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	099b      	lsrs	r3, r3, #6
 800650c:	2200      	movs	r2, #0
 800650e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006510:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006518:	633b      	str	r3, [r7, #48]	@ 0x30
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	@ 0x34
 800651e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006522:	4622      	mov	r2, r4
 8006524:	462b      	mov	r3, r5
 8006526:	f04f 0000 	mov.w	r0, #0
 800652a:	f04f 0100 	mov.w	r1, #0
 800652e:	0159      	lsls	r1, r3, #5
 8006530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006534:	0150      	lsls	r0, r2, #5
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4621      	mov	r1, r4
 800653c:	1a51      	subs	r1, r2, r1
 800653e:	6139      	str	r1, [r7, #16]
 8006540:	4629      	mov	r1, r5
 8006542:	eb63 0301 	sbc.w	r3, r3, r1
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006554:	4659      	mov	r1, fp
 8006556:	018b      	lsls	r3, r1, #6
 8006558:	4651      	mov	r1, sl
 800655a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800655e:	4651      	mov	r1, sl
 8006560:	018a      	lsls	r2, r1, #6
 8006562:	4651      	mov	r1, sl
 8006564:	ebb2 0801 	subs.w	r8, r2, r1
 8006568:	4659      	mov	r1, fp
 800656a:	eb63 0901 	sbc.w	r9, r3, r1
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800657a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800657e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006582:	4690      	mov	r8, r2
 8006584:	4699      	mov	r9, r3
 8006586:	4623      	mov	r3, r4
 8006588:	eb18 0303 	adds.w	r3, r8, r3
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	462b      	mov	r3, r5
 8006590:	eb49 0303 	adc.w	r3, r9, r3
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065a2:	4629      	mov	r1, r5
 80065a4:	024b      	lsls	r3, r1, #9
 80065a6:	4621      	mov	r1, r4
 80065a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065ac:	4621      	mov	r1, r4
 80065ae:	024a      	lsls	r2, r1, #9
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b6:	2200      	movs	r2, #0
 80065b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065c0:	f7f9 fe66 	bl	8000290 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4613      	mov	r3, r2
 80065ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065cc:	e058      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ce:	4b38      	ldr	r3, [pc, #224]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	2200      	movs	r2, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	4611      	mov	r1, r2
 80065da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	2300      	movs	r3, #0
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	f04f 0000 	mov.w	r0, #0
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	0159      	lsls	r1, r3, #5
 80065f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065fa:	0150      	lsls	r0, r2, #5
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4641      	mov	r1, r8
 8006602:	ebb2 0a01 	subs.w	sl, r2, r1
 8006606:	4649      	mov	r1, r9
 8006608:	eb63 0b01 	sbc.w	fp, r3, r1
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800661c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006620:	ebb2 040a 	subs.w	r4, r2, sl
 8006624:	eb63 050b 	sbc.w	r5, r3, fp
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	00eb      	lsls	r3, r5, #3
 8006632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006636:	00e2      	lsls	r2, r4, #3
 8006638:	4614      	mov	r4, r2
 800663a:	461d      	mov	r5, r3
 800663c:	4643      	mov	r3, r8
 800663e:	18e3      	adds	r3, r4, r3
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	464b      	mov	r3, r9
 8006644:	eb45 0303 	adc.w	r3, r5, r3
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006656:	4629      	mov	r1, r5
 8006658:	028b      	lsls	r3, r1, #10
 800665a:	4621      	mov	r1, r4
 800665c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006660:	4621      	mov	r1, r4
 8006662:	028a      	lsls	r2, r1, #10
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666a:	2200      	movs	r2, #0
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	61fa      	str	r2, [r7, #28]
 8006670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006674:	f7f9 fe0c 	bl	8000290 <__aeabi_uldivmod>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4613      	mov	r3, r2
 800667e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006680:	4b0b      	ldr	r3, [pc, #44]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	3301      	adds	r3, #1
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006694:	fbb2 f3f3 	udiv	r3, r2, r3
 8006698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800669a:	e002      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800669c:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800669e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3750      	adds	r7, #80	@ 0x50
 80066a8:	46bd      	mov	sp, r7
 80066aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800
 80066b4:	00f42400 	.word	0x00f42400
 80066b8:	007a1200 	.word	0x007a1200

080066bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c0:	4b03      	ldr	r3, [pc, #12]	@ (80066d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066c2:	681b      	ldr	r3, [r3, #0]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000000 	.word	0x20000000

080066d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066d8:	f7ff fff0 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 80066dc:	4602      	mov	r2, r0
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	0a9b      	lsrs	r3, r3, #10
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	4903      	ldr	r1, [pc, #12]	@ (80066f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ea:	5ccb      	ldrb	r3, [r1, r3]
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40023800 	.word	0x40023800
 80066f8:	0800b098 	.word	0x0800b098

080066fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006700:	f7ff ffdc 	bl	80066bc <HAL_RCC_GetHCLKFreq>
 8006704:	4602      	mov	r2, r0
 8006706:	4b05      	ldr	r3, [pc, #20]	@ (800671c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	0b5b      	lsrs	r3, r3, #13
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	4903      	ldr	r1, [pc, #12]	@ (8006720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006712:	5ccb      	ldrb	r3, [r1, r3]
 8006714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006718:	4618      	mov	r0, r3
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40023800 	.word	0x40023800
 8006720:	0800b098 	.word	0x0800b098

08006724 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	220f      	movs	r2, #15
 8006732:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006734:	4b12      	ldr	r3, [pc, #72]	@ (8006780 <HAL_RCC_GetClockConfig+0x5c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0203 	and.w	r2, r3, #3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006740:	4b0f      	ldr	r3, [pc, #60]	@ (8006780 <HAL_RCC_GetClockConfig+0x5c>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <HAL_RCC_GetClockConfig+0x5c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006758:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <HAL_RCC_GetClockConfig+0x5c>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	08db      	lsrs	r3, r3, #3
 800675e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006766:	4b07      	ldr	r3, [pc, #28]	@ (8006784 <HAL_RCC_GetClockConfig+0x60>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	601a      	str	r2, [r3, #0]
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40023800 	.word	0x40023800
 8006784:	40023c00 	.word	0x40023c00

08006788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10b      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d105      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d075      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067bc:	4b91      	ldr	r3, [pc, #580]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067c2:	f7fb fa31 	bl	8001c28 <HAL_GetTick>
 80067c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067ca:	f7fb fa2d 	bl	8001c28 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e189      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	019a      	lsls	r2, r3, #6
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	071b      	lsls	r3, r3, #28
 8006800:	4981      	ldr	r1, [pc, #516]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01f      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006814:	4b7c      	ldr	r3, [pc, #496]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681a:	0f1b      	lsrs	r3, r3, #28
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	019a      	lsls	r2, r3, #6
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	431a      	orrs	r2, r3
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	071b      	lsls	r3, r3, #28
 8006834:	4974      	ldr	r1, [pc, #464]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800683c:	4b72      	ldr	r3, [pc, #456]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800683e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006842:	f023 021f 	bic.w	r2, r3, #31
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	3b01      	subs	r3, #1
 800684c:	496e      	ldr	r1, [pc, #440]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00d      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	019a      	lsls	r2, r3, #6
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	061b      	lsls	r3, r3, #24
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	071b      	lsls	r3, r3, #28
 8006874:	4964      	ldr	r1, [pc, #400]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800687c:	4b61      	ldr	r3, [pc, #388]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006882:	f7fb f9d1 	bl	8001c28 <HAL_GetTick>
 8006886:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006888:	e008      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800688a:	f7fb f9cd 	bl	8001c28 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e129      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800689c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d079      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068c0:	4b52      	ldr	r3, [pc, #328]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068c6:	f7fb f9af 	bl	8001c28 <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068ce:	f7fb f9ab 	bl	8001c28 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e107      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068e0:	4b49      	ldr	r3, [pc, #292]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ec:	d0ef      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d020      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068fa:	4b43      	ldr	r3, [pc, #268]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006900:	0f1b      	lsrs	r3, r3, #28
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	019a      	lsls	r2, r3, #6
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	061b      	lsls	r3, r3, #24
 8006914:	431a      	orrs	r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	071b      	lsls	r3, r3, #28
 800691a:	493b      	ldr	r1, [pc, #236]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006922:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006928:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	3b01      	subs	r3, #1
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	4934      	ldr	r1, [pc, #208]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01e      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006948:	4b2f      	ldr	r3, [pc, #188]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800694a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694e:	0e1b      	lsrs	r3, r3, #24
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	019a      	lsls	r2, r3, #6
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	061b      	lsls	r3, r3, #24
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	071b      	lsls	r3, r3, #28
 8006968:	4927      	ldr	r1, [pc, #156]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006970:	4b25      	ldr	r3, [pc, #148]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006976:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	4922      	ldr	r1, [pc, #136]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006986:	4b21      	ldr	r3, [pc, #132]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800698c:	f7fb f94c 	bl	8001c28 <HAL_GetTick>
 8006990:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006994:	f7fb f948 	bl	8001c28 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e0a4      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069a6:	4b18      	ldr	r3, [pc, #96]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b2:	d1ef      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 808b 	beq.w	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	4b10      	ldr	r3, [pc, #64]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069de:	4b0c      	ldr	r3, [pc, #48]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ea:	f7fb f91d 	bl	8001c28 <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069f0:	e010      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069f2:	f7fb f919 	bl	8001c28 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d909      	bls.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e075      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006a04:	42470068 	.word	0x42470068
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	42470070 	.word	0x42470070
 8006a10:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a14:	4b38      	ldr	r3, [pc, #224]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0e8      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a20:	4b36      	ldr	r3, [pc, #216]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d02f      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d028      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a48:	4b2d      	ldr	r3, [pc, #180]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a54:	4a29      	ldr	r2, [pc, #164]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a5a:	4b28      	ldr	r3, [pc, #160]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d114      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a66:	f7fb f8df 	bl	8001c28 <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fb f8db 	bl	8001c28 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e035      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a84:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0ee      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a9c:	d10d      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006a9e:	4b17      	ldr	r3, [pc, #92]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aaa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab2:	4912      	ldr	r1, [pc, #72]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	608b      	str	r3, [r1, #8]
 8006ab8:	e005      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006aba:	4b10      	ldr	r3, [pc, #64]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	4a0f      	ldr	r2, [pc, #60]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ac4:	6093      	str	r3, [r2, #8]
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad2:	490a      	ldr	r1, [pc, #40]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006aea:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006aec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40007000 	.word	0x40007000
 8006afc:	40023800 	.word	0x40023800
 8006b00:	42470e40 	.word	0x42470e40
 8006b04:	424711e0 	.word	0x424711e0

08006b08 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e025      	b.n	8006b68 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fa feb5 	bl	80018a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f001 fccb 	bl	80084e4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	f001 fd20 	bl	800859e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e07b      	b.n	8006c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b92:	d009      	beq.n	8006ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	61da      	str	r2, [r3, #28]
 8006b9a:	e005      	b.n	8006ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fa fccc 	bl	8001560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2c:	ea42 0103 	orr.w	r1, r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f003 0104 	and.w	r1, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	f003 0210 	and.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e041      	b.n	8006d18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fa fca1 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f000 fc57 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d001      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e04e      	b.n	8006dd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a23      	ldr	r2, [pc, #140]	@ (8006de4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d022      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d62:	d01d      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1f      	ldr	r2, [pc, #124]	@ (8006de8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d018      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1e      	ldr	r2, [pc, #120]	@ (8006dec <HAL_TIM_Base_Start_IT+0xcc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00e      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1b      	ldr	r2, [pc, #108]	@ (8006df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d009      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_TIM_Base_Start_IT+0x80>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a18      	ldr	r2, [pc, #96]	@ (8006dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d111      	bne.n	8006dc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d010      	beq.n	8006dd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc2:	e007      	b.n	8006dd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40010400 	.word	0x40010400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40001800 	.word	0x40001800

08006e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e041      	b.n	8006e96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fa fc04 	bl	8001634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f000 fb98 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x24>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e022      	b.n	8006f0a <HAL_TIM_PWM_Start+0x6a>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d109      	bne.n	8006ede <HAL_TIM_PWM_Start+0x3e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e015      	b.n	8006f0a <HAL_TIM_PWM_Start+0x6a>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d109      	bne.n	8006ef8 <HAL_TIM_PWM_Start+0x58>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e008      	b.n	8006f0a <HAL_TIM_PWM_Start+0x6a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e07c      	b.n	800700c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0x82>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f20:	e013      	b.n	8006f4a <HAL_TIM_PWM_Start+0xaa>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0x92>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f30:	e00b      	b.n	8006f4a <HAL_TIM_PWM_Start+0xaa>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f40:	e003      	b.n	8006f4a <HAL_TIM_PWM_Start+0xaa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fe04 	bl	8007b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007014 <HAL_TIM_PWM_Start+0x174>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_TIM_PWM_Start+0xcc>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2c      	ldr	r2, [pc, #176]	@ (8007018 <HAL_TIM_PWM_Start+0x178>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIM_PWM_Start+0xd0>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <HAL_TIM_PWM_Start+0xd2>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a22      	ldr	r2, [pc, #136]	@ (8007014 <HAL_TIM_PWM_Start+0x174>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f98:	d01d      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800701c <HAL_TIM_PWM_Start+0x17c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007020 <HAL_TIM_PWM_Start+0x180>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8007024 <HAL_TIM_PWM_Start+0x184>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a16      	ldr	r2, [pc, #88]	@ (8007018 <HAL_TIM_PWM_Start+0x178>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a18      	ldr	r2, [pc, #96]	@ (8007028 <HAL_TIM_PWM_Start+0x188>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x136>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	@ (800702c <HAL_TIM_PWM_Start+0x18c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d111      	bne.n	8006ffa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b06      	cmp	r3, #6
 8006fe6:	d010      	beq.n	800700a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff8:	e007      	b.n	800700a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	40014000 	.word	0x40014000
 800702c:	40001800 	.word	0x40001800

08007030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d020      	beq.n	8007094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01b      	beq.n	8007094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0202 	mvn.w	r2, #2
 8007064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa5b 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 8007080:	e005      	b.n	800708e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa4d 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fa5e 	bl	800754a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d020      	beq.n	80070e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01b      	beq.n	80070e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0204 	mvn.w	r2, #4
 80070b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2202      	movs	r2, #2
 80070b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa35 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 80070cc:	e005      	b.n	80070da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa27 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa38 	bl	800754a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d020      	beq.n	800712c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01b      	beq.n	800712c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 0208 	mvn.w	r2, #8
 80070fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2204      	movs	r2, #4
 8007102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa0f 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 8007118:	e005      	b.n	8007126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa01 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa12 	bl	800754a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	d020      	beq.n	8007178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01b      	beq.n	8007178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0210 	mvn.w	r2, #16
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2208      	movs	r2, #8
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f9e9 	bl	8007536 <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9db 	bl	8007522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f9ec 	bl	800754a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0201 	mvn.w	r2, #1
 8007194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7f9 ff5a 	bl	8001050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd7c 	bl	8007cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9bd 	bl	800755e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0220 	mvn.w	r2, #32
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fd4e 	bl	8007ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800722a:	2302      	movs	r3, #2
 800722c:	e0ae      	b.n	800738c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b0c      	cmp	r3, #12
 800723a:	f200 809f 	bhi.w	800737c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007279 	.word	0x08007279
 8007248:	0800737d 	.word	0x0800737d
 800724c:	0800737d 	.word	0x0800737d
 8007250:	0800737d 	.word	0x0800737d
 8007254:	080072b9 	.word	0x080072b9
 8007258:	0800737d 	.word	0x0800737d
 800725c:	0800737d 	.word	0x0800737d
 8007260:	0800737d 	.word	0x0800737d
 8007264:	080072fb 	.word	0x080072fb
 8007268:	0800737d 	.word	0x0800737d
 800726c:	0800737d 	.word	0x0800737d
 8007270:	0800737d 	.word	0x0800737d
 8007274:	0800733b 	.word	0x0800733b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fa24 	bl	80076cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0208 	orr.w	r2, r2, #8
 8007292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0204 	bic.w	r2, r2, #4
 80072a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6999      	ldr	r1, [r3, #24]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	619a      	str	r2, [r3, #24]
      break;
 80072b6:	e064      	b.n	8007382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fa74 	bl	80077ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6999      	ldr	r1, [r3, #24]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	021a      	lsls	r2, r3, #8
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	619a      	str	r2, [r3, #24]
      break;
 80072f8:	e043      	b.n	8007382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fac9 	bl	8007898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0208 	orr.w	r2, r2, #8
 8007314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0204 	bic.w	r2, r2, #4
 8007324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69d9      	ldr	r1, [r3, #28]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	61da      	str	r2, [r3, #28]
      break;
 8007338:	e023      	b.n	8007382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fb1d 	bl	8007980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69d9      	ldr	r1, [r3, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	021a      	lsls	r2, r3, #8
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	61da      	str	r2, [r3, #28]
      break;
 800737a:	e002      	b.n	8007382 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
      break;
 8007380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_ConfigClockSource+0x1c>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e0b4      	b.n	800751a <HAL_TIM_ConfigClockSource+0x186>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e8:	d03e      	beq.n	8007468 <HAL_TIM_ConfigClockSource+0xd4>
 80073ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ee:	f200 8087 	bhi.w	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f6:	f000 8086 	beq.w	8007506 <HAL_TIM_ConfigClockSource+0x172>
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fe:	d87f      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b70      	cmp	r3, #112	@ 0x70
 8007402:	d01a      	beq.n	800743a <HAL_TIM_ConfigClockSource+0xa6>
 8007404:	2b70      	cmp	r3, #112	@ 0x70
 8007406:	d87b      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007408:	2b60      	cmp	r3, #96	@ 0x60
 800740a:	d050      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x11a>
 800740c:	2b60      	cmp	r3, #96	@ 0x60
 800740e:	d877      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007410:	2b50      	cmp	r3, #80	@ 0x50
 8007412:	d03c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0xfa>
 8007414:	2b50      	cmp	r3, #80	@ 0x50
 8007416:	d873      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007418:	2b40      	cmp	r3, #64	@ 0x40
 800741a:	d058      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x13a>
 800741c:	2b40      	cmp	r3, #64	@ 0x40
 800741e:	d86f      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007420:	2b30      	cmp	r3, #48	@ 0x30
 8007422:	d064      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15a>
 8007424:	2b30      	cmp	r3, #48	@ 0x30
 8007426:	d86b      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007428:	2b20      	cmp	r3, #32
 800742a:	d060      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15a>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d867      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d05c      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15a>
 8007434:	2b10      	cmp	r3, #16
 8007436:	d05a      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15a>
 8007438:	e062      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800744a:	f000 fb69 	bl	8007b20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800745c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	609a      	str	r2, [r3, #8]
      break;
 8007466:	e04f      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007478:	f000 fb52 	bl	8007b20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800748a:	609a      	str	r2, [r3, #8]
      break;
 800748c:	e03c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800749a:	461a      	mov	r2, r3
 800749c:	f000 fac6 	bl	8007a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2150      	movs	r1, #80	@ 0x50
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb1f 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80074ac:	e02c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 fae5 	bl	8007a8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2160      	movs	r1, #96	@ 0x60
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fb0f 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80074cc:	e01c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 faa6 	bl	8007a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2140      	movs	r1, #64	@ 0x40
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 faff 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80074ec:	e00c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f000 faf6 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80074fe:	e003      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
      break;
 8007504:	e000      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a46      	ldr	r2, [pc, #280]	@ (80076a0 <TIM_Base_SetConfig+0x12c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007592:	d00f      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a43      	ldr	r2, [pc, #268]	@ (80076a4 <TIM_Base_SetConfig+0x130>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00b      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a42      	ldr	r2, [pc, #264]	@ (80076a8 <TIM_Base_SetConfig+0x134>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a41      	ldr	r2, [pc, #260]	@ (80076ac <TIM_Base_SetConfig+0x138>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a40      	ldr	r2, [pc, #256]	@ (80076b0 <TIM_Base_SetConfig+0x13c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d108      	bne.n	80075c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a35      	ldr	r2, [pc, #212]	@ (80076a0 <TIM_Base_SetConfig+0x12c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d4:	d027      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a32      	ldr	r2, [pc, #200]	@ (80076a4 <TIM_Base_SetConfig+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d023      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a31      	ldr	r2, [pc, #196]	@ (80076a8 <TIM_Base_SetConfig+0x134>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01f      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a30      	ldr	r2, [pc, #192]	@ (80076ac <TIM_Base_SetConfig+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a2f      	ldr	r2, [pc, #188]	@ (80076b0 <TIM_Base_SetConfig+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d017      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a2e      	ldr	r2, [pc, #184]	@ (80076b4 <TIM_Base_SetConfig+0x140>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a2d      	ldr	r2, [pc, #180]	@ (80076b8 <TIM_Base_SetConfig+0x144>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00f      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a2c      	ldr	r2, [pc, #176]	@ (80076bc <TIM_Base_SetConfig+0x148>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a2b      	ldr	r2, [pc, #172]	@ (80076c0 <TIM_Base_SetConfig+0x14c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2a      	ldr	r2, [pc, #168]	@ (80076c4 <TIM_Base_SetConfig+0x150>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a29      	ldr	r2, [pc, #164]	@ (80076c8 <TIM_Base_SetConfig+0x154>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d108      	bne.n	8007638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a10      	ldr	r2, [pc, #64]	@ (80076a0 <TIM_Base_SetConfig+0x12c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a12      	ldr	r2, [pc, #72]	@ (80076b0 <TIM_Base_SetConfig+0x13c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	611a      	str	r2, [r3, #16]
  }
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40010400 	.word	0x40010400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800
 80076c0:	40001800 	.word	0x40001800
 80076c4:	40001c00 	.word	0x40001c00
 80076c8:	40002000 	.word	0x40002000

080076cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0201 	bic.w	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 0302 	bic.w	r3, r3, #2
 8007714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a20      	ldr	r2, [pc, #128]	@ (80077a4 <TIM_OC1_SetConfig+0xd8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_OC1_SetConfig+0x64>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1f      	ldr	r2, [pc, #124]	@ (80077a8 <TIM_OC1_SetConfig+0xdc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10c      	bne.n	800774a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0308 	bic.w	r3, r3, #8
 8007736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 0304 	bic.w	r3, r3, #4
 8007748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a15      	ldr	r2, [pc, #84]	@ (80077a4 <TIM_OC1_SetConfig+0xd8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d003      	beq.n	800775a <TIM_OC1_SetConfig+0x8e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a14      	ldr	r2, [pc, #80]	@ (80077a8 <TIM_OC1_SetConfig+0xdc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d111      	bne.n	800777e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	621a      	str	r2, [r3, #32]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40010400 	.word	0x40010400

080077ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f023 0210 	bic.w	r2, r3, #16
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0320 	bic.w	r3, r3, #32
 80077f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a22      	ldr	r2, [pc, #136]	@ (8007890 <TIM_OC2_SetConfig+0xe4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d003      	beq.n	8007814 <TIM_OC2_SetConfig+0x68>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a21      	ldr	r2, [pc, #132]	@ (8007894 <TIM_OC2_SetConfig+0xe8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d10d      	bne.n	8007830 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800781a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800782e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a17      	ldr	r2, [pc, #92]	@ (8007890 <TIM_OC2_SetConfig+0xe4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_OC2_SetConfig+0x94>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a16      	ldr	r2, [pc, #88]	@ (8007894 <TIM_OC2_SetConfig+0xe8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d113      	bne.n	8007868 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800784e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40010000 	.word	0x40010000
 8007894:	40010400 	.word	0x40010400

08007898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a21      	ldr	r2, [pc, #132]	@ (8007978 <TIM_OC3_SetConfig+0xe0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d003      	beq.n	80078fe <TIM_OC3_SetConfig+0x66>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a20      	ldr	r2, [pc, #128]	@ (800797c <TIM_OC3_SetConfig+0xe4>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d10d      	bne.n	800791a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a16      	ldr	r2, [pc, #88]	@ (8007978 <TIM_OC3_SetConfig+0xe0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_OC3_SetConfig+0x92>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a15      	ldr	r2, [pc, #84]	@ (800797c <TIM_OC3_SetConfig+0xe4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d113      	bne.n	8007952 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	621a      	str	r2, [r3, #32]
}
 800796c:	bf00      	nop
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	031b      	lsls	r3, r3, #12
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a12      	ldr	r2, [pc, #72]	@ (8007a24 <TIM_OC4_SetConfig+0xa4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC4_SetConfig+0x68>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <TIM_OC4_SetConfig+0xa8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d109      	bne.n	80079fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40010400 	.word	0x40010400

08007a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 0201 	bic.w	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f023 030a 	bic.w	r3, r3, #10
 8007a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f023 0210 	bic.w	r2, r3, #16
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	031b      	lsls	r3, r3, #12
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f043 0307 	orr.w	r3, r3, #7
 8007b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	021a      	lsls	r2, r3, #8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	609a      	str	r2, [r3, #8]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2201      	movs	r2, #1
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	fa01 f303 	lsl.w	r3, r1, r3
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e05a      	b.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a21      	ldr	r2, [pc, #132]	@ (8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d022      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c10:	d01d      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d018      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1b      	ldr	r2, [pc, #108]	@ (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00e      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a18      	ldr	r2, [pc, #96]	@ (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a17      	ldr	r2, [pc, #92]	@ (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d10c      	bne.n	8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40010400 	.word	0x40010400
 8007c9c:	40014000 	.word	0x40014000
 8007ca0:	40001800 	.word	0x40001800

08007ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e042      	b.n	8007d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f9 fcfa 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2224      	movs	r2, #36	@ 0x24
 8007cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f973 	bl	8007ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	695a      	ldr	r2, [r3, #20]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	@ 0x28
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d175      	bne.n	8007e78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_UART_Transmit+0x2c>
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e06e      	b.n	8007e7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2221      	movs	r2, #33	@ 0x21
 8007da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007daa:	f7f9 ff3d 	bl	8001c28 <HAL_GetTick>
 8007dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc4:	d108      	bne.n	8007dd8 <HAL_UART_Transmit+0x6c>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	e003      	b.n	8007de0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007de0:	e02e      	b.n	8007e40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2200      	movs	r2, #0
 8007dea:	2180      	movs	r1, #128	@ 0x80
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f848 	bl	8007e82 <UART_WaitOnFlagUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e03a      	b.n	8007e7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	e007      	b.n	8007e32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1cb      	bne.n	8007de2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2140      	movs	r1, #64	@ 0x40
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f814 	bl	8007e82 <UART_WaitOnFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e006      	b.n	8007e7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e000      	b.n	8007e7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007e78:	2302      	movs	r3, #2
  }
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3720      	adds	r7, #32
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	603b      	str	r3, [r7, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e92:	e03b      	b.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d037      	beq.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9c:	f7f9 fec4 	bl	8001c28 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	6a3a      	ldr	r2, [r7, #32]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e03a      	b.n	8007f2c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d023      	beq.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b80      	cmp	r3, #128	@ 0x80
 8007ec8:	d020      	beq.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b40      	cmp	r3, #64	@ 0x40
 8007ece:	d01d      	beq.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d116      	bne.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f81d 	bl	8007f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2208      	movs	r2, #8
 8007efe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e00f      	b.n	8007f2c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4013      	ands	r3, r2
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	bf0c      	ite	eq
 8007f1c:	2301      	moveq	r3, #1
 8007f1e:	2300      	movne	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	461a      	mov	r2, r3
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d0b4      	beq.n	8007e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b095      	sub	sp, #84	@ 0x54
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3314      	adds	r3, #20
 8007f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f023 0301 	bic.w	r3, r3, #1
 8007f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3314      	adds	r3, #20
 8007f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d119      	bne.n	8007fe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	330c      	adds	r3, #12
 8007fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fcc:	61ba      	str	r2, [r7, #24]
 8007fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6979      	ldr	r1, [r7, #20]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e5      	bne.n	8007fac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007fee:	bf00      	nop
 8007ff0:	3754      	adds	r7, #84	@ 0x54
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008000:	b0c0      	sub	sp, #256	@ 0x100
 8008002:	af00      	add	r7, sp, #0
 8008004:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008018:	68d9      	ldr	r1, [r3, #12]
 800801a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	ea40 0301 	orr.w	r3, r0, r1
 8008024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	431a      	orrs	r2, r3
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	431a      	orrs	r2, r3
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008054:	f021 010c 	bic.w	r1, r1, #12
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008062:	430b      	orrs	r3, r1
 8008064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008076:	6999      	ldr	r1, [r3, #24]
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	ea40 0301 	orr.w	r3, r0, r1
 8008082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	4b8f      	ldr	r3, [pc, #572]	@ (80082c8 <UART_SetConfig+0x2cc>)
 800808c:	429a      	cmp	r2, r3
 800808e:	d005      	beq.n	800809c <UART_SetConfig+0xa0>
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b8d      	ldr	r3, [pc, #564]	@ (80082cc <UART_SetConfig+0x2d0>)
 8008098:	429a      	cmp	r2, r3
 800809a:	d104      	bne.n	80080a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800809c:	f7fe fb2e 	bl	80066fc <HAL_RCC_GetPCLK2Freq>
 80080a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80080a4:	e003      	b.n	80080ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080a6:	f7fe fb15 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 80080aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b8:	f040 810c 	bne.w	80082d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80080ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80080ce:	4622      	mov	r2, r4
 80080d0:	462b      	mov	r3, r5
 80080d2:	1891      	adds	r1, r2, r2
 80080d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80080d6:	415b      	adcs	r3, r3
 80080d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80080de:	4621      	mov	r1, r4
 80080e0:	eb12 0801 	adds.w	r8, r2, r1
 80080e4:	4629      	mov	r1, r5
 80080e6:	eb43 0901 	adc.w	r9, r3, r1
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080fe:	4690      	mov	r8, r2
 8008100:	4699      	mov	r9, r3
 8008102:	4623      	mov	r3, r4
 8008104:	eb18 0303 	adds.w	r3, r8, r3
 8008108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800810c:	462b      	mov	r3, r5
 800810e:	eb49 0303 	adc.w	r3, r9, r3
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008122:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800812a:	460b      	mov	r3, r1
 800812c:	18db      	adds	r3, r3, r3
 800812e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008130:	4613      	mov	r3, r2
 8008132:	eb42 0303 	adc.w	r3, r2, r3
 8008136:	657b      	str	r3, [r7, #84]	@ 0x54
 8008138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800813c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008140:	f7f8 f8a6 	bl	8000290 <__aeabi_uldivmod>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4b61      	ldr	r3, [pc, #388]	@ (80082d0 <UART_SetConfig+0x2d4>)
 800814a:	fba3 2302 	umull	r2, r3, r3, r2
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	011c      	lsls	r4, r3, #4
 8008152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800815c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	1891      	adds	r1, r2, r2
 800816a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800816c:	415b      	adcs	r3, r3
 800816e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008174:	4641      	mov	r1, r8
 8008176:	eb12 0a01 	adds.w	sl, r2, r1
 800817a:	4649      	mov	r1, r9
 800817c:	eb43 0b01 	adc.w	fp, r3, r1
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800818c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008194:	4692      	mov	sl, r2
 8008196:	469b      	mov	fp, r3
 8008198:	4643      	mov	r3, r8
 800819a:	eb1a 0303 	adds.w	r3, sl, r3
 800819e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081a2:	464b      	mov	r3, r9
 80081a4:	eb4b 0303 	adc.w	r3, fp, r3
 80081a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80081bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081c0:	460b      	mov	r3, r1
 80081c2:	18db      	adds	r3, r3, r3
 80081c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081c6:	4613      	mov	r3, r2
 80081c8:	eb42 0303 	adc.w	r3, r2, r3
 80081cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80081d6:	f7f8 f85b 	bl	8000290 <__aeabi_uldivmod>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	4b3b      	ldr	r3, [pc, #236]	@ (80082d0 <UART_SetConfig+0x2d4>)
 80081e2:	fba3 2301 	umull	r2, r3, r3, r1
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	2264      	movs	r2, #100	@ 0x64
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	1acb      	subs	r3, r1, r3
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80081f6:	4b36      	ldr	r3, [pc, #216]	@ (80082d0 <UART_SetConfig+0x2d4>)
 80081f8:	fba3 2302 	umull	r2, r3, r3, r2
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008204:	441c      	add	r4, r3
 8008206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008210:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	1891      	adds	r1, r2, r2
 800821e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008220:	415b      	adcs	r3, r3
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008228:	4641      	mov	r1, r8
 800822a:	1851      	adds	r1, r2, r1
 800822c:	6339      	str	r1, [r7, #48]	@ 0x30
 800822e:	4649      	mov	r1, r9
 8008230:	414b      	adcs	r3, r1
 8008232:	637b      	str	r3, [r7, #52]	@ 0x34
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008240:	4659      	mov	r1, fp
 8008242:	00cb      	lsls	r3, r1, #3
 8008244:	4651      	mov	r1, sl
 8008246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800824a:	4651      	mov	r1, sl
 800824c:	00ca      	lsls	r2, r1, #3
 800824e:	4610      	mov	r0, r2
 8008250:	4619      	mov	r1, r3
 8008252:	4603      	mov	r3, r0
 8008254:	4642      	mov	r2, r8
 8008256:	189b      	adds	r3, r3, r2
 8008258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800825c:	464b      	mov	r3, r9
 800825e:	460a      	mov	r2, r1
 8008260:	eb42 0303 	adc.w	r3, r2, r3
 8008264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008274:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800827c:	460b      	mov	r3, r1
 800827e:	18db      	adds	r3, r3, r3
 8008280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008282:	4613      	mov	r3, r2
 8008284:	eb42 0303 	adc.w	r3, r2, r3
 8008288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800828a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800828e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008292:	f7f7 fffd 	bl	8000290 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <UART_SetConfig+0x2d4>)
 800829c:	fba3 1302 	umull	r1, r3, r3, r2
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	2164      	movs	r1, #100	@ 0x64
 80082a4:	fb01 f303 	mul.w	r3, r1, r3
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	3332      	adds	r3, #50	@ 0x32
 80082ae:	4a08      	ldr	r2, [pc, #32]	@ (80082d0 <UART_SetConfig+0x2d4>)
 80082b0:	fba2 2303 	umull	r2, r3, r2, r3
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	f003 0207 	and.w	r2, r3, #7
 80082ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4422      	add	r2, r4
 80082c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082c4:	e106      	b.n	80084d4 <UART_SetConfig+0x4d8>
 80082c6:	bf00      	nop
 80082c8:	40011000 	.word	0x40011000
 80082cc:	40011400 	.word	0x40011400
 80082d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80082e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80082e6:	4642      	mov	r2, r8
 80082e8:	464b      	mov	r3, r9
 80082ea:	1891      	adds	r1, r2, r2
 80082ec:	6239      	str	r1, [r7, #32]
 80082ee:	415b      	adcs	r3, r3
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082f6:	4641      	mov	r1, r8
 80082f8:	1854      	adds	r4, r2, r1
 80082fa:	4649      	mov	r1, r9
 80082fc:	eb43 0501 	adc.w	r5, r3, r1
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	00eb      	lsls	r3, r5, #3
 800830a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800830e:	00e2      	lsls	r2, r4, #3
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
 8008314:	4643      	mov	r3, r8
 8008316:	18e3      	adds	r3, r4, r3
 8008318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800831c:	464b      	mov	r3, r9
 800831e:	eb45 0303 	adc.w	r3, r5, r3
 8008322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008332:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008342:	4629      	mov	r1, r5
 8008344:	008b      	lsls	r3, r1, #2
 8008346:	4621      	mov	r1, r4
 8008348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800834c:	4621      	mov	r1, r4
 800834e:	008a      	lsls	r2, r1, #2
 8008350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008354:	f7f7 ff9c 	bl	8000290 <__aeabi_uldivmod>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4b60      	ldr	r3, [pc, #384]	@ (80084e0 <UART_SetConfig+0x4e4>)
 800835e:	fba3 2302 	umull	r2, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	011c      	lsls	r4, r3, #4
 8008366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800836a:	2200      	movs	r2, #0
 800836c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008370:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	1891      	adds	r1, r2, r2
 800837e:	61b9      	str	r1, [r7, #24]
 8008380:	415b      	adcs	r3, r3
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008388:	4641      	mov	r1, r8
 800838a:	1851      	adds	r1, r2, r1
 800838c:	6139      	str	r1, [r7, #16]
 800838e:	4649      	mov	r1, r9
 8008390:	414b      	adcs	r3, r1
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083a0:	4659      	mov	r1, fp
 80083a2:	00cb      	lsls	r3, r1, #3
 80083a4:	4651      	mov	r1, sl
 80083a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083aa:	4651      	mov	r1, sl
 80083ac:	00ca      	lsls	r2, r1, #3
 80083ae:	4610      	mov	r0, r2
 80083b0:	4619      	mov	r1, r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	4642      	mov	r2, r8
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083bc:	464b      	mov	r3, r9
 80083be:	460a      	mov	r2, r1
 80083c0:	eb42 0303 	adc.w	r3, r2, r3
 80083c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80083e0:	4649      	mov	r1, r9
 80083e2:	008b      	lsls	r3, r1, #2
 80083e4:	4641      	mov	r1, r8
 80083e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ea:	4641      	mov	r1, r8
 80083ec:	008a      	lsls	r2, r1, #2
 80083ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80083f2:	f7f7 ff4d 	bl	8000290 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	4b38      	ldr	r3, [pc, #224]	@ (80084e0 <UART_SetConfig+0x4e4>)
 80083fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	2264      	movs	r2, #100	@ 0x64
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	1acb      	subs	r3, r1, r3
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	3332      	adds	r3, #50	@ 0x32
 8008410:	4a33      	ldr	r2, [pc, #204]	@ (80084e0 <UART_SetConfig+0x4e4>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800841c:	441c      	add	r4, r3
 800841e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008422:	2200      	movs	r2, #0
 8008424:	673b      	str	r3, [r7, #112]	@ 0x70
 8008426:	677a      	str	r2, [r7, #116]	@ 0x74
 8008428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	1891      	adds	r1, r2, r2
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	415b      	adcs	r3, r3
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800843c:	4641      	mov	r1, r8
 800843e:	1851      	adds	r1, r2, r1
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	4649      	mov	r1, r9
 8008444:	414b      	adcs	r3, r1
 8008446:	607b      	str	r3, [r7, #4]
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	f04f 0300 	mov.w	r3, #0
 8008450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008454:	4659      	mov	r1, fp
 8008456:	00cb      	lsls	r3, r1, #3
 8008458:	4651      	mov	r1, sl
 800845a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845e:	4651      	mov	r1, sl
 8008460:	00ca      	lsls	r2, r1, #3
 8008462:	4610      	mov	r0, r2
 8008464:	4619      	mov	r1, r3
 8008466:	4603      	mov	r3, r0
 8008468:	4642      	mov	r2, r8
 800846a:	189b      	adds	r3, r3, r2
 800846c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800846e:	464b      	mov	r3, r9
 8008470:	460a      	mov	r2, r1
 8008472:	eb42 0303 	adc.w	r3, r2, r3
 8008476:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	663b      	str	r3, [r7, #96]	@ 0x60
 8008482:	667a      	str	r2, [r7, #100]	@ 0x64
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008490:	4649      	mov	r1, r9
 8008492:	008b      	lsls	r3, r1, #2
 8008494:	4641      	mov	r1, r8
 8008496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800849a:	4641      	mov	r1, r8
 800849c:	008a      	lsls	r2, r1, #2
 800849e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084a2:	f7f7 fef5 	bl	8000290 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4b0d      	ldr	r3, [pc, #52]	@ (80084e0 <UART_SetConfig+0x4e4>)
 80084ac:	fba3 1302 	umull	r1, r3, r3, r2
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	2164      	movs	r1, #100	@ 0x64
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	3332      	adds	r3, #50	@ 0x32
 80084be:	4a08      	ldr	r2, [pc, #32]	@ (80084e0 <UART_SetConfig+0x4e4>)
 80084c0:	fba2 2303 	umull	r2, r3, r2, r3
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	f003 020f 	and.w	r2, r3, #15
 80084ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4422      	add	r2, r4
 80084d2:	609a      	str	r2, [r3, #8]
}
 80084d4:	bf00      	nop
 80084d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80084da:	46bd      	mov	sp, r7
 80084dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e0:	51eb851f 	.word	0x51eb851f

080084e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d123      	bne.n	800853e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80084fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	6851      	ldr	r1, [r2, #4]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	6892      	ldr	r2, [r2, #8]
 800850a:	4311      	orrs	r1, r2
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	68d2      	ldr	r2, [r2, #12]
 8008510:	4311      	orrs	r1, r2
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	6912      	ldr	r2, [r2, #16]
 8008516:	4311      	orrs	r1, r2
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	6952      	ldr	r2, [r2, #20]
 800851c:	4311      	orrs	r1, r2
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	6992      	ldr	r2, [r2, #24]
 8008522:	4311      	orrs	r1, r2
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	69d2      	ldr	r2, [r2, #28]
 8008528:	4311      	orrs	r1, r2
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	6a12      	ldr	r2, [r2, #32]
 800852e:	4311      	orrs	r1, r2
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008534:	430a      	orrs	r2, r1
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	e028      	b.n	8008590 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	69d9      	ldr	r1, [r3, #28]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	4319      	orrs	r1, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	430b      	orrs	r3, r1
 8008556:	431a      	orrs	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008564:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	6851      	ldr	r1, [r2, #4]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	6892      	ldr	r2, [r2, #8]
 8008570:	4311      	orrs	r1, r2
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	68d2      	ldr	r2, [r2, #12]
 8008576:	4311      	orrs	r1, r2
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	6912      	ldr	r2, [r2, #16]
 800857c:	4311      	orrs	r1, r2
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	6952      	ldr	r2, [r2, #20]
 8008582:	4311      	orrs	r1, r2
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	6992      	ldr	r2, [r2, #24]
 8008588:	430a      	orrs	r2, r1
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d128      	bne.n	8008602 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	1e59      	subs	r1, r3, #1
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	4319      	orrs	r1, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	4319      	orrs	r1, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	031b      	lsls	r3, r3, #12
 80085da:	4319      	orrs	r1, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	041b      	lsls	r3, r3, #16
 80085e4:	4319      	orrs	r1, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	051b      	lsls	r3, r3, #20
 80085ee:	4319      	orrs	r1, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	061b      	lsls	r3, r3, #24
 80085f8:	430b      	orrs	r3, r1
 80085fa:	431a      	orrs	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	609a      	str	r2, [r3, #8]
 8008600:	e02f      	b.n	8008662 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800860a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	68d2      	ldr	r2, [r2, #12]
 8008612:	3a01      	subs	r2, #1
 8008614:	0311      	lsls	r1, r2, #12
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	6952      	ldr	r2, [r2, #20]
 800861a:	3a01      	subs	r2, #1
 800861c:	0512      	lsls	r2, r2, #20
 800861e:	430a      	orrs	r2, r1
 8008620:	431a      	orrs	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	1e59      	subs	r1, r3, #1
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	3b01      	subs	r3, #1
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	4319      	orrs	r1, r3
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	3b01      	subs	r3, #1
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	4319      	orrs	r1, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	3b01      	subs	r3, #1
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	4319      	orrs	r1, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	3b01      	subs	r3, #1
 8008658:	061b      	lsls	r3, r3, #24
 800865a:	430b      	orrs	r3, r1
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f043 0201 	orr.w	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f023 0201 	bic.w	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086ce:	d901      	bls.n	80086d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e01b      	b.n	800870c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	daf2      	bge.n	80086c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	019b      	lsls	r3, r3, #6
 80086e4:	f043 0220 	orr.w	r2, r3, #32
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086f8:	d901      	bls.n	80086fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e006      	b.n	800870c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0320 	and.w	r3, r3, #32
 8008706:	2b20      	cmp	r3, #32
 8008708:	d0f0      	beq.n	80086ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008730:	d901      	bls.n	8008736 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e018      	b.n	8008768 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	daf2      	bge.n	8008724 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2210      	movs	r2, #16
 8008746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3301      	adds	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008754:	d901      	bls.n	800875a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e006      	b.n	8008768 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0310 	and.w	r3, r3, #16
 8008762:	2b10      	cmp	r3, #16
 8008764:	d0f0      	beq.n	8008748 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008774:	b480      	push	{r7}
 8008776:	b08b      	sub	sp, #44	@ 0x2c
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	089b      	lsrs	r3, r3, #2
 800878e:	b29b      	uxth	r3, r3
 8008790:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800879a:	2300      	movs	r3, #0
 800879c:	623b      	str	r3, [r7, #32]
 800879e:	e014      	b.n	80087ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	3301      	adds	r3, #1
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	3301      	adds	r3, #1
 80087b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ba:	3301      	adds	r3, #1
 80087bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	3301      	adds	r3, #1
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	3301      	adds	r3, #1
 80087c8:	623b      	str	r3, [r7, #32]
 80087ca:	6a3a      	ldr	r2, [r7, #32]
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d3e6      	bcc.n	80087a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087d2:	8bfb      	ldrh	r3, [r7, #30]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087e2:	461a      	mov	r2, r3
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	701a      	strb	r2, [r3, #0]
      i++;
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	3301      	adds	r3, #1
 8008802:	623b      	str	r3, [r7, #32]
      pDest++;
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	3301      	adds	r3, #1
 8008808:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800880a:	8bfb      	ldrh	r3, [r7, #30]
 800880c:	3b01      	subs	r3, #1
 800880e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008810:	8bfb      	ldrh	r3, [r7, #30]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1ea      	bne.n	80087ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008818:	4618      	mov	r0, r3
 800881a:	372c      	adds	r7, #44	@ 0x2c
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4013      	ands	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800883c:	68fb      	ldr	r3, [r7, #12]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	4013      	ands	r3, r2
 800887c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800887e:	68bb      	ldr	r3, [r7, #8]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f003 0301 	and.w	r3, r3, #1
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80088e0:	4313      	orrs	r3, r2
 80088e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d107      	bne.n	80088fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088f0:	461a      	mov	r2, r3
 80088f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80088f6:	6053      	str	r3, [r2, #4]
 80088f8:	e00c      	b.n	8008914 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80088fa:	78fb      	ldrb	r3, [r7, #3]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d107      	bne.n	8008910 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008906:	461a      	mov	r2, r3
 8008908:	f241 7370 	movw	r3, #6000	@ 0x1770
 800890c:	6053      	str	r3, [r2, #4]
 800890e:	e001      	b.n	8008914 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	b29b      	uxth	r3, r3
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	@ 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4413      	add	r3, r2
 8008964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	0c9b      	lsrs	r3, r3, #18
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	0fdb      	lsrs	r3, r3, #31
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	0fdb      	lsrs	r3, r3, #31
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d10d      	bne.n	80089c6 <USB_HC_Halt+0x82>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <USB_HC_Halt+0x82>
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d002      	beq.n	80089c2 <USB_HC_Halt+0x7e>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b03      	cmp	r3, #3
 80089c0:	d101      	bne.n	80089c6 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e0d8      	b.n	8008b78 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <USB_HC_Halt+0x8e>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d173      	bne.n	8008aba <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	0151      	lsls	r1, r2, #5
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	440a      	add	r2, r1
 80089e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089f0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d14a      	bne.n	8008a94 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a02:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d133      	bne.n	8008a72 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a28:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a48:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a56:	d82e      	bhi.n	8008ab6 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a6e:	d0ec      	beq.n	8008a4a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a70:	e081      	b.n	8008b76 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a92:	e070      	b.n	8008b76 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ab2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ab4:	e05f      	b.n	8008b76 <USB_HC_Halt+0x232>
            break;
 8008ab6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ab8:	e05d      	b.n	8008b76 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ad4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ad8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d133      	bne.n	8008b52 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b08:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	0151      	lsls	r1, r2, #5
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	440a      	add	r2, r1
 8008b20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b28:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b36:	d81d      	bhi.n	8008b74 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b4e:	d0ec      	beq.n	8008b2a <USB_HC_Halt+0x1e6>
 8008b50:	e011      	b.n	8008b76 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e000      	b.n	8008b76 <USB_HC_Halt+0x232>
          break;
 8008b74:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3724      	adds	r7, #36	@ 0x24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fd7a 	bl	8008692 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b9e:	2110      	movs	r1, #16
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fd87 	bl	80086b4 <USB_FlushTxFifo>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff fdb1 	bl	8008718 <USB_FlushRxFifo>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61bb      	str	r3, [r7, #24]
 8008bc4:	e01f      	b.n	8008c06 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008be4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	3301      	adds	r3, #1
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b0f      	cmp	r3, #15
 8008c0a:	d9dc      	bls.n	8008bc6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
 8008c10:	e034      	b.n	8008c7c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c46:	461a      	mov	r2, r3
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c58:	d80c      	bhi.n	8008c74 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c70:	d0ec      	beq.n	8008c4c <USB_StopHost+0xc8>
 8008c72:	e000      	b.n	8008c76 <USB_StopHost+0xf2>
        break;
 8008c74:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b0f      	cmp	r3, #15
 8008c80:	d9c7      	bls.n	8008c12 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295
 8008c96:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff fce9 	bl	8008670 <USB_EnableGlobalInt>

  return ret;
 8008c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f804 	bl	8008ccc <USBH_HandleSof>
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b0b      	cmp	r3, #11
 8008cdc:	d10a      	bne.n	8008cf4 <USBH_HandleSof+0x28>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008d20:	2200      	movs	r2, #0
 8008d22:	4619      	mov	r1, r3
 8008d24:	f000 f8ae 	bl	8008e84 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008d28:	bf00      	nop
}
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008d40:	bf00      	nop
}
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008d80:	2200      	movs	r2, #0
 8008d82:	4619      	mov	r1, r3
 8008d84:	f000 f87e 	bl	8008e84 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 f92c 	bl	800a010 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	791b      	ldrb	r3, [r3, #4]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f830 	bl	8008e24 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	795b      	ldrb	r3, [r3, #5]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f82a 	bl	8008e24 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008de4:	2200      	movs	r2, #0
 8008de6:	4619      	mov	r1, r3
 8008de8:	f000 f84c 	bl	8008e84 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008e12:	2200      	movs	r2, #0
 8008e14:	4619      	mov	r1, r3
 8008e16:	f000 f835 	bl	8008e84 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	d80d      	bhi.n	8008e52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e36:	78fb      	ldrb	r3, [r7, #3]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	33e0      	adds	r3, #224	@ 0xe0
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	33e0      	adds	r3, #224	@ 0xe0
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e66:	f3ef 8305 	mrs	r3, IPSR
 8008e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8008e6c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bf14      	ite	ne
 8008e72:	2301      	movne	r3, #1
 8008e74:	2300      	moveq	r3, #0
 8008e76:	b2db      	uxtb	r3, r3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <osMessagePut+0x1e>
    ticks = 1;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ea2:	f7ff ffdd 	bl	8008e60 <inHandlerMode>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d018      	beq.n	8008ede <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008eac:	f107 0210 	add.w	r2, r7, #16
 8008eb0:	f107 0108 	add.w	r1, r7, #8
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f9ae 	bl	8009218 <xQueueGenericSendFromISR>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d001      	beq.n	8008ec6 <osMessagePut+0x42>
      return osErrorOS;
 8008ec2:	23ff      	movs	r3, #255	@ 0xff
 8008ec4:	e018      	b.n	8008ef8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d014      	beq.n	8008ef6 <osMessagePut+0x72>
 8008ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f00 <osMessagePut+0x7c>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	e00b      	b.n	8008ef6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008ede:	f107 0108 	add.w	r1, r7, #8
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f894 	bl	8009014 <xQueueGenericSend>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d001      	beq.n	8008ef6 <osMessagePut+0x72>
      return osErrorOS;
 8008ef2:	23ff      	movs	r3, #255	@ 0xff
 8008ef4:	e000      	b.n	8008ef8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f62:	d103      	bne.n	8008f6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e00c      	b.n	8008f86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	e002      	b.n	8008f7a <vListInsert+0x2e>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d2f6      	bcs.n	8008f74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6892      	ldr	r2, [r2, #8]
 8008fd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6852      	ldr	r2, [r2, #4]
 8008fde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d103      	bne.n	8008ff2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	1e5a      	subs	r2, r3, #1
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
	...

08009014 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08e      	sub	sp, #56	@ 0x38
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009022:	2300      	movs	r3, #0
 8009024:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10b      	bne.n	8009048 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	e7fd      	b.n	8009044 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d103      	bne.n	8009056 <xQueueGenericSend+0x42>
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <xQueueGenericSend+0x46>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueGenericSend+0x48>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10b      	bne.n	8009078 <xQueueGenericSend+0x64>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d103      	bne.n	8009086 <xQueueGenericSend+0x72>
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <xQueueGenericSend+0x76>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueGenericSend+0x78>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <xQueueGenericSend+0x94>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	623b      	str	r3, [r7, #32]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090a8:	f000 fd40 	bl	8009b2c <xTaskGetSchedulerState>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <xQueueGenericSend+0xa4>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <xQueueGenericSend+0xa8>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <xQueueGenericSend+0xaa>
 80090bc:	2300      	movs	r3, #0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10b      	bne.n	80090da <xQueueGenericSend+0xc6>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	61fb      	str	r3, [r7, #28]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090da:	f000 fe4d 	bl	8009d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d302      	bcc.n	80090f0 <xQueueGenericSend+0xdc>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d129      	bne.n	8009144 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	68b9      	ldr	r1, [r7, #8]
 80090f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090f6:	f000 f92d 	bl	8009354 <prvCopyDataToQueue>
 80090fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	2b00      	cmp	r3, #0
 8009102:	d010      	beq.n	8009126 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	3324      	adds	r3, #36	@ 0x24
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fc05 	bl	8009918 <xTaskRemoveFromEventList>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d013      	beq.n	800913c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009114:	4b3f      	ldr	r3, [pc, #252]	@ (8009214 <xQueueGenericSend+0x200>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	e00a      	b.n	800913c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d007      	beq.n	800913c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800912c:	4b39      	ldr	r3, [pc, #228]	@ (8009214 <xQueueGenericSend+0x200>)
 800912e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800913c:	f000 fe4e 	bl	8009ddc <vPortExitCritical>
				return pdPASS;
 8009140:	2301      	movs	r3, #1
 8009142:	e063      	b.n	800920c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800914a:	f000 fe47 	bl	8009ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800914e:	2300      	movs	r3, #0
 8009150:	e05c      	b.n	800920c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009158:	f107 0314 	add.w	r3, r7, #20
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fc3f 	bl	80099e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009162:	2301      	movs	r3, #1
 8009164:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009166:	f000 fe39 	bl	8009ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800916a:	f000 f9c7 	bl	80094fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800916e:	f000 fe03 	bl	8009d78 <vPortEnterCritical>
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009178:	b25b      	sxtb	r3, r3
 800917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917e:	d103      	bne.n	8009188 <xQueueGenericSend+0x174>
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800918e:	b25b      	sxtb	r3, r3
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d103      	bne.n	800919e <xQueueGenericSend+0x18a>
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800919e:	f000 fe1d 	bl	8009ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091a2:	1d3a      	adds	r2, r7, #4
 80091a4:	f107 0314 	add.w	r3, r7, #20
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fc2e 	bl	8009a0c <xTaskCheckForTimeOut>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d124      	bne.n	8009200 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091b8:	f000 f988 	bl	80094cc <prvIsQueueFull>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d018      	beq.n	80091f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c4:	3310      	adds	r3, #16
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fb7e 	bl	80098cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091d2:	f000 f929 	bl	8009428 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091d6:	f000 f99f 	bl	8009518 <xTaskResumeAll>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f47f af7c 	bne.w	80090da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <xQueueGenericSend+0x200>)
 80091e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	e772      	b.n	80090da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091f6:	f000 f917 	bl	8009428 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091fa:	f000 f98d 	bl	8009518 <xTaskResumeAll>
 80091fe:	e76c      	b.n	80090da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009202:	f000 f911 	bl	8009428 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009206:	f000 f987 	bl	8009518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800920a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800920c:	4618      	mov	r0, r3
 800920e:	3738      	adds	r7, #56	@ 0x38
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b090      	sub	sp, #64	@ 0x40
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009242:	bf00      	nop
 8009244:	bf00      	nop
 8009246:	e7fd      	b.n	8009244 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <xQueueGenericSendFromISR+0x3e>
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <xQueueGenericSendFromISR+0x42>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueGenericSendFromISR+0x44>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10b      	bne.n	8009278 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d103      	bne.n	8009286 <xQueueGenericSendFromISR+0x6e>
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <xQueueGenericSendFromISR+0x72>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <xQueueGenericSendFromISR+0x74>
 800928a:	2300      	movs	r3, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10b      	bne.n	80092a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	623b      	str	r3, [r7, #32]
}
 80092a2:	bf00      	nop
 80092a4:	bf00      	nop
 80092a6:	e7fd      	b.n	80092a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a8:	f000 fe18 	bl	8009edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092ac:	f3ef 8211 	mrs	r2, BASEPRI
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	61fa      	str	r2, [r7, #28]
 80092c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d302      	bcc.n	80092da <xQueueGenericSendFromISR+0xc2>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d12f      	bne.n	800933a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092f0:	f000 f830 	bl	8009354 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fc:	d112      	bne.n	8009324 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009302:	2b00      	cmp	r3, #0
 8009304:	d016      	beq.n	8009334 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	3324      	adds	r3, #36	@ 0x24
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fb04 	bl	8009918 <xTaskRemoveFromEventList>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00e      	beq.n	8009334 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	e007      	b.n	8009334 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009324:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009328:	3301      	adds	r3, #1
 800932a:	b2db      	uxtb	r3, r3
 800932c:	b25a      	sxtb	r2, r3
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009334:	2301      	movs	r3, #1
 8009336:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009338:	e001      	b.n	800933e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800933a:	2300      	movs	r3, #0
 800933c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800933e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009340:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009348:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800934c:	4618      	mov	r0, r3
 800934e:	3740      	adds	r7, #64	@ 0x40
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009368:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10d      	bne.n	800938e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d14d      	bne.n	8009416 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fbf2 	bl	8009b68 <xTaskPriorityDisinherit>
 8009384:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	609a      	str	r2, [r3, #8]
 800938c:	e043      	b.n	8009416 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d119      	bne.n	80093c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6858      	ldr	r0, [r3, #4]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939c:	461a      	mov	r2, r3
 800939e:	68b9      	ldr	r1, [r7, #8]
 80093a0:	f001 f98f 	bl	800a6c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ac:	441a      	add	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d32b      	bcc.n	8009416 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	605a      	str	r2, [r3, #4]
 80093c6:	e026      	b.n	8009416 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68d8      	ldr	r0, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d0:	461a      	mov	r2, r3
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	f001 f975 	bl	800a6c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e0:	425b      	negs	r3, r3
 80093e2:	441a      	add	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d207      	bcs.n	8009404 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fc:	425b      	negs	r3, r3
 80093fe:	441a      	add	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b02      	cmp	r3, #2
 8009408:	d105      	bne.n	8009416 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3b01      	subs	r3, #1
 8009414:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800941e:	697b      	ldr	r3, [r7, #20]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009430:	f000 fca2 	bl	8009d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800943a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800943c:	e011      	b.n	8009462 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009442:	2b00      	cmp	r3, #0
 8009444:	d012      	beq.n	800946c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3324      	adds	r3, #36	@ 0x24
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fa64 	bl	8009918 <xTaskRemoveFromEventList>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009456:	f000 fb3d 	bl	8009ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	3b01      	subs	r3, #1
 800945e:	b2db      	uxtb	r3, r3
 8009460:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009466:	2b00      	cmp	r3, #0
 8009468:	dce9      	bgt.n	800943e <prvUnlockQueue+0x16>
 800946a:	e000      	b.n	800946e <prvUnlockQueue+0x46>
					break;
 800946c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	22ff      	movs	r2, #255	@ 0xff
 8009472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009476:	f000 fcb1 	bl	8009ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800947a:	f000 fc7d 	bl	8009d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009484:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009486:	e011      	b.n	80094ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d012      	beq.n	80094b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3310      	adds	r3, #16
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fa3f 	bl	8009918 <xTaskRemoveFromEventList>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094a0:	f000 fb18 	bl	8009ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dce9      	bgt.n	8009488 <prvUnlockQueue+0x60>
 80094b4:	e000      	b.n	80094b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	22ff      	movs	r2, #255	@ 0xff
 80094bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80094c0:	f000 fc8c 	bl	8009ddc <vPortExitCritical>
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094d4:	f000 fc50 	bl	8009d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d102      	bne.n	80094ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e001      	b.n	80094ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ee:	f000 fc75 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 80094f2:	68fb      	ldr	r3, [r7, #12]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009500:	4b04      	ldr	r3, [pc, #16]	@ (8009514 <vTaskSuspendAll+0x18>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3301      	adds	r3, #1
 8009506:	4a03      	ldr	r2, [pc, #12]	@ (8009514 <vTaskSuspendAll+0x18>)
 8009508:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800950a:	bf00      	nop
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	200004ac 	.word	0x200004ac

08009518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009526:	4b42      	ldr	r3, [pc, #264]	@ (8009630 <xTaskResumeAll+0x118>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <xTaskResumeAll+0x2e>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	603b      	str	r3, [r7, #0]
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	e7fd      	b.n	8009542 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009546:	f000 fc17 	bl	8009d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800954a:	4b39      	ldr	r3, [pc, #228]	@ (8009630 <xTaskResumeAll+0x118>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3b01      	subs	r3, #1
 8009550:	4a37      	ldr	r2, [pc, #220]	@ (8009630 <xTaskResumeAll+0x118>)
 8009552:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009554:	4b36      	ldr	r3, [pc, #216]	@ (8009630 <xTaskResumeAll+0x118>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d161      	bne.n	8009620 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800955c:	4b35      	ldr	r3, [pc, #212]	@ (8009634 <xTaskResumeAll+0x11c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d05d      	beq.n	8009620 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009564:	e02e      	b.n	80095c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009566:	4b34      	ldr	r3, [pc, #208]	@ (8009638 <xTaskResumeAll+0x120>)
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3318      	adds	r3, #24
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff fd23 	bl	8008fbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3304      	adds	r3, #4
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fd1e 	bl	8008fbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009586:	2201      	movs	r2, #1
 8009588:	409a      	lsls	r2, r3
 800958a:	4b2c      	ldr	r3, [pc, #176]	@ (800963c <xTaskResumeAll+0x124>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4313      	orrs	r3, r2
 8009590:	4a2a      	ldr	r2, [pc, #168]	@ (800963c <xTaskResumeAll+0x124>)
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4a27      	ldr	r2, [pc, #156]	@ (8009640 <xTaskResumeAll+0x128>)
 80095a2:	441a      	add	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4619      	mov	r1, r3
 80095aa:	4610      	mov	r0, r2
 80095ac:	f7ff fcaa 	bl	8008f04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b4:	4b23      	ldr	r3, [pc, #140]	@ (8009644 <xTaskResumeAll+0x12c>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80095be:	4b22      	ldr	r3, [pc, #136]	@ (8009648 <xTaskResumeAll+0x130>)
 80095c0:	2201      	movs	r2, #1
 80095c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009638 <xTaskResumeAll+0x120>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1cc      	bne.n	8009566 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095d2:	f000 fa8b 	bl	8009aec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095d6:	4b1d      	ldr	r3, [pc, #116]	@ (800964c <xTaskResumeAll+0x134>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d010      	beq.n	8009604 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095e2:	f000 f837 	bl	8009654 <xTaskIncrementTick>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095ec:	4b16      	ldr	r3, [pc, #88]	@ (8009648 <xTaskResumeAll+0x130>)
 80095ee:	2201      	movs	r2, #1
 80095f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f1      	bne.n	80095e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80095fe:	4b13      	ldr	r3, [pc, #76]	@ (800964c <xTaskResumeAll+0x134>)
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009604:	4b10      	ldr	r3, [pc, #64]	@ (8009648 <xTaskResumeAll+0x130>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009610:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <xTaskResumeAll+0x138>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009620:	f000 fbdc 	bl	8009ddc <vPortExitCritical>

	return xAlreadyYielded;
 8009624:	68bb      	ldr	r3, [r7, #8]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	200004ac 	.word	0x200004ac
 8009634:	2000048c 	.word	0x2000048c
 8009638:	20000464 	.word	0x20000464
 800963c:	20000494 	.word	0x20000494
 8009640:	200003d0 	.word	0x200003d0
 8009644:	200003cc 	.word	0x200003cc
 8009648:	200004a0 	.word	0x200004a0
 800964c:	2000049c 	.word	0x2000049c
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800965e:	4b4f      	ldr	r3, [pc, #316]	@ (800979c <xTaskIncrementTick+0x148>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 808f 	bne.w	8009786 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009668:	4b4d      	ldr	r3, [pc, #308]	@ (80097a0 <xTaskIncrementTick+0x14c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3301      	adds	r3, #1
 800966e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009670:	4a4b      	ldr	r2, [pc, #300]	@ (80097a0 <xTaskIncrementTick+0x14c>)
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d121      	bne.n	80096c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800967c:	4b49      	ldr	r3, [pc, #292]	@ (80097a4 <xTaskIncrementTick+0x150>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00b      	beq.n	800969e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	603b      	str	r3, [r7, #0]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <xTaskIncrementTick+0x46>
 800969e:	4b41      	ldr	r3, [pc, #260]	@ (80097a4 <xTaskIncrementTick+0x150>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	4b40      	ldr	r3, [pc, #256]	@ (80097a8 <xTaskIncrementTick+0x154>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a3e      	ldr	r2, [pc, #248]	@ (80097a4 <xTaskIncrementTick+0x150>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	4a3e      	ldr	r2, [pc, #248]	@ (80097a8 <xTaskIncrementTick+0x154>)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	4b3e      	ldr	r3, [pc, #248]	@ (80097ac <xTaskIncrementTick+0x158>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	4a3c      	ldr	r2, [pc, #240]	@ (80097ac <xTaskIncrementTick+0x158>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	f000 fa16 	bl	8009aec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096c0:	4b3b      	ldr	r3, [pc, #236]	@ (80097b0 <xTaskIncrementTick+0x15c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d348      	bcc.n	800975c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ca:	4b36      	ldr	r3, [pc, #216]	@ (80097a4 <xTaskIncrementTick+0x150>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d104      	bne.n	80096de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d4:	4b36      	ldr	r3, [pc, #216]	@ (80097b0 <xTaskIncrementTick+0x15c>)
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	601a      	str	r2, [r3, #0]
					break;
 80096dc:	e03e      	b.n	800975c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096de:	4b31      	ldr	r3, [pc, #196]	@ (80097a4 <xTaskIncrementTick+0x150>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d203      	bcs.n	80096fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096f6:	4a2e      	ldr	r2, [pc, #184]	@ (80097b0 <xTaskIncrementTick+0x15c>)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096fc:	e02e      	b.n	800975c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	3304      	adds	r3, #4
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fc5b 	bl	8008fbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3318      	adds	r3, #24
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff fc52 	bl	8008fbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	2201      	movs	r2, #1
 8009720:	409a      	lsls	r2, r3
 8009722:	4b24      	ldr	r3, [pc, #144]	@ (80097b4 <xTaskIncrementTick+0x160>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4313      	orrs	r3, r2
 8009728:	4a22      	ldr	r2, [pc, #136]	@ (80097b4 <xTaskIncrementTick+0x160>)
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4a1f      	ldr	r2, [pc, #124]	@ (80097b8 <xTaskIncrementTick+0x164>)
 800973a:	441a      	add	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3304      	adds	r3, #4
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7ff fbde 	bl	8008f04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974c:	4b1b      	ldr	r3, [pc, #108]	@ (80097bc <xTaskIncrementTick+0x168>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009752:	429a      	cmp	r2, r3
 8009754:	d3b9      	bcc.n	80096ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009756:	2301      	movs	r3, #1
 8009758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800975a:	e7b6      	b.n	80096ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800975c:	4b17      	ldr	r3, [pc, #92]	@ (80097bc <xTaskIncrementTick+0x168>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009762:	4915      	ldr	r1, [pc, #84]	@ (80097b8 <xTaskIncrementTick+0x164>)
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d901      	bls.n	8009778 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009774:	2301      	movs	r3, #1
 8009776:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009778:	4b11      	ldr	r3, [pc, #68]	@ (80097c0 <xTaskIncrementTick+0x16c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009780:	2301      	movs	r3, #1
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	e004      	b.n	8009790 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009786:	4b0f      	ldr	r3, [pc, #60]	@ (80097c4 <xTaskIncrementTick+0x170>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	4a0d      	ldr	r2, [pc, #52]	@ (80097c4 <xTaskIncrementTick+0x170>)
 800978e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009790:	697b      	ldr	r3, [r7, #20]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	200004ac 	.word	0x200004ac
 80097a0:	20000490 	.word	0x20000490
 80097a4:	2000045c 	.word	0x2000045c
 80097a8:	20000460 	.word	0x20000460
 80097ac:	200004a4 	.word	0x200004a4
 80097b0:	200004a8 	.word	0x200004a8
 80097b4:	20000494 	.word	0x20000494
 80097b8:	200003d0 	.word	0x200003d0
 80097bc:	200003cc 	.word	0x200003cc
 80097c0:	200004a0 	.word	0x200004a0
 80097c4:	2000049c 	.word	0x2000049c

080097c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097ce:	4b3a      	ldr	r3, [pc, #232]	@ (80098b8 <vTaskSwitchContext+0xf0>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097d6:	4b39      	ldr	r3, [pc, #228]	@ (80098bc <vTaskSwitchContext+0xf4>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097dc:	e067      	b.n	80098ae <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80097de:	4b37      	ldr	r3, [pc, #220]	@ (80098bc <vTaskSwitchContext+0xf4>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80097e4:	4b36      	ldr	r3, [pc, #216]	@ (80098c0 <vTaskSwitchContext+0xf8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d111      	bne.n	8009820 <vTaskSwitchContext+0x58>
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	3304      	adds	r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	429a      	cmp	r2, r3
 8009806:	d10b      	bne.n	8009820 <vTaskSwitchContext+0x58>
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3308      	adds	r3, #8
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	429a      	cmp	r2, r3
 8009812:	d105      	bne.n	8009820 <vTaskSwitchContext+0x58>
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	330c      	adds	r3, #12
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	429a      	cmp	r2, r3
 800981e:	d008      	beq.n	8009832 <vTaskSwitchContext+0x6a>
 8009820:	4b27      	ldr	r3, [pc, #156]	@ (80098c0 <vTaskSwitchContext+0xf8>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	4b26      	ldr	r3, [pc, #152]	@ (80098c0 <vTaskSwitchContext+0xf8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3334      	adds	r3, #52	@ 0x34
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7f6 fea7 	bl	8000580 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009832:	4b24      	ldr	r3, [pc, #144]	@ (80098c4 <vTaskSwitchContext+0xfc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	fab3 f383 	clz	r3, r3
 800983e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009840:	7afb      	ldrb	r3, [r7, #11]
 8009842:	f1c3 031f 	rsb	r3, r3, #31
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	491f      	ldr	r1, [pc, #124]	@ (80098c8 <vTaskSwitchContext+0x100>)
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10b      	bne.n	8009874 <vTaskSwitchContext+0xac>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	607b      	str	r3, [r7, #4]
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <vTaskSwitchContext+0xa8>
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4a12      	ldr	r2, [pc, #72]	@ (80098c8 <vTaskSwitchContext+0x100>)
 8009880:	4413      	add	r3, r2
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	605a      	str	r2, [r3, #4]
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3308      	adds	r3, #8
 8009896:	429a      	cmp	r2, r3
 8009898:	d104      	bne.n	80098a4 <vTaskSwitchContext+0xdc>
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	605a      	str	r2, [r3, #4]
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	4a05      	ldr	r2, [pc, #20]	@ (80098c0 <vTaskSwitchContext+0xf8>)
 80098ac:	6013      	str	r3, [r2, #0]
}
 80098ae:	bf00      	nop
 80098b0:	3720      	adds	r7, #32
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200004ac 	.word	0x200004ac
 80098bc:	200004a0 	.word	0x200004a0
 80098c0:	200003cc 	.word	0x200003cc
 80098c4:	20000494 	.word	0x20000494
 80098c8:	200003d0 	.word	0x200003d0

080098cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10b      	bne.n	80098f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	60fb      	str	r3, [r7, #12]
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	e7fd      	b.n	80098f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098f4:	4b07      	ldr	r3, [pc, #28]	@ (8009914 <vTaskPlaceOnEventList+0x48>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3318      	adds	r3, #24
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff fb25 	bl	8008f4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009902:	2101      	movs	r1, #1
 8009904:	6838      	ldr	r0, [r7, #0]
 8009906:	f000 f9b7 	bl	8009c78 <prvAddCurrentTaskToDelayedList>
}
 800990a:	bf00      	nop
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	200003cc 	.word	0x200003cc

08009918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10b      	bne.n	8009946 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60fb      	str	r3, [r7, #12]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3318      	adds	r3, #24
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff fb37 	bl	8008fbe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009950:	4b1d      	ldr	r3, [pc, #116]	@ (80099c8 <xTaskRemoveFromEventList+0xb0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11c      	bne.n	8009992 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	3304      	adds	r3, #4
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fb2e 	bl	8008fbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	2201      	movs	r2, #1
 8009968:	409a      	lsls	r2, r3
 800996a:	4b18      	ldr	r3, [pc, #96]	@ (80099cc <xTaskRemoveFromEventList+0xb4>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4313      	orrs	r3, r2
 8009970:	4a16      	ldr	r2, [pc, #88]	@ (80099cc <xTaskRemoveFromEventList+0xb4>)
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009978:	4613      	mov	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4a13      	ldr	r2, [pc, #76]	@ (80099d0 <xTaskRemoveFromEventList+0xb8>)
 8009982:	441a      	add	r2, r3
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7ff faba 	bl	8008f04 <vListInsertEnd>
 8009990:	e005      	b.n	800999e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	3318      	adds	r3, #24
 8009996:	4619      	mov	r1, r3
 8009998:	480e      	ldr	r0, [pc, #56]	@ (80099d4 <xTaskRemoveFromEventList+0xbc>)
 800999a:	f7ff fab3 	bl	8008f04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a2:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <xTaskRemoveFromEventList+0xc0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d905      	bls.n	80099b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099b0:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <xTaskRemoveFromEventList+0xc4>)
 80099b2:	2201      	movs	r2, #1
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e001      	b.n	80099bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099bc:	697b      	ldr	r3, [r7, #20]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200004ac 	.word	0x200004ac
 80099cc:	20000494 	.word	0x20000494
 80099d0:	200003d0 	.word	0x200003d0
 80099d4:	20000464 	.word	0x20000464
 80099d8:	200003cc 	.word	0x200003cc
 80099dc:	200004a0 	.word	0x200004a0

080099e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099e8:	4b06      	ldr	r3, [pc, #24]	@ (8009a04 <vTaskInternalSetTimeOutState+0x24>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099f0:	4b05      	ldr	r3, [pc, #20]	@ (8009a08 <vTaskInternalSetTimeOutState+0x28>)
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	605a      	str	r2, [r3, #4]
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	200004a4 	.word	0x200004a4
 8009a08:	20000490 	.word	0x20000490

08009a0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10b      	bne.n	8009a34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	613b      	str	r3, [r7, #16]
}
 8009a2e:	bf00      	nop
 8009a30:	bf00      	nop
 8009a32:	e7fd      	b.n	8009a30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	60fb      	str	r3, [r7, #12]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a52:	f000 f991 	bl	8009d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a56:	4b1d      	ldr	r3, [pc, #116]	@ (8009acc <xTaskCheckForTimeOut+0xc0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d102      	bne.n	8009a76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61fb      	str	r3, [r7, #28]
 8009a74:	e023      	b.n	8009abe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b15      	ldr	r3, [pc, #84]	@ (8009ad0 <xTaskCheckForTimeOut+0xc4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d007      	beq.n	8009a92 <xTaskCheckForTimeOut+0x86>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d302      	bcc.n	8009a92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	61fb      	str	r3, [r7, #28]
 8009a90:	e015      	b.n	8009abe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d20b      	bcs.n	8009ab4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	1ad2      	subs	r2, r2, r3
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff99 	bl	80099e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61fb      	str	r3, [r7, #28]
 8009ab2:	e004      	b.n	8009abe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009aba:	2301      	movs	r3, #1
 8009abc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009abe:	f000 f98d 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20000490 	.word	0x20000490
 8009ad0:	200004a4 	.word	0x200004a4

08009ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ad8:	4b03      	ldr	r3, [pc, #12]	@ (8009ae8 <vTaskMissedYield+0x14>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	601a      	str	r2, [r3, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	200004a0 	.word	0x200004a0

08009aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009af2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b24 <prvResetNextTaskUnblockTime+0x38>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d104      	bne.n	8009b06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <prvResetNextTaskUnblockTime+0x3c>)
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b04:	e008      	b.n	8009b18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b06:	4b07      	ldr	r3, [pc, #28]	@ (8009b24 <prvResetNextTaskUnblockTime+0x38>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	4a04      	ldr	r2, [pc, #16]	@ (8009b28 <prvResetNextTaskUnblockTime+0x3c>)
 8009b16:	6013      	str	r3, [r2, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	2000045c 	.word	0x2000045c
 8009b28:	200004a8 	.word	0x200004a8

08009b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b32:	4b0b      	ldr	r3, [pc, #44]	@ (8009b60 <xTaskGetSchedulerState+0x34>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d102      	bne.n	8009b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	607b      	str	r3, [r7, #4]
 8009b3e:	e008      	b.n	8009b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b40:	4b08      	ldr	r3, [pc, #32]	@ (8009b64 <xTaskGetSchedulerState+0x38>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d102      	bne.n	8009b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	607b      	str	r3, [r7, #4]
 8009b4c:	e001      	b.n	8009b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b52:	687b      	ldr	r3, [r7, #4]
	}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	20000498 	.word	0x20000498
 8009b64:	200004ac 	.word	0x200004ac

08009b68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d070      	beq.n	8009c60 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8009c6c <xTaskPriorityDisinherit+0x104>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d00b      	beq.n	8009ba0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	bf00      	nop
 8009b9e:	e7fd      	b.n	8009b9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	60bb      	str	r3, [r7, #8]
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bc4:	1e5a      	subs	r2, r3, #1
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d044      	beq.n	8009c60 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d140      	bne.n	8009c60 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	3304      	adds	r3, #4
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff f9eb 	bl	8008fbe <uxListRemove>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d115      	bne.n	8009c1a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf2:	491f      	ldr	r1, [pc, #124]	@ (8009c70 <xTaskPriorityDisinherit+0x108>)
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <xTaskPriorityDisinherit+0xb2>
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	2201      	movs	r2, #1
 8009c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0e:	43da      	mvns	r2, r3
 8009c10:	4b18      	ldr	r3, [pc, #96]	@ (8009c74 <xTaskPriorityDisinherit+0x10c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4013      	ands	r3, r2
 8009c16:	4a17      	ldr	r2, [pc, #92]	@ (8009c74 <xTaskPriorityDisinherit+0x10c>)
 8009c18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c26:	f1c3 0207 	rsb	r2, r3, #7
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c32:	2201      	movs	r2, #1
 8009c34:	409a      	lsls	r2, r3
 8009c36:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <xTaskPriorityDisinherit+0x10c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8009c74 <xTaskPriorityDisinherit+0x10c>)
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4a08      	ldr	r2, [pc, #32]	@ (8009c70 <xTaskPriorityDisinherit+0x108>)
 8009c4e:	441a      	add	r2, r3
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7ff f954 	bl	8008f04 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c60:	697b      	ldr	r3, [r7, #20]
	}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	200003cc 	.word	0x200003cc
 8009c70:	200003d0 	.word	0x200003d0
 8009c74:	20000494 	.word	0x20000494

08009c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c82:	4b29      	ldr	r3, [pc, #164]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c88:	4b28      	ldr	r3, [pc, #160]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff f995 	bl	8008fbe <uxListRemove>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10b      	bne.n	8009cb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c9a:	4b24      	ldr	r3, [pc, #144]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	4b21      	ldr	r3, [pc, #132]	@ (8009d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4013      	ands	r3, r2
 8009cae:	4a20      	ldr	r2, [pc, #128]	@ (8009d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d10a      	bne.n	8009cd0 <prvAddCurrentTaskToDelayedList+0x58>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	481a      	ldr	r0, [pc, #104]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009cca:	f7ff f91b 	bl	8008f04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cce:	e026      	b.n	8009d1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cd8:	4b14      	ldr	r3, [pc, #80]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d209      	bcs.n	8009cfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ce8:	4b13      	ldr	r3, [pc, #76]	@ (8009d38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	4b0f      	ldr	r3, [pc, #60]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7ff f929 	bl	8008f4c <vListInsert>
}
 8009cfa:	e010      	b.n	8009d1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8009d3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3304      	adds	r3, #4
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f7ff f91f 	bl	8008f4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d202      	bcs.n	8009d1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d18:	4a09      	ldr	r2, [pc, #36]	@ (8009d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	6013      	str	r3, [r2, #0]
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000490 	.word	0x20000490
 8009d2c:	200003cc 	.word	0x200003cc
 8009d30:	20000494 	.word	0x20000494
 8009d34:	20000478 	.word	0x20000478
 8009d38:	20000460 	.word	0x20000460
 8009d3c:	2000045c 	.word	0x2000045c
 8009d40:	200004a8 	.word	0x200004a8
	...

08009d50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d50:	4b07      	ldr	r3, [pc, #28]	@ (8009d70 <pxCurrentTCBConst2>)
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	6808      	ldr	r0, [r1, #0]
 8009d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	f380 8809 	msr	PSP, r0
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8811 	msr	BASEPRI, r0
 8009d6a:	4770      	bx	lr
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst2>:
 8009d70:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d92:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d110      	bne.n	8009dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da4:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd8 <vPortEnterCritical+0x60>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	603b      	str	r3, [r7, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vPortEnterCritical+0x4a>
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	2000000c 	.word	0x2000000c
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <vPortExitCritical+0x50>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <vPortExitCritical+0x26>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	607b      	str	r3, [r7, #4]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e02:	4b0a      	ldr	r3, [pc, #40]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	4a08      	ldr	r2, [pc, #32]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <vPortExitCritical+0x44>
 8009e14:	2300      	movs	r3, #0
 8009e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f383 8811 	msr	BASEPRI, r3
}
 8009e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	2000000c 	.word	0x2000000c

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	@ (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e54:	f380 8811 	msr	BASEPRI, r0
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f7ff fcb2 	bl	80097c8 <vTaskSwitchContext>
 8009e64:	f04f 0000 	mov.w	r0, #0
 8009e68:	f380 8811 	msr	BASEPRI, r0
 8009e6c:	bc09      	pop	{r0, r3}
 8009e6e:	6819      	ldr	r1, [r3, #0]
 8009e70:	6808      	ldr	r0, [r1, #0]
 8009e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e76:	f01e 0f10 	tst.w	lr, #16
 8009e7a:	bf08      	it	eq
 8009e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e80:	f380 8809 	msr	PSP, r0
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst>:
 8009e90:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7ff fbcf 	bl	8009654 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <SysTick_Handler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ee2:	f3ef 8305 	mrs	r3, IPSR
 8009ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d915      	bls.n	8009f1a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009eee:	4a18      	ldr	r2, [pc, #96]	@ (8009f50 <vPortValidateInterruptPriority+0x74>)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ef8:	4b16      	ldr	r3, [pc, #88]	@ (8009f54 <vPortValidateInterruptPriority+0x78>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	7afa      	ldrb	r2, [r7, #11]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d20b      	bcs.n	8009f1a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	607b      	str	r3, [r7, #4]
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	e7fd      	b.n	8009f16 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f58 <vPortValidateInterruptPriority+0x7c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f22:	4b0e      	ldr	r3, [pc, #56]	@ (8009f5c <vPortValidateInterruptPriority+0x80>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d90b      	bls.n	8009f42 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	603b      	str	r3, [r7, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	e7fd      	b.n	8009f3e <vPortValidateInterruptPriority+0x62>
	}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	e000e3f0 	.word	0xe000e3f0
 8009f54:	200004b0 	.word	0x200004b0
 8009f58:	e000ed0c 	.word	0xe000ed0c
 8009f5c:	200004b4 	.word	0x200004b4

08009f60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fe9a 	bl	8008ca8 <USBH_LL_IncTimer>
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fede 	bl	8008d4c <USBH_LL_Connect>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fef3 	bl	8008d92 <USBH_LL_Disconnect>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe ff13 	bl	8008df6 <USBH_LL_NotifyURBChange>
#endif
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fe88 	bl	8008cfc <USBH_LL_PortEnabled>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fe94 	bl	8008d30 <USBH_LL_PortDisabled>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a026:	4618      	mov	r0, r3
 800a028:	f7f8 fe5f 	bl	8002cea <HAL_HCD_Stop>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a030:	7bfb      	ldrb	r3, [r7, #15]
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f808 	bl	800a048 <USBH_Get_USB_Status>
 800a038:	4603      	mov	r3, r0
 800a03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
	...

0800a048 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d817      	bhi.n	800a08c <USBH_Get_USB_Status+0x44>
 800a05c:	a201      	add	r2, pc, #4	@ (adr r2, 800a064 <USBH_Get_USB_Status+0x1c>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a07b 	.word	0x0800a07b
 800a06c:	0800a081 	.word	0x0800a081
 800a070:	0800a087 	.word	0x0800a087
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73fb      	strb	r3, [r7, #15]
    break;
 800a078:	e00b      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a07a:	2302      	movs	r3, #2
 800a07c:	73fb      	strb	r3, [r7, #15]
    break;
 800a07e:	e008      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
    break;
 800a084:	e005      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a086:	2302      	movs	r3, #2
 800a088:	73fb      	strb	r3, [r7, #15]
    break;
 800a08a:	e002      	b.n	800a092 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a08c:	2302      	movs	r3, #2
 800a08e:	73fb      	strb	r3, [r7, #15]
    break;
 800a090:	bf00      	nop
  }
  return usb_status;
 800a092:	7bfb      	ldrb	r3, [r7, #15]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <sbrk_aligned>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a0e0 <sbrk_aligned+0x40>)
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	6831      	ldr	r1, [r6, #0]
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	b911      	cbnz	r1, 800a0b2 <sbrk_aligned+0x12>
 800a0ac:	f000 faba 	bl	800a624 <_sbrk_r>
 800a0b0:	6030      	str	r0, [r6, #0]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 fab5 	bl	800a624 <_sbrk_r>
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	d103      	bne.n	800a0c6 <sbrk_aligned+0x26>
 800a0be:	f04f 34ff 	mov.w	r4, #4294967295
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	bd70      	pop	{r4, r5, r6, pc}
 800a0c6:	1cc4      	adds	r4, r0, #3
 800a0c8:	f024 0403 	bic.w	r4, r4, #3
 800a0cc:	42a0      	cmp	r0, r4
 800a0ce:	d0f8      	beq.n	800a0c2 <sbrk_aligned+0x22>
 800a0d0:	1a21      	subs	r1, r4, r0
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 faa6 	bl	800a624 <_sbrk_r>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d1f2      	bne.n	800a0c2 <sbrk_aligned+0x22>
 800a0dc:	e7ef      	b.n	800a0be <sbrk_aligned+0x1e>
 800a0de:	bf00      	nop
 800a0e0:	20000898 	.word	0x20000898

0800a0e4 <_malloc_r>:
 800a0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e8:	1ccd      	adds	r5, r1, #3
 800a0ea:	f025 0503 	bic.w	r5, r5, #3
 800a0ee:	3508      	adds	r5, #8
 800a0f0:	2d0c      	cmp	r5, #12
 800a0f2:	bf38      	it	cc
 800a0f4:	250c      	movcc	r5, #12
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	db01      	blt.n	800a100 <_malloc_r+0x1c>
 800a0fc:	42a9      	cmp	r1, r5
 800a0fe:	d904      	bls.n	800a10a <_malloc_r+0x26>
 800a100:	230c      	movs	r3, #12
 800a102:	6033      	str	r3, [r6, #0]
 800a104:	2000      	movs	r0, #0
 800a106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1e0 <_malloc_r+0xfc>
 800a10e:	f000 f869 	bl	800a1e4 <__malloc_lock>
 800a112:	f8d8 3000 	ldr.w	r3, [r8]
 800a116:	461c      	mov	r4, r3
 800a118:	bb44      	cbnz	r4, 800a16c <_malloc_r+0x88>
 800a11a:	4629      	mov	r1, r5
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff ffbf 	bl	800a0a0 <sbrk_aligned>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	4604      	mov	r4, r0
 800a126:	d158      	bne.n	800a1da <_malloc_r+0xf6>
 800a128:	f8d8 4000 	ldr.w	r4, [r8]
 800a12c:	4627      	mov	r7, r4
 800a12e:	2f00      	cmp	r7, #0
 800a130:	d143      	bne.n	800a1ba <_malloc_r+0xd6>
 800a132:	2c00      	cmp	r4, #0
 800a134:	d04b      	beq.n	800a1ce <_malloc_r+0xea>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	4639      	mov	r1, r7
 800a13a:	4630      	mov	r0, r6
 800a13c:	eb04 0903 	add.w	r9, r4, r3
 800a140:	f000 fa70 	bl	800a624 <_sbrk_r>
 800a144:	4581      	cmp	r9, r0
 800a146:	d142      	bne.n	800a1ce <_malloc_r+0xea>
 800a148:	6821      	ldr	r1, [r4, #0]
 800a14a:	1a6d      	subs	r5, r5, r1
 800a14c:	4629      	mov	r1, r5
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ffa6 	bl	800a0a0 <sbrk_aligned>
 800a154:	3001      	adds	r0, #1
 800a156:	d03a      	beq.n	800a1ce <_malloc_r+0xea>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	442b      	add	r3, r5
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	f8d8 3000 	ldr.w	r3, [r8]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	bb62      	cbnz	r2, 800a1c0 <_malloc_r+0xdc>
 800a166:	f8c8 7000 	str.w	r7, [r8]
 800a16a:	e00f      	b.n	800a18c <_malloc_r+0xa8>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	1b52      	subs	r2, r2, r5
 800a170:	d420      	bmi.n	800a1b4 <_malloc_r+0xd0>
 800a172:	2a0b      	cmp	r2, #11
 800a174:	d917      	bls.n	800a1a6 <_malloc_r+0xc2>
 800a176:	1961      	adds	r1, r4, r5
 800a178:	42a3      	cmp	r3, r4
 800a17a:	6025      	str	r5, [r4, #0]
 800a17c:	bf18      	it	ne
 800a17e:	6059      	strne	r1, [r3, #4]
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	bf08      	it	eq
 800a184:	f8c8 1000 	streq.w	r1, [r8]
 800a188:	5162      	str	r2, [r4, r5]
 800a18a:	604b      	str	r3, [r1, #4]
 800a18c:	4630      	mov	r0, r6
 800a18e:	f000 f82f 	bl	800a1f0 <__malloc_unlock>
 800a192:	f104 000b 	add.w	r0, r4, #11
 800a196:	1d23      	adds	r3, r4, #4
 800a198:	f020 0007 	bic.w	r0, r0, #7
 800a19c:	1ac2      	subs	r2, r0, r3
 800a19e:	bf1c      	itt	ne
 800a1a0:	1a1b      	subne	r3, r3, r0
 800a1a2:	50a3      	strne	r3, [r4, r2]
 800a1a4:	e7af      	b.n	800a106 <_malloc_r+0x22>
 800a1a6:	6862      	ldr	r2, [r4, #4]
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	bf0c      	ite	eq
 800a1ac:	f8c8 2000 	streq.w	r2, [r8]
 800a1b0:	605a      	strne	r2, [r3, #4]
 800a1b2:	e7eb      	b.n	800a18c <_malloc_r+0xa8>
 800a1b4:	4623      	mov	r3, r4
 800a1b6:	6864      	ldr	r4, [r4, #4]
 800a1b8:	e7ae      	b.n	800a118 <_malloc_r+0x34>
 800a1ba:	463c      	mov	r4, r7
 800a1bc:	687f      	ldr	r7, [r7, #4]
 800a1be:	e7b6      	b.n	800a12e <_malloc_r+0x4a>
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d1fb      	bne.n	800a1c0 <_malloc_r+0xdc>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	6053      	str	r3, [r2, #4]
 800a1cc:	e7de      	b.n	800a18c <_malloc_r+0xa8>
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	6033      	str	r3, [r6, #0]
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f000 f80c 	bl	800a1f0 <__malloc_unlock>
 800a1d8:	e794      	b.n	800a104 <_malloc_r+0x20>
 800a1da:	6005      	str	r5, [r0, #0]
 800a1dc:	e7d6      	b.n	800a18c <_malloc_r+0xa8>
 800a1de:	bf00      	nop
 800a1e0:	2000089c 	.word	0x2000089c

0800a1e4 <__malloc_lock>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	@ (800a1ec <__malloc_lock+0x8>)
 800a1e6:	f000 ba6a 	b.w	800a6be <__retarget_lock_acquire_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	200009e0 	.word	0x200009e0

0800a1f0 <__malloc_unlock>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	@ (800a1f8 <__malloc_unlock+0x8>)
 800a1f2:	f000 ba65 	b.w	800a6c0 <__retarget_lock_release_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	200009e0 	.word	0x200009e0

0800a1fc <__sflush_r>:
 800a1fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	0716      	lsls	r6, r2, #28
 800a206:	4605      	mov	r5, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d454      	bmi.n	800a2b6 <__sflush_r+0xba>
 800a20c:	684b      	ldr	r3, [r1, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dc02      	bgt.n	800a218 <__sflush_r+0x1c>
 800a212:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd48      	ble.n	800a2aa <__sflush_r+0xae>
 800a218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d045      	beq.n	800a2aa <__sflush_r+0xae>
 800a21e:	2300      	movs	r3, #0
 800a220:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a224:	682f      	ldr	r7, [r5, #0]
 800a226:	6a21      	ldr	r1, [r4, #32]
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	d030      	beq.n	800a28e <__sflush_r+0x92>
 800a22c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	0759      	lsls	r1, r3, #29
 800a232:	d505      	bpl.n	800a240 <__sflush_r+0x44>
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a23a:	b10b      	cbz	r3, 800a240 <__sflush_r+0x44>
 800a23c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	2300      	movs	r3, #0
 800a242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	4628      	mov	r0, r5
 800a248:	47b0      	blx	r6
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	d106      	bne.n	800a25e <__sflush_r+0x62>
 800a250:	6829      	ldr	r1, [r5, #0]
 800a252:	291d      	cmp	r1, #29
 800a254:	d82b      	bhi.n	800a2ae <__sflush_r+0xb2>
 800a256:	4a2a      	ldr	r2, [pc, #168]	@ (800a300 <__sflush_r+0x104>)
 800a258:	410a      	asrs	r2, r1
 800a25a:	07d6      	lsls	r6, r2, #31
 800a25c:	d427      	bmi.n	800a2ae <__sflush_r+0xb2>
 800a25e:	2200      	movs	r2, #0
 800a260:	6062      	str	r2, [r4, #4]
 800a262:	04d9      	lsls	r1, r3, #19
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	6022      	str	r2, [r4, #0]
 800a268:	d504      	bpl.n	800a274 <__sflush_r+0x78>
 800a26a:	1c42      	adds	r2, r0, #1
 800a26c:	d101      	bne.n	800a272 <__sflush_r+0x76>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b903      	cbnz	r3, 800a274 <__sflush_r+0x78>
 800a272:	6560      	str	r0, [r4, #84]	@ 0x54
 800a274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a276:	602f      	str	r7, [r5, #0]
 800a278:	b1b9      	cbz	r1, 800a2aa <__sflush_r+0xae>
 800a27a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a27e:	4299      	cmp	r1, r3
 800a280:	d002      	beq.n	800a288 <__sflush_r+0x8c>
 800a282:	4628      	mov	r0, r5
 800a284:	f000 fa2c 	bl	800a6e0 <_free_r>
 800a288:	2300      	movs	r3, #0
 800a28a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a28c:	e00d      	b.n	800a2aa <__sflush_r+0xae>
 800a28e:	2301      	movs	r3, #1
 800a290:	4628      	mov	r0, r5
 800a292:	47b0      	blx	r6
 800a294:	4602      	mov	r2, r0
 800a296:	1c50      	adds	r0, r2, #1
 800a298:	d1c9      	bne.n	800a22e <__sflush_r+0x32>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0c6      	beq.n	800a22e <__sflush_r+0x32>
 800a2a0:	2b1d      	cmp	r3, #29
 800a2a2:	d001      	beq.n	800a2a8 <__sflush_r+0xac>
 800a2a4:	2b16      	cmp	r3, #22
 800a2a6:	d11e      	bne.n	800a2e6 <__sflush_r+0xea>
 800a2a8:	602f      	str	r7, [r5, #0]
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e022      	b.n	800a2f4 <__sflush_r+0xf8>
 800a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b2:	b21b      	sxth	r3, r3
 800a2b4:	e01b      	b.n	800a2ee <__sflush_r+0xf2>
 800a2b6:	690f      	ldr	r7, [r1, #16]
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	d0f6      	beq.n	800a2aa <__sflush_r+0xae>
 800a2bc:	0793      	lsls	r3, r2, #30
 800a2be:	680e      	ldr	r6, [r1, #0]
 800a2c0:	bf08      	it	eq
 800a2c2:	694b      	ldreq	r3, [r1, #20]
 800a2c4:	600f      	str	r7, [r1, #0]
 800a2c6:	bf18      	it	ne
 800a2c8:	2300      	movne	r3, #0
 800a2ca:	eba6 0807 	sub.w	r8, r6, r7
 800a2ce:	608b      	str	r3, [r1, #8]
 800a2d0:	f1b8 0f00 	cmp.w	r8, #0
 800a2d4:	dde9      	ble.n	800a2aa <__sflush_r+0xae>
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2da:	4643      	mov	r3, r8
 800a2dc:	463a      	mov	r2, r7
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b0      	blx	r6
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	dc08      	bgt.n	800a2f8 <__sflush_r+0xfc>
 800a2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f8:	4407      	add	r7, r0
 800a2fa:	eba8 0800 	sub.w	r8, r8, r0
 800a2fe:	e7e7      	b.n	800a2d0 <__sflush_r+0xd4>
 800a300:	dfbffffe 	.word	0xdfbffffe

0800a304 <_fflush_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	690b      	ldr	r3, [r1, #16]
 800a308:	4605      	mov	r5, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b913      	cbnz	r3, 800a314 <_fflush_r+0x10>
 800a30e:	2500      	movs	r5, #0
 800a310:	4628      	mov	r0, r5
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	b118      	cbz	r0, 800a31e <_fflush_r+0x1a>
 800a316:	6a03      	ldr	r3, [r0, #32]
 800a318:	b90b      	cbnz	r3, 800a31e <_fflush_r+0x1a>
 800a31a:	f000 f8bb 	bl	800a494 <__sinit>
 800a31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0f3      	beq.n	800a30e <_fflush_r+0xa>
 800a326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a328:	07d0      	lsls	r0, r2, #31
 800a32a:	d404      	bmi.n	800a336 <_fflush_r+0x32>
 800a32c:	0599      	lsls	r1, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_fflush_r+0x32>
 800a330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a332:	f000 f9c4 	bl	800a6be <__retarget_lock_acquire_recursive>
 800a336:	4628      	mov	r0, r5
 800a338:	4621      	mov	r1, r4
 800a33a:	f7ff ff5f 	bl	800a1fc <__sflush_r>
 800a33e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a340:	07da      	lsls	r2, r3, #31
 800a342:	4605      	mov	r5, r0
 800a344:	d4e4      	bmi.n	800a310 <_fflush_r+0xc>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	059b      	lsls	r3, r3, #22
 800a34a:	d4e1      	bmi.n	800a310 <_fflush_r+0xc>
 800a34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a34e:	f000 f9b7 	bl	800a6c0 <__retarget_lock_release_recursive>
 800a352:	e7dd      	b.n	800a310 <_fflush_r+0xc>

0800a354 <fflush>:
 800a354:	4601      	mov	r1, r0
 800a356:	b920      	cbnz	r0, 800a362 <fflush+0xe>
 800a358:	4a04      	ldr	r2, [pc, #16]	@ (800a36c <fflush+0x18>)
 800a35a:	4905      	ldr	r1, [pc, #20]	@ (800a370 <fflush+0x1c>)
 800a35c:	4805      	ldr	r0, [pc, #20]	@ (800a374 <fflush+0x20>)
 800a35e:	f000 b8b1 	b.w	800a4c4 <_fwalk_sglue>
 800a362:	4b05      	ldr	r3, [pc, #20]	@ (800a378 <fflush+0x24>)
 800a364:	6818      	ldr	r0, [r3, #0]
 800a366:	f7ff bfcd 	b.w	800a304 <_fflush_r>
 800a36a:	bf00      	nop
 800a36c:	20000010 	.word	0x20000010
 800a370:	0800a305 	.word	0x0800a305
 800a374:	20000020 	.word	0x20000020
 800a378:	2000001c 	.word	0x2000001c

0800a37c <std>:
 800a37c:	2300      	movs	r3, #0
 800a37e:	b510      	push	{r4, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	e9c0 3300 	strd	r3, r3, [r0]
 800a386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a38a:	6083      	str	r3, [r0, #8]
 800a38c:	8181      	strh	r1, [r0, #12]
 800a38e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a390:	81c2      	strh	r2, [r0, #14]
 800a392:	6183      	str	r3, [r0, #24]
 800a394:	4619      	mov	r1, r3
 800a396:	2208      	movs	r2, #8
 800a398:	305c      	adds	r0, #92	@ 0x5c
 800a39a:	f000 f906 	bl	800a5aa <memset>
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <std+0x58>)
 800a3a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d8 <std+0x5c>)
 800a3a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <std+0x60>)
 800a3a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e0 <std+0x64>)
 800a3ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <std+0x68>)
 800a3b0:	6224      	str	r4, [r4, #32]
 800a3b2:	429c      	cmp	r4, r3
 800a3b4:	d006      	beq.n	800a3c4 <std+0x48>
 800a3b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3ba:	4294      	cmp	r4, r2
 800a3bc:	d002      	beq.n	800a3c4 <std+0x48>
 800a3be:	33d0      	adds	r3, #208	@ 0xd0
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	d105      	bne.n	800a3d0 <std+0x54>
 800a3c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3cc:	f000 b976 	b.w	800a6bc <__retarget_lock_init_recursive>
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800a525 	.word	0x0800a525
 800a3d8:	0800a547 	.word	0x0800a547
 800a3dc:	0800a57f 	.word	0x0800a57f
 800a3e0:	0800a5a3 	.word	0x0800a5a3
 800a3e4:	200008a0 	.word	0x200008a0

0800a3e8 <stdio_exit_handler>:
 800a3e8:	4a02      	ldr	r2, [pc, #8]	@ (800a3f4 <stdio_exit_handler+0xc>)
 800a3ea:	4903      	ldr	r1, [pc, #12]	@ (800a3f8 <stdio_exit_handler+0x10>)
 800a3ec:	4803      	ldr	r0, [pc, #12]	@ (800a3fc <stdio_exit_handler+0x14>)
 800a3ee:	f000 b869 	b.w	800a4c4 <_fwalk_sglue>
 800a3f2:	bf00      	nop
 800a3f4:	20000010 	.word	0x20000010
 800a3f8:	0800a305 	.word	0x0800a305
 800a3fc:	20000020 	.word	0x20000020

0800a400 <cleanup_stdio>:
 800a400:	6841      	ldr	r1, [r0, #4]
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <cleanup_stdio+0x34>)
 800a404:	4299      	cmp	r1, r3
 800a406:	b510      	push	{r4, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	d001      	beq.n	800a410 <cleanup_stdio+0x10>
 800a40c:	f7ff ff7a 	bl	800a304 <_fflush_r>
 800a410:	68a1      	ldr	r1, [r4, #8]
 800a412:	4b09      	ldr	r3, [pc, #36]	@ (800a438 <cleanup_stdio+0x38>)
 800a414:	4299      	cmp	r1, r3
 800a416:	d002      	beq.n	800a41e <cleanup_stdio+0x1e>
 800a418:	4620      	mov	r0, r4
 800a41a:	f7ff ff73 	bl	800a304 <_fflush_r>
 800a41e:	68e1      	ldr	r1, [r4, #12]
 800a420:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <cleanup_stdio+0x3c>)
 800a422:	4299      	cmp	r1, r3
 800a424:	d004      	beq.n	800a430 <cleanup_stdio+0x30>
 800a426:	4620      	mov	r0, r4
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a42c:	f7ff bf6a 	b.w	800a304 <_fflush_r>
 800a430:	bd10      	pop	{r4, pc}
 800a432:	bf00      	nop
 800a434:	200008a0 	.word	0x200008a0
 800a438:	20000908 	.word	0x20000908
 800a43c:	20000970 	.word	0x20000970

0800a440 <global_stdio_init.part.0>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <global_stdio_init.part.0+0x30>)
 800a444:	4c0b      	ldr	r4, [pc, #44]	@ (800a474 <global_stdio_init.part.0+0x34>)
 800a446:	4a0c      	ldr	r2, [pc, #48]	@ (800a478 <global_stdio_init.part.0+0x38>)
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	4620      	mov	r0, r4
 800a44c:	2200      	movs	r2, #0
 800a44e:	2104      	movs	r1, #4
 800a450:	f7ff ff94 	bl	800a37c <std>
 800a454:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a458:	2201      	movs	r2, #1
 800a45a:	2109      	movs	r1, #9
 800a45c:	f7ff ff8e 	bl	800a37c <std>
 800a460:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a464:	2202      	movs	r2, #2
 800a466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46a:	2112      	movs	r1, #18
 800a46c:	f7ff bf86 	b.w	800a37c <std>
 800a470:	200009d8 	.word	0x200009d8
 800a474:	200008a0 	.word	0x200008a0
 800a478:	0800a3e9 	.word	0x0800a3e9

0800a47c <__sfp_lock_acquire>:
 800a47c:	4801      	ldr	r0, [pc, #4]	@ (800a484 <__sfp_lock_acquire+0x8>)
 800a47e:	f000 b91e 	b.w	800a6be <__retarget_lock_acquire_recursive>
 800a482:	bf00      	nop
 800a484:	200009e1 	.word	0x200009e1

0800a488 <__sfp_lock_release>:
 800a488:	4801      	ldr	r0, [pc, #4]	@ (800a490 <__sfp_lock_release+0x8>)
 800a48a:	f000 b919 	b.w	800a6c0 <__retarget_lock_release_recursive>
 800a48e:	bf00      	nop
 800a490:	200009e1 	.word	0x200009e1

0800a494 <__sinit>:
 800a494:	b510      	push	{r4, lr}
 800a496:	4604      	mov	r4, r0
 800a498:	f7ff fff0 	bl	800a47c <__sfp_lock_acquire>
 800a49c:	6a23      	ldr	r3, [r4, #32]
 800a49e:	b11b      	cbz	r3, 800a4a8 <__sinit+0x14>
 800a4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a4:	f7ff bff0 	b.w	800a488 <__sfp_lock_release>
 800a4a8:	4b04      	ldr	r3, [pc, #16]	@ (800a4bc <__sinit+0x28>)
 800a4aa:	6223      	str	r3, [r4, #32]
 800a4ac:	4b04      	ldr	r3, [pc, #16]	@ (800a4c0 <__sinit+0x2c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f5      	bne.n	800a4a0 <__sinit+0xc>
 800a4b4:	f7ff ffc4 	bl	800a440 <global_stdio_init.part.0>
 800a4b8:	e7f2      	b.n	800a4a0 <__sinit+0xc>
 800a4ba:	bf00      	nop
 800a4bc:	0800a401 	.word	0x0800a401
 800a4c0:	200009d8 	.word	0x200009d8

0800a4c4 <_fwalk_sglue>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	4688      	mov	r8, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4d8:	d505      	bpl.n	800a4e6 <_fwalk_sglue+0x22>
 800a4da:	6824      	ldr	r4, [r4, #0]
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d1f7      	bne.n	800a4d0 <_fwalk_sglue+0xc>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e6:	89ab      	ldrh	r3, [r5, #12]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d907      	bls.n	800a4fc <_fwalk_sglue+0x38>
 800a4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	d003      	beq.n	800a4fc <_fwalk_sglue+0x38>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	4306      	orrs	r6, r0
 800a4fc:	3568      	adds	r5, #104	@ 0x68
 800a4fe:	e7e9      	b.n	800a4d4 <_fwalk_sglue+0x10>

0800a500 <iprintf>:
 800a500:	b40f      	push	{r0, r1, r2, r3}
 800a502:	b507      	push	{r0, r1, r2, lr}
 800a504:	4906      	ldr	r1, [pc, #24]	@ (800a520 <iprintf+0x20>)
 800a506:	ab04      	add	r3, sp, #16
 800a508:	6808      	ldr	r0, [r1, #0]
 800a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50e:	6881      	ldr	r1, [r0, #8]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	f000 f959 	bl	800a7c8 <_vfiprintf_r>
 800a516:	b003      	add	sp, #12
 800a518:	f85d eb04 	ldr.w	lr, [sp], #4
 800a51c:	b004      	add	sp, #16
 800a51e:	4770      	bx	lr
 800a520:	2000001c 	.word	0x2000001c

0800a524 <__sread>:
 800a524:	b510      	push	{r4, lr}
 800a526:	460c      	mov	r4, r1
 800a528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a52c:	f000 f868 	bl	800a600 <_read_r>
 800a530:	2800      	cmp	r0, #0
 800a532:	bfab      	itete	ge
 800a534:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a536:	89a3      	ldrhlt	r3, [r4, #12]
 800a538:	181b      	addge	r3, r3, r0
 800a53a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a53e:	bfac      	ite	ge
 800a540:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a542:	81a3      	strhlt	r3, [r4, #12]
 800a544:	bd10      	pop	{r4, pc}

0800a546 <__swrite>:
 800a546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54a:	461f      	mov	r7, r3
 800a54c:	898b      	ldrh	r3, [r1, #12]
 800a54e:	05db      	lsls	r3, r3, #23
 800a550:	4605      	mov	r5, r0
 800a552:	460c      	mov	r4, r1
 800a554:	4616      	mov	r6, r2
 800a556:	d505      	bpl.n	800a564 <__swrite+0x1e>
 800a558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55c:	2302      	movs	r3, #2
 800a55e:	2200      	movs	r2, #0
 800a560:	f000 f83c 	bl	800a5dc <_lseek_r>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a56a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	4632      	mov	r2, r6
 800a572:	463b      	mov	r3, r7
 800a574:	4628      	mov	r0, r5
 800a576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	f000 b863 	b.w	800a644 <_write_r>

0800a57e <__sseek>:
 800a57e:	b510      	push	{r4, lr}
 800a580:	460c      	mov	r4, r1
 800a582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a586:	f000 f829 	bl	800a5dc <_lseek_r>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	bf15      	itete	ne
 800a590:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a59a:	81a3      	strheq	r3, [r4, #12]
 800a59c:	bf18      	it	ne
 800a59e:	81a3      	strhne	r3, [r4, #12]
 800a5a0:	bd10      	pop	{r4, pc}

0800a5a2 <__sclose>:
 800a5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a6:	f000 b809 	b.w	800a5bc <_close_r>

0800a5aa <memset>:
 800a5aa:	4402      	add	r2, r0
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d100      	bne.n	800a5b4 <memset+0xa>
 800a5b2:	4770      	bx	lr
 800a5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b8:	e7f9      	b.n	800a5ae <memset+0x4>
	...

0800a5bc <_close_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4d06      	ldr	r5, [pc, #24]	@ (800a5d8 <_close_r+0x1c>)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4608      	mov	r0, r1
 800a5c6:	602b      	str	r3, [r5, #0]
 800a5c8:	f7f7 fa51 	bl	8001a6e <_close>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_close_r+0x1a>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_close_r+0x1a>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	200009dc 	.word	0x200009dc

0800a5dc <_lseek_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4d07      	ldr	r5, [pc, #28]	@ (800a5fc <_lseek_r+0x20>)
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	4608      	mov	r0, r1
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f7f7 fa66 	bl	8001abc <_lseek>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d102      	bne.n	800a5fa <_lseek_r+0x1e>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b103      	cbz	r3, 800a5fa <_lseek_r+0x1e>
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	200009dc 	.word	0x200009dc

0800a600 <_read_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4d07      	ldr	r5, [pc, #28]	@ (800a620 <_read_r+0x20>)
 800a604:	4604      	mov	r4, r0
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7f7 fa10 	bl	8001a34 <_read>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_read_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_read_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	200009dc 	.word	0x200009dc

0800a624 <_sbrk_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d06      	ldr	r5, [pc, #24]	@ (800a640 <_sbrk_r+0x1c>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	f7f7 fa52 	bl	8001ad8 <_sbrk>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_sbrk_r+0x1a>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_sbrk_r+0x1a>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	200009dc 	.word	0x200009dc

0800a644 <_write_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d07      	ldr	r5, [pc, #28]	@ (800a664 <_write_r+0x20>)
 800a648:	4604      	mov	r4, r0
 800a64a:	4608      	mov	r0, r1
 800a64c:	4611      	mov	r1, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	602a      	str	r2, [r5, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	f7f6 f910 	bl	8000878 <_write>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_write_r+0x1e>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_write_r+0x1e>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	200009dc 	.word	0x200009dc

0800a668 <__errno>:
 800a668:	4b01      	ldr	r3, [pc, #4]	@ (800a670 <__errno+0x8>)
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	2000001c 	.word	0x2000001c

0800a674 <__libc_init_array>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4d0d      	ldr	r5, [pc, #52]	@ (800a6ac <__libc_init_array+0x38>)
 800a678:	4c0d      	ldr	r4, [pc, #52]	@ (800a6b0 <__libc_init_array+0x3c>)
 800a67a:	1b64      	subs	r4, r4, r5
 800a67c:	10a4      	asrs	r4, r4, #2
 800a67e:	2600      	movs	r6, #0
 800a680:	42a6      	cmp	r6, r4
 800a682:	d109      	bne.n	800a698 <__libc_init_array+0x24>
 800a684:	4d0b      	ldr	r5, [pc, #44]	@ (800a6b4 <__libc_init_array+0x40>)
 800a686:	4c0c      	ldr	r4, [pc, #48]	@ (800a6b8 <__libc_init_array+0x44>)
 800a688:	f000 fc5c 	bl	800af44 <_init>
 800a68c:	1b64      	subs	r4, r4, r5
 800a68e:	10a4      	asrs	r4, r4, #2
 800a690:	2600      	movs	r6, #0
 800a692:	42a6      	cmp	r6, r4
 800a694:	d105      	bne.n	800a6a2 <__libc_init_array+0x2e>
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69c:	4798      	blx	r3
 800a69e:	3601      	adds	r6, #1
 800a6a0:	e7ee      	b.n	800a680 <__libc_init_array+0xc>
 800a6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a6:	4798      	blx	r3
 800a6a8:	3601      	adds	r6, #1
 800a6aa:	e7f2      	b.n	800a692 <__libc_init_array+0x1e>
 800a6ac:	0800b0dc 	.word	0x0800b0dc
 800a6b0:	0800b0dc 	.word	0x0800b0dc
 800a6b4:	0800b0dc 	.word	0x0800b0dc
 800a6b8:	0800b0e0 	.word	0x0800b0e0

0800a6bc <__retarget_lock_init_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_acquire_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <__retarget_lock_release_recursive>:
 800a6c0:	4770      	bx	lr

0800a6c2 <memcpy>:
 800a6c2:	440a      	add	r2, r1
 800a6c4:	4291      	cmp	r1, r2
 800a6c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6ca:	d100      	bne.n	800a6ce <memcpy+0xc>
 800a6cc:	4770      	bx	lr
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d8:	4291      	cmp	r1, r2
 800a6da:	d1f9      	bne.n	800a6d0 <memcpy+0xe>
 800a6dc:	bd10      	pop	{r4, pc}
	...

0800a6e0 <_free_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	2900      	cmp	r1, #0
 800a6e6:	d041      	beq.n	800a76c <_free_r+0x8c>
 800a6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ec:	1f0c      	subs	r4, r1, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfb8      	it	lt
 800a6f2:	18e4      	addlt	r4, r4, r3
 800a6f4:	f7ff fd76 	bl	800a1e4 <__malloc_lock>
 800a6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a770 <_free_r+0x90>)
 800a6fa:	6813      	ldr	r3, [r2, #0]
 800a6fc:	b933      	cbnz	r3, 800a70c <_free_r+0x2c>
 800a6fe:	6063      	str	r3, [r4, #4]
 800a700:	6014      	str	r4, [r2, #0]
 800a702:	4628      	mov	r0, r5
 800a704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a708:	f7ff bd72 	b.w	800a1f0 <__malloc_unlock>
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	d908      	bls.n	800a722 <_free_r+0x42>
 800a710:	6820      	ldr	r0, [r4, #0]
 800a712:	1821      	adds	r1, r4, r0
 800a714:	428b      	cmp	r3, r1
 800a716:	bf01      	itttt	eq
 800a718:	6819      	ldreq	r1, [r3, #0]
 800a71a:	685b      	ldreq	r3, [r3, #4]
 800a71c:	1809      	addeq	r1, r1, r0
 800a71e:	6021      	streq	r1, [r4, #0]
 800a720:	e7ed      	b.n	800a6fe <_free_r+0x1e>
 800a722:	461a      	mov	r2, r3
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	b10b      	cbz	r3, 800a72c <_free_r+0x4c>
 800a728:	42a3      	cmp	r3, r4
 800a72a:	d9fa      	bls.n	800a722 <_free_r+0x42>
 800a72c:	6811      	ldr	r1, [r2, #0]
 800a72e:	1850      	adds	r0, r2, r1
 800a730:	42a0      	cmp	r0, r4
 800a732:	d10b      	bne.n	800a74c <_free_r+0x6c>
 800a734:	6820      	ldr	r0, [r4, #0]
 800a736:	4401      	add	r1, r0
 800a738:	1850      	adds	r0, r2, r1
 800a73a:	4283      	cmp	r3, r0
 800a73c:	6011      	str	r1, [r2, #0]
 800a73e:	d1e0      	bne.n	800a702 <_free_r+0x22>
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	6053      	str	r3, [r2, #4]
 800a746:	4408      	add	r0, r1
 800a748:	6010      	str	r0, [r2, #0]
 800a74a:	e7da      	b.n	800a702 <_free_r+0x22>
 800a74c:	d902      	bls.n	800a754 <_free_r+0x74>
 800a74e:	230c      	movs	r3, #12
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	e7d6      	b.n	800a702 <_free_r+0x22>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	1821      	adds	r1, r4, r0
 800a758:	428b      	cmp	r3, r1
 800a75a:	bf04      	itt	eq
 800a75c:	6819      	ldreq	r1, [r3, #0]
 800a75e:	685b      	ldreq	r3, [r3, #4]
 800a760:	6063      	str	r3, [r4, #4]
 800a762:	bf04      	itt	eq
 800a764:	1809      	addeq	r1, r1, r0
 800a766:	6021      	streq	r1, [r4, #0]
 800a768:	6054      	str	r4, [r2, #4]
 800a76a:	e7ca      	b.n	800a702 <_free_r+0x22>
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	bf00      	nop
 800a770:	2000089c 	.word	0x2000089c

0800a774 <__sfputc_r>:
 800a774:	6893      	ldr	r3, [r2, #8]
 800a776:	3b01      	subs	r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	b410      	push	{r4}
 800a77c:	6093      	str	r3, [r2, #8]
 800a77e:	da08      	bge.n	800a792 <__sfputc_r+0x1e>
 800a780:	6994      	ldr	r4, [r2, #24]
 800a782:	42a3      	cmp	r3, r4
 800a784:	db01      	blt.n	800a78a <__sfputc_r+0x16>
 800a786:	290a      	cmp	r1, #10
 800a788:	d103      	bne.n	800a792 <__sfputc_r+0x1e>
 800a78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a78e:	f000 bac1 	b.w	800ad14 <__swbuf_r>
 800a792:	6813      	ldr	r3, [r2, #0]
 800a794:	1c58      	adds	r0, r3, #1
 800a796:	6010      	str	r0, [r2, #0]
 800a798:	7019      	strb	r1, [r3, #0]
 800a79a:	4608      	mov	r0, r1
 800a79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <__sfputs_r>:
 800a7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	18d5      	adds	r5, r2, r3
 800a7ac:	42ac      	cmp	r4, r5
 800a7ae:	d101      	bne.n	800a7b4 <__sfputs_r+0x12>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e007      	b.n	800a7c4 <__sfputs_r+0x22>
 800a7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b8:	463a      	mov	r2, r7
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ffda 	bl	800a774 <__sfputc_r>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d1f3      	bne.n	800a7ac <__sfputs_r+0xa>
 800a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c8 <_vfiprintf_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	b09d      	sub	sp, #116	@ 0x74
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4698      	mov	r8, r3
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	b118      	cbz	r0, 800a7e0 <_vfiprintf_r+0x18>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x18>
 800a7dc:	f7ff fe5a 	bl	800a494 <__sinit>
 800a7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d405      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ee:	f7ff ff66 	bl	800a6be <__retarget_lock_acquire_recursive>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <_vfiprintf_r+0x34>
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	b99b      	cbnz	r3, 800a824 <_vfiprintf_r+0x5c>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 fac6 	bl	800ad90 <__swsetup_r>
 800a804:	b170      	cbz	r0, 800a824 <_vfiprintf_r+0x5c>
 800a806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a808:	07dc      	lsls	r4, r3, #31
 800a80a:	d504      	bpl.n	800a816 <_vfiprintf_r+0x4e>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b01d      	add	sp, #116	@ 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4f7      	bmi.n	800a80c <_vfiprintf_r+0x44>
 800a81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a81e:	f7ff ff4f 	bl	800a6c0 <__retarget_lock_release_recursive>
 800a822:	e7f3      	b.n	800a80c <_vfiprintf_r+0x44>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	@ 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a832:	2330      	movs	r3, #48	@ 0x30
 800a834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9e4 <_vfiprintf_r+0x21c>
 800a838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a83c:	f04f 0901 	mov.w	r9, #1
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0x86>
 800a84a:	2a25      	cmp	r2, #37	@ 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x7a>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xa4>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ffa1 	bl	800a7a2 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80a7 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 809f 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a88c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4853      	ldr	r0, [pc, #332]	@ (800a9e4 <_vfiprintf_r+0x21c>)
 800a898:	f7f5 fcaa 	bl	80001f0 <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x110>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	@ 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x120>
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	@ 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94b      	bls.n	800a96a <_vfiprintf_r+0x1a2>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x13a>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x13a>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	46a2      	mov	sl, r4
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xc6>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	@ 0x2e
 800a906:	d10a      	bne.n	800a91e <_vfiprintf_r+0x156>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90c:	d132      	bne.n	800a974 <_vfiprintf_r+0x1ac>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9203      	str	r2, [sp, #12]
 800a916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a91a:	3402      	adds	r4, #2
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9f4 <_vfiprintf_r+0x22c>
 800a922:	7821      	ldrb	r1, [r4, #0]
 800a924:	2203      	movs	r2, #3
 800a926:	4650      	mov	r0, sl
 800a928:	f7f5 fc62 	bl	80001f0 <memchr>
 800a92c:	b138      	cbz	r0, 800a93e <_vfiprintf_r+0x176>
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	eba0 000a 	sub.w	r0, r0, sl
 800a934:	2240      	movs	r2, #64	@ 0x40
 800a936:	4082      	lsls	r2, r0
 800a938:	4313      	orrs	r3, r2
 800a93a:	3401      	adds	r4, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	4829      	ldr	r0, [pc, #164]	@ (800a9e8 <_vfiprintf_r+0x220>)
 800a944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a948:	2206      	movs	r2, #6
 800a94a:	f7f5 fc51 	bl	80001f0 <memchr>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d03f      	beq.n	800a9d2 <_vfiprintf_r+0x20a>
 800a952:	4b26      	ldr	r3, [pc, #152]	@ (800a9ec <_vfiprintf_r+0x224>)
 800a954:	bb1b      	cbnz	r3, 800a99e <_vfiprintf_r+0x1d6>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	3308      	adds	r3, #8
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a964:	443b      	add	r3, r7
 800a966:	9309      	str	r3, [sp, #36]	@ 0x24
 800a968:	e76a      	b.n	800a840 <_vfiprintf_r+0x78>
 800a96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a96e:	460c      	mov	r4, r1
 800a970:	2001      	movs	r0, #1
 800a972:	e7a8      	b.n	800a8c6 <_vfiprintf_r+0xfe>
 800a974:	2300      	movs	r3, #0
 800a976:	3401      	adds	r4, #1
 800a978:	9305      	str	r3, [sp, #20]
 800a97a:	4619      	mov	r1, r3
 800a97c:	f04f 0c0a 	mov.w	ip, #10
 800a980:	4620      	mov	r0, r4
 800a982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a986:	3a30      	subs	r2, #48	@ 0x30
 800a988:	2a09      	cmp	r2, #9
 800a98a:	d903      	bls.n	800a994 <_vfiprintf_r+0x1cc>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0c6      	beq.n	800a91e <_vfiprintf_r+0x156>
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	e7c4      	b.n	800a91e <_vfiprintf_r+0x156>
 800a994:	fb0c 2101 	mla	r1, ip, r1, r2
 800a998:	4604      	mov	r4, r0
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7f0      	b.n	800a980 <_vfiprintf_r+0x1b8>
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4b12      	ldr	r3, [pc, #72]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a9a6:	a904      	add	r1, sp, #16
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f3af 8000 	nop.w
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	1c78      	adds	r0, r7, #1
 800a9b2:	d1d6      	bne.n	800a962 <_vfiprintf_r+0x19a>
 800a9b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9b6:	07d9      	lsls	r1, r3, #31
 800a9b8:	d405      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9ba:	89ab      	ldrh	r3, [r5, #12]
 800a9bc:	059a      	lsls	r2, r3, #22
 800a9be:	d402      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9c2:	f7ff fe7d 	bl	800a6c0 <__retarget_lock_release_recursive>
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	065b      	lsls	r3, r3, #25
 800a9ca:	f53f af1f 	bmi.w	800a80c <_vfiprintf_r+0x44>
 800a9ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9d0:	e71e      	b.n	800a810 <_vfiprintf_r+0x48>
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4b05      	ldr	r3, [pc, #20]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a9da:	a904      	add	r1, sp, #16
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f000 f879 	bl	800aad4 <_printf_i>
 800a9e2:	e7e4      	b.n	800a9ae <_vfiprintf_r+0x1e6>
 800a9e4:	0800b0a0 	.word	0x0800b0a0
 800a9e8:	0800b0aa 	.word	0x0800b0aa
 800a9ec:	00000000 	.word	0x00000000
 800a9f0:	0800a7a3 	.word	0x0800a7a3
 800a9f4:	0800b0a6 	.word	0x0800b0a6

0800a9f8 <_printf_common>:
 800a9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	4698      	mov	r8, r3
 800aa00:	688a      	ldr	r2, [r1, #8]
 800aa02:	690b      	ldr	r3, [r1, #16]
 800aa04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	bfb8      	it	lt
 800aa0c:	4613      	movlt	r3, r2
 800aa0e:	6033      	str	r3, [r6, #0]
 800aa10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa14:	4607      	mov	r7, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	b10a      	cbz	r2, 800aa1e <_printf_common+0x26>
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	6033      	str	r3, [r6, #0]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	0699      	lsls	r1, r3, #26
 800aa22:	bf42      	ittt	mi
 800aa24:	6833      	ldrmi	r3, [r6, #0]
 800aa26:	3302      	addmi	r3, #2
 800aa28:	6033      	strmi	r3, [r6, #0]
 800aa2a:	6825      	ldr	r5, [r4, #0]
 800aa2c:	f015 0506 	ands.w	r5, r5, #6
 800aa30:	d106      	bne.n	800aa40 <_printf_common+0x48>
 800aa32:	f104 0a19 	add.w	sl, r4, #25
 800aa36:	68e3      	ldr	r3, [r4, #12]
 800aa38:	6832      	ldr	r2, [r6, #0]
 800aa3a:	1a9b      	subs	r3, r3, r2
 800aa3c:	42ab      	cmp	r3, r5
 800aa3e:	dc26      	bgt.n	800aa8e <_printf_common+0x96>
 800aa40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	3b00      	subs	r3, #0
 800aa48:	bf18      	it	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	0692      	lsls	r2, r2, #26
 800aa4e:	d42b      	bmi.n	800aaa8 <_printf_common+0xb0>
 800aa50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa54:	4641      	mov	r1, r8
 800aa56:	4638      	mov	r0, r7
 800aa58:	47c8      	blx	r9
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	d01e      	beq.n	800aa9c <_printf_common+0xa4>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	6922      	ldr	r2, [r4, #16]
 800aa62:	f003 0306 	and.w	r3, r3, #6
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	bf02      	ittt	eq
 800aa6a:	68e5      	ldreq	r5, [r4, #12]
 800aa6c:	6833      	ldreq	r3, [r6, #0]
 800aa6e:	1aed      	subeq	r5, r5, r3
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	bf0c      	ite	eq
 800aa74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa78:	2500      	movne	r5, #0
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	bfc4      	itt	gt
 800aa7e:	1a9b      	subgt	r3, r3, r2
 800aa80:	18ed      	addgt	r5, r5, r3
 800aa82:	2600      	movs	r6, #0
 800aa84:	341a      	adds	r4, #26
 800aa86:	42b5      	cmp	r5, r6
 800aa88:	d11a      	bne.n	800aac0 <_printf_common+0xc8>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e008      	b.n	800aaa0 <_printf_common+0xa8>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4652      	mov	r2, sl
 800aa92:	4641      	mov	r1, r8
 800aa94:	4638      	mov	r0, r7
 800aa96:	47c8      	blx	r9
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d103      	bne.n	800aaa4 <_printf_common+0xac>
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	e7c6      	b.n	800aa36 <_printf_common+0x3e>
 800aaa8:	18e1      	adds	r1, r4, r3
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	2030      	movs	r0, #48	@ 0x30
 800aaae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aab2:	4422      	add	r2, r4
 800aab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aabc:	3302      	adds	r3, #2
 800aabe:	e7c7      	b.n	800aa50 <_printf_common+0x58>
 800aac0:	2301      	movs	r3, #1
 800aac2:	4622      	mov	r2, r4
 800aac4:	4641      	mov	r1, r8
 800aac6:	4638      	mov	r0, r7
 800aac8:	47c8      	blx	r9
 800aaca:	3001      	adds	r0, #1
 800aacc:	d0e6      	beq.n	800aa9c <_printf_common+0xa4>
 800aace:	3601      	adds	r6, #1
 800aad0:	e7d9      	b.n	800aa86 <_printf_common+0x8e>
	...

0800aad4 <_printf_i>:
 800aad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	7e0f      	ldrb	r7, [r1, #24]
 800aada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aadc:	2f78      	cmp	r7, #120	@ 0x78
 800aade:	4691      	mov	r9, r2
 800aae0:	4680      	mov	r8, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	469a      	mov	sl, r3
 800aae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaea:	d807      	bhi.n	800aafc <_printf_i+0x28>
 800aaec:	2f62      	cmp	r7, #98	@ 0x62
 800aaee:	d80a      	bhi.n	800ab06 <_printf_i+0x32>
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	f000 80d2 	beq.w	800ac9a <_printf_i+0x1c6>
 800aaf6:	2f58      	cmp	r7, #88	@ 0x58
 800aaf8:	f000 80b9 	beq.w	800ac6e <_printf_i+0x19a>
 800aafc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab04:	e03a      	b.n	800ab7c <_printf_i+0xa8>
 800ab06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab0a:	2b15      	cmp	r3, #21
 800ab0c:	d8f6      	bhi.n	800aafc <_printf_i+0x28>
 800ab0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab14 <_printf_i+0x40>)
 800ab10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab14:	0800ab6d 	.word	0x0800ab6d
 800ab18:	0800ab81 	.word	0x0800ab81
 800ab1c:	0800aafd 	.word	0x0800aafd
 800ab20:	0800aafd 	.word	0x0800aafd
 800ab24:	0800aafd 	.word	0x0800aafd
 800ab28:	0800aafd 	.word	0x0800aafd
 800ab2c:	0800ab81 	.word	0x0800ab81
 800ab30:	0800aafd 	.word	0x0800aafd
 800ab34:	0800aafd 	.word	0x0800aafd
 800ab38:	0800aafd 	.word	0x0800aafd
 800ab3c:	0800aafd 	.word	0x0800aafd
 800ab40:	0800ac81 	.word	0x0800ac81
 800ab44:	0800abab 	.word	0x0800abab
 800ab48:	0800ac3b 	.word	0x0800ac3b
 800ab4c:	0800aafd 	.word	0x0800aafd
 800ab50:	0800aafd 	.word	0x0800aafd
 800ab54:	0800aca3 	.word	0x0800aca3
 800ab58:	0800aafd 	.word	0x0800aafd
 800ab5c:	0800abab 	.word	0x0800abab
 800ab60:	0800aafd 	.word	0x0800aafd
 800ab64:	0800aafd 	.word	0x0800aafd
 800ab68:	0800ac43 	.word	0x0800ac43
 800ab6c:	6833      	ldr	r3, [r6, #0]
 800ab6e:	1d1a      	adds	r2, r3, #4
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6032      	str	r2, [r6, #0]
 800ab74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e09d      	b.n	800acbc <_printf_i+0x1e8>
 800ab80:	6833      	ldr	r3, [r6, #0]
 800ab82:	6820      	ldr	r0, [r4, #0]
 800ab84:	1d19      	adds	r1, r3, #4
 800ab86:	6031      	str	r1, [r6, #0]
 800ab88:	0606      	lsls	r6, r0, #24
 800ab8a:	d501      	bpl.n	800ab90 <_printf_i+0xbc>
 800ab8c:	681d      	ldr	r5, [r3, #0]
 800ab8e:	e003      	b.n	800ab98 <_printf_i+0xc4>
 800ab90:	0645      	lsls	r5, r0, #25
 800ab92:	d5fb      	bpl.n	800ab8c <_printf_i+0xb8>
 800ab94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	da03      	bge.n	800aba4 <_printf_i+0xd0>
 800ab9c:	232d      	movs	r3, #45	@ 0x2d
 800ab9e:	426d      	negs	r5, r5
 800aba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aba4:	4859      	ldr	r0, [pc, #356]	@ (800ad0c <_printf_i+0x238>)
 800aba6:	230a      	movs	r3, #10
 800aba8:	e011      	b.n	800abce <_printf_i+0xfa>
 800abaa:	6821      	ldr	r1, [r4, #0]
 800abac:	6833      	ldr	r3, [r6, #0]
 800abae:	0608      	lsls	r0, r1, #24
 800abb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abb4:	d402      	bmi.n	800abbc <_printf_i+0xe8>
 800abb6:	0649      	lsls	r1, r1, #25
 800abb8:	bf48      	it	mi
 800abba:	b2ad      	uxthmi	r5, r5
 800abbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abbe:	4853      	ldr	r0, [pc, #332]	@ (800ad0c <_printf_i+0x238>)
 800abc0:	6033      	str	r3, [r6, #0]
 800abc2:	bf14      	ite	ne
 800abc4:	230a      	movne	r3, #10
 800abc6:	2308      	moveq	r3, #8
 800abc8:	2100      	movs	r1, #0
 800abca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abce:	6866      	ldr	r6, [r4, #4]
 800abd0:	60a6      	str	r6, [r4, #8]
 800abd2:	2e00      	cmp	r6, #0
 800abd4:	bfa2      	ittt	ge
 800abd6:	6821      	ldrge	r1, [r4, #0]
 800abd8:	f021 0104 	bicge.w	r1, r1, #4
 800abdc:	6021      	strge	r1, [r4, #0]
 800abde:	b90d      	cbnz	r5, 800abe4 <_printf_i+0x110>
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	d04b      	beq.n	800ac7c <_printf_i+0x1a8>
 800abe4:	4616      	mov	r6, r2
 800abe6:	fbb5 f1f3 	udiv	r1, r5, r3
 800abea:	fb03 5711 	mls	r7, r3, r1, r5
 800abee:	5dc7      	ldrb	r7, [r0, r7]
 800abf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abf4:	462f      	mov	r7, r5
 800abf6:	42bb      	cmp	r3, r7
 800abf8:	460d      	mov	r5, r1
 800abfa:	d9f4      	bls.n	800abe6 <_printf_i+0x112>
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d10b      	bne.n	800ac18 <_printf_i+0x144>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	07df      	lsls	r7, r3, #31
 800ac04:	d508      	bpl.n	800ac18 <_printf_i+0x144>
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	6861      	ldr	r1, [r4, #4]
 800ac0a:	4299      	cmp	r1, r3
 800ac0c:	bfde      	ittt	le
 800ac0e:	2330      	movle	r3, #48	@ 0x30
 800ac10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac18:	1b92      	subs	r2, r2, r6
 800ac1a:	6122      	str	r2, [r4, #16]
 800ac1c:	f8cd a000 	str.w	sl, [sp]
 800ac20:	464b      	mov	r3, r9
 800ac22:	aa03      	add	r2, sp, #12
 800ac24:	4621      	mov	r1, r4
 800ac26:	4640      	mov	r0, r8
 800ac28:	f7ff fee6 	bl	800a9f8 <_printf_common>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d14a      	bne.n	800acc6 <_printf_i+0x1f2>
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	b004      	add	sp, #16
 800ac36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	f043 0320 	orr.w	r3, r3, #32
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	4833      	ldr	r0, [pc, #204]	@ (800ad10 <_printf_i+0x23c>)
 800ac44:	2778      	movs	r7, #120	@ 0x78
 800ac46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	6831      	ldr	r1, [r6, #0]
 800ac4e:	061f      	lsls	r7, r3, #24
 800ac50:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac54:	d402      	bmi.n	800ac5c <_printf_i+0x188>
 800ac56:	065f      	lsls	r7, r3, #25
 800ac58:	bf48      	it	mi
 800ac5a:	b2ad      	uxthmi	r5, r5
 800ac5c:	6031      	str	r1, [r6, #0]
 800ac5e:	07d9      	lsls	r1, r3, #31
 800ac60:	bf44      	itt	mi
 800ac62:	f043 0320 	orrmi.w	r3, r3, #32
 800ac66:	6023      	strmi	r3, [r4, #0]
 800ac68:	b11d      	cbz	r5, 800ac72 <_printf_i+0x19e>
 800ac6a:	2310      	movs	r3, #16
 800ac6c:	e7ac      	b.n	800abc8 <_printf_i+0xf4>
 800ac6e:	4827      	ldr	r0, [pc, #156]	@ (800ad0c <_printf_i+0x238>)
 800ac70:	e7e9      	b.n	800ac46 <_printf_i+0x172>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	f023 0320 	bic.w	r3, r3, #32
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	e7f6      	b.n	800ac6a <_printf_i+0x196>
 800ac7c:	4616      	mov	r6, r2
 800ac7e:	e7bd      	b.n	800abfc <_printf_i+0x128>
 800ac80:	6833      	ldr	r3, [r6, #0]
 800ac82:	6825      	ldr	r5, [r4, #0]
 800ac84:	6961      	ldr	r1, [r4, #20]
 800ac86:	1d18      	adds	r0, r3, #4
 800ac88:	6030      	str	r0, [r6, #0]
 800ac8a:	062e      	lsls	r6, r5, #24
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	d501      	bpl.n	800ac94 <_printf_i+0x1c0>
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <_printf_i+0x1c6>
 800ac94:	0668      	lsls	r0, r5, #25
 800ac96:	d5fb      	bpl.n	800ac90 <_printf_i+0x1bc>
 800ac98:	8019      	strh	r1, [r3, #0]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	4616      	mov	r6, r2
 800aca0:	e7bc      	b.n	800ac1c <_printf_i+0x148>
 800aca2:	6833      	ldr	r3, [r6, #0]
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	6032      	str	r2, [r6, #0]
 800aca8:	681e      	ldr	r6, [r3, #0]
 800acaa:	6862      	ldr	r2, [r4, #4]
 800acac:	2100      	movs	r1, #0
 800acae:	4630      	mov	r0, r6
 800acb0:	f7f5 fa9e 	bl	80001f0 <memchr>
 800acb4:	b108      	cbz	r0, 800acba <_printf_i+0x1e6>
 800acb6:	1b80      	subs	r0, r0, r6
 800acb8:	6060      	str	r0, [r4, #4]
 800acba:	6863      	ldr	r3, [r4, #4]
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	2300      	movs	r3, #0
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc4:	e7aa      	b.n	800ac1c <_printf_i+0x148>
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	4632      	mov	r2, r6
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d0ad      	beq.n	800ac30 <_printf_i+0x15c>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	079b      	lsls	r3, r3, #30
 800acd8:	d413      	bmi.n	800ad02 <_printf_i+0x22e>
 800acda:	68e0      	ldr	r0, [r4, #12]
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	4298      	cmp	r0, r3
 800ace0:	bfb8      	it	lt
 800ace2:	4618      	movlt	r0, r3
 800ace4:	e7a6      	b.n	800ac34 <_printf_i+0x160>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4632      	mov	r2, r6
 800acea:	4649      	mov	r1, r9
 800acec:	4640      	mov	r0, r8
 800acee:	47d0      	blx	sl
 800acf0:	3001      	adds	r0, #1
 800acf2:	d09d      	beq.n	800ac30 <_printf_i+0x15c>
 800acf4:	3501      	adds	r5, #1
 800acf6:	68e3      	ldr	r3, [r4, #12]
 800acf8:	9903      	ldr	r1, [sp, #12]
 800acfa:	1a5b      	subs	r3, r3, r1
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dcf2      	bgt.n	800ace6 <_printf_i+0x212>
 800ad00:	e7eb      	b.n	800acda <_printf_i+0x206>
 800ad02:	2500      	movs	r5, #0
 800ad04:	f104 0619 	add.w	r6, r4, #25
 800ad08:	e7f5      	b.n	800acf6 <_printf_i+0x222>
 800ad0a:	bf00      	nop
 800ad0c:	0800b0b1 	.word	0x0800b0b1
 800ad10:	0800b0c2 	.word	0x0800b0c2

0800ad14 <__swbuf_r>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	460e      	mov	r6, r1
 800ad18:	4614      	mov	r4, r2
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	b118      	cbz	r0, 800ad26 <__swbuf_r+0x12>
 800ad1e:	6a03      	ldr	r3, [r0, #32]
 800ad20:	b90b      	cbnz	r3, 800ad26 <__swbuf_r+0x12>
 800ad22:	f7ff fbb7 	bl	800a494 <__sinit>
 800ad26:	69a3      	ldr	r3, [r4, #24]
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	071a      	lsls	r2, r3, #28
 800ad2e:	d501      	bpl.n	800ad34 <__swbuf_r+0x20>
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	b943      	cbnz	r3, 800ad46 <__swbuf_r+0x32>
 800ad34:	4621      	mov	r1, r4
 800ad36:	4628      	mov	r0, r5
 800ad38:	f000 f82a 	bl	800ad90 <__swsetup_r>
 800ad3c:	b118      	cbz	r0, 800ad46 <__swbuf_r+0x32>
 800ad3e:	f04f 37ff 	mov.w	r7, #4294967295
 800ad42:	4638      	mov	r0, r7
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	6922      	ldr	r2, [r4, #16]
 800ad4a:	1a98      	subs	r0, r3, r2
 800ad4c:	6963      	ldr	r3, [r4, #20]
 800ad4e:	b2f6      	uxtb	r6, r6
 800ad50:	4283      	cmp	r3, r0
 800ad52:	4637      	mov	r7, r6
 800ad54:	dc05      	bgt.n	800ad62 <__swbuf_r+0x4e>
 800ad56:	4621      	mov	r1, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f7ff fad3 	bl	800a304 <_fflush_r>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d1ed      	bne.n	800ad3e <__swbuf_r+0x2a>
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	701e      	strb	r6, [r3, #0]
 800ad70:	6962      	ldr	r2, [r4, #20]
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d004      	beq.n	800ad82 <__swbuf_r+0x6e>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	07db      	lsls	r3, r3, #31
 800ad7c:	d5e1      	bpl.n	800ad42 <__swbuf_r+0x2e>
 800ad7e:	2e0a      	cmp	r6, #10
 800ad80:	d1df      	bne.n	800ad42 <__swbuf_r+0x2e>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f7ff fabd 	bl	800a304 <_fflush_r>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d0d9      	beq.n	800ad42 <__swbuf_r+0x2e>
 800ad8e:	e7d6      	b.n	800ad3e <__swbuf_r+0x2a>

0800ad90 <__swsetup_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4b29      	ldr	r3, [pc, #164]	@ (800ae38 <__swsetup_r+0xa8>)
 800ad94:	4605      	mov	r5, r0
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	460c      	mov	r4, r1
 800ad9a:	b118      	cbz	r0, 800ada4 <__swsetup_r+0x14>
 800ad9c:	6a03      	ldr	r3, [r0, #32]
 800ad9e:	b90b      	cbnz	r3, 800ada4 <__swsetup_r+0x14>
 800ada0:	f7ff fb78 	bl	800a494 <__sinit>
 800ada4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada8:	0719      	lsls	r1, r3, #28
 800adaa:	d422      	bmi.n	800adf2 <__swsetup_r+0x62>
 800adac:	06da      	lsls	r2, r3, #27
 800adae:	d407      	bmi.n	800adc0 <__swsetup_r+0x30>
 800adb0:	2209      	movs	r2, #9
 800adb2:	602a      	str	r2, [r5, #0]
 800adb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	f04f 30ff 	mov.w	r0, #4294967295
 800adbe:	e033      	b.n	800ae28 <__swsetup_r+0x98>
 800adc0:	0758      	lsls	r0, r3, #29
 800adc2:	d512      	bpl.n	800adea <__swsetup_r+0x5a>
 800adc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adc6:	b141      	cbz	r1, 800adda <__swsetup_r+0x4a>
 800adc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adcc:	4299      	cmp	r1, r3
 800adce:	d002      	beq.n	800add6 <__swsetup_r+0x46>
 800add0:	4628      	mov	r0, r5
 800add2:	f7ff fc85 	bl	800a6e0 <_free_r>
 800add6:	2300      	movs	r3, #0
 800add8:	6363      	str	r3, [r4, #52]	@ 0x34
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	2300      	movs	r3, #0
 800ade4:	6063      	str	r3, [r4, #4]
 800ade6:	6923      	ldr	r3, [r4, #16]
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f043 0308 	orr.w	r3, r3, #8
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	b94b      	cbnz	r3, 800ae0a <__swsetup_r+0x7a>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae00:	d003      	beq.n	800ae0a <__swsetup_r+0x7a>
 800ae02:	4621      	mov	r1, r4
 800ae04:	4628      	mov	r0, r5
 800ae06:	f000 f83f 	bl	800ae88 <__smakebuf_r>
 800ae0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae0e:	f013 0201 	ands.w	r2, r3, #1
 800ae12:	d00a      	beq.n	800ae2a <__swsetup_r+0x9a>
 800ae14:	2200      	movs	r2, #0
 800ae16:	60a2      	str	r2, [r4, #8]
 800ae18:	6962      	ldr	r2, [r4, #20]
 800ae1a:	4252      	negs	r2, r2
 800ae1c:	61a2      	str	r2, [r4, #24]
 800ae1e:	6922      	ldr	r2, [r4, #16]
 800ae20:	b942      	cbnz	r2, 800ae34 <__swsetup_r+0xa4>
 800ae22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae26:	d1c5      	bne.n	800adb4 <__swsetup_r+0x24>
 800ae28:	bd38      	pop	{r3, r4, r5, pc}
 800ae2a:	0799      	lsls	r1, r3, #30
 800ae2c:	bf58      	it	pl
 800ae2e:	6962      	ldrpl	r2, [r4, #20]
 800ae30:	60a2      	str	r2, [r4, #8]
 800ae32:	e7f4      	b.n	800ae1e <__swsetup_r+0x8e>
 800ae34:	2000      	movs	r0, #0
 800ae36:	e7f7      	b.n	800ae28 <__swsetup_r+0x98>
 800ae38:	2000001c 	.word	0x2000001c

0800ae3c <__swhatbuf_r>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	460c      	mov	r4, r1
 800ae40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae44:	2900      	cmp	r1, #0
 800ae46:	b096      	sub	sp, #88	@ 0x58
 800ae48:	4615      	mov	r5, r2
 800ae4a:	461e      	mov	r6, r3
 800ae4c:	da0d      	bge.n	800ae6a <__swhatbuf_r+0x2e>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae54:	f04f 0100 	mov.w	r1, #0
 800ae58:	bf14      	ite	ne
 800ae5a:	2340      	movne	r3, #64	@ 0x40
 800ae5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae60:	2000      	movs	r0, #0
 800ae62:	6031      	str	r1, [r6, #0]
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	b016      	add	sp, #88	@ 0x58
 800ae68:	bd70      	pop	{r4, r5, r6, pc}
 800ae6a:	466a      	mov	r2, sp
 800ae6c:	f000 f848 	bl	800af00 <_fstat_r>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	dbec      	blt.n	800ae4e <__swhatbuf_r+0x12>
 800ae74:	9901      	ldr	r1, [sp, #4]
 800ae76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae7e:	4259      	negs	r1, r3
 800ae80:	4159      	adcs	r1, r3
 800ae82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae86:	e7eb      	b.n	800ae60 <__swhatbuf_r+0x24>

0800ae88 <__smakebuf_r>:
 800ae88:	898b      	ldrh	r3, [r1, #12]
 800ae8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae8c:	079d      	lsls	r5, r3, #30
 800ae8e:	4606      	mov	r6, r0
 800ae90:	460c      	mov	r4, r1
 800ae92:	d507      	bpl.n	800aea4 <__smakebuf_r+0x1c>
 800ae94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	6123      	str	r3, [r4, #16]
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	6163      	str	r3, [r4, #20]
 800aea0:	b003      	add	sp, #12
 800aea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aea4:	ab01      	add	r3, sp, #4
 800aea6:	466a      	mov	r2, sp
 800aea8:	f7ff ffc8 	bl	800ae3c <__swhatbuf_r>
 800aeac:	9f00      	ldr	r7, [sp, #0]
 800aeae:	4605      	mov	r5, r0
 800aeb0:	4639      	mov	r1, r7
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff f916 	bl	800a0e4 <_malloc_r>
 800aeb8:	b948      	cbnz	r0, 800aece <__smakebuf_r+0x46>
 800aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aebe:	059a      	lsls	r2, r3, #22
 800aec0:	d4ee      	bmi.n	800aea0 <__smakebuf_r+0x18>
 800aec2:	f023 0303 	bic.w	r3, r3, #3
 800aec6:	f043 0302 	orr.w	r3, r3, #2
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	e7e2      	b.n	800ae94 <__smakebuf_r+0xc>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	6020      	str	r0, [r4, #0]
 800aed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	9b01      	ldr	r3, [sp, #4]
 800aeda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aede:	b15b      	cbz	r3, 800aef8 <__smakebuf_r+0x70>
 800aee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee4:	4630      	mov	r0, r6
 800aee6:	f000 f81d 	bl	800af24 <_isatty_r>
 800aeea:	b128      	cbz	r0, 800aef8 <__smakebuf_r+0x70>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f023 0303 	bic.w	r3, r3, #3
 800aef2:	f043 0301 	orr.w	r3, r3, #1
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	431d      	orrs	r5, r3
 800aefc:	81a5      	strh	r5, [r4, #12]
 800aefe:	e7cf      	b.n	800aea0 <__smakebuf_r+0x18>

0800af00 <_fstat_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d07      	ldr	r5, [pc, #28]	@ (800af20 <_fstat_r+0x20>)
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	602b      	str	r3, [r5, #0]
 800af0e:	f7f6 fdba 	bl	8001a86 <_fstat>
 800af12:	1c43      	adds	r3, r0, #1
 800af14:	d102      	bne.n	800af1c <_fstat_r+0x1c>
 800af16:	682b      	ldr	r3, [r5, #0]
 800af18:	b103      	cbz	r3, 800af1c <_fstat_r+0x1c>
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	bd38      	pop	{r3, r4, r5, pc}
 800af1e:	bf00      	nop
 800af20:	200009dc 	.word	0x200009dc

0800af24 <_isatty_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d06      	ldr	r5, [pc, #24]	@ (800af40 <_isatty_r+0x1c>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f6 fdb9 	bl	8001aa6 <_isatty>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_isatty_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_isatty_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	200009dc 	.word	0x200009dc

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
