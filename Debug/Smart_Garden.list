
Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800b1e0  0800b1e0  0000c1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a0  0800b3a0  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a0  0800b3a0  0000c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a8  0800b3a8  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a8  0800b3a8  0000c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3ac  0800b3ac  0000c3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b3b0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d06c  2**0
                  CONTENTS
 10 .bss          00000998  2000006c  2000006c  0000d06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a04  20000a04  0000d06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b0d  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059ec  00000000  00000000  00036ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e0  00000000  00000000  0003c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ca0  00000000  00000000  0003ea78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d961  00000000  00000000  00040718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ddd6  00000000  00000000  0006e079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108abc  00000000  00000000  0009be4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a490b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a5bc  00000000  00000000  001a4950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001aef0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b1c8 	.word	0x0800b1c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800b1c8 	.word	0x0800b1c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <MX_I2C3_Init+0x78>)
 800059e:	4a1d      	ldr	r2, [pc, #116]	@ (8000614 <MX_I2C3_Init+0x7c>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 30000; // changed from 100000
 80005a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005a4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005a8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80005b0:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005d6:	480e      	ldr	r0, [pc, #56]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005d8:	f003 fff6 	bl	80045c8 <HAL_I2C_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80005e2:	f000 fd0f 	bl	8001004 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4809      	ldr	r0, [pc, #36]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005ea:	f004 fe39 	bl	8005260 <HAL_I2CEx_ConfigAnalogFilter>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C3_Init+0x60>
  {
    Error_Handler();
 80005f4:	f000 fd06 	bl	8001004 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_I2C3_Init+0x78>)
 80005fc:	f004 fe6c 	bl	80052d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C3_Init+0x72>
  {
    Error_Handler();
 8000606:	f000 fcfd 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000088 	.word	0x20000088
 8000614:	40005c00 	.word	0x40005c00

08000618 <read_capacitance>:
  * @brief Function to read the capacitance from the sensor
  * @param None
  * @retval None
  */
void read_capacitance()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af04      	add	r7, sp, #16
	uint8_t capacitance_data[2];
	uint8_t busy_data = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef status;

	// Sensor reads once for previous value then updates with recent value. Get old value first to update register.
	status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, CAPACITANCE_REGISTER, I2C_MEMADD_SIZE_8BIT, capacitance_data, CAPACITANCE_READ_SIZE, HAL_MAX_DELAY);
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	2302      	movs	r3, #2
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	2200      	movs	r2, #0
 8000636:	2140      	movs	r1, #64	@ 0x40
 8000638:	4824      	ldr	r0, [pc, #144]	@ (80006cc <read_capacitance+0xb4>)
 800063a:	f004 f909 	bl	8004850 <HAL_I2C_Mem_Read>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d015      	beq.n	8000674 <read_capacitance+0x5c>
		printf("Initial capacitance read failed with status: %d \r\n", status);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4619      	mov	r1, r3
 800064c:	4820      	ldr	r0, [pc, #128]	@ (80006d0 <read_capacitance+0xb8>)
 800064e:	f009 ff8f 	bl	800a570 <iprintf>
 8000652:	e038      	b.n	80006c6 <read_capacitance+0xae>
	}

    // Wait for measurement to complete
    while (busy_data == 1)
    {
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1 , BUSY_REGISTER, I2C_MEMADD_SIZE_8BIT, &busy_data, BUSY_DATA_SIZE, HAL_MAX_DELAY);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2301      	movs	r3, #1
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2209      	movs	r2, #9
 8000666:	2140      	movs	r1, #64	@ 0x40
 8000668:	4818      	ldr	r0, [pc, #96]	@ (80006cc <read_capacitance+0xb4>)
 800066a:	f004 f8f1 	bl	8004850 <HAL_I2C_Mem_Read>
        HAL_Delay(10); // Short delay to avoid flooding the I2C bus -- add a timeout here too probably
 800066e:	200a      	movs	r0, #10
 8000670:	f001 fad8 	bl	8001c24 <HAL_Delay>
    while (busy_data == 1)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d0ec      	beq.n	8000654 <read_capacitance+0x3c>
    }

	// Read the updated capacitance value and print it on success
	status = HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS << 1, CAPACITANCE_REGISTER, I2C_MEMADD_SIZE_8BIT, capacitance_data, CAPACITANCE_READ_SIZE, HAL_MAX_DELAY);
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	2302      	movs	r3, #2
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	@ 0x40
 8000690:	480e      	ldr	r0, [pc, #56]	@ (80006cc <read_capacitance+0xb4>)
 8000692:	f004 f8dd 	bl	8004850 <HAL_I2C_Mem_Read>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10d      	bne.n	80006bc <read_capacitance+0xa4>
	{
		uint16_t combinted_capacitance = capacitance_data[0] << 8 | capacitance_data[1];
 80006a0:	7a3b      	ldrb	r3, [r7, #8]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	7a7b      	ldrb	r3, [r7, #9]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	81bb      	strh	r3, [r7, #12]
		printf("Capacitance: %d \r\n", combinted_capacitance);
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <read_capacitance+0xbc>)
 80006b6:	f009 ff5b 	bl	800a570 <iprintf>
 80006ba:	e004      	b.n	80006c6 <read_capacitance+0xae>
	}
	else
	{
		printf("Capacitance read failed with status: %d \r\n", status);
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <read_capacitance+0xc0>)
 80006c2:	f009 ff55 	bl	800a570 <iprintf>
	}
}
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000088 	.word	0x20000088
 80006d0:	0800b254 	.word	0x0800b254
 80006d4:	0800b288 	.word	0x0800b288
 80006d8:	0800b29c 	.word	0x0800b29c

080006dc <_write>:
/* USER CODE BEGIN 0 */

extern UART_HandleTypeDef huart1;  // Assuming you're using UART1

int _write(int file, char *ptr, int len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <_write+0x28>)
 80006f4:	f007 fc34 	bl	8007f60 <HAL_UART_Transmit>
  return len;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000031c 	.word	0x2000031c

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f001 fa48 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f82a 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 fb54 	bl	8000dc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000718:	f000 f892 	bl	8000840 <MX_ADC1_Init>
  MX_CRC_Init();
 800071c:	f000 f8e2 	bl	80008e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000720:	f000 f8f4 	bl	800090c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000724:	f000 fafc 	bl	8000d20 <MX_FMC_Init>
  MX_I2C3_Init();
 8000728:	f7ff ff36 	bl	8000598 <MX_I2C3_Init>
  MX_LTDC_Init();
 800072c:	f000 f920 	bl	8000970 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000730:	f000 fa02 	bl	8000b38 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000734:	f000 fa36 	bl	8000ba4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000738:	f000 fac8 	bl	8000ccc <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800073c:	f000 fa82 	bl	8000c44 <MX_TIM9_Init>
  MX_RTC_Init();
 8000740:	f000 f996 	bl	8000a70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 8000744:	f000 fc64 	bl	8001010 <Motor_Init>
  Motor_SetSpeed(100);
 8000748:	2064      	movs	r0, #100	@ 0x64
 800074a:	f000 fc6b 	bl	8001024 <Motor_SetSpeed>

  printf("Initialization complete!\r\n");
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <main+0x5c>)
 8000750:	f009 ff76 	bl	800a640 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Motor_Forward();
	  HAL_Delay(5000);
 8000754:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000758:	f001 fa64 	bl	8001c24 <HAL_Delay>
	  //read_temperature();
	  read_capacitance();
 800075c:	f7ff ff5c 	bl	8000618 <read_capacitance>
	  HAL_Delay(5000);
 8000760:	bf00      	nop
 8000762:	e7f7      	b.n	8000754 <main+0x4c>
 8000764:	0800b338 	.word	0x0800b338

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	@ 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f00a f842 	bl	800a800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a28      	ldr	r2, [pc, #160]	@ (8000838 <SystemClock_Config+0xd0>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40
 800079c:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <SystemClock_Config+0xd0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <SystemClock_Config+0xd4>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <SystemClock_Config+0xd4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007c8:	2309      	movs	r3, #9
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007e4:	2348      	movs	r3, #72	@ 0x48
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007ec:	2303      	movs	r3, #3
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 f917 	bl	8005a28 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000800:	f000 fc00 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2102      	movs	r1, #2
 8000820:	4618      	mov	r0, r3
 8000822:	f005 fb79 	bl	8005f18 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800082c:	f000 fbea 	bl	8001004 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <MX_ADC1_Init+0x9c>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_ADC1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000880:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_ADC1_Init+0xa0>)
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <MX_ADC1_Init+0x98>)
 800088c:	2201      	movs	r2, #1
 800088e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_ADC1_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_ADC1_Init+0x98>)
 800089a:	2201      	movs	r2, #1
 800089c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <MX_ADC1_Init+0x98>)
 80008a0:	f001 f9e4 	bl	8001c6c <HAL_ADC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fbab 	bl	8001004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ae:	2305      	movs	r3, #5
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_ADC1_Init+0x98>)
 80008c0:	f001 fa18 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008ca:	f000 fb9b 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000dc 	.word	0x200000dc
 80008dc:	40012000 	.word	0x40012000
 80008e0:	0f000001 	.word	0x0f000001

080008e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_CRC_Init+0x20>)
 80008ea:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <MX_CRC_Init+0x24>)
 80008ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_CRC_Init+0x20>)
 80008f0:	f001 fd10 	bl	8002314 <HAL_CRC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008fa:	f000 fb83 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000124 	.word	0x20000124
 8000908:	40023000 	.word	0x40023000

0800090c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000912:	4a16      	ldr	r2, [pc, #88]	@ (800096c <MX_DMA2D_Init+0x60>)
 8000914:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000942:	f001 fd03 	bl	800234c <HAL_DMA2D_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800094c:	f000 fb5a 	bl	8001004 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000950:	2101      	movs	r1, #1
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_DMA2D_Init+0x5c>)
 8000954:	f001 fe54 	bl	8002600 <HAL_DMA2D_ConfigLayer>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800095e:	f000 fb51 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000012c 	.word	0x2000012c
 800096c:	4002b000 	.word	0x4002b000

08000970 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	@ 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2234      	movs	r2, #52	@ 0x34
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f009 ff3f 	bl	800a800 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000982:	4b39      	ldr	r3, [pc, #228]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 8000984:	4a39      	ldr	r2, [pc, #228]	@ (8000a6c <MX_LTDC_Init+0xfc>)
 8000986:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000988:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800098e:	4b36      	ldr	r3, [pc, #216]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000994:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800099a:	4b33      	ldr	r3, [pc, #204]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009a2:	2209      	movs	r2, #9
 80009a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80009a6:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80009ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009ae:	221d      	movs	r2, #29
 80009b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009b4:	2203      	movs	r2, #3
 80009b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009ba:	f240 120d 	movw	r2, #269	@ 0x10d
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80009c0:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009c2:	f240 1243 	movw	r2, #323	@ 0x143
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009ca:	f240 1217 	movw	r2, #279	@ 0x117
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009d2:	f240 1247 	movw	r2, #327	@ 0x147
 80009d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009d8:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009e0:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009f0:	481d      	ldr	r0, [pc, #116]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 80009f2:	f004 fcb1 	bl	8005358 <HAL_LTDC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80009fc:	f000 fb02 	bl	8001004 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000a04:	23f0      	movs	r3, #240	@ 0xf0
 8000a06:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000a0c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a10:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a12:	2302      	movs	r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a16:	23ff      	movs	r3, #255	@ 0xff
 8000a18:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a22:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a24:	2307      	movs	r3, #7
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a28:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000a2e:	23f0      	movs	r3, #240	@ 0xf0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000a32:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a36:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_LTDC_Init+0xf8>)
 8000a52:	f004 fe13 	bl	800567c <HAL_LTDC_ConfigLayer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000a5c:	f000 fad2 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3738      	adds	r7, #56	@ 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000016c 	.word	0x2000016c
 8000a6c:	40016800 	.word	0x40016800

08000a70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b34 <MX_RTC_Init+0xc4>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000a96:	227f      	movs	r2, #127	@ 0x7f
 8000a98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000a9c:	22ff      	movs	r2, #255	@ 0xff
 8000a9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa6:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aac:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab2:	481f      	ldr	r0, [pc, #124]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000ab4:	f005 fe42 	bl	800673c <HAL_RTC_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 faa1 	bl	8001004 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8000ac2:	2318      	movs	r3, #24
 8000ac4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x48;
 8000ac6:	2348      	movs	r3, #72	@ 0x48
 8000ac8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	4814      	ldr	r0, [pc, #80]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000ade:	f005 feb0 	bl	8006842 <HAL_RTC_SetTime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ae8:	f000 fa8c 	bl	8001004 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aec:	2301      	movs	r3, #1
 8000aee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000af0:	2308      	movs	r3, #8
 8000af2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 8000af4:	2305      	movs	r3, #5
 8000af6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000af8:	2324      	movs	r3, #36	@ 0x24
 8000afa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000b04:	f005 ff37 	bl	8006976 <HAL_RTC_SetDate>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b0e:	f000 fa79 	bl	8001004 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <MX_RTC_Init+0xc0>)
 8000b18:	f006 f852 	bl	8006bc0 <HAL_RTCEx_SetWakeUpTimer>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000b22:	f000 fa6f 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000214 	.word	0x20000214
 8000b34:	40002800 	.word	0x40002800

08000b38 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <MX_SPI5_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b6c:	2218      	movs	r2, #24
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b8a:	f006 f8ea 	bl	8006d62 <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fa36 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000234 	.word	0x20000234
 8000ba0:	40015000 	.word	0x40015000

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <MX_TIM1_Init+0x9c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bee:	f006 f941 	bl	8006e74 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 fa04 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000c0a:	f006 fcbd 	bl	8007588 <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c14:	f000 f9f6 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000c26:	f007 f8bb 	bl	8007da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c30:	f000 f9e8 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000028c 	.word	0x2000028c
 8000c40:	40010000 	.word	0x40010000

08000c44 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
 8000c5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc8 <MX_TIM9_Init+0x84>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c64:	2247      	movs	r2, #71	@ 0x47
 8000c66:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c70:	2263      	movs	r2, #99	@ 0x63
 8000c72:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000c80:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000c82:	f006 f9b7 	bl	8006ff4 <HAL_TIM_PWM_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000c8c:	f000 f9ba 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	@ 0x60
 8000c92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000c94:	2332      	movs	r3, #50	@ 0x32
 8000c96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000ca8:	f006 fbac 	bl	8007404 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000cb2:	f000 f9a7 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000cb6:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <MX_TIM9_Init+0x80>)
 8000cb8:	f000 fcd0 	bl	800165c <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200002d4 	.word	0x200002d4
 8000cc8:	40014000 	.word	0x40014000

08000ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <MX_USART1_UART_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_USART1_UART_Init+0x4c>)
 8000d04:	f007 f8dc 	bl	8007ec0 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 f979 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000031c 	.word	0x2000031c
 8000d1c:	40011000 	.word	0x40011000

08000d20 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	615a      	str	r2, [r3, #20]
 8000d36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d3a:	4a20      	ldr	r2, [pc, #128]	@ (8000dbc <MX_FMC_Init+0x9c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d52:	2210      	movs	r2, #16
 8000d54:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d58:	2240      	movs	r2, #64	@ 0x40
 8000d5a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d5e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000d62:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d70:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000d7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d84:	2307      	movs	r3, #7
 8000d86:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000d90:	2303      	movs	r3, #3
 8000d92:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_FMC_Init+0x98>)
 8000da2:	f005 ffaa 	bl	8006cfa <HAL_SDRAM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000dac:	f000 f92a 	bl	8001004 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000364 	.word	0x20000364
 8000dbc:	a0000140 	.word	0xa0000140

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	@ 0x38
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	4b7b      	ldr	r3, [pc, #492]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a7a      	ldr	r2, [pc, #488]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b78      	ldr	r3, [pc, #480]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	623b      	str	r3, [r7, #32]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	4b74      	ldr	r3, [pc, #464]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a73      	ldr	r2, [pc, #460]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b71      	ldr	r3, [pc, #452]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a6c      	ldr	r2, [pc, #432]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0320 	and.w	r3, r3, #32
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b66      	ldr	r3, [pc, #408]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a65      	ldr	r2, [pc, #404]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b63      	ldr	r3, [pc, #396]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a57      	ldr	r2, [pc, #348]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b55      	ldr	r3, [pc, #340]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b51      	ldr	r3, [pc, #324]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a50      	ldr	r2, [pc, #320]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b47      	ldr	r3, [pc, #284]	@ (8000fc8 <MX_GPIO_Init+0x208>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2116      	movs	r1, #22
 8000eba:	4844      	ldr	r0, [pc, #272]	@ (8000fcc <MX_GPIO_Init+0x20c>)
 8000ebc:	f001 fdde 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	@ 0x80
 8000ec4:	4842      	ldr	r0, [pc, #264]	@ (8000fd0 <MX_GPIO_Init+0x210>)
 8000ec6:	f001 fdd9 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000ed0:	4840      	ldr	r0, [pc, #256]	@ (8000fd4 <MX_GPIO_Init+0x214>)
 8000ed2:	f001 fdd3 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000edc:	483e      	ldr	r0, [pc, #248]	@ (8000fd8 <MX_GPIO_Init+0x218>)
 8000ede:	f001 fdcd 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin;
 8000ee2:	2316      	movs	r3, #22
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4834      	ldr	r0, [pc, #208]	@ (8000fcc <MX_GPIO_Init+0x20c>)
 8000efa:	f001 fc13 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000efe:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f04:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <MX_GPIO_Init+0x210>)
 8000f16:	f001 fc05 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4827      	ldr	r0, [pc, #156]	@ (8000fd0 <MX_GPIO_Init+0x210>)
 8000f32:	f001 fbf7 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f36:	2320      	movs	r3, #32
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f3a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4820      	ldr	r0, [pc, #128]	@ (8000fcc <MX_GPIO_Init+0x20c>)
 8000f4c:	f001 fbea 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f50:	2304      	movs	r3, #4
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	481e      	ldr	r0, [pc, #120]	@ (8000fdc <MX_GPIO_Init+0x21c>)
 8000f64:	f001 fbde 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000f68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4815      	ldr	r0, [pc, #84]	@ (8000fd4 <MX_GPIO_Init+0x214>)
 8000f7e:	f001 fbd1 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f82:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <MX_GPIO_Init+0x214>)
 8000f9c:	f001 fbc2 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000fa0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <MX_GPIO_Init+0x218>)
 8000fba:	f001 fbb3 	bl	8002724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	@ 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff2:	f000 fdf7 	bl	8001be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40001000 	.word	0x40001000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <Motor_Init>:

// Global variables
extern TIM_HandleTypeDef htim9;  // Assuming TIM9 for PWM

void Motor_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Start PWM on PE5
 8001014:	2100      	movs	r1, #0
 8001016:	4802      	ldr	r0, [pc, #8]	@ (8001020 <Motor_Init+0x10>)
 8001018:	f006 f83c 	bl	8007094 <HAL_TIM_PWM_Start>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200002d4 	.word	0x200002d4

08001024 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
    // Assuming 16-bit timer, adjust if different
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <Motor_SetSpeed+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	88fa      	ldrh	r2, [r7, #6]
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200002d4 	.word	0x200002d4

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_MspInit+0x54>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_MspInit+0x54>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_MspInit+0x54>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <HAL_MspInit+0x54>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_MspInit+0x54>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_MspInit+0x54>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	210f      	movs	r1, #15
 800108a:	f06f 0001 	mvn.w	r0, #1
 800108e:	f001 f917 	bl	80022c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <HAL_ADC_MspInit+0x7c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d127      	bne.n	8001112 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a15      	ldr	r2, [pc, #84]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_ADC_MspInit+0x80>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010fa:	2320      	movs	r3, #32
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <HAL_ADC_MspInit+0x84>)
 800110e:	f001 fb09 	bl	8002724 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	@ 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_CRC_MspInit+0x3c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10d      	bne.n	8001156 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_CRC_MspInit+0x40>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_CRC_MspInit+0x40>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_CRC_MspInit+0x40>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023000 	.word	0x40023000
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0e      	ldr	r2, [pc, #56]	@ (80011b4 <HAL_DMA2D_MspInit+0x48>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d115      	bne.n	80011aa <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_DMA2D_MspInit+0x4c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <HAL_DMA2D_MspInit+0x4c>)
 8001188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_DMA2D_MspInit+0x4c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2105      	movs	r1, #5
 800119e:	205a      	movs	r0, #90	@ 0x5a
 80011a0:	f001 f88e 	bl	80022c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80011a4:	205a      	movs	r0, #90	@ 0x5a
 80011a6:	f001 f8a7 	bl	80022f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	4002b000 	.word	0x4002b000
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <HAL_I2C_MspInit+0xc4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d14b      	bne.n	8001276 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a27      	ldr	r2, [pc, #156]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a20      	ldr	r2, [pc, #128]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121c:	2312      	movs	r3, #18
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001228:	2304      	movs	r3, #4
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4815      	ldr	r0, [pc, #84]	@ (8001288 <HAL_I2C_MspInit+0xcc>)
 8001234:	f001 fa76 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001242:	2301      	movs	r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800124a:	2304      	movs	r3, #4
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <HAL_I2C_MspInit+0xd0>)
 8001256:	f001 fa65 	bl	8002724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 8001264:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_I2C_MspInit+0xc8>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005c00 	.word	0x40005c00
 8001284:	40023800 	.word	0x40023800
 8001288:	40020800 	.word	0x40020800
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b09a      	sub	sp, #104	@ 0x68
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ac:	2230      	movs	r2, #48	@ 0x30
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 faa5 	bl	800a800 <memset>
  if(hltdc->Instance==LTDC)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a85      	ldr	r2, [pc, #532]	@ (80014d0 <HAL_LTDC_MspInit+0x240>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	f040 8102 	bne.w	80014c6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012c2:	2308      	movs	r3, #8
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80012c6:	2332      	movs	r3, #50	@ 0x32
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012ce:	2300      	movs	r3, #0
 80012d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 f870 	bl	80063bc <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80012e2:	f7ff fe8f 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	4b7a      	ldr	r3, [pc, #488]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 80012f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012fe:	623b      	str	r3, [r7, #32]
 8001300:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	4b73      	ldr	r3, [pc, #460]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a72      	ldr	r2, [pc, #456]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	4b6c      	ldr	r3, [pc, #432]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a6b      	ldr	r2, [pc, #428]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a64      	ldr	r2, [pc, #400]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b62      	ldr	r3, [pc, #392]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b5e      	ldr	r3, [pc, #376]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a5d      	ldr	r2, [pc, #372]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b57      	ldr	r3, [pc, #348]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a56      	ldr	r2, [pc, #344]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b50      	ldr	r3, [pc, #320]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a4f      	ldr	r2, [pc, #316]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b4d      	ldr	r3, [pc, #308]	@ (80014d4 <HAL_LTDC_MspInit+0x244>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80013aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013bc:	230e      	movs	r3, #14
 80013be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013c4:	4619      	mov	r1, r3
 80013c6:	4844      	ldr	r0, [pc, #272]	@ (80014d8 <HAL_LTDC_MspInit+0x248>)
 80013c8:	f001 f9ac 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80013cc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80013d0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013de:	230e      	movs	r3, #14
 80013e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013e6:	4619      	mov	r1, r3
 80013e8:	483c      	ldr	r0, [pc, #240]	@ (80014dc <HAL_LTDC_MspInit+0x24c>)
 80013ea:	f001 f99b 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80013ee:	2303      	movs	r3, #3
 80013f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013fe:	2309      	movs	r3, #9
 8001400:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001406:	4619      	mov	r1, r3
 8001408:	4835      	ldr	r0, [pc, #212]	@ (80014e0 <HAL_LTDC_MspInit+0x250>)
 800140a:	f001 f98b 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800140e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001412:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001420:	230e      	movs	r3, #14
 8001422:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001428:	4619      	mov	r1, r3
 800142a:	482d      	ldr	r0, [pc, #180]	@ (80014e0 <HAL_LTDC_MspInit+0x250>)
 800142c:	f001 f97a 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001430:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001434:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001442:	230e      	movs	r3, #14
 8001444:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001446:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800144a:	4619      	mov	r1, r3
 800144c:	4825      	ldr	r0, [pc, #148]	@ (80014e4 <HAL_LTDC_MspInit+0x254>)
 800144e:	f001 f969 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001452:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001456:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001464:	230e      	movs	r3, #14
 8001466:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800146c:	4619      	mov	r1, r3
 800146e:	481e      	ldr	r0, [pc, #120]	@ (80014e8 <HAL_LTDC_MspInit+0x258>)
 8001470:	f001 f958 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001474:	2348      	movs	r3, #72	@ 0x48
 8001476:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001484:	230e      	movs	r3, #14
 8001486:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001488:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800148c:	4619      	mov	r1, r3
 800148e:	4817      	ldr	r0, [pc, #92]	@ (80014ec <HAL_LTDC_MspInit+0x25c>)
 8001490:	f001 f948 	bl	8002724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001494:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001498:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014a6:	2309      	movs	r3, #9
 80014a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <HAL_LTDC_MspInit+0x254>)
 80014b2:	f001 f937 	bl	8002724 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2058      	movs	r0, #88	@ 0x58
 80014bc:	f000 ff00 	bl	80022c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014c0:	2058      	movs	r0, #88	@ 0x58
 80014c2:	f000 ff19 	bl	80022f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80014c6:	bf00      	nop
 80014c8:	3768      	adds	r7, #104	@ 0x68
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40016800 	.word	0x40016800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	@ 0x38
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2230      	movs	r2, #48	@ 0x30
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f009 f97d 	bl	800a800 <memset>
  if(hrtc->Instance==RTC)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <HAL_RTC_MspInit+0x4c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d111      	bne.n	8001534 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001510:	2320      	movs	r3, #32
 8001512:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001514:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4618      	mov	r0, r3
 8001520:	f004 ff4c 	bl	80063bc <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800152a:	f7ff fd6b 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <HAL_RTC_MspInit+0x50>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001534:	bf00      	nop
 8001536:	3738      	adds	r7, #56	@ 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40002800 	.word	0x40002800
 8001540:	42470e3c 	.word	0x42470e3c

08001544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_SPI_MspInit+0x84>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12c      	bne.n	80015c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_SPI_MspInit+0x88>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <HAL_SPI_MspInit+0x88>)
 8001570:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001574:	6453      	str	r3, [r2, #68]	@ 0x44
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_SPI_MspInit+0x88>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_SPI_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_SPI_MspInit+0x88>)
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_SPI_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800159e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015b0:	2305      	movs	r3, #5
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <HAL_SPI_MspInit+0x8c>)
 80015bc:	f001 f8b2 	bl	8002724 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	@ 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40015000 	.word	0x40015000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021400 	.word	0x40021400

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_TIM_Base_MspInit+0x3c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10d      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <HAL_TIM_Base_MspInit+0x40>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_TIM_Base_MspInit+0x40>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <HAL_TIM_Base_MspInit+0x40>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40010000 	.word	0x40010000
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <HAL_TIM_PWM_MspInit+0x3c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d10d      	bne.n	8001646 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_TIM_PWM_MspInit+0x40>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <HAL_TIM_PWM_MspInit+0x40>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001638:	6453      	str	r3, [r2, #68]	@ 0x44
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <HAL_TIM_PWM_MspInit+0x40>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40014000 	.word	0x40014000
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <HAL_TIM_MspPostInit+0x68>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11d      	bne.n	80016ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_TIM_MspPostInit+0x6c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <HAL_TIM_MspPostInit+0x6c>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_TIM_MspPostInit+0x6c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800169a:	2320      	movs	r3, #32
 800169c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_TIM_MspPostInit+0x70>)
 80016b6:	f001 f835 	bl	8002724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40014000 	.word	0x40014000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_UART_MspInit+0x88>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_UART_MspInit+0x88>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_UART_MspInit+0x88>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_UART_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_UART_MspInit+0x88>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_UART_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800172a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800173c:	2307      	movs	r3, #7
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <HAL_UART_MspInit+0x8c>)
 8001748:	f000 ffec 	bl	8002724 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40011000 	.word	0x40011000
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001774:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_FMC_MspInit+0x104>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d16f      	bne.n	800185c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800177c:	4b39      	ldr	r3, [pc, #228]	@ (8001864 <HAL_FMC_MspInit+0x104>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <HAL_FMC_MspInit+0x108>)
 8001788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178a:	4a37      	ldr	r2, [pc, #220]	@ (8001868 <HAL_FMC_MspInit+0x108>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6393      	str	r3, [r2, #56]	@ 0x38
 8001792:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <HAL_FMC_MspInit+0x108>)
 8001794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800179e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80017a2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b0:	230c      	movs	r3, #12
 80017b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	482c      	ldr	r0, [pc, #176]	@ (800186c <HAL_FMC_MspInit+0x10c>)
 80017ba:	f000 ffb3 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80017be:	2301      	movs	r3, #1
 80017c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ce:	230c      	movs	r3, #12
 80017d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4826      	ldr	r0, [pc, #152]	@ (8001870 <HAL_FMC_MspInit+0x110>)
 80017d8:	f000 ffa4 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80017dc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80017e0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ee:	230c      	movs	r3, #12
 80017f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	481f      	ldr	r0, [pc, #124]	@ (8001874 <HAL_FMC_MspInit+0x114>)
 80017f8:	f000 ff94 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80017fc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001800:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4818      	ldr	r0, [pc, #96]	@ (8001878 <HAL_FMC_MspInit+0x118>)
 8001818:	f000 ff84 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800181c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001820:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800182e:	230c      	movs	r3, #12
 8001830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4811      	ldr	r0, [pc, #68]	@ (800187c <HAL_FMC_MspInit+0x11c>)
 8001838:	f000 ff74 	bl	8002724 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800183c:	2360      	movs	r3, #96	@ 0x60
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184c:	230c      	movs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	480a      	ldr	r0, [pc, #40]	@ (8001880 <HAL_FMC_MspInit+0x120>)
 8001856:	f000 ff65 	bl	8002724 <HAL_GPIO_Init>
 800185a:	e000      	b.n	800185e <HAL_FMC_MspInit+0xfe>
    return;
 800185c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000398 	.word	0x20000398
 8001868:	40023800 	.word	0x40023800
 800186c:	40021400 	.word	0x40021400
 8001870:	40020800 	.word	0x40020800
 8001874:	40021800 	.word	0x40021800
 8001878:	40021000 	.word	0x40021000
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40020400 	.word	0x40020400

08001884 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800188c:	f7ff ff68 	bl	8001760 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	@ 0x38
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4b33      	ldr	r3, [pc, #204]	@ (800197c <HAL_InitTick+0xe4>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	4a32      	ldr	r2, [pc, #200]	@ (800197c <HAL_InitTick+0xe4>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b8:	4b30      	ldr	r3, [pc, #192]	@ (800197c <HAL_InitTick+0xe4>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c4:	f107 0210 	add.w	r2, r7, #16
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fd42 	bl	8006358 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018de:	f004 fd13 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 80018e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80018e4:	e004      	b.n	80018f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018e6:	f004 fd0f 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 80018ea:	4603      	mov	r3, r0
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f2:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <HAL_InitTick+0xe8>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	3b01      	subs	r3, #1
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <HAL_InitTick+0xec>)
 8001900:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <HAL_InitTick+0xf0>)
 8001902:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_InitTick+0xec>)
 8001906:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800190a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800190c:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <HAL_InitTick+0xec>)
 800190e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001910:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <HAL_InitTick+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_InitTick+0xec>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_InitTick+0xec>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001924:	4817      	ldr	r0, [pc, #92]	@ (8001984 <HAL_InitTick+0xec>)
 8001926:	f005 faa5 	bl	8006e74 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11b      	bne.n	8001970 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001938:	4812      	ldr	r0, [pc, #72]	@ (8001984 <HAL_InitTick+0xec>)
 800193a:	f005 faeb 	bl	8006f14 <HAL_TIM_Base_Start_IT>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001944:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001948:	2b00      	cmp	r3, #0
 800194a:	d111      	bne.n	8001970 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800194c:	2036      	movs	r0, #54	@ 0x36
 800194e:	f000 fcd3 	bl	80022f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d808      	bhi.n	800196a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	2036      	movs	r0, #54	@ 0x36
 800195e:	f000 fcaf 	bl	80022c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_InitTick+0xf4>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e002      	b.n	8001970 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001974:	4618      	mov	r0, r3
 8001976:	3738      	adds	r7, #56	@ 0x38
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	431bde83 	.word	0x431bde83
 8001984:	2000039c 	.word	0x2000039c
 8001988:	40001000 	.word	0x40001000
 800198c:	20000004 	.word	0x20000004

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <NMI_Handler+0x4>

08001998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <MemManage_Handler+0x4>

080019a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <BusFault_Handler+0x4>

080019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <UsageFault_Handler+0x4>

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <TIM6_DAC_IRQHandler+0x10>)
 80019ce:	f005 fc29 	bl	8007224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000039c 	.word	0x2000039c

080019dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <OTG_HS_IRQHandler+0x10>)
 80019e2:	f001 f864 	bl	8002aae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200004d8 	.word	0x200004d8

080019f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <LTDC_IRQHandler+0x10>)
 80019f6:	f003 fd7f 	bl	80054f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000016c 	.word	0x2000016c

08001a04 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a08:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <DMA2D_IRQHandler+0x10>)
 8001a0a:	f000 fce8 	bl	80023de <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000012c 	.word	0x2000012c

08001a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e00a      	b.n	8001a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2a:	f3af 8000 	nop.w
 8001a2e:	4601      	mov	r1, r0
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf0      	blt.n	8001a2a <_read+0x12>
  }

  return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_isatty>:

int _isatty(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f008 fee6 	bl	800a8bc <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20030000 	.word	0x20030000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	200003e4 	.word	0x200003e4
 8001b24:	20000a08 	.word	0x20000a08

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b50:	f7ff ffea 	bl	8001b28 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	@ (8001b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f008 fea5 	bl	800a8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7fe fdc3 	bl	8000708 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b90:	0800b3b0 	.word	0x0800b3b0
  ldr r2, =_sbss
 8001b94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b98:	20000a04 	.word	0x20000a04

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fb6e 	bl	80022aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fe62 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fa38 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	200003e8 	.word	0x200003e8

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200003e8 	.word	0x200003e8

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e033      	b.n	8001cea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fa08 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f94a 	bl	8001f58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e113      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x244>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d925      	bls.n	8001d6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	3b1e      	subs	r3, #30
 8001d36:	2207      	movs	r2, #7
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	400a      	ands	r2, r1
 8001d44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4403      	add	r3, r0
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	409a      	lsls	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e022      	b.n	8001db2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6919      	ldr	r1, [r3, #16]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	2207      	movs	r2, #7
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6919      	ldr	r1, [r3, #16]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4403      	add	r3, r0
 8001da8:	409a      	lsls	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d824      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b05      	subs	r3, #5
 8001dcc:	221f      	movs	r2, #31
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b05      	subs	r3, #5
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e02:	e04c      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d824      	bhi.n	8001e56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b23      	subs	r3, #35	@ 0x23
 8001e1e:	221f      	movs	r2, #31
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b23      	subs	r3, #35	@ 0x23
 8001e48:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e54:	e023      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b41      	subs	r3, #65	@ 0x41
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b41      	subs	r3, #65	@ 0x41
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <HAL_ADC_ConfigChannel+0x250>)
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a28      	ldr	r2, [pc, #160]	@ (8001f48 <HAL_ADC_ConfigChannel+0x254>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10f      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1d8>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d10b      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_ADC_ConfigChannel+0x254>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12b      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x23a>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <HAL_ADC_ConfigChannel+0x258>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b11      	cmp	r3, #17
 8001ee6:	d122      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a11      	ldr	r2, [pc, #68]	@ (8001f4c <HAL_ADC_ConfigChannel+0x258>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_ADC_ConfigChannel+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <HAL_ADC_ConfigChannel+0x260>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40012300 	.word	0x40012300
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	10000012 	.word	0x10000012
 8001f50:	20000000 	.word	0x20000000
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f60:	4b79      	ldr	r3, [pc, #484]	@ (8002148 <ADC_Init+0x1f0>)
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fea:	4a58      	ldr	r2, [pc, #352]	@ (800214c <ADC_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ffe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6899      	ldr	r1, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e00f      	b.n	8002056 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0202 	bic.w	r2, r2, #2
 8002064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
 8002070:	005a      	lsls	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002092:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	3b01      	subs	r3, #1
 80020b0:	035a      	lsls	r2, r3, #13
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	e007      	b.n	80020cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	051a      	lsls	r2, r3, #20
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800210e:	025a      	lsls	r2, r3, #9
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	029a      	lsls	r2, r3, #10
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40012300 	.word	0x40012300
 800214c:	0f000001 	.word	0x0f000001

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	@ (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	@ (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff4c 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d2:	f7ff ff61 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	6978      	ldr	r0, [r7, #20]
 80022de:	f7ff ffb1 	bl	8002244 <NVIC_EncodePriority>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff80 	bl	80021f0 <__NVIC_SetPriority>
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff54 	bl	80021b4 <__NVIC_EnableIRQ>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00e      	b.n	8002344 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	795b      	ldrb	r3, [r3, #5]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe fef6 	bl	8001128 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e03b      	b.n	80023d6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fefa 	bl	800116c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239c:	f023 0107 	bic.w	r1, r3, #7
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68d1      	ldr	r1, [r2, #12]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d026      	beq.n	800244e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d021      	beq.n	800244e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002418:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2204      	movs	r2, #4
 8002432:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d026      	beq.n	80024a6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d021      	beq.n	80024a6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002470:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2220      	movs	r2, #32
 8002478:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	f043 0202 	orr.w	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2204      	movs	r2, #4
 800248a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d026      	beq.n	80024fe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d021      	beq.n	80024fe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d6:	f043 0204 	orr.w	r2, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002520:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2204      	movs	r2, #4
 8002528:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f853 	bl	80025d6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d024      	beq.n	8002584 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01f      	beq.n	8002584 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2202      	movs	r2, #2
 800255a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01f      	beq.n	80025ce <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01a      	beq.n	80025ce <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f80e 	bl	80025ea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_DMA2D_ConfigLayer+0x20>
 800261c:	2302      	movs	r3, #2
 800261e:	e079      	b.n	8002714 <HAL_DMA2D_ConfigLayer+0x114>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	3318      	adds	r3, #24
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800264a:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_DMA2D_ConfigLayer+0x120>)
 800264c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b0a      	cmp	r3, #10
 8002654:	d003      	beq.n	800265e <HAL_DMA2D_ConfigLayer+0x5e>
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b09      	cmp	r3, #9
 800265c:	d107      	bne.n	800266e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	e005      	b.n	800267a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d120      	bne.n	80026c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43db      	mvns	r3, r3
 800268a:	ea02 0103 	and.w	r1, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	430a      	orrs	r2, r1
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b0a      	cmp	r3, #10
 80026a8:	d003      	beq.n	80026b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	d127      	bne.n	8002702 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
 80026c0:	e01f      	b.n	8002702 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	ea02 0103 	and.w	r1, r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b0a      	cmp	r3, #10
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d106      	bne.n	8002702 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002700:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	371c      	adds	r7, #28
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	ff03000f 	.word	0xff03000f

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e177      	b.n	8002a30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002740:	2201      	movs	r2, #1
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8166 	bne.w	8002a2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d005      	beq.n	8002776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	2b02      	cmp	r3, #2
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d017      	beq.n	8002814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d123      	bne.n	8002868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80c0 	beq.w	8002a2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b66      	ldr	r3, [pc, #408]	@ (8002a48 <HAL_GPIO_Init+0x324>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	4a65      	ldr	r2, [pc, #404]	@ (8002a48 <HAL_GPIO_Init+0x324>)
 80028b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ba:	4b63      	ldr	r3, [pc, #396]	@ (8002a48 <HAL_GPIO_Init+0x324>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c6:	4a61      	ldr	r2, [pc, #388]	@ (8002a4c <HAL_GPIO_Init+0x328>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a58      	ldr	r2, [pc, #352]	@ (8002a50 <HAL_GPIO_Init+0x32c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d037      	beq.n	8002962 <HAL_GPIO_Init+0x23e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a57      	ldr	r2, [pc, #348]	@ (8002a54 <HAL_GPIO_Init+0x330>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_GPIO_Init+0x23a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a56      	ldr	r2, [pc, #344]	@ (8002a58 <HAL_GPIO_Init+0x334>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02b      	beq.n	800295a <HAL_GPIO_Init+0x236>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a55      	ldr	r2, [pc, #340]	@ (8002a5c <HAL_GPIO_Init+0x338>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x232>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a54      	ldr	r2, [pc, #336]	@ (8002a60 <HAL_GPIO_Init+0x33c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x22e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a53      	ldr	r2, [pc, #332]	@ (8002a64 <HAL_GPIO_Init+0x340>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x22a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_GPIO_Init+0x344>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x226>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a51      	ldr	r2, [pc, #324]	@ (8002a6c <HAL_GPIO_Init+0x348>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x222>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a50      	ldr	r2, [pc, #320]	@ (8002a70 <HAL_GPIO_Init+0x34c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x21e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4f      	ldr	r2, [pc, #316]	@ (8002a74 <HAL_GPIO_Init+0x350>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x21a>
 800293a:	2309      	movs	r3, #9
 800293c:	e012      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800293e:	230a      	movs	r3, #10
 8002940:	e010      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002942:	2308      	movs	r3, #8
 8002944:	e00e      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002946:	2307      	movs	r3, #7
 8002948:	e00c      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800294a:	2306      	movs	r3, #6
 800294c:	e00a      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800294e:	2305      	movs	r3, #5
 8002950:	e008      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002952:	2304      	movs	r3, #4
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_Init+0x240>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x240>
 8002962:	2300      	movs	r3, #0
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f002 0203 	and.w	r2, r2, #3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4093      	lsls	r3, r2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002974:	4935      	ldr	r1, [pc, #212]	@ (8002a4c <HAL_GPIO_Init+0x328>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a34      	ldr	r2, [pc, #208]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a29      	ldr	r2, [pc, #164]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d6:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <HAL_GPIO_Init+0x354>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f67f ae84 	bls.w	8002740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f005 ffdb 	bl	8008a80 <USB_GetMode>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	f040 80fb 	bne.w	8002cc8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f005 ff9e 	bl	8008a18 <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80f1 	beq.w	8002cc6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f005 ff95 	bl	8008a18 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002af8:	d104      	bne.n	8002b04 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b02:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f005 ff85 	bl	8008a18 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b18:	d104      	bne.n	8002b24 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b22:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f005 ff75 	bl	8008a18 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b38:	d104      	bne.n	8002b44 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f005 ff65 	bl	8008a18 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d103      	bne.n	8002b60 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 ff57 	bl	8008a18 <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b74:	d120      	bne.n	8002bb8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002b7e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b90:	2110      	movs	r1, #16
 8002b92:	6938      	ldr	r0, [r7, #16]
 8002b94:	f005 fe88 	bl	80088a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b98:	6938      	ldr	r0, [r7, #16]
 8002b9a:	f005 feb7 	bl	800890c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7a5b      	ldrb	r3, [r3, #9]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d105      	bne.n	8002bb2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f005 ff75 	bl	8008a9c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f007 fae8 	bl	800a188 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f005 ff2b 	bl	8008a18 <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bcc:	d102      	bne.n	8002bd4 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f001 fc87 	bl	80044e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 ff1d 	bl	8008a18 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d106      	bne.n	8002bf6 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f007 fab1 	bl	800a150 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f005 ff0c 	bl	8008a18 <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c0a:	d139      	bne.n	8002c80 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f005 ff80 	bl	8008b16 <USB_HC_ReadInterrupt>
 8002c16:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e025      	b.n	8002c6a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c48:	d106      	bne.n	8002c58 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f859 	bl	8002d08 <HCD_HC_IN_IRQHandler>
 8002c56:	e005      	b.n	8002c64 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 febb 	bl	80039da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3301      	adds	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	795b      	ldrb	r3, [r3, #5]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d3d3      	bcc.n	8002c1e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fec7 	bl	8008a18 <USB_ReadInterrupts>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d101      	bne.n	8002c98 <HAL_HCD_IRQHandler+0x1ea>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_HCD_IRQHandler+0x1ec>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d014      	beq.n	8002cc8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0210 	bic.w	r2, r2, #16
 8002cac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f001 fb38 	bl	8004324 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0210 	orr.w	r2, r2, #16
 8002cc2:	619a      	str	r2, [r3, #24]
 8002cc4:	e000      	b.n	8002cc8 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002cc6:	bf00      	nop
    }
  }
}
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_HCD_Stop+0x16>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e00d      	b.n	8002d00 <HAL_HCD_Stop+0x32>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f006 f841 	bl	8008d78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f005 fe89 	bl	8008a3e <USB_ReadChInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d11a      	bne.n	8002d6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	2304      	movs	r3, #4
 8002d46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	334d      	adds	r3, #77	@ 0x4d
 8002d58:	2207      	movs	r2, #7
 8002d5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fee7 	bl	8008b38 <USB_HC_Halt>
 8002d6a:	e09e      	b.n	8002eaa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 fe62 	bl	8008a3e <USB_ReadChInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d84:	d11b      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	334d      	adds	r3, #77	@ 0x4d
 8002daa:	2208      	movs	r2, #8
 8002dac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f005 febe 	bl	8008b38 <USB_HC_Halt>
 8002dbc:	e075      	b.n	8002eaa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f005 fe39 	bl	8008a3e <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11a      	bne.n	8002e0c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	2308      	movs	r3, #8
 8002de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334d      	adds	r3, #77	@ 0x4d
 8002df8:	2206      	movs	r2, #6
 8002dfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f005 fe97 	bl	8008b38 <USB_HC_Halt>
 8002e0a:	e04e      	b.n	8002eaa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f005 fe12 	bl	8008a3e <USB_ReadChInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e24:	d11b      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	334d      	adds	r3, #77	@ 0x4d
 8002e4a:	2209      	movs	r2, #9
 8002e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 fe6e 	bl	8008b38 <USB_HC_Halt>
 8002e5c:	e025      	b.n	8002eaa <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 fde9 	bl	8008a3e <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b80      	cmp	r3, #128	@ 0x80
 8002e74:	d119      	bne.n	8002eaa <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334d      	adds	r3, #77	@ 0x4d
 8002e98:	2207      	movs	r2, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 fe47 	bl	8008b38 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f005 fdc3 	bl	8008a3e <USB_ReadChInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec2:	d112      	bne.n	8002eea <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 fe33 	bl	8008b38 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee4:	6093      	str	r3, [r2, #8]
 8002ee6:	f000 bd75 	b.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 fda3 	bl	8008a3e <USB_ReadChInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	f040 8128 	bne.w	8003154 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2320      	movs	r3, #32
 8002f14:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	331b      	adds	r3, #27
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d119      	bne.n	8002f60 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	331b      	adds	r3, #27
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	0151      	lsls	r1, r2, #5
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	440a      	add	r2, r1
 8002f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	799b      	ldrb	r3, [r3, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3330      	adds	r3, #48	@ 0x30
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	1ac9      	subs	r1, r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3338      	adds	r3, #56	@ 0x38
 8002f9e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	@ 0x4d
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3344      	adds	r3, #68	@ 0x44
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3326      	adds	r3, #38	@ 0x26
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3326      	adds	r3, #38	@ 0x26
 8003000:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003002:	2b02      	cmp	r3, #2
 8003004:	d110      	bne.n	8003028 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f005 fd92 	bl	8008b38 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2310      	movs	r3, #16
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	e03d      	b.n	80030a4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3326      	adds	r3, #38	@ 0x26
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d00a      	beq.n	8003054 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3326      	adds	r3, #38	@ 0x26
 800304e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003050:	2b01      	cmp	r3, #1
 8003052:	d127      	bne.n	80030a4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800306e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003072:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	334c      	adds	r3, #76	@ 0x4c
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	334c      	adds	r3, #76	@ 0x4c
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f007 f880 	bl	800a1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	799b      	ldrb	r3, [r3, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d13b      	bne.n	8003124 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3338      	adds	r3, #56	@ 0x38
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	3328      	adds	r3, #40	@ 0x28
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	440b      	add	r3, r1
 80030d2:	1e59      	subs	r1, r3, #1
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4403      	add	r3, r0
 80030e2:	3328      	adds	r3, #40	@ 0x28
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8470 	beq.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	333c      	adds	r3, #60	@ 0x3c
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	f083 0301 	eor.w	r3, r3, #1
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	333c      	adds	r3, #60	@ 0x3c
 800311c:	4602      	mov	r2, r0
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	f000 bc58 	b.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	333c      	adds	r3, #60	@ 0x3c
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	333c      	adds	r3, #60	@ 0x3c
 800314c:	4602      	mov	r2, r0
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	f000 bc40 	b.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f005 fc6e 	bl	8008a3e <USB_ReadChInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b20      	cmp	r3, #32
 800316a:	d131      	bne.n	80031d0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2320      	movs	r3, #32
 800317c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	331a      	adds	r3, #26
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 841f 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	331b      	adds	r3, #27
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334d      	adds	r3, #77	@ 0x4d
 80031ba:	2203      	movs	r2, #3
 80031bc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f005 fcb6 	bl	8008b38 <USB_HC_Halt>
 80031cc:	f000 bc02 	b.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 fc30 	bl	8008a3e <USB_ReadChInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f040 8305 	bne.w	80037f4 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	2302      	movs	r3, #2
 80031fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334d      	adds	r3, #77	@ 0x4d
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d114      	bne.n	800323c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334d      	adds	r3, #77	@ 0x4d
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	334c      	adds	r3, #76	@ 0x4c
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e2cc      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	334d      	adds	r3, #77	@ 0x4d
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d114      	bne.n	800327c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334d      	adds	r3, #77	@ 0x4d
 8003262:	2202      	movs	r2, #2
 8003264:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334c      	adds	r3, #76	@ 0x4c
 8003276:	2205      	movs	r2, #5
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e2ac      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	334d      	adds	r3, #77	@ 0x4d
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b07      	cmp	r3, #7
 8003290:	d00b      	beq.n	80032aa <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	334d      	adds	r3, #77	@ 0x4d
 80032a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	f040 80a6 	bne.w	80033f6 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334d      	adds	r3, #77	@ 0x4d
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3344      	adds	r3, #68	@ 0x44
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4403      	add	r3, r0
 80032de:	3344      	adds	r3, #68	@ 0x44
 80032e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3344      	adds	r3, #68	@ 0x44
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d943      	bls.n	8003380 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3344      	adds	r3, #68	@ 0x44
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	331a      	adds	r3, #26
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d123      	bne.n	800336a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	331b      	adds	r3, #27
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	331c      	adds	r3, #28
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	440a      	add	r2, r1
 8003360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	334c      	adds	r3, #76	@ 0x4c
 800337a:	2204      	movs	r2, #4
 800337c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800337e:	e229      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334c      	adds	r3, #76	@ 0x4c
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3326      	adds	r3, #38	@ 0x26
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3326      	adds	r3, #38	@ 0x26
 80033ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f040 8209 	bne.w	80037d4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033f4:	e1ee      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	334d      	adds	r3, #77	@ 0x4d
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b05      	cmp	r3, #5
 800340a:	f040 80c8 	bne.w	800359e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334d      	adds	r3, #77	@ 0x4d
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	331b      	adds	r3, #27
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 81ce 	bne.w	80037d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3326      	adds	r3, #38	@ 0x26
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d16b      	bne.n	8003528 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3348      	adds	r3, #72	@ 0x48
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4403      	add	r3, r0
 8003470:	3348      	adds	r3, #72	@ 0x48
 8003472:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3348      	adds	r3, #72	@ 0x48
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d943      	bls.n	8003512 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3348      	adds	r3, #72	@ 0x48
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	331b      	adds	r3, #27
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3344      	adds	r3, #68	@ 0x44
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d809      	bhi.n	80034dc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	331c      	adds	r3, #28
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	0151      	lsls	r1, r2, #5
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	440a      	add	r2, r1
 80034f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fa:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	334c      	adds	r3, #76	@ 0x4c
 800350c:	2204      	movs	r2, #4
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e014      	b.n	800353c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	334c      	adds	r3, #76	@ 0x4c
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e009      	b.n	800353c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	334c      	adds	r3, #76	@ 0x4c
 8003538:	2202      	movs	r2, #2
 800353a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3326      	adds	r3, #38	@ 0x26
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3326      	adds	r3, #38	@ 0x26
 8003562:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003564:	2b02      	cmp	r3, #2
 8003566:	f040 8136 	bne.w	80037d6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003580:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003588:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e11b      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	334d      	adds	r3, #77	@ 0x4d
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	f040 8081 	bne.w	80036b8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	334d      	adds	r3, #77	@ 0x4d
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	331b      	adds	r3, #27
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 80fa 	bne.w	80037d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	334c      	adds	r3, #76	@ 0x4c
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	0151      	lsls	r1, r2, #5
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	440a      	add	r2, r1
 800360c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	440a      	add	r2, r1
 800362c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003634:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	0151      	lsls	r1, r2, #5
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	440a      	add	r2, r1
 800364c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003650:	f023 0320 	bic.w	r3, r3, #32
 8003654:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3326      	adds	r3, #38	@ 0x26
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3326      	adds	r3, #38	@ 0x26
 800367c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800367e:	2b02      	cmp	r3, #2
 8003680:	f040 80a9 	bne.w	80037d6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800369a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b0:	461a      	mov	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e08e      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334d      	adds	r3, #77	@ 0x4d
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d143      	bne.n	8003756 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334d      	adds	r3, #77	@ 0x4d
 80036de:	2202      	movs	r2, #2
 80036e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	334c      	adds	r3, #76	@ 0x4c
 80036f2:	2202      	movs	r2, #2
 80036f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3326      	adds	r3, #38	@ 0x26
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3326      	adds	r3, #38	@ 0x26
 800371c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371e:	2b02      	cmp	r3, #2
 8003720:	d159      	bne.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003738:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003740:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e03f      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	334d      	adds	r3, #77	@ 0x4d
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d126      	bne.n	80037ba <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	334d      	adds	r3, #77	@ 0x4d
 800377c:	2202      	movs	r2, #2
 800377e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	3344      	adds	r3, #68	@ 0x44
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4403      	add	r3, r0
 80037a0:	3344      	adds	r3, #68	@ 0x44
 80037a2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	334c      	adds	r3, #76	@ 0x4c
 80037b4:	2204      	movs	r2, #4
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e00d      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	334d      	adds	r3, #77	@ 0x4d
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f000 8100 	beq.w	80039d2 <HCD_HC_IN_IRQHandler+0xcca>
 80037d2:	e000      	b.n	80037d6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037d4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334c      	adds	r3, #76	@ 0x4c
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f006 fcd9 	bl	800a1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037f2:	e0ef      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f005 f91e 	bl	8008a3e <USB_ReadChInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003808:	2b40      	cmp	r3, #64	@ 0x40
 800380a:	d12f      	bne.n	800386c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003818:	461a      	mov	r2, r3
 800381a:	2340      	movs	r3, #64	@ 0x40
 800381c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	334d      	adds	r3, #77	@ 0x4d
 800382e:	2205      	movs	r2, #5
 8003830:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	331a      	adds	r3, #26
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3344      	adds	r3, #68	@ 0x44
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f005 f967 	bl	8008b38 <USB_HC_Halt>
 800386a:	e0b3      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f005 f8e2 	bl	8008a3e <USB_ReadChInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	f040 80a7 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3326      	adds	r3, #38	@ 0x26
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d11b      	bne.n	80038d4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3344      	adds	r3, #68	@ 0x44
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334d      	adds	r3, #77	@ 0x4d
 80038c0:	2204      	movs	r2, #4
 80038c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f005 f933 	bl	8008b38 <USB_HC_Halt>
 80038d2:	e03f      	b.n	8003954 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3326      	adds	r3, #38	@ 0x26
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	@ 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d129      	bne.n	8003954 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3344      	adds	r3, #68	@ 0x44
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	799b      	ldrb	r3, [r3, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HCD_HC_IN_IRQHandler+0xc2a>
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	331b      	adds	r3, #27
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d110      	bne.n	8003954 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	334d      	adds	r3, #77	@ 0x4d
 8003942:	2204      	movs	r2, #4
 8003944:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f005 f8f2 	bl	8008b38 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	331b      	adds	r3, #27
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d129      	bne.n	80039be <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	331b      	adds	r3, #27
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	440a      	add	r2, r1
 8003994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b8:	f043 0320 	orr.w	r3, r3, #32
 80039bc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ca:	461a      	mov	r2, r3
 80039cc:	2310      	movs	r3, #16
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	e000      	b.n	80039d4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80039d2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f005 f820 	bl	8008a3e <USB_ReadChInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d11b      	bne.n	8003a40 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2304      	movs	r3, #4
 8003a18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334d      	adds	r3, #77	@ 0x4d
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f005 f87e 	bl	8008b38 <USB_HC_Halt>
 8003a3c:	f000 bc6f 	b.w	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 fff8 	bl	8008a3e <USB_ReadChInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	f040 8082 	bne.w	8003b5e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a66:	461a      	mov	r2, r3
 8003a68:	2320      	movs	r3, #32
 8003a6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3319      	adds	r3, #25
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d124      	bne.n	8003acc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3319      	adds	r3, #25
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334c      	adds	r3, #76	@ 0x4c
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	334d      	adds	r3, #77	@ 0x4d
 8003aba:	2203      	movs	r2, #3
 8003abc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f005 f836 	bl	8008b38 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	331a      	adds	r3, #26
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	f040 841d 	bne.w	800431e <HCD_HC_OUT_IRQHandler+0x944>
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	331b      	adds	r3, #27
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 8411 	bne.w	800431e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3326      	adds	r3, #38	@ 0x26
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d009      	beq.n	8003b26 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	331b      	adds	r3, #27
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	334d      	adds	r3, #77	@ 0x4d
 8003b36:	2203      	movs	r2, #3
 8003b38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 fff8 	bl	8008b38 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	@ 0x44
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e3df      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 ff69 	bl	8008a3e <USB_ReadChInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b76:	d111      	bne.n	8003b9c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b84:	461a      	mov	r2, r3
 8003b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b8a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 ffcf 	bl	8008b38 <USB_HC_Halt>
 8003b9a:	e3c0      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 ff4a 	bl	8008a3e <USB_ReadChInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d168      	bne.n	8003c86 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3344      	adds	r3, #68	@ 0x44
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 ff34 	bl	8008a3e <USB_ReadChInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d112      	bne.n	8003c06 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3319      	adds	r3, #25
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	2340      	movs	r3, #64	@ 0x40
 8003c04:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	331b      	adds	r3, #27
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d019      	beq.n	8003c50 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	331b      	adds	r3, #27
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2301      	movs	r3, #1
 8003c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	@ 0x4d
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 ff5a 	bl	8008b38 <USB_HC_Halt>
 8003c84:	e34b      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f004 fed5 	bl	8008a3e <USB_ReadChInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d139      	bne.n	8003d12 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	334d      	adds	r3, #77	@ 0x4d
 8003cae:	2205      	movs	r2, #5
 8003cb0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	331a      	adds	r3, #26
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3319      	adds	r3, #25
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3344      	adds	r3, #68	@ 0x44
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 ff1d 	bl	8008b38 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2340      	movs	r3, #64	@ 0x40
 8003d0e:	6093      	str	r3, [r2, #8]
 8003d10:	e305      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fe8f 	bl	8008a3e <USB_ReadChInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d11a      	bne.n	8003d60 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2308      	movs	r3, #8
 8003d3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	334d      	adds	r3, #77	@ 0x4d
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f004 feed 	bl	8008b38 <USB_HC_Halt>
 8003d5e:	e2de      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f004 fe68 	bl	8008a3e <USB_ReadChInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d144      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3344      	adds	r3, #68	@ 0x44
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334d      	adds	r3, #77	@ 0x4d
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3319      	adds	r3, #25
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3319      	adds	r3, #25
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f004 fea5 	bl	8008b38 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	6093      	str	r3, [r2, #8]
 8003e00:	e28d      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 fe17 	bl	8008a3e <USB_ReadChInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e16:	2b80      	cmp	r3, #128	@ 0x80
 8003e18:	d169      	bne.n	8003eee <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	799b      	ldrb	r3, [r3, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d111      	bne.n	8003e46 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334d      	adds	r3, #77	@ 0x4d
 8003e32:	2207      	movs	r2, #7
 8003e34:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 fe7a 	bl	8008b38 <USB_HC_Halt>
 8003e44:	e049      	b.n	8003eda <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3344      	adds	r3, #68	@ 0x44
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1c59      	adds	r1, r3, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4403      	add	r3, r0
 8003e66:	3344      	adds	r3, #68	@ 0x44
 8003e68:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3344      	adds	r3, #68	@ 0x44
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d922      	bls.n	8003ec6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3344      	adds	r3, #68	@ 0x44
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	334c      	adds	r3, #76	@ 0x4c
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	334c      	adds	r3, #76	@ 0x4c
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f006 f970 	bl	800a1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ec4:	e009      	b.n	8003eda <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	334c      	adds	r3, #76	@ 0x4c
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	6093      	str	r3, [r2, #8]
 8003eec:	e217      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 fda1 	bl	8008a3e <USB_ReadChInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f06:	d11b      	bne.n	8003f40 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	334d      	adds	r3, #77	@ 0x4d
 8003f18:	2209      	movs	r2, #9
 8003f1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 fe07 	bl	8008b38 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f36:	461a      	mov	r2, r3
 8003f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	e1ee      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f004 fd78 	bl	8008a3e <USB_ReadChInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	f040 81df 	bne.w	8004318 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f66:	461a      	mov	r2, r3
 8003f68:	2302      	movs	r3, #2
 8003f6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334d      	adds	r3, #77	@ 0x4d
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f040 8093 	bne.w	80040aa <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334d      	adds	r3, #77	@ 0x4d
 8003f94:	2202      	movs	r2, #2
 8003f96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334c      	adds	r3, #76	@ 0x4c
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3326      	adds	r3, #38	@ 0x26
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d00b      	beq.n	8003fda <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3326      	adds	r3, #38	@ 0x26
 8003fd2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	f040 8190 	bne.w	80042fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	799b      	ldrb	r3, [r3, #6]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d115      	bne.n	800400e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	333d      	adds	r3, #61	@ 0x3d
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	f083 0301 	eor.w	r3, r3, #1
 8003ffa:	b2d8      	uxtb	r0, r3
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	333d      	adds	r3, #61	@ 0x3d
 800400a:	4602      	mov	r2, r0
 800400c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	799b      	ldrb	r3, [r3, #6]
 8004012:	2b01      	cmp	r3, #1
 8004014:	f040 8171 	bne.w	80042fa <HCD_HC_OUT_IRQHandler+0x920>
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3334      	adds	r3, #52	@ 0x34
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8165 	beq.w	80042fa <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3334      	adds	r3, #52	@ 0x34
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4403      	add	r3, r0
 8004050:	3328      	adds	r3, #40	@ 0x28
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	440b      	add	r3, r1
 8004056:	1e59      	subs	r1, r3, #1
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4403      	add	r3, r0
 8004066:	3328      	adds	r3, #40	@ 0x28
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	fbb1 f3f3 	udiv	r3, r1, r3
 800406e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 813f 	beq.w	80042fa <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	333d      	adds	r3, #61	@ 0x3d
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	f083 0301 	eor.w	r3, r3, #1
 8004094:	b2d8      	uxtb	r0, r3
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	333d      	adds	r3, #61	@ 0x3d
 80040a4:	4602      	mov	r2, r0
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e127      	b.n	80042fa <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	334d      	adds	r3, #77	@ 0x4d
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d120      	bne.n	8004102 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	334d      	adds	r3, #77	@ 0x4d
 80040d0:	2202      	movs	r2, #2
 80040d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	331b      	adds	r3, #27
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	f040 8107 	bne.w	80042fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	334c      	adds	r3, #76	@ 0x4c
 80040fc:	2202      	movs	r2, #2
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e0fb      	b.n	80042fa <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	@ 0x4d
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d13a      	bne.n	800418e <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	334d      	adds	r3, #77	@ 0x4d
 8004128:	2202      	movs	r2, #2
 800412a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	334c      	adds	r3, #76	@ 0x4c
 800413c:	2202      	movs	r2, #2
 800413e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	331b      	adds	r3, #27
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	f040 80d1 	bne.w	80042fa <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	331b      	adds	r3, #27
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	440a      	add	r2, r1
 8004182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418a:	6053      	str	r3, [r2, #4]
 800418c:	e0b5      	b.n	80042fa <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	334d      	adds	r3, #77	@ 0x4d
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d114      	bne.n	80041ce <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334d      	adds	r3, #77	@ 0x4d
 80041b4:	2202      	movs	r2, #2
 80041b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	334c      	adds	r3, #76	@ 0x4c
 80041c8:	2202      	movs	r2, #2
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	e095      	b.n	80042fa <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	334d      	adds	r3, #77	@ 0x4d
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b06      	cmp	r3, #6
 80041e2:	d114      	bne.n	800420e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	334d      	adds	r3, #77	@ 0x4d
 80041f4:	2202      	movs	r2, #2
 80041f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	@ 0x4c
 8004208:	2205      	movs	r2, #5
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e075      	b.n	80042fa <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	334d      	adds	r3, #77	@ 0x4d
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b07      	cmp	r3, #7
 8004222:	d00a      	beq.n	800423a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	334d      	adds	r3, #77	@ 0x4d
 8004234:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004236:	2b09      	cmp	r3, #9
 8004238:	d170      	bne.n	800431c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	334d      	adds	r3, #77	@ 0x4d
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3344      	adds	r3, #68	@ 0x44
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4403      	add	r3, r0
 800426e:	3344      	adds	r3, #68	@ 0x44
 8004270:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3344      	adds	r3, #68	@ 0x44
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d914      	bls.n	80042b2 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3344      	adds	r3, #68	@ 0x44
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	334c      	adds	r3, #76	@ 0x4c
 80042ac:	2204      	movs	r2, #4
 80042ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042b0:	e022      	b.n	80042f8 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	334c      	adds	r3, #76	@ 0x4c
 80042c2:	2202      	movs	r2, #2
 80042c4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042dc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042e4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042f8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	334c      	adds	r3, #76	@ 0x4c
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f005 ff47 	bl	800a1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004316:	e002      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800431c:	bf00      	nop
  }
}
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	@ 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	0c5b      	lsrs	r3, r3, #17
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004358:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d004      	beq.n	800436a <HCD_RXQLVL_IRQHandler+0x46>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b05      	cmp	r3, #5
 8004364:	f000 80b6 	beq.w	80044d4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004368:	e0b7      	b.n	80044da <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80b3 	beq.w	80044d8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	332c      	adds	r3, #44	@ 0x2c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a7 	beq.w	80044d8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3338      	adds	r3, #56	@ 0x38
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	18d1      	adds	r1, r2, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4403      	add	r3, r0
 80043ae:	3334      	adds	r3, #52	@ 0x34
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	f200 8083 	bhi.w	80044be <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	332c      	adds	r3, #44	@ 0x2c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f004 fac8 	bl	8008968 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	332c      	adds	r3, #44	@ 0x2c
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4403      	add	r3, r0
 80043fc:	332c      	adds	r3, #44	@ 0x2c
 80043fe:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3338      	adds	r3, #56	@ 0x38
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4403      	add	r3, r0
 8004424:	3338      	adds	r3, #56	@ 0x38
 8004426:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	0cdb      	lsrs	r3, r3, #19
 8004438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3328      	adds	r3, #40	@ 0x28
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4293      	cmp	r3, r2
 8004456:	d13f      	bne.n	80044d8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d03c      	beq.n	80044d8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004474:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800447c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	333c      	adds	r3, #60	@ 0x3c
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2d8      	uxtb	r0, r3
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	333c      	adds	r3, #60	@ 0x3c
 80044b8:	4602      	mov	r2, r0
 80044ba:	701a      	strb	r2, [r3, #0]
      break;
 80044bc:	e00c      	b.n	80044d8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	334c      	adds	r3, #76	@ 0x4c
 80044ce:	2204      	movs	r2, #4
 80044d0:	701a      	strb	r2, [r3, #0]
      break;
 80044d2:	e001      	b.n	80044d8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044d8:	bf00      	nop
  }
}
 80044da:	bf00      	nop
 80044dc:	3728      	adds	r7, #40	@ 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800450e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d10b      	bne.n	8004532 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d102      	bne.n	800452a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f005 fe21 	bl	800a16c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d132      	bne.n	80045a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f043 0308 	orr.w	r3, r3, #8
 8004542:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d126      	bne.n	800459c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7a5b      	ldrb	r3, [r3, #9]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d113      	bne.n	800457e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800455c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004560:	d106      	bne.n	8004570 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f004 fa97 	bl	8008a9c <USB_InitFSLSPClkSel>
 800456e:	e011      	b.n	8004594 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f004 fa90 	bl	8008a9c <USB_InitFSLSPClkSel>
 800457c:	e00a      	b.n	8004594 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	79db      	ldrb	r3, [r3, #7]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d106      	bne.n	8004594 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800458c:	461a      	mov	r2, r3
 800458e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004592:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f005 fe17 	bl	800a1c8 <HAL_HCD_PortEnabled_Callback>
 800459a:	e002      	b.n	80045a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f005 fe21 	bl	800a1e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d103      	bne.n	80045b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f043 0320 	orr.w	r3, r3, #32
 80045b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045ba:	461a      	mov	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e12b      	b.n	8004832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc fde4 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	@ 0x24
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800461a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800462a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800462c:	f001 fe6c 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a81      	ldr	r2, [pc, #516]	@ (800483c <HAL_I2C_Init+0x274>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d807      	bhi.n	800464c <HAL_I2C_Init+0x84>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a80      	ldr	r2, [pc, #512]	@ (8004840 <HAL_I2C_Init+0x278>)
 8004640:	4293      	cmp	r3, r2
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e006      	b.n	800465a <HAL_I2C_Init+0x92>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a7d      	ldr	r2, [pc, #500]	@ (8004844 <HAL_I2C_Init+0x27c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	bf94      	ite	ls
 8004654:	2301      	movls	r3, #1
 8004656:	2300      	movhi	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0e7      	b.n	8004832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a78      	ldr	r2, [pc, #480]	@ (8004848 <HAL_I2C_Init+0x280>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	0c9b      	lsrs	r3, r3, #18
 800466c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4a6a      	ldr	r2, [pc, #424]	@ (800483c <HAL_I2C_Init+0x274>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d802      	bhi.n	800469c <HAL_I2C_Init+0xd4>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	e009      	b.n	80046b0 <HAL_I2C_Init+0xe8>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	4a69      	ldr	r2, [pc, #420]	@ (800484c <HAL_I2C_Init+0x284>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	3301      	adds	r3, #1
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	495c      	ldr	r1, [pc, #368]	@ (800483c <HAL_I2C_Init+0x274>)
 80046cc:	428b      	cmp	r3, r1
 80046ce:	d819      	bhi.n	8004704 <HAL_I2C_Init+0x13c>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e59      	subs	r1, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fbb1 f3f3 	udiv	r3, r1, r3
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046e4:	400b      	ands	r3, r1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_I2C_Init+0x138>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1e59      	subs	r1, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fe:	e051      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 8004700:	2304      	movs	r3, #4
 8004702:	e04f      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d111      	bne.n	8004730 <HAL_I2C_Init+0x168>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1e58      	subs	r0, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	440b      	add	r3, r1
 800471a:	fbb0 f3f3 	udiv	r3, r0, r3
 800471e:	3301      	adds	r3, #1
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e012      	b.n	8004756 <HAL_I2C_Init+0x18e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e58      	subs	r0, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	0099      	lsls	r1, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Init+0x196>
 800475a:	2301      	movs	r3, #1
 800475c:	e022      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <HAL_I2C_Init+0x1bc>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1e58      	subs	r0, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	440b      	add	r3, r1
 8004774:	fbb0 f3f3 	udiv	r3, r0, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004782:	e00f      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	0099      	lsls	r1, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	fbb0 f3f3 	udiv	r3, r0, r3
 800479a:	3301      	adds	r3, #1
 800479c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	6809      	ldr	r1, [r1, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6911      	ldr	r1, [r2, #16]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	4311      	orrs	r1, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	000186a0 	.word	0x000186a0
 8004840:	001e847f 	.word	0x001e847f
 8004844:	003d08ff 	.word	0x003d08ff
 8004848:	431bde83 	.word	0x431bde83
 800484c:	10624dd3 	.word	0x10624dd3

08004850 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	@ 0x30
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	460b      	mov	r3, r1
 8004864:	813b      	strh	r3, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800486a:	f7fd f9cf 	bl	8001c0c <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b20      	cmp	r3, #32
 800487a:	f040 8214 	bne.w	8004ca6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2319      	movs	r3, #25
 8004884:	2201      	movs	r2, #1
 8004886:	497b      	ldr	r1, [pc, #492]	@ (8004a74 <HAL_I2C_Mem_Read+0x224>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fafb 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	e207      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Mem_Read+0x56>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e200      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d007      	beq.n	80048cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2222      	movs	r2, #34	@ 0x22
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	@ 0x40
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80048fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a78 <HAL_I2C_Mem_Read+0x228>)
 800490c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800490e:	88f8      	ldrh	r0, [r7, #6]
 8004910:	893a      	ldrh	r2, [r7, #8]
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4603      	mov	r3, r0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f9c8 	bl	8004cb4 <I2C_RequestMemoryRead>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e1bc      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d113      	bne.n	800495e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e190      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004962:	2b01      	cmp	r3, #1
 8004964:	d11b      	bne.n	800499e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e170      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d11b      	bne.n	80049de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	e150      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049f4:	e144      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	f200 80f1 	bhi.w	8004be2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d123      	bne.n	8004a50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fb9b 	bl	8005148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e145      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a4e:	e117      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d14e      	bne.n	8004af6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4906      	ldr	r1, [pc, #24]	@ (8004a7c <HAL_I2C_Mem_Read+0x22c>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa0e 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e11a      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
 8004a72:	bf00      	nop
 8004a74:	00100002 	.word	0x00100002
 8004a78:	ffff0000 	.word	0xffff0000
 8004a7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004af4:	e0c4      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	2200      	movs	r2, #0
 8004afe:	496c      	ldr	r1, [pc, #432]	@ (8004cb0 <HAL_I2C_Mem_Read+0x460>)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f9bf 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0cb      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4955      	ldr	r1, [pc, #340]	@ (8004cb0 <HAL_I2C_Mem_Read+0x460>)
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f991 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e09d      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004be0:	e04e      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 faae 	bl	8005148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e058      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d124      	bne.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f47f aeb6 	bne.w	80049f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3728      	adds	r7, #40	@ 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	00010004 	.word	0x00010004

08004cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	813b      	strh	r3, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f8c2 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d14:	d103      	bne.n	8004d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0aa      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d22:	897b      	ldrh	r3, [r7, #10]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	4952      	ldr	r1, [pc, #328]	@ (8004e80 <I2C_RequestMemoryRead+0x1cc>)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f91d 	bl	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e097      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d60:	6a39      	ldr	r1, [r7, #32]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f9a8 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d107      	bne.n	8004d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e076      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d90:	893b      	ldrh	r3, [r7, #8]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e021      	b.n	8004de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f982 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00d      	beq.n	8004dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d107      	bne.n	8004dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e050      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de2:	6a39      	ldr	r1, [r7, #32]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f967 	bl	80050b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00d      	beq.n	8004e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d107      	bne.n	8004e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e035      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f82b 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e42:	d103      	bne.n	8004e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e013      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e50:	897b      	ldrh	r3, [r7, #10]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	6a3a      	ldr	r2, [r7, #32]
 8004e64:	4906      	ldr	r1, [pc, #24]	@ (8004e80 <I2C_RequestMemoryRead+0x1cc>)
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f886 	bl	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	00010002 	.word	0x00010002

08004e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e94:	e048      	b.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d044      	beq.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fc feb5 	bl	8001c0c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d139      	bne.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10d      	bne.n	8004eda <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	e00c      	b.n	8004ef4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d116      	bne.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e023      	b.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10d      	bne.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	e00c      	b.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	43da      	mvns	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d093      	beq.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f86:	e071      	b.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f96:	d123      	bne.n	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	f043 0204 	orr.w	r2, r3, #4
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e067      	b.n	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d041      	beq.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fc fe10 	bl	8001c0c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d136      	bne.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10c      	bne.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	43da      	mvns	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4013      	ands	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e00b      	b.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	43da      	mvns	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e021      	b.n	80050b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10c      	bne.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	43da      	mvns	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e00b      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	43da      	mvns	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4013      	ands	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f af6d 	bne.w	8004f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c4:	e034      	b.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f89b 	bl	8005202 <I2C_IsAcknowledgeFailed>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e034      	b.n	8005140 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d028      	beq.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fc fd95 	bl	8001c0c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11d      	bne.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b80      	cmp	r3, #128	@ 0x80
 8005100:	d016      	beq.n	8005130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e007      	b.n	8005140 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b80      	cmp	r3, #128	@ 0x80
 800513c:	d1c3      	bne.n	80050c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005154:	e049      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	d119      	bne.n	8005198 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0210 	mvn.w	r2, #16
 800516c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e030      	b.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005198:	f7fc fd38 	bl	8001c0c <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d016      	beq.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e007      	b.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d1ae      	bne.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005218:	d11b      	bne.n	8005252 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005222:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b20      	cmp	r3, #32
 8005274:	d129      	bne.n	80052ca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2224      	movs	r2, #36	@ 0x24
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0210 	bic.w	r2, r2, #16
 800529c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d12a      	bne.n	8005348 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2224      	movs	r2, #36	@ 0x24
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	f023 030f 	bic.w	r3, r3, #15
 8005318:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	b29a      	uxth	r2, r3
 800531e:	89fb      	ldrh	r3, [r7, #14]
 8005320:	4313      	orrs	r3, r2
 8005322:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	89fa      	ldrh	r2, [r7, #14]
 800532a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e0bf      	b.n	80054ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb ff86 	bl	8001290 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800539a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b4a      	ldr	r3, [pc, #296]	@ (80054f4 <HAL_LTDC_Init+0x19c>)
 80053cc:	400b      	ands	r3, r1
 80053ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6899      	ldr	r1, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68d9      	ldr	r1, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b3e      	ldr	r3, [pc, #248]	@ (80054f4 <HAL_LTDC_Init+0x19c>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68d9      	ldr	r1, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6919      	ldr	r1, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b33      	ldr	r3, [pc, #204]	@ (80054f4 <HAL_LTDC_Init+0x19c>)
 8005428:	400b      	ands	r3, r1
 800542a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6919      	ldr	r1, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6959      	ldr	r1, [r3, #20]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <HAL_LTDC_Init+0x19c>)
 8005456:	400b      	ands	r3, r1
 8005458:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6959      	ldr	r1, [r3, #20]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800549a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0206 	orr.w	r2, r2, #6
 80054c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	f000f800 	.word	0xf000f800

080054f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d023      	beq.n	8005562 <HAL_LTDC_IRQHandler+0x6a>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01e      	beq.n	8005562 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0204 	bic.w	r2, r2, #4
 8005532:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2204      	movs	r2, #4
 800553a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2204      	movs	r2, #4
 8005550:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f86f 	bl	8005640 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d023      	beq.n	80055b4 <HAL_LTDC_IRQHandler+0xbc>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01e      	beq.n	80055b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0202 	bic.w	r2, r2, #2
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2202      	movs	r2, #2
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005594:	f043 0202 	orr.w	r2, r3, #2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2204      	movs	r2, #4
 80055a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f846 	bl	8005640 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01b      	beq.n	80055f6 <HAL_LTDC_IRQHandler+0xfe>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2201      	movs	r2, #1
 80055de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f82f 	bl	8005654 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_LTDC_IRQHandler+0x140>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0208 	bic.w	r2, r2, #8
 8005618:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2208      	movs	r2, #8
 8005620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f818 	bl	8005668 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800567c:	b5b0      	push	{r4, r5, r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_LTDC_ConfigLayer+0x1a>
 8005692:	2302      	movs	r3, #2
 8005694:	e02c      	b.n	80056f0 <HAL_LTDC_ConfigLayer+0x74>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2134      	movs	r1, #52	@ 0x34
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4614      	mov	r4, r2
 80056ba:	461d      	mov	r5, r3
 80056bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f811 	bl	80056f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2201      	movs	r2, #1
 80056dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bdb0      	pop	{r4, r5, r7, pc}

080056f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b089      	sub	sp, #36	@ 0x24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005714:	4413      	add	r3, r2
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	4413      	add	r3, r2
 8005726:	3384      	adds	r3, #132	@ 0x84
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	4611      	mov	r1, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	01d2      	lsls	r2, r2, #7
 8005734:	440a      	add	r2, r1
 8005736:	3284      	adds	r2, #132	@ 0x84
 8005738:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800573c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800574e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005750:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	01db      	lsls	r3, r3, #7
 800575c:	440b      	add	r3, r1
 800575e:	3384      	adds	r3, #132	@ 0x84
 8005760:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005766:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005776:	4413      	add	r3, r2
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	01db      	lsls	r3, r3, #7
 8005786:	4413      	add	r3, r2
 8005788:	3384      	adds	r3, #132	@ 0x84
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	4611      	mov	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	01d2      	lsls	r2, r2, #7
 8005796:	440a      	add	r2, r1
 8005798:	3284      	adds	r2, #132	@ 0x84
 800579a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800579e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ae:	4413      	add	r3, r2
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	01db      	lsls	r3, r3, #7
 80057bc:	440b      	add	r3, r1
 80057be:	3384      	adds	r3, #132	@ 0x84
 80057c0:	4619      	mov	r1, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	4413      	add	r3, r2
 80057d4:	3384      	adds	r3, #132	@ 0x84
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	4611      	mov	r1, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	01d2      	lsls	r2, r2, #7
 80057e2:	440a      	add	r2, r1
 80057e4:	3284      	adds	r2, #132	@ 0x84
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	01db      	lsls	r3, r3, #7
 80057f6:	4413      	add	r3, r2
 80057f8:	3384      	adds	r3, #132	@ 0x84
 80057fa:	461a      	mov	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	061b      	lsls	r3, r3, #24
 800581c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	01db      	lsls	r3, r3, #7
 8005828:	4413      	add	r3, r2
 800582a:	3384      	adds	r3, #132	@ 0x84
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	4413      	add	r3, r2
 800583a:	3384      	adds	r3, #132	@ 0x84
 800583c:	461a      	mov	r2, r3
 800583e:	2300      	movs	r3, #0
 8005840:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005848:	461a      	mov	r2, r3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	431a      	orrs	r2, r3
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4619      	mov	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	440b      	add	r3, r1
 800585e:	3384      	adds	r3, #132	@ 0x84
 8005860:	4619      	mov	r1, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	01db      	lsls	r3, r3, #7
 8005872:	4413      	add	r3, r2
 8005874:	3384      	adds	r3, #132	@ 0x84
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	4611      	mov	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	01d2      	lsls	r2, r2, #7
 8005882:	440a      	add	r2, r1
 8005884:	3284      	adds	r2, #132	@ 0x84
 8005886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800588a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	01db      	lsls	r3, r3, #7
 8005896:	4413      	add	r3, r2
 8005898:	3384      	adds	r3, #132	@ 0x84
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	01db      	lsls	r3, r3, #7
 80058ac:	4413      	add	r3, r2
 80058ae:	3384      	adds	r3, #132	@ 0x84
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	4611      	mov	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	01d2      	lsls	r2, r2, #7
 80058bc:	440a      	add	r2, r1
 80058be:	3284      	adds	r2, #132	@ 0x84
 80058c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058c4:	f023 0307 	bic.w	r3, r3, #7
 80058c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	6809      	ldr	r1, [r1, #0]
 80058d6:	4608      	mov	r0, r1
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	01c9      	lsls	r1, r1, #7
 80058dc:	4401      	add	r1, r0
 80058de:	3184      	adds	r1, #132	@ 0x84
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	01db      	lsls	r3, r3, #7
 80058ee:	4413      	add	r3, r2
 80058f0:	3384      	adds	r3, #132	@ 0x84
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	01db      	lsls	r3, r3, #7
 80058fe:	4413      	add	r3, r2
 8005900:	3384      	adds	r3, #132	@ 0x84
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	01db      	lsls	r3, r3, #7
 8005912:	4413      	add	r3, r2
 8005914:	3384      	adds	r3, #132	@ 0x84
 8005916:	461a      	mov	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005926:	2304      	movs	r3, #4
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e01b      	b.n	8005964 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d102      	bne.n	800593a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005934:	2303      	movs	r3, #3
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	e014      	b.n	8005964 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00b      	beq.n	800595a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005946:	2b02      	cmp	r3, #2
 8005948:	d007      	beq.n	800595a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800594e:	2b03      	cmp	r3, #3
 8005950:	d003      	beq.n	800595a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005956:	2b07      	cmp	r3, #7
 8005958:	d102      	bne.n	8005960 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800595a:	2302      	movs	r3, #2
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	e001      	b.n	8005964 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005960:	2301      	movs	r3, #1
 8005962:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	01db      	lsls	r3, r3, #7
 800596e:	4413      	add	r3, r2
 8005970:	3384      	adds	r3, #132	@ 0x84
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	4611      	mov	r1, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	01d2      	lsls	r2, r2, #7
 800597e:	440a      	add	r2, r1
 8005980:	3284      	adds	r2, #132	@ 0x84
 8005982:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005986:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	1acb      	subs	r3, r1, r3
 800599e:	69f9      	ldr	r1, [r7, #28]
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	6809      	ldr	r1, [r1, #0]
 80059aa:	4608      	mov	r0, r1
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	01c9      	lsls	r1, r1, #7
 80059b0:	4401      	add	r1, r0
 80059b2:	3184      	adds	r1, #132	@ 0x84
 80059b4:	4313      	orrs	r3, r2
 80059b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	01db      	lsls	r3, r3, #7
 80059c2:	4413      	add	r3, r2
 80059c4:	3384      	adds	r3, #132	@ 0x84
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	4611      	mov	r1, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	01d2      	lsls	r2, r2, #7
 80059d2:	440a      	add	r2, r1
 80059d4:	3284      	adds	r2, #132	@ 0x84
 80059d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	4413      	add	r3, r2
 80059ec:	3384      	adds	r3, #132	@ 0x84
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	01db      	lsls	r3, r3, #7
 8005a00:	4413      	add	r3, r2
 8005a02:	3384      	adds	r3, #132	@ 0x84
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	01d2      	lsls	r2, r2, #7
 8005a10:	440a      	add	r2, r1
 8005a12:	3284      	adds	r2, #132	@ 0x84
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6013      	str	r3, [r2, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3724      	adds	r7, #36	@ 0x24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e267      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d075      	beq.n	8005b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a46:	4b88      	ldr	r3, [pc, #544]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d00c      	beq.n	8005a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a52:	4b85      	ldr	r3, [pc, #532]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d112      	bne.n	8005a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5e:	4b82      	ldr	r3, [pc, #520]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a6a:	d10b      	bne.n	8005a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d05b      	beq.n	8005b30 <HAL_RCC_OscConfig+0x108>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d157      	bne.n	8005b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e242      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCC_OscConfig+0x74>
 8005a8e:	4b76      	ldr	r3, [pc, #472]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a75      	ldr	r2, [pc, #468]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x98>
 8005aa6:	4b70      	ldr	r3, [pc, #448]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xb0>
 8005ac0:	4b69      	ldr	r3, [pc, #420]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a68      	ldr	r2, [pc, #416]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b66      	ldr	r3, [pc, #408]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a65      	ldr	r2, [pc, #404]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fc f894 	bl	8001c0c <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fc f890 	bl	8001c0c <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	@ 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e207      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b5b      	ldr	r3, [pc, #364]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xc0>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b08:	f7fc f880 	bl	8001c0c <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fc f87c 	bl	8001c0c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	@ 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e1f3      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	4b51      	ldr	r3, [pc, #324]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0xe8>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d063      	beq.n	8005c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4a:	4b47      	ldr	r3, [pc, #284]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d11c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b56:	4b44      	ldr	r3, [pc, #272]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d116      	bne.n	8005b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	4b41      	ldr	r3, [pc, #260]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_RCC_OscConfig+0x152>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e1c7      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4937      	ldr	r1, [pc, #220]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	e03a      	b.n	8005c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d020      	beq.n	8005bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b98:	4b34      	ldr	r3, [pc, #208]	@ (8005c6c <HAL_RCC_OscConfig+0x244>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fc f835 	bl	8001c0c <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba6:	f7fc f831 	bl	8001c0c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e1a8      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc4:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4925      	ldr	r1, [pc, #148]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]
 8005bd8:	e015      	b.n	8005c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bda:	4b24      	ldr	r3, [pc, #144]	@ (8005c6c <HAL_RCC_OscConfig+0x244>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fc f814 	bl	8001c0c <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be8:	f7fc f810 	bl	8001c0c <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e187      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d036      	beq.n	8005c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1a:	4b15      	ldr	r3, [pc, #84]	@ (8005c70 <HAL_RCC_OscConfig+0x248>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fb fff4 	bl	8001c0c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fb fff0 	bl	8001c0c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e167      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x200>
 8005c46:	e01b      	b.n	8005c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c48:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <HAL_RCC_OscConfig+0x248>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c4e:	f7fb ffdd 	bl	8001c0c <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c54:	e00e      	b.n	8005c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c56:	f7fb ffd9 	bl	8001c0c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d907      	bls.n	8005c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e150      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	42470000 	.word	0x42470000
 8005c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	4b88      	ldr	r3, [pc, #544]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ea      	bne.n	8005c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8097 	beq.w	8005dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c92:	4b81      	ldr	r3, [pc, #516]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10f      	bne.n	8005cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cae:	4b7a      	ldr	r3, [pc, #488]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b77      	ldr	r3, [pc, #476]	@ (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d118      	bne.n	8005cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cca:	4b74      	ldr	r3, [pc, #464]	@ (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a73      	ldr	r2, [pc, #460]	@ (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd6:	f7fb ff99 	bl	8001c0c <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cde:	f7fb ff95 	bl	8001c0c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e10c      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8005e9c <HAL_RCC_OscConfig+0x474>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d106      	bne.n	8005d12 <HAL_RCC_OscConfig+0x2ea>
 8005d04:	4b64      	ldr	r3, [pc, #400]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d08:	4a63      	ldr	r2, [pc, #396]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d10:	e01c      	b.n	8005d4c <HAL_RCC_OscConfig+0x324>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCC_OscConfig+0x30c>
 8005d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d26:	4b5c      	ldr	r3, [pc, #368]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d32:	e00b      	b.n	8005d4c <HAL_RCC_OscConfig+0x324>
 8005d34:	4b58      	ldr	r3, [pc, #352]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d38:	4a57      	ldr	r2, [pc, #348]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d40:	4b55      	ldr	r3, [pc, #340]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d44:	4a54      	ldr	r2, [pc, #336]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d46:	f023 0304 	bic.w	r3, r3, #4
 8005d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d54:	f7fb ff5a 	bl	8001c0c <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d5c:	f7fb ff56 	bl	8001c0c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0cb      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d72:	4b49      	ldr	r3, [pc, #292]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0ee      	beq.n	8005d5c <HAL_RCC_OscConfig+0x334>
 8005d7e:	e014      	b.n	8005daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d80:	f7fb ff44 	bl	8001c0c <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fb ff40 	bl	8001c0c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0b5      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ee      	bne.n	8005d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d105      	bne.n	8005dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db0:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	4a38      	ldr	r2, [pc, #224]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80a1 	beq.w	8005f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dc6:	4b34      	ldr	r3, [pc, #208]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d05c      	beq.n	8005e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d141      	bne.n	8005e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dda:	4b31      	ldr	r3, [pc, #196]	@ (8005ea0 <HAL_RCC_OscConfig+0x478>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fb ff14 	bl	8001c0c <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de8:	f7fb ff10 	bl	8001c0c <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e087      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	4b27      	ldr	r3, [pc, #156]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69da      	ldr	r2, [r3, #28]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	019b      	lsls	r3, r3, #6
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	491b      	ldr	r1, [pc, #108]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea0 <HAL_RCC_OscConfig+0x478>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e36:	f7fb fee9 	bl	8001c0c <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3e:	f7fb fee5 	bl	8001c0c <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e05c      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e50:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x416>
 8005e5c:	e054      	b.n	8005f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ea0 <HAL_RCC_OscConfig+0x478>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e64:	f7fb fed2 	bl	8001c0c <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6c:	f7fb fece 	bl	8001c0c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e045      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <HAL_RCC_OscConfig+0x470>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x444>
 8005e8a:	e03d      	b.n	8005f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e038      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	40007000 	.word	0x40007000
 8005ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <HAL_RCC_OscConfig+0x4ec>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d028      	beq.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d121      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d11a      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d111      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	3b01      	subs	r3, #1
 8005eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800

08005f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0cc      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f2c:	4b68      	ldr	r3, [pc, #416]	@ (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d90c      	bls.n	8005f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3a:	4b65      	ldr	r3, [pc, #404]	@ (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f42:	4b63      	ldr	r3, [pc, #396]	@ (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0b8      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f6c:	4b59      	ldr	r3, [pc, #356]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a58      	ldr	r2, [pc, #352]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f84:	4b53      	ldr	r3, [pc, #332]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	4a52      	ldr	r2, [pc, #328]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f90:	4b50      	ldr	r3, [pc, #320]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	494d      	ldr	r1, [pc, #308]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d044      	beq.n	8006038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb6:	4b47      	ldr	r3, [pc, #284]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d119      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e07f      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d003      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d107      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e06f      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e067      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 0203 	bic.w	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4934      	ldr	r1, [pc, #208]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	4313      	orrs	r3, r2
 8006006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006008:	f7fb fe00 	bl	8001c0c <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	e00a      	b.n	8006026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006010:	f7fb fdfc 	bl	8001c0c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e04f      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006026:	4b2b      	ldr	r3, [pc, #172]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 020c 	and.w	r2, r3, #12
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	429a      	cmp	r2, r3
 8006036:	d1eb      	bne.n	8006010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006038:	4b25      	ldr	r3, [pc, #148]	@ (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d20c      	bcs.n	8006060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b22      	ldr	r3, [pc, #136]	@ (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800604e:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d001      	beq.n	8006060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e032      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800606c:	4b19      	ldr	r3, [pc, #100]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4916      	ldr	r1, [pc, #88]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	4313      	orrs	r3, r2
 800607c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800608a:	4b12      	ldr	r3, [pc, #72]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	490e      	ldr	r1, [pc, #56]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800609e:	f000 f821 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 80060a2:	4602      	mov	r2, r0
 80060a4:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	091b      	lsrs	r3, r3, #4
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	490a      	ldr	r1, [pc, #40]	@ (80060d8 <HAL_RCC_ClockConfig+0x1c0>)
 80060b0:	5ccb      	ldrb	r3, [r1, r3]
 80060b2:	fa22 f303 	lsr.w	r3, r2, r3
 80060b6:	4a09      	ldr	r2, [pc, #36]	@ (80060dc <HAL_RCC_ClockConfig+0x1c4>)
 80060b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ba:	4b09      	ldr	r3, [pc, #36]	@ (80060e0 <HAL_RCC_ClockConfig+0x1c8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fb fbea 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40023c00 	.word	0x40023c00
 80060d4:	40023800 	.word	0x40023800
 80060d8:	0800b354 	.word	0x0800b354
 80060dc:	20000000 	.word	0x20000000
 80060e0:	20000004 	.word	0x20000004

080060e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e8:	b094      	sub	sp, #80	@ 0x50
 80060ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f0:	2300      	movs	r3, #0
 80060f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f4:	2300      	movs	r3, #0
 80060f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060fc:	4b79      	ldr	r3, [pc, #484]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 030c 	and.w	r3, r3, #12
 8006104:	2b08      	cmp	r3, #8
 8006106:	d00d      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0x40>
 8006108:	2b08      	cmp	r3, #8
 800610a:	f200 80e1 	bhi.w	80062d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x34>
 8006112:	2b04      	cmp	r3, #4
 8006114:	d003      	beq.n	800611e <HAL_RCC_GetSysClockFreq+0x3a>
 8006116:	e0db      	b.n	80062d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006118:	4b73      	ldr	r3, [pc, #460]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800611a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800611c:	e0db      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800611e:	4b73      	ldr	r3, [pc, #460]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006122:	e0d8      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006124:	4b6f      	ldr	r3, [pc, #444]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800612c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800612e:	4b6d      	ldr	r3, [pc, #436]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d063      	beq.n	8006202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613a:	4b6a      	ldr	r3, [pc, #424]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	2200      	movs	r2, #0
 8006142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614c:	633b      	str	r3, [r7, #48]	@ 0x30
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
 8006152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006156:	4622      	mov	r2, r4
 8006158:	462b      	mov	r3, r5
 800615a:	f04f 0000 	mov.w	r0, #0
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	0159      	lsls	r1, r3, #5
 8006164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006168:	0150      	lsls	r0, r2, #5
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4621      	mov	r1, r4
 8006170:	1a51      	subs	r1, r2, r1
 8006172:	6139      	str	r1, [r7, #16]
 8006174:	4629      	mov	r1, r5
 8006176:	eb63 0301 	sbc.w	r3, r3, r1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006188:	4659      	mov	r1, fp
 800618a:	018b      	lsls	r3, r1, #6
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006192:	4651      	mov	r1, sl
 8006194:	018a      	lsls	r2, r1, #6
 8006196:	4651      	mov	r1, sl
 8006198:	ebb2 0801 	subs.w	r8, r2, r1
 800619c:	4659      	mov	r1, fp
 800619e:	eb63 0901 	sbc.w	r9, r3, r1
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061b6:	4690      	mov	r8, r2
 80061b8:	4699      	mov	r9, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	eb18 0303 	adds.w	r3, r8, r3
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	462b      	mov	r3, r5
 80061c4:	eb49 0303 	adc.w	r3, r9, r3
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061d6:	4629      	mov	r1, r5
 80061d8:	024b      	lsls	r3, r1, #9
 80061da:	4621      	mov	r1, r4
 80061dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061e0:	4621      	mov	r1, r4
 80061e2:	024a      	lsls	r2, r1, #9
 80061e4:	4610      	mov	r0, r2
 80061e6:	4619      	mov	r1, r3
 80061e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ea:	2200      	movs	r2, #0
 80061ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061f4:	f7fa f84c 	bl	8000290 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4613      	mov	r3, r2
 80061fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006200:	e058      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006202:	4b38      	ldr	r3, [pc, #224]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	2200      	movs	r2, #0
 800620a:	4618      	mov	r0, r3
 800620c:	4611      	mov	r1, r2
 800620e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
 8006218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	f04f 0000 	mov.w	r0, #0
 8006224:	f04f 0100 	mov.w	r1, #0
 8006228:	0159      	lsls	r1, r3, #5
 800622a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800622e:	0150      	lsls	r0, r2, #5
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4641      	mov	r1, r8
 8006236:	ebb2 0a01 	subs.w	sl, r2, r1
 800623a:	4649      	mov	r1, r9
 800623c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800624c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006254:	ebb2 040a 	subs.w	r4, r2, sl
 8006258:	eb63 050b 	sbc.w	r5, r3, fp
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	00eb      	lsls	r3, r5, #3
 8006266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4643      	mov	r3, r8
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	464b      	mov	r3, r9
 8006278:	eb45 0303 	adc.w	r3, r5, r3
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800628a:	4629      	mov	r1, r5
 800628c:	028b      	lsls	r3, r1, #10
 800628e:	4621      	mov	r1, r4
 8006290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006294:	4621      	mov	r1, r4
 8006296:	028a      	lsls	r2, r1, #10
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800629e:	2200      	movs	r2, #0
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	61fa      	str	r2, [r7, #28]
 80062a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a8:	f7f9 fff2 	bl	8000290 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4613      	mov	r3, r2
 80062b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062b4:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	3301      	adds	r3, #1
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80062c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80062d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3750      	adds	r7, #80	@ 0x50
 80062dc:	46bd      	mov	sp, r7
 80062de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e2:	bf00      	nop
 80062e4:	40023800 	.word	0x40023800
 80062e8:	00f42400 	.word	0x00f42400
 80062ec:	007a1200 	.word	0x007a1200

080062f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f4:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <HAL_RCC_GetHCLKFreq+0x14>)
 80062f6:	681b      	ldr	r3, [r3, #0]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000000 	.word	0x20000000

08006308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800630c:	f7ff fff0 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b05      	ldr	r3, [pc, #20]	@ (8006328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	0a9b      	lsrs	r3, r3, #10
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4903      	ldr	r1, [pc, #12]	@ (800632c <HAL_RCC_GetPCLK1Freq+0x24>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006324:	4618      	mov	r0, r3
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40023800 	.word	0x40023800
 800632c:	0800b364 	.word	0x0800b364

08006330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006334:	f7ff ffdc 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 8006338:	4602      	mov	r2, r0
 800633a:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	0b5b      	lsrs	r3, r3, #13
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	4903      	ldr	r1, [pc, #12]	@ (8006354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006346:	5ccb      	ldrb	r3, [r1, r3]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40023800 	.word	0x40023800
 8006354:	0800b364 	.word	0x0800b364

08006358 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	220f      	movs	r2, #15
 8006366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006368:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_RCC_GetClockConfig+0x5c>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0203 	and.w	r2, r3, #3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006374:	4b0f      	ldr	r3, [pc, #60]	@ (80063b4 <HAL_RCC_GetClockConfig+0x5c>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006380:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <HAL_RCC_GetClockConfig+0x5c>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800638c:	4b09      	ldr	r3, [pc, #36]	@ (80063b4 <HAL_RCC_GetClockConfig+0x5c>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	08db      	lsrs	r3, r3, #3
 8006392:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800639a:	4b07      	ldr	r3, [pc, #28]	@ (80063b8 <HAL_RCC_GetClockConfig+0x60>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	601a      	str	r2, [r3, #0]
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40023c00 	.word	0x40023c00

080063bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d075      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063f0:	4b91      	ldr	r3, [pc, #580]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063f6:	f7fb fc09 	bl	8001c0c <HAL_GetTick>
 80063fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063fe:	f7fb fc05 	bl	8001c0c <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e189      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006410:	4b8a      	ldr	r3, [pc, #552]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f0      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	019a      	lsls	r2, r3, #6
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	071b      	lsls	r3, r3, #28
 8006434:	4981      	ldr	r1, [pc, #516]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01f      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006448:	4b7c      	ldr	r3, [pc, #496]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644e:	0f1b      	lsrs	r3, r3, #28
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	019a      	lsls	r2, r3, #6
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	061b      	lsls	r3, r3, #24
 8006462:	431a      	orrs	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	071b      	lsls	r3, r3, #28
 8006468:	4974      	ldr	r1, [pc, #464]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006470:	4b72      	ldr	r3, [pc, #456]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006476:	f023 021f 	bic.w	r2, r3, #31
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	3b01      	subs	r3, #1
 8006480:	496e      	ldr	r1, [pc, #440]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00d      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	019a      	lsls	r2, r3, #6
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	071b      	lsls	r3, r3, #28
 80064a8:	4964      	ldr	r1, [pc, #400]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064b0:	4b61      	ldr	r3, [pc, #388]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064b6:	f7fb fba9 	bl	8001c0c <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064bc:	e008      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064be:	f7fb fba5 	bl	8001c0c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e129      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d0:	4b5a      	ldr	r3, [pc, #360]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d079      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064f4:	4b52      	ldr	r3, [pc, #328]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064fa:	f7fb fb87 	bl	8001c0c <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006500:	e008      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006502:	f7fb fb83 	bl	8001c0c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e107      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006514:	4b49      	ldr	r3, [pc, #292]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800651c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006520:	d0ef      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d020      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800652e:	4b43      	ldr	r3, [pc, #268]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006534:	0f1b      	lsrs	r3, r3, #28
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	019a      	lsls	r2, r3, #6
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	061b      	lsls	r3, r3, #24
 8006548:	431a      	orrs	r2, r3
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	071b      	lsls	r3, r3, #28
 800654e:	493b      	ldr	r1, [pc, #236]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006556:	4b39      	ldr	r3, [pc, #228]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800655c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	3b01      	subs	r3, #1
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	4934      	ldr	r1, [pc, #208]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01e      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800657c:	4b2f      	ldr	r3, [pc, #188]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	0e1b      	lsrs	r3, r3, #24
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	019a      	lsls	r2, r3, #6
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	061b      	lsls	r3, r3, #24
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	071b      	lsls	r3, r3, #28
 800659c:	4927      	ldr	r1, [pc, #156]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065a4:	4b25      	ldr	r3, [pc, #148]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	4922      	ldr	r1, [pc, #136]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065ba:	4b21      	ldr	r3, [pc, #132]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065c0:	f7fb fb24 	bl	8001c0c <HAL_GetTick>
 80065c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065c8:	f7fb fb20 	bl	8001c0c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e0a4      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065da:	4b18      	ldr	r3, [pc, #96]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e6:	d1ef      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 808b 	beq.w	800670c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	4b10      	ldr	r3, [pc, #64]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	4a0f      	ldr	r2, [pc, #60]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006604:	6413      	str	r3, [r2, #64]	@ 0x40
 8006606:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006612:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a0b      	ldr	r2, [pc, #44]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800661c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800661e:	f7fb faf5 	bl	8001c0c <HAL_GetTick>
 8006622:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006624:	e010      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006626:	f7fb faf1 	bl	8001c0c <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d909      	bls.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e075      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006638:	42470068 	.word	0x42470068
 800663c:	40023800 	.word	0x40023800
 8006640:	42470070 	.word	0x42470070
 8006644:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006648:	4b38      	ldr	r3, [pc, #224]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0e8      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006654:	4b36      	ldr	r3, [pc, #216]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800665c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d02f      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d028      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006672:	4b2f      	ldr	r3, [pc, #188]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800667c:	4b2d      	ldr	r3, [pc, #180]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006682:	4b2c      	ldr	r3, [pc, #176]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006688:	4a29      	ldr	r2, [pc, #164]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800668e:	4b28      	ldr	r3, [pc, #160]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d114      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800669a:	f7fb fab7 	bl	8001c0c <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a0:	e00a      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a2:	f7fb fab3 	bl	8001c0c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e035      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0ee      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d0:	d10d      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066d2:	4b17      	ldr	r3, [pc, #92]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e6:	4912      	ldr	r1, [pc, #72]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	608b      	str	r3, [r1, #8]
 80066ec:	e005      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80066ee:	4b10      	ldr	r3, [pc, #64]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066f4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80066f8:	6093      	str	r3, [r2, #8]
 80066fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006706:	490a      	ldr	r1, [pc, #40]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006708:	4313      	orrs	r3, r2
 800670a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800671e:	4b06      	ldr	r3, [pc, #24]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006720:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40007000 	.word	0x40007000
 8006730:	40023800 	.word	0x40023800
 8006734:	42470e40 	.word	0x42470e40
 8006738:	424711e0 	.word	0x424711e0

0800673c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e073      	b.n	800683a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7f5b      	ldrb	r3, [r3, #29]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fa fec4 	bl	80014f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b10      	cmp	r3, #16
 800677a:	d055      	beq.n	8006828 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	22ca      	movs	r2, #202	@ 0xca
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2253      	movs	r2, #83	@ 0x53
 800678a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f99d 	bl	8006acc <RTC_EnterInitMode>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d12c      	bne.n	80067f6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80067aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6899      	ldr	r1, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68d2      	ldr	r2, [r2, #12]
 80067d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6919      	ldr	r1, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	041a      	lsls	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f9a4 	bl	8006b3a <RTC_ExitInitMode>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d110      	bne.n	800681e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800680a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	22ff      	movs	r2, #255	@ 0xff
 8006824:	625a      	str	r2, [r3, #36]	@ 0x24
 8006826:	e001      	b.n	800682c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006842:	b590      	push	{r4, r7, lr}
 8006844:	b087      	sub	sp, #28
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	7f1b      	ldrb	r3, [r3, #28]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_RTC_SetTime+0x1c>
 800685a:	2302      	movs	r3, #2
 800685c:	e087      	b.n	800696e <HAL_RTC_SetTime+0x12c>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2202      	movs	r2, #2
 8006868:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d126      	bne.n	80068be <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2200      	movs	r2, #0
 8006882:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f000 f97b 	bl	8006b84 <RTC_ByteToBcd2>
 800688e:	4603      	mov	r3, r0
 8006890:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f974 	bl	8006b84 <RTC_ByteToBcd2>
 800689c:	4603      	mov	r3, r0
 800689e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80068a0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f96c 	bl	8006b84 <RTC_ByteToBcd2>
 80068ac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	78db      	ldrb	r3, [r3, #3]
 80068b6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e018      	b.n	80068f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d102      	bne.n	80068d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068de:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	22ca      	movs	r2, #202	@ 0xca
 80068f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2253      	movs	r2, #83	@ 0x53
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f8e3 	bl	8006acc <RTC_EnterInitMode>
 8006906:	4603      	mov	r3, r0
 8006908:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800690a:	7cfb      	ldrb	r3, [r7, #19]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d120      	bne.n	8006952 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800691a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800691e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800692e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	431a      	orrs	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f8f6 	bl	8006b3a <RTC_ExitInitMode>
 800694e:	4603      	mov	r3, r0
 8006950:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	22ff      	movs	r2, #255	@ 0xff
 8006964:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]

  return status;
 800696c:	7cfb      	ldrb	r3, [r7, #19]
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd90      	pop	{r4, r7, pc}

08006976 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006976:	b590      	push	{r4, r7, lr}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	7f1b      	ldrb	r3, [r3, #28]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_RTC_SetDate+0x1c>
 800698e:	2302      	movs	r3, #2
 8006990:	e071      	b.n	8006a76 <HAL_RTC_SetDate+0x100>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2202      	movs	r2, #2
 800699c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10e      	bne.n	80069c2 <HAL_RTC_SetDate+0x4c>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	330a      	adds	r3, #10
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11c      	bne.n	8006a02 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	78db      	ldrb	r3, [r3, #3]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f8d9 	bl	8006b84 <RTC_ByteToBcd2>
 80069d2:	4603      	mov	r3, r0
 80069d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f8d2 	bl	8006b84 <RTC_ByteToBcd2>
 80069e0:	4603      	mov	r3, r0
 80069e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	789b      	ldrb	r3, [r3, #2]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f8ca 	bl	8006b84 <RTC_ByteToBcd2>
 80069f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e00e      	b.n	8006a20 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	78db      	ldrb	r3, [r3, #3]
 8006a06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	22ca      	movs	r2, #202	@ 0xca
 8006a26:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2253      	movs	r2, #83	@ 0x53
 8006a2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 f84b 	bl	8006acc <RTC_EnterInitMode>
 8006a36:	4603      	mov	r3, r0
 8006a38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006a3a:	7cfb      	ldrb	r3, [r7, #19]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a4e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f872 	bl	8006b3a <RTC_ExitInitMode>
 8006a56:	4603      	mov	r3, r0
 8006a58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a5a:	7cfb      	ldrb	r3, [r7, #19]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	22ff      	movs	r2, #255	@ 0xff
 8006a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]

  return status;
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd90      	pop	{r4, r7, pc}
	...

08006a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac8 <HAL_RTC_WaitForSynchro+0x48>)
 8006a92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a94:	f7fb f8ba 	bl	8001c0c <HAL_GetTick>
 8006a98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a9a:	e009      	b.n	8006ab0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a9c:	f7fb f8b6 	bl	8001c0c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e007      	b.n	8006ac0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0ee      	beq.n	8006a9c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	00017f5f 	.word	0x00017f5f

08006acc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d122      	bne.n	8006b30 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006af8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006afa:	f7fb f887 	bl	8001c0c <HAL_GetTick>
 8006afe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b00:	e00c      	b.n	8006b1c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b02:	f7fb f883 	bl	8001c0c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b10:	d904      	bls.n	8006b1c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2204      	movs	r2, #4
 8006b16:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <RTC_EnterInitMode+0x64>
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d1e8      	bne.n	8006b02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b54:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff ff8b 	bl	8006a80 <HAL_RTC_WaitForSynchro>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2204      	movs	r2, #4
 8006b74:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006b92:	e005      	b.n	8006ba0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	3b0a      	subs	r3, #10
 8006b9e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	2b09      	cmp	r3, #9
 8006ba4:	d8f6      	bhi.n	8006b94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	b2db      	uxtb	r3, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	7f1b      	ldrb	r3, [r3, #28]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e08a      	b.n	8006cf2 <HAL_RTCEx_SetWakeUpTimer+0x132>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2202      	movs	r2, #2
 8006be6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	22ca      	movs	r2, #202	@ 0xca
 8006bee:	625a      	str	r2, [r3, #36]	@ 0x24
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2253      	movs	r2, #83	@ 0x53
 8006bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01e      	beq.n	8006c44 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8006c06:	f7fb f801 	bl	8001c0c <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8006c0c:	e013      	b.n	8006c36 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c0e:	f7fa fffd 	bl	8001c0c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c1c:	d90b      	bls.n	8006c36 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	22ff      	movs	r2, #255	@ 0xff
 8006c24:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e05d      	b.n	8006cf2 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e4      	bne.n	8006c0e <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c52:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006c64:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c66:	f7fa ffd1 	bl	8001c0c <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c6c:	e013      	b.n	8006c96 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c6e:	f7fa ffcd 	bl	8001c0c <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c7c:	d90b      	bls.n	8006c96 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	22ff      	movs	r2, #255	@ 0xff
 8006c84:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e02d      	b.n	8006cf2 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0e4      	beq.n	8006c6e <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0207 	bic.w	r2, r2, #7
 8006cb2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6899      	ldr	r1, [r3, #8]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cda:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	22ff      	movs	r2, #255	@ 0xff
 8006ce2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e025      	b.n	8006d5a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fa fdae 	bl	8001884 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f001 fccc 	bl	80086d8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	f001 fd21 	bl	8008792 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e07b      	b.n	8006e6c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d84:	d009      	beq.n	8006d9a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	61da      	str	r2, [r3, #28]
 8006d8c:	e005      	b.n	8006d9a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fa fbc5 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e1e:	ea42 0103 	orr.w	r1, r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	0c1b      	lsrs	r3, r3, #16
 8006e38:	f003 0104 	and.w	r1, r3, #4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	f003 0210 	and.w	r2, r3, #16
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69da      	ldr	r2, [r3, #28]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e041      	b.n	8006f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fa fb9a 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f000 fc58 	bl	8007768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e04e      	b.n	8006fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a23      	ldr	r2, [pc, #140]	@ (8006fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f56:	d01d      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1c      	ldr	r2, [pc, #112]	@ (8006fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a19      	ldr	r2, [pc, #100]	@ (8006fec <HAL_TIM_Base_Start_IT+0xd8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x80>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a18      	ldr	r2, [pc, #96]	@ (8006ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d111      	bne.n	8006fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d010      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb6:	e007      	b.n	8006fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40010400 	.word	0x40010400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40001800 	.word	0x40001800

08006ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e041      	b.n	800708a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fa fafc 	bl	8001618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f000 fb98 	bl	8007768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_TIM_PWM_Start+0x24>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	bf14      	ite	ne
 80070b0:	2301      	movne	r3, #1
 80070b2:	2300      	moveq	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	e022      	b.n	80070fe <HAL_TIM_PWM_Start+0x6a>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d109      	bne.n	80070d2 <HAL_TIM_PWM_Start+0x3e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	bf14      	ite	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	2300      	moveq	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	e015      	b.n	80070fe <HAL_TIM_PWM_Start+0x6a>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d109      	bne.n	80070ec <HAL_TIM_PWM_Start+0x58>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e008      	b.n	80070fe <HAL_TIM_PWM_Start+0x6a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	bf14      	ite	ne
 80070f8:	2301      	movne	r3, #1
 80070fa:	2300      	moveq	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e07c      	b.n	8007200 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <HAL_TIM_PWM_Start+0x82>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007114:	e013      	b.n	800713e <HAL_TIM_PWM_Start+0xaa>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d104      	bne.n	8007126 <HAL_TIM_PWM_Start+0x92>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007124:	e00b      	b.n	800713e <HAL_TIM_PWM_Start+0xaa>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d104      	bne.n	8007136 <HAL_TIM_PWM_Start+0xa2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007134:	e003      	b.n	800713e <HAL_TIM_PWM_Start+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2201      	movs	r2, #1
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fe04 	bl	8007d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a2d      	ldr	r2, [pc, #180]	@ (8007208 <HAL_TIM_PWM_Start+0x174>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_PWM_Start+0xcc>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a2c      	ldr	r2, [pc, #176]	@ (800720c <HAL_TIM_PWM_Start+0x178>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_TIM_PWM_Start+0xd0>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <HAL_TIM_PWM_Start+0xd2>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007178:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a22      	ldr	r2, [pc, #136]	@ (8007208 <HAL_TIM_PWM_Start+0x174>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d022      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718c:	d01d      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1f      	ldr	r2, [pc, #124]	@ (8007210 <HAL_TIM_PWM_Start+0x17c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d018      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <HAL_TIM_PWM_Start+0x180>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d013      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <HAL_TIM_PWM_Start+0x184>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00e      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a16      	ldr	r2, [pc, #88]	@ (800720c <HAL_TIM_PWM_Start+0x178>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d009      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a18      	ldr	r2, [pc, #96]	@ (800721c <HAL_TIM_PWM_Start+0x188>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <HAL_TIM_PWM_Start+0x136>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a16      	ldr	r2, [pc, #88]	@ (8007220 <HAL_TIM_PWM_Start+0x18c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d111      	bne.n	80071ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b06      	cmp	r3, #6
 80071da:	d010      	beq.n	80071fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ec:	e007      	b.n	80071fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40010000 	.word	0x40010000
 800720c:	40010400 	.word	0x40010400
 8007210:	40000400 	.word	0x40000400
 8007214:	40000800 	.word	0x40000800
 8007218:	40000c00 	.word	0x40000c00
 800721c:	40014000 	.word	0x40014000
 8007220:	40001800 	.word	0x40001800

08007224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d020      	beq.n	8007288 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01b      	beq.n	8007288 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0202 	mvn.w	r2, #2
 8007258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa5b 	bl	800772a <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa4d 	bl	8007716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa5e 	bl	800773e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d020      	beq.n	80072d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01b      	beq.n	80072d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0204 	mvn.w	r2, #4
 80072a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa35 	bl	800772a <HAL_TIM_IC_CaptureCallback>
 80072c0:	e005      	b.n	80072ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa27 	bl	8007716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa38 	bl	800773e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d020      	beq.n	8007320 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0208 	mvn.w	r2, #8
 80072f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2204      	movs	r2, #4
 80072f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fa0f 	bl	800772a <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa01 	bl	8007716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fa12 	bl	800773e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	2b00      	cmp	r3, #0
 8007328:	d020      	beq.n	800736c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0210 	mvn.w	r2, #16
 800733c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2208      	movs	r2, #8
 8007342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9e9 	bl	800772a <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9db 	bl	8007716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9ec 	bl	800773e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00c      	beq.n	8007390 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0201 	mvn.w	r2, #1
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7f9 fe28 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00c      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fd7c 	bl	8007eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00c      	beq.n	80073d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80073d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f9bd 	bl	8007752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00c      	beq.n	80073fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0220 	mvn.w	r2, #32
 80073f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fd4e 	bl	8007e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800741e:	2302      	movs	r3, #2
 8007420:	e0ae      	b.n	8007580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	f200 809f 	bhi.w	8007570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007432:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	0800746d 	.word	0x0800746d
 800743c:	08007571 	.word	0x08007571
 8007440:	08007571 	.word	0x08007571
 8007444:	08007571 	.word	0x08007571
 8007448:	080074ad 	.word	0x080074ad
 800744c:	08007571 	.word	0x08007571
 8007450:	08007571 	.word	0x08007571
 8007454:	08007571 	.word	0x08007571
 8007458:	080074ef 	.word	0x080074ef
 800745c:	08007571 	.word	0x08007571
 8007460:	08007571 	.word	0x08007571
 8007464:	08007571 	.word	0x08007571
 8007468:	0800752f 	.word	0x0800752f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fa24 	bl	80078c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0208 	orr.w	r2, r2, #8
 8007486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0204 	bic.w	r2, r2, #4
 8007496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6999      	ldr	r1, [r3, #24]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	619a      	str	r2, [r3, #24]
      break;
 80074aa:	e064      	b.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fa74 	bl	80079a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6999      	ldr	r1, [r3, #24]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	021a      	lsls	r2, r3, #8
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	619a      	str	r2, [r3, #24]
      break;
 80074ec:	e043      	b.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fac9 	bl	8007a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0208 	orr.w	r2, r2, #8
 8007508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0204 	bic.w	r2, r2, #4
 8007518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69d9      	ldr	r1, [r3, #28]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	61da      	str	r2, [r3, #28]
      break;
 800752c:	e023      	b.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fb1d 	bl	8007b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69d9      	ldr	r1, [r3, #28]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	021a      	lsls	r2, r3, #8
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	61da      	str	r2, [r3, #28]
      break;
 800756e:	e002      	b.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	75fb      	strb	r3, [r7, #23]
      break;
 8007574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e0b4      	b.n	800770e <HAL_TIM_ConfigClockSource+0x186>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075dc:	d03e      	beq.n	800765c <HAL_TIM_ConfigClockSource+0xd4>
 80075de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075e2:	f200 8087 	bhi.w	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 80075e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ea:	f000 8086 	beq.w	80076fa <HAL_TIM_ConfigClockSource+0x172>
 80075ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f2:	d87f      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 80075f4:	2b70      	cmp	r3, #112	@ 0x70
 80075f6:	d01a      	beq.n	800762e <HAL_TIM_ConfigClockSource+0xa6>
 80075f8:	2b70      	cmp	r3, #112	@ 0x70
 80075fa:	d87b      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b60      	cmp	r3, #96	@ 0x60
 80075fe:	d050      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007600:	2b60      	cmp	r3, #96	@ 0x60
 8007602:	d877      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b50      	cmp	r3, #80	@ 0x50
 8007606:	d03c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0xfa>
 8007608:	2b50      	cmp	r3, #80	@ 0x50
 800760a:	d873      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b40      	cmp	r3, #64	@ 0x40
 800760e:	d058      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	d86f      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b30      	cmp	r3, #48	@ 0x30
 8007616:	d064      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007618:	2b30      	cmp	r3, #48	@ 0x30
 800761a:	d86b      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 800761c:	2b20      	cmp	r3, #32
 800761e:	d060      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007620:	2b20      	cmp	r3, #32
 8007622:	d867      	bhi.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d05c      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007628:	2b10      	cmp	r3, #16
 800762a:	d05a      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x15a>
 800762c:	e062      	b.n	80076f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800763e:	f000 fb69 	bl	8007d14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	609a      	str	r2, [r3, #8]
      break;
 800765a:	e04f      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800766c:	f000 fb52 	bl	8007d14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800767e:	609a      	str	r2, [r3, #8]
      break;
 8007680:	e03c      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800768e:	461a      	mov	r2, r3
 8007690:	f000 fac6 	bl	8007c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2150      	movs	r1, #80	@ 0x50
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fb1f 	bl	8007cde <TIM_ITRx_SetConfig>
      break;
 80076a0:	e02c      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ae:	461a      	mov	r2, r3
 80076b0:	f000 fae5 	bl	8007c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2160      	movs	r1, #96	@ 0x60
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fb0f 	bl	8007cde <TIM_ITRx_SetConfig>
      break;
 80076c0:	e01c      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ce:	461a      	mov	r2, r3
 80076d0:	f000 faa6 	bl	8007c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2140      	movs	r1, #64	@ 0x40
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 faff 	bl	8007cde <TIM_ITRx_SetConfig>
      break;
 80076e0:	e00c      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f000 faf6 	bl	8007cde <TIM_ITRx_SetConfig>
      break;
 80076f2:	e003      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
      break;
 80076f8:	e000      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a46      	ldr	r2, [pc, #280]	@ (8007894 <TIM_Base_SetConfig+0x12c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007786:	d00f      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a43      	ldr	r2, [pc, #268]	@ (8007898 <TIM_Base_SetConfig+0x130>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00b      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a42      	ldr	r2, [pc, #264]	@ (800789c <TIM_Base_SetConfig+0x134>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d007      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a41      	ldr	r2, [pc, #260]	@ (80078a0 <TIM_Base_SetConfig+0x138>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_Base_SetConfig+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a40      	ldr	r2, [pc, #256]	@ (80078a4 <TIM_Base_SetConfig+0x13c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d108      	bne.n	80077ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a35      	ldr	r2, [pc, #212]	@ (8007894 <TIM_Base_SetConfig+0x12c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d02b      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077c8:	d027      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a32      	ldr	r2, [pc, #200]	@ (8007898 <TIM_Base_SetConfig+0x130>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d023      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a31      	ldr	r2, [pc, #196]	@ (800789c <TIM_Base_SetConfig+0x134>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01f      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a30      	ldr	r2, [pc, #192]	@ (80078a0 <TIM_Base_SetConfig+0x138>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01b      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a2f      	ldr	r2, [pc, #188]	@ (80078a4 <TIM_Base_SetConfig+0x13c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d017      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a2e      	ldr	r2, [pc, #184]	@ (80078a8 <TIM_Base_SetConfig+0x140>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d013      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a2d      	ldr	r2, [pc, #180]	@ (80078ac <TIM_Base_SetConfig+0x144>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00f      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a2c      	ldr	r2, [pc, #176]	@ (80078b0 <TIM_Base_SetConfig+0x148>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00b      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a2b      	ldr	r2, [pc, #172]	@ (80078b4 <TIM_Base_SetConfig+0x14c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d007      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2a      	ldr	r2, [pc, #168]	@ (80078b8 <TIM_Base_SetConfig+0x150>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a29      	ldr	r2, [pc, #164]	@ (80078bc <TIM_Base_SetConfig+0x154>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d108      	bne.n	800782c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a10      	ldr	r2, [pc, #64]	@ (8007894 <TIM_Base_SetConfig+0x12c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <TIM_Base_SetConfig+0xf8>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a12      	ldr	r2, [pc, #72]	@ (80078a4 <TIM_Base_SetConfig+0x13c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d103      	bne.n	8007868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b01      	cmp	r3, #1
 8007878:	d105      	bne.n	8007886 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f023 0201 	bic.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	611a      	str	r2, [r3, #16]
  }
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40010000 	.word	0x40010000
 8007898:	40000400 	.word	0x40000400
 800789c:	40000800 	.word	0x40000800
 80078a0:	40000c00 	.word	0x40000c00
 80078a4:	40010400 	.word	0x40010400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40014400 	.word	0x40014400
 80078b0:	40014800 	.word	0x40014800
 80078b4:	40001800 	.word	0x40001800
 80078b8:	40001c00 	.word	0x40001c00
 80078bc:	40002000 	.word	0x40002000

080078c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f023 0201 	bic.w	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 0302 	bic.w	r3, r3, #2
 8007908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a20      	ldr	r2, [pc, #128]	@ (8007998 <TIM_OC1_SetConfig+0xd8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_OC1_SetConfig+0x64>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a1f      	ldr	r2, [pc, #124]	@ (800799c <TIM_OC1_SetConfig+0xdc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d10c      	bne.n	800793e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f023 0308 	bic.w	r3, r3, #8
 800792a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 0304 	bic.w	r3, r3, #4
 800793c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a15      	ldr	r2, [pc, #84]	@ (8007998 <TIM_OC1_SetConfig+0xd8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d003      	beq.n	800794e <TIM_OC1_SetConfig+0x8e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a14      	ldr	r2, [pc, #80]	@ (800799c <TIM_OC1_SetConfig+0xdc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d111      	bne.n	8007972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800795c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40010000 	.word	0x40010000
 800799c:	40010400 	.word	0x40010400

080079a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	f023 0210 	bic.w	r2, r3, #16
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0320 	bic.w	r3, r3, #32
 80079ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a22      	ldr	r2, [pc, #136]	@ (8007a84 <TIM_OC2_SetConfig+0xe4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC2_SetConfig+0x68>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a21      	ldr	r2, [pc, #132]	@ (8007a88 <TIM_OC2_SetConfig+0xe8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d10d      	bne.n	8007a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a17      	ldr	r2, [pc, #92]	@ (8007a84 <TIM_OC2_SetConfig+0xe4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC2_SetConfig+0x94>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a16      	ldr	r2, [pc, #88]	@ (8007a88 <TIM_OC2_SetConfig+0xe8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d113      	bne.n	8007a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	621a      	str	r2, [r3, #32]
}
 8007a76:	bf00      	nop
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	40010000 	.word	0x40010000
 8007a88:	40010400 	.word	0x40010400

08007a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	021b      	lsls	r3, r3, #8
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a21      	ldr	r2, [pc, #132]	@ (8007b6c <TIM_OC3_SetConfig+0xe0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_OC3_SetConfig+0x66>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a20      	ldr	r2, [pc, #128]	@ (8007b70 <TIM_OC3_SetConfig+0xe4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d10d      	bne.n	8007b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a16      	ldr	r2, [pc, #88]	@ (8007b6c <TIM_OC3_SetConfig+0xe0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC3_SetConfig+0x92>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a15      	ldr	r2, [pc, #84]	@ (8007b70 <TIM_OC3_SetConfig+0xe4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d113      	bne.n	8007b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	621a      	str	r2, [r3, #32]
}
 8007b60:	bf00      	nop
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	40010000 	.word	0x40010000
 8007b70:	40010400 	.word	0x40010400

08007b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	031b      	lsls	r3, r3, #12
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a12      	ldr	r2, [pc, #72]	@ (8007c18 <TIM_OC4_SetConfig+0xa4>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_OC4_SetConfig+0x68>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a11      	ldr	r2, [pc, #68]	@ (8007c1c <TIM_OC4_SetConfig+0xa8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d109      	bne.n	8007bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	019b      	lsls	r3, r3, #6
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	621a      	str	r2, [r3, #32]
}
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40010000 	.word	0x40010000
 8007c1c:	40010400 	.word	0x40010400

08007c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	f023 0201 	bic.w	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 030a 	bic.w	r3, r3, #10
 8007c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b087      	sub	sp, #28
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f023 0210 	bic.w	r2, r3, #16
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	031b      	lsls	r3, r3, #12
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f043 0307 	orr.w	r3, r3, #7
 8007d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	609a      	str	r2, [r3, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	021a      	lsls	r2, r3, #8
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	609a      	str	r2, [r3, #8]
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2201      	movs	r2, #1
 8007d68:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	43db      	mvns	r3, r3
 8007d76:	401a      	ands	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a1a      	ldr	r2, [r3, #32]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
	...

08007da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e05a      	b.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a21      	ldr	r2, [pc, #132]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d022      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e04:	d01d      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d018      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1b      	ldr	r2, [pc, #108]	@ (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00e      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a18      	ldr	r2, [pc, #96]	@ (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d009      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a17      	ldr	r2, [pc, #92]	@ (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d10c      	bne.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40010000 	.word	0x40010000
 8007e80:	40000400 	.word	0x40000400
 8007e84:	40000800 	.word	0x40000800
 8007e88:	40000c00 	.word	0x40000c00
 8007e8c:	40010400 	.word	0x40010400
 8007e90:	40014000 	.word	0x40014000
 8007e94:	40001800 	.word	0x40001800

08007e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e042      	b.n	8007f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7f9 fbf2 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2224      	movs	r2, #36	@ 0x24
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f973 	bl	80081f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695a      	ldr	r2, [r3, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	@ 0x28
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d175      	bne.n	800806c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_UART_Transmit+0x2c>
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e06e      	b.n	800806e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2221      	movs	r2, #33	@ 0x21
 8007f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f9e:	f7f9 fe35 	bl	8001c0c <HAL_GetTick>
 8007fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	88fa      	ldrh	r2, [r7, #6]
 8007fae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb8:	d108      	bne.n	8007fcc <HAL_UART_Transmit+0x6c>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e003      	b.n	8007fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fd4:	e02e      	b.n	8008034 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2180      	movs	r1, #128	@ 0x80
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f848 	bl	8008076 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e03a      	b.n	800806e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800800c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	3302      	adds	r3, #2
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	e007      	b.n	8008026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	781a      	ldrb	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1cb      	bne.n	8007fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2200      	movs	r2, #0
 8008046:	2140      	movs	r1, #64	@ 0x40
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f814 	bl	8008076 <UART_WaitOnFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e006      	b.n	800806e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b086      	sub	sp, #24
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	4613      	mov	r3, r2
 8008084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008086:	e03b      	b.n	8008100 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d037      	beq.n	8008100 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008090:	f7f9 fdbc 	bl	8001c0c <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	6a3a      	ldr	r2, [r7, #32]
 800809c:	429a      	cmp	r2, r3
 800809e:	d302      	bcc.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e03a      	b.n	8008120 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d023      	beq.n	8008100 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b80      	cmp	r3, #128	@ 0x80
 80080bc:	d020      	beq.n	8008100 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d01d      	beq.n	8008100 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d116      	bne.n	8008100 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f81d 	bl	8008128 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2208      	movs	r2, #8
 80080f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e00f      	b.n	8008120 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4013      	ands	r3, r2
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	429a      	cmp	r2, r3
 800810e:	bf0c      	ite	eq
 8008110:	2301      	moveq	r3, #1
 8008112:	2300      	movne	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	461a      	mov	r2, r3
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	429a      	cmp	r2, r3
 800811c:	d0b4      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b095      	sub	sp, #84	@ 0x54
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	330c      	adds	r3, #12
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008150:	643a      	str	r2, [r7, #64]	@ 0x40
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e5      	bne.n	8008130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3314      	adds	r3, #20
 800816a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	61fb      	str	r3, [r7, #28]
   return(result);
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3314      	adds	r3, #20
 8008182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800818a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e5      	bne.n	8008164 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800819c:	2b01      	cmp	r3, #1
 800819e:	d119      	bne.n	80081d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 0310 	bic.w	r3, r3, #16
 80081b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081c0:	61ba      	str	r2, [r7, #24]
 80081c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	613b      	str	r3, [r7, #16]
   return(result);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081e2:	bf00      	nop
 80081e4:	3754      	adds	r7, #84	@ 0x54
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081f4:	b0c0      	sub	sp, #256	@ 0x100
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820c:	68d9      	ldr	r1, [r3, #12]
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	ea40 0301 	orr.w	r3, r0, r1
 8008218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	431a      	orrs	r2, r3
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	431a      	orrs	r2, r3
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	4313      	orrs	r3, r2
 8008238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008248:	f021 010c 	bic.w	r1, r1, #12
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008256:	430b      	orrs	r3, r1
 8008258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826a:	6999      	ldr	r1, [r3, #24]
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	ea40 0301 	orr.w	r3, r0, r1
 8008276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b8f      	ldr	r3, [pc, #572]	@ (80084bc <UART_SetConfig+0x2cc>)
 8008280:	429a      	cmp	r2, r3
 8008282:	d005      	beq.n	8008290 <UART_SetConfig+0xa0>
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b8d      	ldr	r3, [pc, #564]	@ (80084c0 <UART_SetConfig+0x2d0>)
 800828c:	429a      	cmp	r2, r3
 800828e:	d104      	bne.n	800829a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008290:	f7fe f84e 	bl	8006330 <HAL_RCC_GetPCLK2Freq>
 8008294:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008298:	e003      	b.n	80082a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800829a:	f7fe f835 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 800829e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ac:	f040 810c 	bne.w	80084c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	1891      	adds	r1, r2, r2
 80082c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082ca:	415b      	adcs	r3, r3
 80082cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082d2:	4621      	mov	r1, r4
 80082d4:	eb12 0801 	adds.w	r8, r2, r1
 80082d8:	4629      	mov	r1, r5
 80082da:	eb43 0901 	adc.w	r9, r3, r1
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082f2:	4690      	mov	r8, r2
 80082f4:	4699      	mov	r9, r3
 80082f6:	4623      	mov	r3, r4
 80082f8:	eb18 0303 	adds.w	r3, r8, r3
 80082fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008300:	462b      	mov	r3, r5
 8008302:	eb49 0303 	adc.w	r3, r9, r3
 8008306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008316:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800831a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800831e:	460b      	mov	r3, r1
 8008320:	18db      	adds	r3, r3, r3
 8008322:	653b      	str	r3, [r7, #80]	@ 0x50
 8008324:	4613      	mov	r3, r2
 8008326:	eb42 0303 	adc.w	r3, r2, r3
 800832a:	657b      	str	r3, [r7, #84]	@ 0x54
 800832c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008334:	f7f7 ffac 	bl	8000290 <__aeabi_uldivmod>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4b61      	ldr	r3, [pc, #388]	@ (80084c4 <UART_SetConfig+0x2d4>)
 800833e:	fba3 2302 	umull	r2, r3, r3, r2
 8008342:	095b      	lsrs	r3, r3, #5
 8008344:	011c      	lsls	r4, r3, #4
 8008346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800834a:	2200      	movs	r2, #0
 800834c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008350:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008358:	4642      	mov	r2, r8
 800835a:	464b      	mov	r3, r9
 800835c:	1891      	adds	r1, r2, r2
 800835e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008360:	415b      	adcs	r3, r3
 8008362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008368:	4641      	mov	r1, r8
 800836a:	eb12 0a01 	adds.w	sl, r2, r1
 800836e:	4649      	mov	r1, r9
 8008370:	eb43 0b01 	adc.w	fp, r3, r1
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008388:	4692      	mov	sl, r2
 800838a:	469b      	mov	fp, r3
 800838c:	4643      	mov	r3, r8
 800838e:	eb1a 0303 	adds.w	r3, sl, r3
 8008392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008396:	464b      	mov	r3, r9
 8008398:	eb4b 0303 	adc.w	r3, fp, r3
 800839c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083b4:	460b      	mov	r3, r1
 80083b6:	18db      	adds	r3, r3, r3
 80083b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ba:	4613      	mov	r3, r2
 80083bc:	eb42 0303 	adc.w	r3, r2, r3
 80083c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083ca:	f7f7 ff61 	bl	8000290 <__aeabi_uldivmod>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	4b3b      	ldr	r3, [pc, #236]	@ (80084c4 <UART_SetConfig+0x2d4>)
 80083d6:	fba3 2301 	umull	r2, r3, r3, r1
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	2264      	movs	r2, #100	@ 0x64
 80083de:	fb02 f303 	mul.w	r3, r2, r3
 80083e2:	1acb      	subs	r3, r1, r3
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083ea:	4b36      	ldr	r3, [pc, #216]	@ (80084c4 <UART_SetConfig+0x2d4>)
 80083ec:	fba3 2302 	umull	r2, r3, r3, r2
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083f8:	441c      	add	r4, r3
 80083fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008404:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	1891      	adds	r1, r2, r2
 8008412:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008414:	415b      	adcs	r3, r3
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800841c:	4641      	mov	r1, r8
 800841e:	1851      	adds	r1, r2, r1
 8008420:	6339      	str	r1, [r7, #48]	@ 0x30
 8008422:	4649      	mov	r1, r9
 8008424:	414b      	adcs	r3, r1
 8008426:	637b      	str	r3, [r7, #52]	@ 0x34
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008434:	4659      	mov	r1, fp
 8008436:	00cb      	lsls	r3, r1, #3
 8008438:	4651      	mov	r1, sl
 800843a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800843e:	4651      	mov	r1, sl
 8008440:	00ca      	lsls	r2, r1, #3
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	4603      	mov	r3, r0
 8008448:	4642      	mov	r2, r8
 800844a:	189b      	adds	r3, r3, r2
 800844c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008450:	464b      	mov	r3, r9
 8008452:	460a      	mov	r2, r1
 8008454:	eb42 0303 	adc.w	r3, r2, r3
 8008458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008468:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800846c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008470:	460b      	mov	r3, r1
 8008472:	18db      	adds	r3, r3, r3
 8008474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008476:	4613      	mov	r3, r2
 8008478:	eb42 0303 	adc.w	r3, r2, r3
 800847c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800847e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008486:	f7f7 ff03 	bl	8000290 <__aeabi_uldivmod>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <UART_SetConfig+0x2d4>)
 8008490:	fba3 1302 	umull	r1, r3, r3, r2
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	2164      	movs	r1, #100	@ 0x64
 8008498:	fb01 f303 	mul.w	r3, r1, r3
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	3332      	adds	r3, #50	@ 0x32
 80084a2:	4a08      	ldr	r2, [pc, #32]	@ (80084c4 <UART_SetConfig+0x2d4>)
 80084a4:	fba2 2303 	umull	r2, r3, r2, r3
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	f003 0207 	and.w	r2, r3, #7
 80084ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4422      	add	r2, r4
 80084b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084b8:	e106      	b.n	80086c8 <UART_SetConfig+0x4d8>
 80084ba:	bf00      	nop
 80084bc:	40011000 	.word	0x40011000
 80084c0:	40011400 	.word	0x40011400
 80084c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80084da:	4642      	mov	r2, r8
 80084dc:	464b      	mov	r3, r9
 80084de:	1891      	adds	r1, r2, r2
 80084e0:	6239      	str	r1, [r7, #32]
 80084e2:	415b      	adcs	r3, r3
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ea:	4641      	mov	r1, r8
 80084ec:	1854      	adds	r4, r2, r1
 80084ee:	4649      	mov	r1, r9
 80084f0:	eb43 0501 	adc.w	r5, r3, r1
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	00eb      	lsls	r3, r5, #3
 80084fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008502:	00e2      	lsls	r2, r4, #3
 8008504:	4614      	mov	r4, r2
 8008506:	461d      	mov	r5, r3
 8008508:	4643      	mov	r3, r8
 800850a:	18e3      	adds	r3, r4, r3
 800850c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008510:	464b      	mov	r3, r9
 8008512:	eb45 0303 	adc.w	r3, r5, r3
 8008516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008526:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008536:	4629      	mov	r1, r5
 8008538:	008b      	lsls	r3, r1, #2
 800853a:	4621      	mov	r1, r4
 800853c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008540:	4621      	mov	r1, r4
 8008542:	008a      	lsls	r2, r1, #2
 8008544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008548:	f7f7 fea2 	bl	8000290 <__aeabi_uldivmod>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4b60      	ldr	r3, [pc, #384]	@ (80086d4 <UART_SetConfig+0x4e4>)
 8008552:	fba3 2302 	umull	r2, r3, r3, r2
 8008556:	095b      	lsrs	r3, r3, #5
 8008558:	011c      	lsls	r4, r3, #4
 800855a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800855e:	2200      	movs	r2, #0
 8008560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008564:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	1891      	adds	r1, r2, r2
 8008572:	61b9      	str	r1, [r7, #24]
 8008574:	415b      	adcs	r3, r3
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800857c:	4641      	mov	r1, r8
 800857e:	1851      	adds	r1, r2, r1
 8008580:	6139      	str	r1, [r7, #16]
 8008582:	4649      	mov	r1, r9
 8008584:	414b      	adcs	r3, r1
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008594:	4659      	mov	r1, fp
 8008596:	00cb      	lsls	r3, r1, #3
 8008598:	4651      	mov	r1, sl
 800859a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859e:	4651      	mov	r1, sl
 80085a0:	00ca      	lsls	r2, r1, #3
 80085a2:	4610      	mov	r0, r2
 80085a4:	4619      	mov	r1, r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	4642      	mov	r2, r8
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085b0:	464b      	mov	r3, r9
 80085b2:	460a      	mov	r2, r1
 80085b4:	eb42 0303 	adc.w	r3, r2, r3
 80085b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80085d4:	4649      	mov	r1, r9
 80085d6:	008b      	lsls	r3, r1, #2
 80085d8:	4641      	mov	r1, r8
 80085da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085de:	4641      	mov	r1, r8
 80085e0:	008a      	lsls	r2, r1, #2
 80085e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085e6:	f7f7 fe53 	bl	8000290 <__aeabi_uldivmod>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	4b38      	ldr	r3, [pc, #224]	@ (80086d4 <UART_SetConfig+0x4e4>)
 80085f2:	fba3 2301 	umull	r2, r3, r3, r1
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	2264      	movs	r2, #100	@ 0x64
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	1acb      	subs	r3, r1, r3
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	3332      	adds	r3, #50	@ 0x32
 8008604:	4a33      	ldr	r2, [pc, #204]	@ (80086d4 <UART_SetConfig+0x4e4>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008610:	441c      	add	r4, r3
 8008612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008616:	2200      	movs	r2, #0
 8008618:	673b      	str	r3, [r7, #112]	@ 0x70
 800861a:	677a      	str	r2, [r7, #116]	@ 0x74
 800861c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008620:	4642      	mov	r2, r8
 8008622:	464b      	mov	r3, r9
 8008624:	1891      	adds	r1, r2, r2
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	415b      	adcs	r3, r3
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008630:	4641      	mov	r1, r8
 8008632:	1851      	adds	r1, r2, r1
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	4649      	mov	r1, r9
 8008638:	414b      	adcs	r3, r1
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	f04f 0300 	mov.w	r3, #0
 8008644:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008648:	4659      	mov	r1, fp
 800864a:	00cb      	lsls	r3, r1, #3
 800864c:	4651      	mov	r1, sl
 800864e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008652:	4651      	mov	r1, sl
 8008654:	00ca      	lsls	r2, r1, #3
 8008656:	4610      	mov	r0, r2
 8008658:	4619      	mov	r1, r3
 800865a:	4603      	mov	r3, r0
 800865c:	4642      	mov	r2, r8
 800865e:	189b      	adds	r3, r3, r2
 8008660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008662:	464b      	mov	r3, r9
 8008664:	460a      	mov	r2, r1
 8008666:	eb42 0303 	adc.w	r3, r2, r3
 800866a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800866c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	663b      	str	r3, [r7, #96]	@ 0x60
 8008676:	667a      	str	r2, [r7, #100]	@ 0x64
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008684:	4649      	mov	r1, r9
 8008686:	008b      	lsls	r3, r1, #2
 8008688:	4641      	mov	r1, r8
 800868a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800868e:	4641      	mov	r1, r8
 8008690:	008a      	lsls	r2, r1, #2
 8008692:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008696:	f7f7 fdfb 	bl	8000290 <__aeabi_uldivmod>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <UART_SetConfig+0x4e4>)
 80086a0:	fba3 1302 	umull	r1, r3, r3, r2
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	2164      	movs	r1, #100	@ 0x64
 80086a8:	fb01 f303 	mul.w	r3, r1, r3
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	3332      	adds	r3, #50	@ 0x32
 80086b2:	4a08      	ldr	r2, [pc, #32]	@ (80086d4 <UART_SetConfig+0x4e4>)
 80086b4:	fba2 2303 	umull	r2, r3, r2, r3
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	f003 020f 	and.w	r2, r3, #15
 80086be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4422      	add	r2, r4
 80086c6:	609a      	str	r2, [r3, #8]
}
 80086c8:	bf00      	nop
 80086ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086ce:	46bd      	mov	sp, r7
 80086d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086d4:	51eb851f 	.word	0x51eb851f

080086d8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d123      	bne.n	8008732 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80086f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	6851      	ldr	r1, [r2, #4]
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	6892      	ldr	r2, [r2, #8]
 80086fe:	4311      	orrs	r1, r2
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	68d2      	ldr	r2, [r2, #12]
 8008704:	4311      	orrs	r1, r2
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	6912      	ldr	r2, [r2, #16]
 800870a:	4311      	orrs	r1, r2
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	6952      	ldr	r2, [r2, #20]
 8008710:	4311      	orrs	r1, r2
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	6992      	ldr	r2, [r2, #24]
 8008716:	4311      	orrs	r1, r2
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	69d2      	ldr	r2, [r2, #28]
 800871c:	4311      	orrs	r1, r2
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	6a12      	ldr	r2, [r2, #32]
 8008722:	4311      	orrs	r1, r2
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008728:	430a      	orrs	r2, r1
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e028      	b.n	8008784 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	69d9      	ldr	r1, [r3, #28]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	4319      	orrs	r1, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008748:	430b      	orrs	r3, r1
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008758:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	6851      	ldr	r1, [r2, #4]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	6892      	ldr	r2, [r2, #8]
 8008764:	4311      	orrs	r1, r2
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	68d2      	ldr	r2, [r2, #12]
 800876a:	4311      	orrs	r1, r2
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	6912      	ldr	r2, [r2, #16]
 8008770:	4311      	orrs	r1, r2
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	6952      	ldr	r2, [r2, #20]
 8008776:	4311      	orrs	r1, r2
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	6992      	ldr	r2, [r2, #24]
 800877c:	430a      	orrs	r2, r1
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d128      	bne.n	80087f6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	1e59      	subs	r1, r3, #1
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	4319      	orrs	r1, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	4319      	orrs	r1, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	031b      	lsls	r3, r3, #12
 80087ce:	4319      	orrs	r1, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	041b      	lsls	r3, r3, #16
 80087d8:	4319      	orrs	r1, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	3b01      	subs	r3, #1
 80087e0:	051b      	lsls	r3, r3, #20
 80087e2:	4319      	orrs	r1, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	061b      	lsls	r3, r3, #24
 80087ec:	430b      	orrs	r3, r1
 80087ee:	431a      	orrs	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	e02f      	b.n	8008856 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	68d2      	ldr	r2, [r2, #12]
 8008806:	3a01      	subs	r2, #1
 8008808:	0311      	lsls	r1, r2, #12
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	6952      	ldr	r2, [r2, #20]
 800880e:	3a01      	subs	r2, #1
 8008810:	0512      	lsls	r2, r2, #20
 8008812:	430a      	orrs	r2, r1
 8008814:	431a      	orrs	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	1e59      	subs	r1, r3, #1
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	3b01      	subs	r3, #1
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	4319      	orrs	r1, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	3b01      	subs	r3, #1
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	4319      	orrs	r1, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	3b01      	subs	r3, #1
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	4319      	orrs	r1, r3
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	3b01      	subs	r3, #1
 800884c:	061b      	lsls	r3, r3, #24
 800884e:	430b      	orrs	r3, r1
 8008850:	431a      	orrs	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f043 0201 	orr.w	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f023 0201 	bic.w	r2, r3, #1
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088c2:	d901      	bls.n	80088c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e01b      	b.n	8008900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	daf2      	bge.n	80088b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	019b      	lsls	r3, r3, #6
 80088d8:	f043 0220 	orr.w	r2, r3, #32
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088ec:	d901      	bls.n	80088f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e006      	b.n	8008900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d0f0      	beq.n	80088e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008924:	d901      	bls.n	800892a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e018      	b.n	800895c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	daf2      	bge.n	8008918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2210      	movs	r2, #16
 800893a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008948:	d901      	bls.n	800894e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e006      	b.n	800895c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0310 	and.w	r3, r3, #16
 8008956:	2b10      	cmp	r3, #16
 8008958:	d0f0      	beq.n	800893c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008968:	b480      	push	{r7}
 800896a:	b08b      	sub	sp, #44	@ 0x2c
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	089b      	lsrs	r3, r3, #2
 8008982:	b29b      	uxth	r3, r3
 8008984:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800898e:	2300      	movs	r3, #0
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	e014      	b.n	80089be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	601a      	str	r2, [r3, #0]
    pDest++;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	3301      	adds	r3, #1
 80089a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	3301      	adds	r3, #1
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	3301      	adds	r3, #1
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	3301      	adds	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	3301      	adds	r3, #1
 80089bc:	623b      	str	r3, [r7, #32]
 80089be:	6a3a      	ldr	r2, [r7, #32]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d3e6      	bcc.n	8008994 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089c6:	8bfb      	ldrh	r3, [r7, #30]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d6:	461a      	mov	r2, r3
 80089d8:	f107 0310 	add.w	r3, r7, #16
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f0:	701a      	strb	r2, [r3, #0]
      i++;
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	3301      	adds	r3, #1
 80089f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	3301      	adds	r3, #1
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80089fe:	8bfb      	ldrh	r3, [r7, #30]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a04:	8bfb      	ldrh	r3, [r7, #30]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1ea      	bne.n	80089e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	372c      	adds	r7, #44	@ 0x2c
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a72:	68bb      	ldr	r3, [r7, #8]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d107      	bne.n	8008aee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008aea:	6053      	str	r3, [r2, #4]
 8008aec:	e00c      	b.n	8008b08 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d107      	bne.n	8008b04 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008afa:	461a      	mov	r2, r3
 8008afc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008b00:	6053      	str	r3, [r2, #4]
 8008b02:	e001      	b.n	8008b08 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	b29b      	uxth	r3, r3
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b089      	sub	sp, #36	@ 0x24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	0c9b      	lsrs	r3, r3, #18
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	0fdb      	lsrs	r3, r3, #31
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	0fdb      	lsrs	r3, r3, #31
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d10d      	bne.n	8008bba <USB_HC_Halt+0x82>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <USB_HC_Halt+0x82>
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d002      	beq.n	8008bb6 <USB_HC_Halt+0x7e>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d101      	bne.n	8008bba <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e0d8      	b.n	8008d6c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <USB_HC_Halt+0x8e>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d173      	bne.n	8008cae <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d14a      	bne.n	8008c88 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d133      	bne.n	8008c66 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	0151      	lsls	r1, r2, #5
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	440a      	add	r2, r1
 8008c14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c1c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c3c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	3301      	adds	r3, #1
 8008c42:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c4a:	d82e      	bhi.n	8008caa <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c62:	d0ec      	beq.n	8008c3e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c64:	e081      	b.n	8008d6a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c86:	e070      	b.n	8008d6a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	0151      	lsls	r1, r2, #5
 8008c9a:	69fa      	ldr	r2, [r7, #28]
 8008c9c:	440a      	add	r2, r1
 8008c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ca6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca8:	e05f      	b.n	8008d6a <USB_HC_Halt+0x232>
            break;
 8008caa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cac:	e05d      	b.n	8008d6a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	0151      	lsls	r1, r2, #5
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	440a      	add	r2, r1
 8008cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ccc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d133      	bne.n	8008d46 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cfc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d1c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d2a:	d81d      	bhi.n	8008d68 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d42:	d0ec      	beq.n	8008d1e <USB_HC_Halt+0x1e6>
 8008d44:	e011      	b.n	8008d6a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	e000      	b.n	8008d6a <USB_HC_Halt+0x232>
          break;
 8008d68:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3724      	adds	r7, #36	@ 0x24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff fd7a 	bl	8008886 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d92:	2110      	movs	r1, #16
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff fd87 	bl	80088a8 <USB_FlushTxFifo>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff fdb1 	bl	800890c <USB_FlushRxFifo>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	e01f      	b.n	8008dfa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008de0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dee:	461a      	mov	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	3301      	adds	r3, #1
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b0f      	cmp	r3, #15
 8008dfe:	d9dc      	bls.n	8008dba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e034      	b.n	8008e70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e4c:	d80c      	bhi.n	8008e68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e64:	d0ec      	beq.n	8008e40 <USB_StopHost+0xc8>
 8008e66:	e000      	b.n	8008e6a <USB_StopHost+0xf2>
        break;
 8008e68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61bb      	str	r3, [r7, #24]
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d9c7      	bls.n	8008e06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fce9 	bl	8008864 <USB_EnableGlobalInt>

  return ret;
 8008e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f804 	bl	8008ec0 <USBH_HandleSof>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b0b      	cmp	r3, #11
 8008ed0:	d10a      	bne.n	8008ee8 <USBH_HandleSof+0x28>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	4798      	blx	r3
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f14:	2200      	movs	r2, #0
 8008f16:	4619      	mov	r1, r3
 8008f18:	f000 f8ae 	bl	8009078 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008f1c:	bf00      	nop
}
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008f34:	bf00      	nop
}
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f74:	2200      	movs	r2, #0
 8008f76:	4619      	mov	r1, r3
 8008f78:	f000 f87e 	bl	8009078 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 f92a 	bl	800a200 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	791b      	ldrb	r3, [r3, #4]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f830 	bl	8009018 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	795b      	ldrb	r3, [r3, #5]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f82a 	bl	8009018 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4619      	mov	r1, r3
 8008fdc:	f000 f84c 	bl	8009078 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009006:	2200      	movs	r2, #0
 8009008:	4619      	mov	r1, r3
 800900a:	f000 f835 	bl	8009078 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	2b0f      	cmp	r3, #15
 8009028:	d80d      	bhi.n	8009046 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	33e0      	adds	r3, #224	@ 0xe0
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	33e0      	adds	r3, #224	@ 0xe0
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800905a:	f3ef 8305 	mrs	r3, IPSR
 800905e:	607b      	str	r3, [r7, #4]
  return(result);
 8009060:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009062:	2b00      	cmp	r3, #0
 8009064:	bf14      	ite	ne
 8009066:	2301      	movne	r3, #1
 8009068:	2300      	moveq	r3, #0
 800906a:	b2db      	uxtb	r3, r3
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <osMessagePut+0x1e>
    ticks = 1;
 8009092:	2301      	movs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009096:	f7ff ffdd 	bl	8009054 <inHandlerMode>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d018      	beq.n	80090d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80090a0:	f107 0210 	add.w	r2, r7, #16
 80090a4:	f107 0108 	add.w	r1, r7, #8
 80090a8:	2300      	movs	r3, #0
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 f9ae 	bl	800940c <xQueueGenericSendFromISR>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d001      	beq.n	80090ba <osMessagePut+0x42>
      return osErrorOS;
 80090b6:	23ff      	movs	r3, #255	@ 0xff
 80090b8:	e018      	b.n	80090ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d014      	beq.n	80090ea <osMessagePut+0x72>
 80090c0:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <osMessagePut+0x7c>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	e00b      	b.n	80090ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80090d2:	f107 0108 	add.w	r1, r7, #8
 80090d6:	2300      	movs	r3, #0
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f894 	bl	8009208 <xQueueGenericSend>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d001      	beq.n	80090ea <osMessagePut+0x72>
      return osErrorOS;
 80090e6:	23ff      	movs	r3, #255	@ 0xff
 80090e8:	e000      	b.n	80090ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d103      	bne.n	8009160 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e00c      	b.n	800917a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3308      	adds	r3, #8
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e002      	b.n	800916e <vListInsert+0x2e>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	d2f6      	bcs.n	8009168 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6892      	ldr	r2, [r2, #8]
 80091c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6852      	ldr	r2, [r2, #4]
 80091d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d103      	bne.n	80091e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08e      	sub	sp, #56	@ 0x38
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009216:	2300      	movs	r3, #0
 8009218:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10b      	bne.n	800923c <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d103      	bne.n	800924a <xQueueGenericSend+0x42>
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <xQueueGenericSend+0x46>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericSend+0x48>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xQueueGenericSend+0x64>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d103      	bne.n	800927a <xQueueGenericSend+0x72>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <xQueueGenericSend+0x76>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <xQueueGenericSend+0x78>
 800927e:	2300      	movs	r3, #0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <xQueueGenericSend+0x94>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	623b      	str	r3, [r7, #32]
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	e7fd      	b.n	8009298 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800929c:	f000 fd40 	bl	8009d20 <xTaskGetSchedulerState>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <xQueueGenericSend+0xa4>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <xQueueGenericSend+0xa8>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e000      	b.n	80092b2 <xQueueGenericSend+0xaa>
 80092b0:	2300      	movs	r3, #0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <xQueueGenericSend+0xc6>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	61fb      	str	r3, [r7, #28]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092ce:	f000 fe4b 	bl	8009f68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092da:	429a      	cmp	r2, r3
 80092dc:	d302      	bcc.n	80092e4 <xQueueGenericSend+0xdc>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d129      	bne.n	8009338 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092ea:	f000 f92d 	bl	8009548 <prvCopyDataToQueue>
 80092ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d010      	beq.n	800931a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	3324      	adds	r3, #36	@ 0x24
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fc05 	bl	8009b0c <xTaskRemoveFromEventList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d013      	beq.n	8009330 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009308:	4b3f      	ldr	r3, [pc, #252]	@ (8009408 <xQueueGenericSend+0x200>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	e00a      	b.n	8009330 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800931a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d007      	beq.n	8009330 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009320:	4b39      	ldr	r3, [pc, #228]	@ (8009408 <xQueueGenericSend+0x200>)
 8009322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009330:	f000 fe4c 	bl	8009fcc <vPortExitCritical>
				return pdPASS;
 8009334:	2301      	movs	r3, #1
 8009336:	e063      	b.n	8009400 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d103      	bne.n	8009346 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800933e:	f000 fe45 	bl	8009fcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009342:	2300      	movs	r3, #0
 8009344:	e05c      	b.n	8009400 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009348:	2b00      	cmp	r3, #0
 800934a:	d106      	bne.n	800935a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fc3f 	bl	8009bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009356:	2301      	movs	r3, #1
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800935a:	f000 fe37 	bl	8009fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800935e:	f000 f9c7 	bl	80096f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009362:	f000 fe01 	bl	8009f68 <vPortEnterCritical>
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800936c:	b25b      	sxtb	r3, r3
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d103      	bne.n	800937c <xQueueGenericSend+0x174>
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009382:	b25b      	sxtb	r3, r3
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d103      	bne.n	8009392 <xQueueGenericSend+0x18a>
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009392:	f000 fe1b 	bl	8009fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009396:	1d3a      	adds	r2, r7, #4
 8009398:	f107 0314 	add.w	r3, r7, #20
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fc2e 	bl	8009c00 <xTaskCheckForTimeOut>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d124      	bne.n	80093f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ac:	f000 f988 	bl	80096c0 <prvIsQueueFull>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d018      	beq.n	80093e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	3310      	adds	r3, #16
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fb7e 	bl	8009ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093c6:	f000 f929 	bl	800961c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093ca:	f000 f99f 	bl	800970c <xTaskResumeAll>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f47f af7c 	bne.w	80092ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80093d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009408 <xQueueGenericSend+0x200>)
 80093d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	e772      	b.n	80092ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ea:	f000 f917 	bl	800961c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093ee:	f000 f98d 	bl	800970c <xTaskResumeAll>
 80093f2:	e76c      	b.n	80092ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093f6:	f000 f911 	bl	800961c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093fa:	f000 f987 	bl	800970c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009400:	4618      	mov	r0, r3
 8009402:	3738      	adds	r7, #56	@ 0x38
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b090      	sub	sp, #64	@ 0x40
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800941e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10b      	bne.n	800943c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	e7fd      	b.n	8009438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <xQueueGenericSendFromISR+0x3e>
 8009442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <xQueueGenericSendFromISR+0x42>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <xQueueGenericSendFromISR+0x44>
 800944e:	2300      	movs	r3, #0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10b      	bne.n	800946c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	e7fd      	b.n	8009468 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d103      	bne.n	800947a <xQueueGenericSendFromISR+0x6e>
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <xQueueGenericSendFromISR+0x72>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <xQueueGenericSendFromISR+0x74>
 800947e:	2300      	movs	r3, #0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	623b      	str	r3, [r7, #32]
}
 8009496:	bf00      	nop
 8009498:	bf00      	nop
 800949a:	e7fd      	b.n	8009498 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800949c:	f000 fe16 	bl	800a0cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094a0:	f3ef 8211 	mrs	r2, BASEPRI
 80094a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	61fa      	str	r2, [r7, #28]
 80094b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d302      	bcc.n	80094ce <xQueueGenericSendFromISR+0xc2>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d12f      	bne.n	800952e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	68b9      	ldr	r1, [r7, #8]
 80094e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094e4:	f000 f830 	bl	8009548 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d112      	bne.n	8009518 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d016      	beq.n	8009528 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fc:	3324      	adds	r3, #36	@ 0x24
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fb04 	bl	8009b0c <xTaskRemoveFromEventList>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00e      	beq.n	8009528 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	e007      	b.n	8009528 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009518:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800951c:	3301      	adds	r3, #1
 800951e:	b2db      	uxtb	r3, r3
 8009520:	b25a      	sxtb	r2, r3
 8009522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009528:	2301      	movs	r3, #1
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800952c:	e001      	b.n	8009532 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009534:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800953c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800953e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009540:	4618      	mov	r0, r3
 8009542:	3740      	adds	r7, #64	@ 0x40
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10d      	bne.n	8009582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d14d      	bne.n	800960a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fbf2 	bl	8009d5c <xTaskPriorityDisinherit>
 8009578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	609a      	str	r2, [r3, #8]
 8009580:	e043      	b.n	800960a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d119      	bne.n	80095bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6858      	ldr	r0, [r3, #4]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009590:	461a      	mov	r2, r3
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	f001 f9bf 	bl	800a916 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095a0:	441a      	add	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d32b      	bcc.n	800960a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	605a      	str	r2, [r3, #4]
 80095ba:	e026      	b.n	800960a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68d8      	ldr	r0, [r3, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c4:	461a      	mov	r2, r3
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	f001 f9a5 	bl	800a916 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d4:	425b      	negs	r3, r3
 80095d6:	441a      	add	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d207      	bcs.n	80095f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f0:	425b      	negs	r3, r3
 80095f2:	441a      	add	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d105      	bne.n	800960a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3b01      	subs	r3, #1
 8009608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009612:	697b      	ldr	r3, [r7, #20]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009624:	f000 fca0 	bl	8009f68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800962e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009630:	e011      	b.n	8009656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d012      	beq.n	8009660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3324      	adds	r3, #36	@ 0x24
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fa64 	bl	8009b0c <xTaskRemoveFromEventList>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800964a:	f000 fb3d 	bl	8009cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	3b01      	subs	r3, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	dce9      	bgt.n	8009632 <prvUnlockQueue+0x16>
 800965e:	e000      	b.n	8009662 <prvUnlockQueue+0x46>
					break;
 8009660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	22ff      	movs	r2, #255	@ 0xff
 8009666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800966a:	f000 fcaf 	bl	8009fcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800966e:	f000 fc7b 	bl	8009f68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800967a:	e011      	b.n	80096a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d012      	beq.n	80096aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3310      	adds	r3, #16
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fa3f 	bl	8009b0c <xTaskRemoveFromEventList>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009694:	f000 fb18 	bl	8009cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	3b01      	subs	r3, #1
 800969c:	b2db      	uxtb	r3, r3
 800969e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dce9      	bgt.n	800967c <prvUnlockQueue+0x60>
 80096a8:	e000      	b.n	80096ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	22ff      	movs	r2, #255	@ 0xff
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80096b4:	f000 fc8a 	bl	8009fcc <vPortExitCritical>
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096c8:	f000 fc4e 	bl	8009f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d102      	bne.n	80096de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e001      	b.n	80096e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096e2:	f000 fc73 	bl	8009fcc <vPortExitCritical>

	return xReturn;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096f4:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <vTaskSuspendAll+0x18>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	4a03      	ldr	r2, [pc, #12]	@ (8009708 <vTaskSuspendAll+0x18>)
 80096fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096fe:	bf00      	nop
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	200004cc 	.word	0x200004cc

0800970c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800971a:	4b42      	ldr	r3, [pc, #264]	@ (8009824 <xTaskResumeAll+0x118>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <xTaskResumeAll+0x2e>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	603b      	str	r3, [r7, #0]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800973a:	f000 fc15 	bl	8009f68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800973e:	4b39      	ldr	r3, [pc, #228]	@ (8009824 <xTaskResumeAll+0x118>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3b01      	subs	r3, #1
 8009744:	4a37      	ldr	r2, [pc, #220]	@ (8009824 <xTaskResumeAll+0x118>)
 8009746:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009748:	4b36      	ldr	r3, [pc, #216]	@ (8009824 <xTaskResumeAll+0x118>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d161      	bne.n	8009814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009750:	4b35      	ldr	r3, [pc, #212]	@ (8009828 <xTaskResumeAll+0x11c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d05d      	beq.n	8009814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009758:	e02e      	b.n	80097b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975a:	4b34      	ldr	r3, [pc, #208]	@ (800982c <xTaskResumeAll+0x120>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3318      	adds	r3, #24
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fd23 	bl	80091b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3304      	adds	r3, #4
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fd1e 	bl	80091b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	2201      	movs	r2, #1
 800977c:	409a      	lsls	r2, r3
 800977e:	4b2c      	ldr	r3, [pc, #176]	@ (8009830 <xTaskResumeAll+0x124>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4313      	orrs	r3, r2
 8009784:	4a2a      	ldr	r2, [pc, #168]	@ (8009830 <xTaskResumeAll+0x124>)
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4a27      	ldr	r2, [pc, #156]	@ (8009834 <xTaskResumeAll+0x128>)
 8009796:	441a      	add	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7ff fcaa 	bl	80090f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a8:	4b23      	ldr	r3, [pc, #140]	@ (8009838 <xTaskResumeAll+0x12c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d302      	bcc.n	80097b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80097b2:	4b22      	ldr	r3, [pc, #136]	@ (800983c <xTaskResumeAll+0x130>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097b8:	4b1c      	ldr	r3, [pc, #112]	@ (800982c <xTaskResumeAll+0x120>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1cc      	bne.n	800975a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097c6:	f000 fa8b 	bl	8009ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009840 <xTaskResumeAll+0x134>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d010      	beq.n	80097f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097d6:	f000 f837 	bl	8009848 <xTaskIncrementTick>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80097e0:	4b16      	ldr	r3, [pc, #88]	@ (800983c <xTaskResumeAll+0x130>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1f1      	bne.n	80097d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80097f2:	4b13      	ldr	r3, [pc, #76]	@ (8009840 <xTaskResumeAll+0x134>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097f8:	4b10      	ldr	r3, [pc, #64]	@ (800983c <xTaskResumeAll+0x130>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d009      	beq.n	8009814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009804:	4b0f      	ldr	r3, [pc, #60]	@ (8009844 <xTaskResumeAll+0x138>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009814:	f000 fbda 	bl	8009fcc <vPortExitCritical>

	return xAlreadyYielded;
 8009818:	68bb      	ldr	r3, [r7, #8]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	200004cc 	.word	0x200004cc
 8009828:	200004ac 	.word	0x200004ac
 800982c:	20000484 	.word	0x20000484
 8009830:	200004b4 	.word	0x200004b4
 8009834:	200003f0 	.word	0x200003f0
 8009838:	200003ec 	.word	0x200003ec
 800983c:	200004c0 	.word	0x200004c0
 8009840:	200004bc 	.word	0x200004bc
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800984e:	2300      	movs	r3, #0
 8009850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009852:	4b4f      	ldr	r3, [pc, #316]	@ (8009990 <xTaskIncrementTick+0x148>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 808f 	bne.w	800997a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800985c:	4b4d      	ldr	r3, [pc, #308]	@ (8009994 <xTaskIncrementTick+0x14c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009864:	4a4b      	ldr	r2, [pc, #300]	@ (8009994 <xTaskIncrementTick+0x14c>)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d121      	bne.n	80098b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009870:	4b49      	ldr	r3, [pc, #292]	@ (8009998 <xTaskIncrementTick+0x150>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <xTaskIncrementTick+0x4a>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	603b      	str	r3, [r7, #0]
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	e7fd      	b.n	800988e <xTaskIncrementTick+0x46>
 8009892:	4b41      	ldr	r3, [pc, #260]	@ (8009998 <xTaskIncrementTick+0x150>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	4b40      	ldr	r3, [pc, #256]	@ (800999c <xTaskIncrementTick+0x154>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a3e      	ldr	r2, [pc, #248]	@ (8009998 <xTaskIncrementTick+0x150>)
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	4a3e      	ldr	r2, [pc, #248]	@ (800999c <xTaskIncrementTick+0x154>)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	4b3e      	ldr	r3, [pc, #248]	@ (80099a0 <xTaskIncrementTick+0x158>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3301      	adds	r3, #1
 80098ac:	4a3c      	ldr	r2, [pc, #240]	@ (80099a0 <xTaskIncrementTick+0x158>)
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	f000 fa16 	bl	8009ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098b4:	4b3b      	ldr	r3, [pc, #236]	@ (80099a4 <xTaskIncrementTick+0x15c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d348      	bcc.n	8009950 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098be:	4b36      	ldr	r3, [pc, #216]	@ (8009998 <xTaskIncrementTick+0x150>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c8:	4b36      	ldr	r3, [pc, #216]	@ (80099a4 <xTaskIncrementTick+0x15c>)
 80098ca:	f04f 32ff 	mov.w	r2, #4294967295
 80098ce:	601a      	str	r2, [r3, #0]
					break;
 80098d0:	e03e      	b.n	8009950 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d2:	4b31      	ldr	r3, [pc, #196]	@ (8009998 <xTaskIncrementTick+0x150>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d203      	bcs.n	80098f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098ea:	4a2e      	ldr	r2, [pc, #184]	@ (80099a4 <xTaskIncrementTick+0x15c>)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098f0:	e02e      	b.n	8009950 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	3304      	adds	r3, #4
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fc5b 	bl	80091b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	3318      	adds	r3, #24
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fc52 	bl	80091b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009912:	2201      	movs	r2, #1
 8009914:	409a      	lsls	r2, r3
 8009916:	4b24      	ldr	r3, [pc, #144]	@ (80099a8 <xTaskIncrementTick+0x160>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4313      	orrs	r3, r2
 800991c:	4a22      	ldr	r2, [pc, #136]	@ (80099a8 <xTaskIncrementTick+0x160>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4a1f      	ldr	r2, [pc, #124]	@ (80099ac <xTaskIncrementTick+0x164>)
 800992e:	441a      	add	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f7ff fbde 	bl	80090f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009940:	4b1b      	ldr	r3, [pc, #108]	@ (80099b0 <xTaskIncrementTick+0x168>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	429a      	cmp	r2, r3
 8009948:	d3b9      	bcc.n	80098be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994e:	e7b6      	b.n	80098be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009950:	4b17      	ldr	r3, [pc, #92]	@ (80099b0 <xTaskIncrementTick+0x168>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009956:	4915      	ldr	r1, [pc, #84]	@ (80099ac <xTaskIncrementTick+0x164>)
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d901      	bls.n	800996c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800996c:	4b11      	ldr	r3, [pc, #68]	@ (80099b4 <xTaskIncrementTick+0x16c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d007      	beq.n	8009984 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e004      	b.n	8009984 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800997a:	4b0f      	ldr	r3, [pc, #60]	@ (80099b8 <xTaskIncrementTick+0x170>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	4a0d      	ldr	r2, [pc, #52]	@ (80099b8 <xTaskIncrementTick+0x170>)
 8009982:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009984:	697b      	ldr	r3, [r7, #20]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200004cc 	.word	0x200004cc
 8009994:	200004b0 	.word	0x200004b0
 8009998:	2000047c 	.word	0x2000047c
 800999c:	20000480 	.word	0x20000480
 80099a0:	200004c4 	.word	0x200004c4
 80099a4:	200004c8 	.word	0x200004c8
 80099a8:	200004b4 	.word	0x200004b4
 80099ac:	200003f0 	.word	0x200003f0
 80099b0:	200003ec 	.word	0x200003ec
 80099b4:	200004c0 	.word	0x200004c0
 80099b8:	200004bc 	.word	0x200004bc

080099bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099c2:	4b3a      	ldr	r3, [pc, #232]	@ (8009aac <vTaskSwitchContext+0xf0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099ca:	4b39      	ldr	r3, [pc, #228]	@ (8009ab0 <vTaskSwitchContext+0xf4>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099d0:	e067      	b.n	8009aa2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80099d2:	4b37      	ldr	r3, [pc, #220]	@ (8009ab0 <vTaskSwitchContext+0xf4>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80099d8:	4b36      	ldr	r3, [pc, #216]	@ (8009ab4 <vTaskSwitchContext+0xf8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d111      	bne.n	8009a14 <vTaskSwitchContext+0x58>
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	3304      	adds	r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d10b      	bne.n	8009a14 <vTaskSwitchContext+0x58>
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	3308      	adds	r3, #8
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d105      	bne.n	8009a14 <vTaskSwitchContext+0x58>
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	330c      	adds	r3, #12
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d008      	beq.n	8009a26 <vTaskSwitchContext+0x6a>
 8009a14:	4b27      	ldr	r3, [pc, #156]	@ (8009ab4 <vTaskSwitchContext+0xf8>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4b26      	ldr	r3, [pc, #152]	@ (8009ab4 <vTaskSwitchContext+0xf8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3334      	adds	r3, #52	@ 0x34
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f7f6 fdad 	bl	8000580 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a26:	4b24      	ldr	r3, [pc, #144]	@ (8009ab8 <vTaskSwitchContext+0xfc>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	fab3 f383 	clz	r3, r3
 8009a32:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	f1c3 031f 	rsb	r3, r3, #31
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	491f      	ldr	r1, [pc, #124]	@ (8009abc <vTaskSwitchContext+0x100>)
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10b      	bne.n	8009a68 <vTaskSwitchContext+0xac>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	607b      	str	r3, [r7, #4]
}
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	e7fd      	b.n	8009a64 <vTaskSwitchContext+0xa8>
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4a12      	ldr	r2, [pc, #72]	@ (8009abc <vTaskSwitchContext+0x100>)
 8009a74:	4413      	add	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	605a      	str	r2, [r3, #4]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d104      	bne.n	8009a98 <vTaskSwitchContext+0xdc>
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	605a      	str	r2, [r3, #4]
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	4a05      	ldr	r2, [pc, #20]	@ (8009ab4 <vTaskSwitchContext+0xf8>)
 8009aa0:	6013      	str	r3, [r2, #0]
}
 8009aa2:	bf00      	nop
 8009aa4:	3720      	adds	r7, #32
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200004cc 	.word	0x200004cc
 8009ab0:	200004c0 	.word	0x200004c0
 8009ab4:	200003ec 	.word	0x200003ec
 8009ab8:	200004b4 	.word	0x200004b4
 8009abc:	200003f0 	.word	0x200003f0

08009ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ae8:	4b07      	ldr	r3, [pc, #28]	@ (8009b08 <vTaskPlaceOnEventList+0x48>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3318      	adds	r3, #24
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff fb25 	bl	8009140 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009af6:	2101      	movs	r1, #1
 8009af8:	6838      	ldr	r0, [r7, #0]
 8009afa:	f000 f9b7 	bl	8009e6c <prvAddCurrentTaskToDelayedList>
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200003ec 	.word	0x200003ec

08009b0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	60fb      	str	r3, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	3318      	adds	r3, #24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff fb37 	bl	80091b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b44:	4b1d      	ldr	r3, [pc, #116]	@ (8009bbc <xTaskRemoveFromEventList+0xb0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11c      	bne.n	8009b86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fb2e 	bl	80091b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	409a      	lsls	r2, r3
 8009b5e:	4b18      	ldr	r3, [pc, #96]	@ (8009bc0 <xTaskRemoveFromEventList+0xb4>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	4a16      	ldr	r2, [pc, #88]	@ (8009bc0 <xTaskRemoveFromEventList+0xb4>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a13      	ldr	r2, [pc, #76]	@ (8009bc4 <xTaskRemoveFromEventList+0xb8>)
 8009b76:	441a      	add	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7ff faba 	bl	80090f8 <vListInsertEnd>
 8009b84:	e005      	b.n	8009b92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3318      	adds	r3, #24
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	480e      	ldr	r0, [pc, #56]	@ (8009bc8 <xTaskRemoveFromEventList+0xbc>)
 8009b8e:	f7ff fab3 	bl	80090f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b96:	4b0d      	ldr	r3, [pc, #52]	@ (8009bcc <xTaskRemoveFromEventList+0xc0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d905      	bls.n	8009bac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd0 <xTaskRemoveFromEventList+0xc4>)
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	e001      	b.n	8009bb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bb0:	697b      	ldr	r3, [r7, #20]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200004cc 	.word	0x200004cc
 8009bc0:	200004b4 	.word	0x200004b4
 8009bc4:	200003f0 	.word	0x200003f0
 8009bc8:	20000484 	.word	0x20000484
 8009bcc:	200003ec 	.word	0x200003ec
 8009bd0:	200004c0 	.word	0x200004c0

08009bd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bdc:	4b06      	ldr	r3, [pc, #24]	@ (8009bf8 <vTaskInternalSetTimeOutState+0x24>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009be4:	4b05      	ldr	r3, [pc, #20]	@ (8009bfc <vTaskInternalSetTimeOutState+0x28>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	605a      	str	r2, [r3, #4]
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	200004c4 	.word	0x200004c4
 8009bfc:	200004b0 	.word	0x200004b0

08009c00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	613b      	str	r3, [r7, #16]
}
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60fb      	str	r3, [r7, #12]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c46:	f000 f98f 	bl	8009f68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc0 <xTaskCheckForTimeOut+0xc0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d102      	bne.n	8009c6a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61fb      	str	r3, [r7, #28]
 8009c68:	e023      	b.n	8009cb2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b15      	ldr	r3, [pc, #84]	@ (8009cc4 <xTaskCheckForTimeOut+0xc4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d007      	beq.n	8009c86 <xTaskCheckForTimeOut+0x86>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d302      	bcc.n	8009c86 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	61fb      	str	r3, [r7, #28]
 8009c84:	e015      	b.n	8009cb2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d20b      	bcs.n	8009ca8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	1ad2      	subs	r2, r2, r3
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff ff99 	bl	8009bd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
 8009ca6:	e004      	b.n	8009cb2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cb2:	f000 f98b 	bl	8009fcc <vPortExitCritical>

	return xReturn;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3720      	adds	r7, #32
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	200004b0 	.word	0x200004b0
 8009cc4:	200004c4 	.word	0x200004c4

08009cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ccc:	4b03      	ldr	r3, [pc, #12]	@ (8009cdc <vTaskMissedYield+0x14>)
 8009cce:	2201      	movs	r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]
}
 8009cd2:	bf00      	nop
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	200004c0 	.word	0x200004c0

08009ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8009d18 <prvResetNextTaskUnblockTime+0x38>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009d1c <prvResetNextTaskUnblockTime+0x3c>)
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cf8:	e008      	b.n	8009d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfa:	4b07      	ldr	r3, [pc, #28]	@ (8009d18 <prvResetNextTaskUnblockTime+0x38>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	4a04      	ldr	r2, [pc, #16]	@ (8009d1c <prvResetNextTaskUnblockTime+0x3c>)
 8009d0a:	6013      	str	r3, [r2, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	2000047c 	.word	0x2000047c
 8009d1c:	200004c8 	.word	0x200004c8

08009d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d26:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <xTaskGetSchedulerState+0x34>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	607b      	str	r3, [r7, #4]
 8009d32:	e008      	b.n	8009d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d34:	4b08      	ldr	r3, [pc, #32]	@ (8009d58 <xTaskGetSchedulerState+0x38>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	e001      	b.n	8009d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d42:	2300      	movs	r3, #0
 8009d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d46:	687b      	ldr	r3, [r7, #4]
	}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	200004b8 	.word	0x200004b8
 8009d58:	200004cc 	.word	0x200004cc

08009d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d070      	beq.n	8009e54 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d72:	4b3b      	ldr	r3, [pc, #236]	@ (8009e60 <xTaskPriorityDisinherit+0x104>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d00b      	beq.n	8009d94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	60fb      	str	r3, [r7, #12]
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	e7fd      	b.n	8009d90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10b      	bne.n	8009db4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60bb      	str	r3, [r7, #8]
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	e7fd      	b.n	8009db0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db8:	1e5a      	subs	r2, r3, #1
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d044      	beq.n	8009e54 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d140      	bne.n	8009e54 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff f9eb 	bl	80091b2 <uxListRemove>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d115      	bne.n	8009e0e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de6:	491f      	ldr	r1, [pc, #124]	@ (8009e64 <xTaskPriorityDisinherit+0x108>)
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <xTaskPriorityDisinherit+0xb2>
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009e02:	43da      	mvns	r2, r3
 8009e04:	4b18      	ldr	r3, [pc, #96]	@ (8009e68 <xTaskPriorityDisinherit+0x10c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	4a17      	ldr	r2, [pc, #92]	@ (8009e68 <xTaskPriorityDisinherit+0x10c>)
 8009e0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	f1c3 0207 	rsb	r2, r3, #7
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e26:	2201      	movs	r2, #1
 8009e28:	409a      	lsls	r2, r3
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <xTaskPriorityDisinherit+0x10c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	4a0d      	ldr	r2, [pc, #52]	@ (8009e68 <xTaskPriorityDisinherit+0x10c>)
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4a08      	ldr	r2, [pc, #32]	@ (8009e64 <xTaskPriorityDisinherit+0x108>)
 8009e42:	441a      	add	r2, r3
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7ff f954 	bl	80090f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e50:	2301      	movs	r3, #1
 8009e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e54:	697b      	ldr	r3, [r7, #20]
	}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	200003ec 	.word	0x200003ec
 8009e64:	200003f0 	.word	0x200003f0
 8009e68:	200004b4 	.word	0x200004b4

08009e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e76:	4b29      	ldr	r3, [pc, #164]	@ (8009f1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e7c:	4b28      	ldr	r3, [pc, #160]	@ (8009f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff f995 	bl	80091b2 <uxListRemove>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e8e:	4b24      	ldr	r3, [pc, #144]	@ (8009f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	2201      	movs	r2, #1
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	43da      	mvns	r2, r3
 8009e9c:	4b21      	ldr	r3, [pc, #132]	@ (8009f24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	4a20      	ldr	r2, [pc, #128]	@ (8009f24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ea4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d10a      	bne.n	8009ec4 <prvAddCurrentTaskToDelayedList+0x58>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d007      	beq.n	8009ec4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	481a      	ldr	r0, [pc, #104]	@ (8009f28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ebe:	f7ff f91b 	bl	80090f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ec2:	e026      	b.n	8009f12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4413      	add	r3, r2
 8009eca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ecc:	4b14      	ldr	r3, [pc, #80]	@ (8009f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d209      	bcs.n	8009ef0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009edc:	4b13      	ldr	r3, [pc, #76]	@ (8009f2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4610      	mov	r0, r2
 8009eea:	f7ff f929 	bl	8009140 <vListInsert>
}
 8009eee:	e010      	b.n	8009f12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7ff f91f 	bl	8009140 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f02:	4b0c      	ldr	r3, [pc, #48]	@ (8009f34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d202      	bcs.n	8009f12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f0c:	4a09      	ldr	r2, [pc, #36]	@ (8009f34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	6013      	str	r3, [r2, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200004b0 	.word	0x200004b0
 8009f20:	200003ec 	.word	0x200003ec
 8009f24:	200004b4 	.word	0x200004b4
 8009f28:	20000498 	.word	0x20000498
 8009f2c:	20000480 	.word	0x20000480
 8009f30:	2000047c 	.word	0x2000047c
 8009f34:	200004c8 	.word	0x200004c8
	...

08009f40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f40:	4b07      	ldr	r3, [pc, #28]	@ (8009f60 <pxCurrentTCBConst2>)
 8009f42:	6819      	ldr	r1, [r3, #0]
 8009f44:	6808      	ldr	r0, [r1, #0]
 8009f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4a:	f380 8809 	msr	PSP, r0
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f04f 0000 	mov.w	r0, #0
 8009f56:	f380 8811 	msr	BASEPRI, r0
 8009f5a:	4770      	bx	lr
 8009f5c:	f3af 8000 	nop.w

08009f60 <pxCurrentTCBConst2>:
 8009f60:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop

08009f68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
}
 8009f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f82:	4b10      	ldr	r3, [pc, #64]	@ (8009fc4 <vPortEnterCritical+0x5c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3301      	adds	r3, #1
 8009f88:	4a0e      	ldr	r2, [pc, #56]	@ (8009fc4 <vPortEnterCritical+0x5c>)
 8009f8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc4 <vPortEnterCritical+0x5c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d110      	bne.n	8009fb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f94:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc8 <vPortEnterCritical+0x60>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	603b      	str	r3, [r7, #0]
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	e7fd      	b.n	8009fb2 <vPortEnterCritical+0x4a>
	}
}
 8009fb6:	bf00      	nop
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	2000000c 	.word	0x2000000c
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fd2:	4b12      	ldr	r3, [pc, #72]	@ (800a01c <vPortExitCritical+0x50>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10b      	bne.n	8009ff2 <vPortExitCritical+0x26>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	607b      	str	r3, [r7, #4]
}
 8009fec:	bf00      	nop
 8009fee:	bf00      	nop
 8009ff0:	e7fd      	b.n	8009fee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800a01c <vPortExitCritical+0x50>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	4a08      	ldr	r2, [pc, #32]	@ (800a01c <vPortExitCritical+0x50>)
 8009ffa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ffc:	4b07      	ldr	r3, [pc, #28]	@ (800a01c <vPortExitCritical+0x50>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d105      	bne.n	800a010 <vPortExitCritical+0x44>
 800a004:	2300      	movs	r3, #0
 800a006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f383 8811 	msr	BASEPRI, r3
}
 800a00e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	2000000c 	.word	0x2000000c

0800a020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a020:	f3ef 8009 	mrs	r0, PSP
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	4b15      	ldr	r3, [pc, #84]	@ (800a080 <pxCurrentTCBConst>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	f01e 0f10 	tst.w	lr, #16
 800a030:	bf08      	it	eq
 800a032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03a:	6010      	str	r0, [r2, #0]
 800a03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a044:	f380 8811 	msr	BASEPRI, r0
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f7ff fcb4 	bl	80099bc <vTaskSwitchContext>
 800a054:	f04f 0000 	mov.w	r0, #0
 800a058:	f380 8811 	msr	BASEPRI, r0
 800a05c:	bc09      	pop	{r0, r3}
 800a05e:	6819      	ldr	r1, [r3, #0]
 800a060:	6808      	ldr	r0, [r1, #0]
 800a062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a066:	f01e 0f10 	tst.w	lr, #16
 800a06a:	bf08      	it	eq
 800a06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a070:	f380 8809 	msr	PSP, r0
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w

0800a080 <pxCurrentTCBConst>:
 800a080:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop

0800a088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	607b      	str	r3, [r7, #4]
}
 800a0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0a2:	f7ff fbd1 	bl	8009848 <xTaskIncrementTick>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0ac:	4b06      	ldr	r3, [pc, #24]	@ (800a0c8 <SysTick_Handler+0x40>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f383 8811 	msr	BASEPRI, r3
}
 800a0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0d2:	f3ef 8305 	mrs	r3, IPSR
 800a0d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d915      	bls.n	800a10a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0de:	4a18      	ldr	r2, [pc, #96]	@ (800a140 <vPortValidateInterruptPriority+0x74>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0e8:	4b16      	ldr	r3, [pc, #88]	@ (800a144 <vPortValidateInterruptPriority+0x78>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	7afa      	ldrb	r2, [r7, #11]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d20b      	bcs.n	800a10a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	607b      	str	r3, [r7, #4]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a10a:	4b0f      	ldr	r3, [pc, #60]	@ (800a148 <vPortValidateInterruptPriority+0x7c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a112:	4b0e      	ldr	r3, [pc, #56]	@ (800a14c <vPortValidateInterruptPriority+0x80>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d90b      	bls.n	800a132 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	603b      	str	r3, [r7, #0]
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	e7fd      	b.n	800a12e <vPortValidateInterruptPriority+0x62>
	}
 800a132:	bf00      	nop
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	e000e3f0 	.word	0xe000e3f0
 800a144:	200004d0 	.word	0x200004d0
 800a148:	e000ed0c 	.word	0xe000ed0c
 800a14c:	200004d4 	.word	0x200004d4

0800a150 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fe9c 	bl	8008e9c <USBH_LL_IncTimer>
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fee0 	bl	8008f40 <USBH_LL_Connect>
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fef5 	bl	8008f86 <USBH_LL_Disconnect>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe ff15 	bl	8008fea <USBH_LL_NotifyURBChange>
#endif
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe fe8a 	bl	8008ef0 <USBH_LL_PortEnabled>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fe96 	bl	8008f24 <USBH_LL_PortDisabled>
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a216:	4618      	mov	r0, r3
 800a218:	f7f8 fd59 	bl	8002cce <HAL_HCD_Stop>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f808 	bl	800a238 <USBH_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d817      	bhi.n	800a27c <USBH_Get_USB_Status+0x44>
 800a24c:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <USBH_Get_USB_Status+0x1c>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a265 	.word	0x0800a265
 800a258:	0800a26b 	.word	0x0800a26b
 800a25c:	0800a271 	.word	0x0800a271
 800a260:	0800a277 	.word	0x0800a277
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
    break;
 800a268:	e00b      	b.n	800a282 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a26a:	2302      	movs	r3, #2
 800a26c:	73fb      	strb	r3, [r7, #15]
    break;
 800a26e:	e008      	b.n	800a282 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a270:	2301      	movs	r3, #1
 800a272:	73fb      	strb	r3, [r7, #15]
    break;
 800a274:	e005      	b.n	800a282 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a276:	2302      	movs	r3, #2
 800a278:	73fb      	strb	r3, [r7, #15]
    break;
 800a27a:	e002      	b.n	800a282 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a27c:	2302      	movs	r3, #2
 800a27e:	73fb      	strb	r3, [r7, #15]
    break;
 800a280:	bf00      	nop
  }
  return usb_status;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <sbrk_aligned>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	4e0f      	ldr	r6, [pc, #60]	@ (800a2d0 <sbrk_aligned+0x40>)
 800a294:	460c      	mov	r4, r1
 800a296:	6831      	ldr	r1, [r6, #0]
 800a298:	4605      	mov	r5, r0
 800a29a:	b911      	cbnz	r1, 800a2a2 <sbrk_aligned+0x12>
 800a29c:	f000 faec 	bl	800a878 <_sbrk_r>
 800a2a0:	6030      	str	r0, [r6, #0]
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f000 fae7 	bl	800a878 <_sbrk_r>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d103      	bne.n	800a2b6 <sbrk_aligned+0x26>
 800a2ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
 800a2b6:	1cc4      	adds	r4, r0, #3
 800a2b8:	f024 0403 	bic.w	r4, r4, #3
 800a2bc:	42a0      	cmp	r0, r4
 800a2be:	d0f8      	beq.n	800a2b2 <sbrk_aligned+0x22>
 800a2c0:	1a21      	subs	r1, r4, r0
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 fad8 	bl	800a878 <_sbrk_r>
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d1f2      	bne.n	800a2b2 <sbrk_aligned+0x22>
 800a2cc:	e7ef      	b.n	800a2ae <sbrk_aligned+0x1e>
 800a2ce:	bf00      	nop
 800a2d0:	200008b8 	.word	0x200008b8

0800a2d4 <_malloc_r>:
 800a2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d8:	1ccd      	adds	r5, r1, #3
 800a2da:	f025 0503 	bic.w	r5, r5, #3
 800a2de:	3508      	adds	r5, #8
 800a2e0:	2d0c      	cmp	r5, #12
 800a2e2:	bf38      	it	cc
 800a2e4:	250c      	movcc	r5, #12
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	db01      	blt.n	800a2f0 <_malloc_r+0x1c>
 800a2ec:	42a9      	cmp	r1, r5
 800a2ee:	d904      	bls.n	800a2fa <_malloc_r+0x26>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	6033      	str	r3, [r6, #0]
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3d0 <_malloc_r+0xfc>
 800a2fe:	f000 f869 	bl	800a3d4 <__malloc_lock>
 800a302:	f8d8 3000 	ldr.w	r3, [r8]
 800a306:	461c      	mov	r4, r3
 800a308:	bb44      	cbnz	r4, 800a35c <_malloc_r+0x88>
 800a30a:	4629      	mov	r1, r5
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7ff ffbf 	bl	800a290 <sbrk_aligned>
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	4604      	mov	r4, r0
 800a316:	d158      	bne.n	800a3ca <_malloc_r+0xf6>
 800a318:	f8d8 4000 	ldr.w	r4, [r8]
 800a31c:	4627      	mov	r7, r4
 800a31e:	2f00      	cmp	r7, #0
 800a320:	d143      	bne.n	800a3aa <_malloc_r+0xd6>
 800a322:	2c00      	cmp	r4, #0
 800a324:	d04b      	beq.n	800a3be <_malloc_r+0xea>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	4639      	mov	r1, r7
 800a32a:	4630      	mov	r0, r6
 800a32c:	eb04 0903 	add.w	r9, r4, r3
 800a330:	f000 faa2 	bl	800a878 <_sbrk_r>
 800a334:	4581      	cmp	r9, r0
 800a336:	d142      	bne.n	800a3be <_malloc_r+0xea>
 800a338:	6821      	ldr	r1, [r4, #0]
 800a33a:	1a6d      	subs	r5, r5, r1
 800a33c:	4629      	mov	r1, r5
 800a33e:	4630      	mov	r0, r6
 800a340:	f7ff ffa6 	bl	800a290 <sbrk_aligned>
 800a344:	3001      	adds	r0, #1
 800a346:	d03a      	beq.n	800a3be <_malloc_r+0xea>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	442b      	add	r3, r5
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	f8d8 3000 	ldr.w	r3, [r8]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	bb62      	cbnz	r2, 800a3b0 <_malloc_r+0xdc>
 800a356:	f8c8 7000 	str.w	r7, [r8]
 800a35a:	e00f      	b.n	800a37c <_malloc_r+0xa8>
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	1b52      	subs	r2, r2, r5
 800a360:	d420      	bmi.n	800a3a4 <_malloc_r+0xd0>
 800a362:	2a0b      	cmp	r2, #11
 800a364:	d917      	bls.n	800a396 <_malloc_r+0xc2>
 800a366:	1961      	adds	r1, r4, r5
 800a368:	42a3      	cmp	r3, r4
 800a36a:	6025      	str	r5, [r4, #0]
 800a36c:	bf18      	it	ne
 800a36e:	6059      	strne	r1, [r3, #4]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	bf08      	it	eq
 800a374:	f8c8 1000 	streq.w	r1, [r8]
 800a378:	5162      	str	r2, [r4, r5]
 800a37a:	604b      	str	r3, [r1, #4]
 800a37c:	4630      	mov	r0, r6
 800a37e:	f000 f82f 	bl	800a3e0 <__malloc_unlock>
 800a382:	f104 000b 	add.w	r0, r4, #11
 800a386:	1d23      	adds	r3, r4, #4
 800a388:	f020 0007 	bic.w	r0, r0, #7
 800a38c:	1ac2      	subs	r2, r0, r3
 800a38e:	bf1c      	itt	ne
 800a390:	1a1b      	subne	r3, r3, r0
 800a392:	50a3      	strne	r3, [r4, r2]
 800a394:	e7af      	b.n	800a2f6 <_malloc_r+0x22>
 800a396:	6862      	ldr	r2, [r4, #4]
 800a398:	42a3      	cmp	r3, r4
 800a39a:	bf0c      	ite	eq
 800a39c:	f8c8 2000 	streq.w	r2, [r8]
 800a3a0:	605a      	strne	r2, [r3, #4]
 800a3a2:	e7eb      	b.n	800a37c <_malloc_r+0xa8>
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	6864      	ldr	r4, [r4, #4]
 800a3a8:	e7ae      	b.n	800a308 <_malloc_r+0x34>
 800a3aa:	463c      	mov	r4, r7
 800a3ac:	687f      	ldr	r7, [r7, #4]
 800a3ae:	e7b6      	b.n	800a31e <_malloc_r+0x4a>
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	d1fb      	bne.n	800a3b0 <_malloc_r+0xdc>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	6053      	str	r3, [r2, #4]
 800a3bc:	e7de      	b.n	800a37c <_malloc_r+0xa8>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	6033      	str	r3, [r6, #0]
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 f80c 	bl	800a3e0 <__malloc_unlock>
 800a3c8:	e794      	b.n	800a2f4 <_malloc_r+0x20>
 800a3ca:	6005      	str	r5, [r0, #0]
 800a3cc:	e7d6      	b.n	800a37c <_malloc_r+0xa8>
 800a3ce:	bf00      	nop
 800a3d0:	200008bc 	.word	0x200008bc

0800a3d4 <__malloc_lock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	@ (800a3dc <__malloc_lock+0x8>)
 800a3d6:	f000 ba9c 	b.w	800a912 <__retarget_lock_acquire_recursive>
 800a3da:	bf00      	nop
 800a3dc:	20000a00 	.word	0x20000a00

0800a3e0 <__malloc_unlock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <__malloc_unlock+0x8>)
 800a3e2:	f000 ba97 	b.w	800a914 <__retarget_lock_release_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20000a00 	.word	0x20000a00

0800a3ec <std>:
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	b510      	push	{r4, lr}
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3fa:	6083      	str	r3, [r0, #8]
 800a3fc:	8181      	strh	r1, [r0, #12]
 800a3fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800a400:	81c2      	strh	r2, [r0, #14]
 800a402:	6183      	str	r3, [r0, #24]
 800a404:	4619      	mov	r1, r3
 800a406:	2208      	movs	r2, #8
 800a408:	305c      	adds	r0, #92	@ 0x5c
 800a40a:	f000 f9f9 	bl	800a800 <memset>
 800a40e:	4b0d      	ldr	r3, [pc, #52]	@ (800a444 <std+0x58>)
 800a410:	6263      	str	r3, [r4, #36]	@ 0x24
 800a412:	4b0d      	ldr	r3, [pc, #52]	@ (800a448 <std+0x5c>)
 800a414:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a416:	4b0d      	ldr	r3, [pc, #52]	@ (800a44c <std+0x60>)
 800a418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a41a:	4b0d      	ldr	r3, [pc, #52]	@ (800a450 <std+0x64>)
 800a41c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a41e:	4b0d      	ldr	r3, [pc, #52]	@ (800a454 <std+0x68>)
 800a420:	6224      	str	r4, [r4, #32]
 800a422:	429c      	cmp	r4, r3
 800a424:	d006      	beq.n	800a434 <std+0x48>
 800a426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a42a:	4294      	cmp	r4, r2
 800a42c:	d002      	beq.n	800a434 <std+0x48>
 800a42e:	33d0      	adds	r3, #208	@ 0xd0
 800a430:	429c      	cmp	r4, r3
 800a432:	d105      	bne.n	800a440 <std+0x54>
 800a434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43c:	f000 ba68 	b.w	800a910 <__retarget_lock_init_recursive>
 800a440:	bd10      	pop	{r4, pc}
 800a442:	bf00      	nop
 800a444:	0800a651 	.word	0x0800a651
 800a448:	0800a673 	.word	0x0800a673
 800a44c:	0800a6ab 	.word	0x0800a6ab
 800a450:	0800a6cf 	.word	0x0800a6cf
 800a454:	200008c0 	.word	0x200008c0

0800a458 <stdio_exit_handler>:
 800a458:	4a02      	ldr	r2, [pc, #8]	@ (800a464 <stdio_exit_handler+0xc>)
 800a45a:	4903      	ldr	r1, [pc, #12]	@ (800a468 <stdio_exit_handler+0x10>)
 800a45c:	4803      	ldr	r0, [pc, #12]	@ (800a46c <stdio_exit_handler+0x14>)
 800a45e:	f000 b869 	b.w	800a534 <_fwalk_sglue>
 800a462:	bf00      	nop
 800a464:	20000010 	.word	0x20000010
 800a468:	0800b071 	.word	0x0800b071
 800a46c:	20000020 	.word	0x20000020

0800a470 <cleanup_stdio>:
 800a470:	6841      	ldr	r1, [r0, #4]
 800a472:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a4 <cleanup_stdio+0x34>)
 800a474:	4299      	cmp	r1, r3
 800a476:	b510      	push	{r4, lr}
 800a478:	4604      	mov	r4, r0
 800a47a:	d001      	beq.n	800a480 <cleanup_stdio+0x10>
 800a47c:	f000 fdf8 	bl	800b070 <_fflush_r>
 800a480:	68a1      	ldr	r1, [r4, #8]
 800a482:	4b09      	ldr	r3, [pc, #36]	@ (800a4a8 <cleanup_stdio+0x38>)
 800a484:	4299      	cmp	r1, r3
 800a486:	d002      	beq.n	800a48e <cleanup_stdio+0x1e>
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fdf1 	bl	800b070 <_fflush_r>
 800a48e:	68e1      	ldr	r1, [r4, #12]
 800a490:	4b06      	ldr	r3, [pc, #24]	@ (800a4ac <cleanup_stdio+0x3c>)
 800a492:	4299      	cmp	r1, r3
 800a494:	d004      	beq.n	800a4a0 <cleanup_stdio+0x30>
 800a496:	4620      	mov	r0, r4
 800a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a49c:	f000 bde8 	b.w	800b070 <_fflush_r>
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200008c0 	.word	0x200008c0
 800a4a8:	20000928 	.word	0x20000928
 800a4ac:	20000990 	.word	0x20000990

0800a4b0 <global_stdio_init.part.0>:
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e0 <global_stdio_init.part.0+0x30>)
 800a4b4:	4c0b      	ldr	r4, [pc, #44]	@ (800a4e4 <global_stdio_init.part.0+0x34>)
 800a4b6:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e8 <global_stdio_init.part.0+0x38>)
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2104      	movs	r1, #4
 800a4c0:	f7ff ff94 	bl	800a3ec <std>
 800a4c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	2109      	movs	r1, #9
 800a4cc:	f7ff ff8e 	bl	800a3ec <std>
 800a4d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4da:	2112      	movs	r1, #18
 800a4dc:	f7ff bf86 	b.w	800a3ec <std>
 800a4e0:	200009f8 	.word	0x200009f8
 800a4e4:	200008c0 	.word	0x200008c0
 800a4e8:	0800a459 	.word	0x0800a459

0800a4ec <__sfp_lock_acquire>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	@ (800a4f4 <__sfp_lock_acquire+0x8>)
 800a4ee:	f000 ba10 	b.w	800a912 <__retarget_lock_acquire_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20000a01 	.word	0x20000a01

0800a4f8 <__sfp_lock_release>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	@ (800a500 <__sfp_lock_release+0x8>)
 800a4fa:	f000 ba0b 	b.w	800a914 <__retarget_lock_release_recursive>
 800a4fe:	bf00      	nop
 800a500:	20000a01 	.word	0x20000a01

0800a504 <__sinit>:
 800a504:	b510      	push	{r4, lr}
 800a506:	4604      	mov	r4, r0
 800a508:	f7ff fff0 	bl	800a4ec <__sfp_lock_acquire>
 800a50c:	6a23      	ldr	r3, [r4, #32]
 800a50e:	b11b      	cbz	r3, 800a518 <__sinit+0x14>
 800a510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a514:	f7ff bff0 	b.w	800a4f8 <__sfp_lock_release>
 800a518:	4b04      	ldr	r3, [pc, #16]	@ (800a52c <__sinit+0x28>)
 800a51a:	6223      	str	r3, [r4, #32]
 800a51c:	4b04      	ldr	r3, [pc, #16]	@ (800a530 <__sinit+0x2c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1f5      	bne.n	800a510 <__sinit+0xc>
 800a524:	f7ff ffc4 	bl	800a4b0 <global_stdio_init.part.0>
 800a528:	e7f2      	b.n	800a510 <__sinit+0xc>
 800a52a:	bf00      	nop
 800a52c:	0800a471 	.word	0x0800a471
 800a530:	200009f8 	.word	0x200009f8

0800a534 <_fwalk_sglue>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	4607      	mov	r7, r0
 800a53a:	4688      	mov	r8, r1
 800a53c:	4614      	mov	r4, r2
 800a53e:	2600      	movs	r6, #0
 800a540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a544:	f1b9 0901 	subs.w	r9, r9, #1
 800a548:	d505      	bpl.n	800a556 <_fwalk_sglue+0x22>
 800a54a:	6824      	ldr	r4, [r4, #0]
 800a54c:	2c00      	cmp	r4, #0
 800a54e:	d1f7      	bne.n	800a540 <_fwalk_sglue+0xc>
 800a550:	4630      	mov	r0, r6
 800a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a556:	89ab      	ldrh	r3, [r5, #12]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d907      	bls.n	800a56c <_fwalk_sglue+0x38>
 800a55c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a560:	3301      	adds	r3, #1
 800a562:	d003      	beq.n	800a56c <_fwalk_sglue+0x38>
 800a564:	4629      	mov	r1, r5
 800a566:	4638      	mov	r0, r7
 800a568:	47c0      	blx	r8
 800a56a:	4306      	orrs	r6, r0
 800a56c:	3568      	adds	r5, #104	@ 0x68
 800a56e:	e7e9      	b.n	800a544 <_fwalk_sglue+0x10>

0800a570 <iprintf>:
 800a570:	b40f      	push	{r0, r1, r2, r3}
 800a572:	b507      	push	{r0, r1, r2, lr}
 800a574:	4906      	ldr	r1, [pc, #24]	@ (800a590 <iprintf+0x20>)
 800a576:	ab04      	add	r3, sp, #16
 800a578:	6808      	ldr	r0, [r1, #0]
 800a57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a57e:	6881      	ldr	r1, [r0, #8]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	f000 fa4b 	bl	800aa1c <_vfiprintf_r>
 800a586:	b003      	add	sp, #12
 800a588:	f85d eb04 	ldr.w	lr, [sp], #4
 800a58c:	b004      	add	sp, #16
 800a58e:	4770      	bx	lr
 800a590:	2000001c 	.word	0x2000001c

0800a594 <_puts_r>:
 800a594:	6a03      	ldr	r3, [r0, #32]
 800a596:	b570      	push	{r4, r5, r6, lr}
 800a598:	6884      	ldr	r4, [r0, #8]
 800a59a:	4605      	mov	r5, r0
 800a59c:	460e      	mov	r6, r1
 800a59e:	b90b      	cbnz	r3, 800a5a4 <_puts_r+0x10>
 800a5a0:	f7ff ffb0 	bl	800a504 <__sinit>
 800a5a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5a6:	07db      	lsls	r3, r3, #31
 800a5a8:	d405      	bmi.n	800a5b6 <_puts_r+0x22>
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	0598      	lsls	r0, r3, #22
 800a5ae:	d402      	bmi.n	800a5b6 <_puts_r+0x22>
 800a5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5b2:	f000 f9ae 	bl	800a912 <__retarget_lock_acquire_recursive>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	0719      	lsls	r1, r3, #28
 800a5ba:	d502      	bpl.n	800a5c2 <_puts_r+0x2e>
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d135      	bne.n	800a62e <_puts_r+0x9a>
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f000 f8c5 	bl	800a754 <__swsetup_r>
 800a5ca:	b380      	cbz	r0, 800a62e <_puts_r+0x9a>
 800a5cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a5d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5d2:	07da      	lsls	r2, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_puts_r+0x4e>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	059b      	lsls	r3, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_puts_r+0x4e>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5de:	f000 f999 	bl	800a914 <__retarget_lock_release_recursive>
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da04      	bge.n	800a5f4 <_puts_r+0x60>
 800a5ea:	69a2      	ldr	r2, [r4, #24]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	dc17      	bgt.n	800a620 <_puts_r+0x8c>
 800a5f0:	290a      	cmp	r1, #10
 800a5f2:	d015      	beq.n	800a620 <_puts_r+0x8c>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	6022      	str	r2, [r4, #0]
 800a5fa:	7019      	strb	r1, [r3, #0]
 800a5fc:	68a3      	ldr	r3, [r4, #8]
 800a5fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a602:	3b01      	subs	r3, #1
 800a604:	60a3      	str	r3, [r4, #8]
 800a606:	2900      	cmp	r1, #0
 800a608:	d1ed      	bne.n	800a5e6 <_puts_r+0x52>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	da11      	bge.n	800a632 <_puts_r+0x9e>
 800a60e:	4622      	mov	r2, r4
 800a610:	210a      	movs	r1, #10
 800a612:	4628      	mov	r0, r5
 800a614:	f000 f85f 	bl	800a6d6 <__swbuf_r>
 800a618:	3001      	adds	r0, #1
 800a61a:	d0d7      	beq.n	800a5cc <_puts_r+0x38>
 800a61c:	250a      	movs	r5, #10
 800a61e:	e7d7      	b.n	800a5d0 <_puts_r+0x3c>
 800a620:	4622      	mov	r2, r4
 800a622:	4628      	mov	r0, r5
 800a624:	f000 f857 	bl	800a6d6 <__swbuf_r>
 800a628:	3001      	adds	r0, #1
 800a62a:	d1e7      	bne.n	800a5fc <_puts_r+0x68>
 800a62c:	e7ce      	b.n	800a5cc <_puts_r+0x38>
 800a62e:	3e01      	subs	r6, #1
 800a630:	e7e4      	b.n	800a5fc <_puts_r+0x68>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	6022      	str	r2, [r4, #0]
 800a638:	220a      	movs	r2, #10
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	e7ee      	b.n	800a61c <_puts_r+0x88>
	...

0800a640 <puts>:
 800a640:	4b02      	ldr	r3, [pc, #8]	@ (800a64c <puts+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f7ff bfa5 	b.w	800a594 <_puts_r>
 800a64a:	bf00      	nop
 800a64c:	2000001c 	.word	0x2000001c

0800a650 <__sread>:
 800a650:	b510      	push	{r4, lr}
 800a652:	460c      	mov	r4, r1
 800a654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a658:	f000 f8fc 	bl	800a854 <_read_r>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	bfab      	itete	ge
 800a660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a662:	89a3      	ldrhlt	r3, [r4, #12]
 800a664:	181b      	addge	r3, r3, r0
 800a666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a66a:	bfac      	ite	ge
 800a66c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a66e:	81a3      	strhlt	r3, [r4, #12]
 800a670:	bd10      	pop	{r4, pc}

0800a672 <__swrite>:
 800a672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a676:	461f      	mov	r7, r3
 800a678:	898b      	ldrh	r3, [r1, #12]
 800a67a:	05db      	lsls	r3, r3, #23
 800a67c:	4605      	mov	r5, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	4616      	mov	r6, r2
 800a682:	d505      	bpl.n	800a690 <__swrite+0x1e>
 800a684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a688:	2302      	movs	r3, #2
 800a68a:	2200      	movs	r2, #0
 800a68c:	f000 f8d0 	bl	800a830 <_lseek_r>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	4632      	mov	r2, r6
 800a69e:	463b      	mov	r3, r7
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a6:	f000 b8f7 	b.w	800a898 <_write_r>

0800a6aa <__sseek>:
 800a6aa:	b510      	push	{r4, lr}
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b2:	f000 f8bd 	bl	800a830 <_lseek_r>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	bf15      	itete	ne
 800a6bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6c6:	81a3      	strheq	r3, [r4, #12]
 800a6c8:	bf18      	it	ne
 800a6ca:	81a3      	strhne	r3, [r4, #12]
 800a6cc:	bd10      	pop	{r4, pc}

0800a6ce <__sclose>:
 800a6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d2:	f000 b89d 	b.w	800a810 <_close_r>

0800a6d6 <__swbuf_r>:
 800a6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d8:	460e      	mov	r6, r1
 800a6da:	4614      	mov	r4, r2
 800a6dc:	4605      	mov	r5, r0
 800a6de:	b118      	cbz	r0, 800a6e8 <__swbuf_r+0x12>
 800a6e0:	6a03      	ldr	r3, [r0, #32]
 800a6e2:	b90b      	cbnz	r3, 800a6e8 <__swbuf_r+0x12>
 800a6e4:	f7ff ff0e 	bl	800a504 <__sinit>
 800a6e8:	69a3      	ldr	r3, [r4, #24]
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	071a      	lsls	r2, r3, #28
 800a6f0:	d501      	bpl.n	800a6f6 <__swbuf_r+0x20>
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	b943      	cbnz	r3, 800a708 <__swbuf_r+0x32>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 f82b 	bl	800a754 <__swsetup_r>
 800a6fe:	b118      	cbz	r0, 800a708 <__swbuf_r+0x32>
 800a700:	f04f 37ff 	mov.w	r7, #4294967295
 800a704:	4638      	mov	r0, r7
 800a706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	6922      	ldr	r2, [r4, #16]
 800a70c:	1a98      	subs	r0, r3, r2
 800a70e:	6963      	ldr	r3, [r4, #20]
 800a710:	b2f6      	uxtb	r6, r6
 800a712:	4283      	cmp	r3, r0
 800a714:	4637      	mov	r7, r6
 800a716:	dc05      	bgt.n	800a724 <__swbuf_r+0x4e>
 800a718:	4621      	mov	r1, r4
 800a71a:	4628      	mov	r0, r5
 800a71c:	f000 fca8 	bl	800b070 <_fflush_r>
 800a720:	2800      	cmp	r0, #0
 800a722:	d1ed      	bne.n	800a700 <__swbuf_r+0x2a>
 800a724:	68a3      	ldr	r3, [r4, #8]
 800a726:	3b01      	subs	r3, #1
 800a728:	60a3      	str	r3, [r4, #8]
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	701e      	strb	r6, [r3, #0]
 800a732:	6962      	ldr	r2, [r4, #20]
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	429a      	cmp	r2, r3
 800a738:	d004      	beq.n	800a744 <__swbuf_r+0x6e>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	07db      	lsls	r3, r3, #31
 800a73e:	d5e1      	bpl.n	800a704 <__swbuf_r+0x2e>
 800a740:	2e0a      	cmp	r6, #10
 800a742:	d1df      	bne.n	800a704 <__swbuf_r+0x2e>
 800a744:	4621      	mov	r1, r4
 800a746:	4628      	mov	r0, r5
 800a748:	f000 fc92 	bl	800b070 <_fflush_r>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d0d9      	beq.n	800a704 <__swbuf_r+0x2e>
 800a750:	e7d6      	b.n	800a700 <__swbuf_r+0x2a>
	...

0800a754 <__swsetup_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4b29      	ldr	r3, [pc, #164]	@ (800a7fc <__swsetup_r+0xa8>)
 800a758:	4605      	mov	r5, r0
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	460c      	mov	r4, r1
 800a75e:	b118      	cbz	r0, 800a768 <__swsetup_r+0x14>
 800a760:	6a03      	ldr	r3, [r0, #32]
 800a762:	b90b      	cbnz	r3, 800a768 <__swsetup_r+0x14>
 800a764:	f7ff fece 	bl	800a504 <__sinit>
 800a768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a76c:	0719      	lsls	r1, r3, #28
 800a76e:	d422      	bmi.n	800a7b6 <__swsetup_r+0x62>
 800a770:	06da      	lsls	r2, r3, #27
 800a772:	d407      	bmi.n	800a784 <__swsetup_r+0x30>
 800a774:	2209      	movs	r2, #9
 800a776:	602a      	str	r2, [r5, #0]
 800a778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295
 800a782:	e033      	b.n	800a7ec <__swsetup_r+0x98>
 800a784:	0758      	lsls	r0, r3, #29
 800a786:	d512      	bpl.n	800a7ae <__swsetup_r+0x5a>
 800a788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a78a:	b141      	cbz	r1, 800a79e <__swsetup_r+0x4a>
 800a78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a790:	4299      	cmp	r1, r3
 800a792:	d002      	beq.n	800a79a <__swsetup_r+0x46>
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f8cd 	bl	800a934 <_free_r>
 800a79a:	2300      	movs	r3, #0
 800a79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	6063      	str	r3, [r4, #4]
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f043 0308 	orr.w	r3, r3, #8
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	6923      	ldr	r3, [r4, #16]
 800a7b8:	b94b      	cbnz	r3, 800a7ce <__swsetup_r+0x7a>
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7c4:	d003      	beq.n	800a7ce <__swsetup_r+0x7a>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f000 fc9f 	bl	800b10c <__smakebuf_r>
 800a7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d2:	f013 0201 	ands.w	r2, r3, #1
 800a7d6:	d00a      	beq.n	800a7ee <__swsetup_r+0x9a>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	60a2      	str	r2, [r4, #8]
 800a7dc:	6962      	ldr	r2, [r4, #20]
 800a7de:	4252      	negs	r2, r2
 800a7e0:	61a2      	str	r2, [r4, #24]
 800a7e2:	6922      	ldr	r2, [r4, #16]
 800a7e4:	b942      	cbnz	r2, 800a7f8 <__swsetup_r+0xa4>
 800a7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7ea:	d1c5      	bne.n	800a778 <__swsetup_r+0x24>
 800a7ec:	bd38      	pop	{r3, r4, r5, pc}
 800a7ee:	0799      	lsls	r1, r3, #30
 800a7f0:	bf58      	it	pl
 800a7f2:	6962      	ldrpl	r2, [r4, #20]
 800a7f4:	60a2      	str	r2, [r4, #8]
 800a7f6:	e7f4      	b.n	800a7e2 <__swsetup_r+0x8e>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	e7f7      	b.n	800a7ec <__swsetup_r+0x98>
 800a7fc:	2000001c 	.word	0x2000001c

0800a800 <memset>:
 800a800:	4402      	add	r2, r0
 800a802:	4603      	mov	r3, r0
 800a804:	4293      	cmp	r3, r2
 800a806:	d100      	bne.n	800a80a <memset+0xa>
 800a808:	4770      	bx	lr
 800a80a:	f803 1b01 	strb.w	r1, [r3], #1
 800a80e:	e7f9      	b.n	800a804 <memset+0x4>

0800a810 <_close_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d06      	ldr	r5, [pc, #24]	@ (800a82c <_close_r+0x1c>)
 800a814:	2300      	movs	r3, #0
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	602b      	str	r3, [r5, #0]
 800a81c:	f7f7 f919 	bl	8001a52 <_close>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d102      	bne.n	800a82a <_close_r+0x1a>
 800a824:	682b      	ldr	r3, [r5, #0]
 800a826:	b103      	cbz	r3, 800a82a <_close_r+0x1a>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	200009fc 	.word	0x200009fc

0800a830 <_lseek_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4d07      	ldr	r5, [pc, #28]	@ (800a850 <_lseek_r+0x20>)
 800a834:	4604      	mov	r4, r0
 800a836:	4608      	mov	r0, r1
 800a838:	4611      	mov	r1, r2
 800a83a:	2200      	movs	r2, #0
 800a83c:	602a      	str	r2, [r5, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	f7f7 f92e 	bl	8001aa0 <_lseek>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_lseek_r+0x1e>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_lseek_r+0x1e>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	200009fc 	.word	0x200009fc

0800a854 <_read_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4d07      	ldr	r5, [pc, #28]	@ (800a874 <_read_r+0x20>)
 800a858:	4604      	mov	r4, r0
 800a85a:	4608      	mov	r0, r1
 800a85c:	4611      	mov	r1, r2
 800a85e:	2200      	movs	r2, #0
 800a860:	602a      	str	r2, [r5, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	f7f7 f8d8 	bl	8001a18 <_read>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_read_r+0x1e>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_read_r+0x1e>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	200009fc 	.word	0x200009fc

0800a878 <_sbrk_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d06      	ldr	r5, [pc, #24]	@ (800a894 <_sbrk_r+0x1c>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f7 f91a 	bl	8001abc <_sbrk>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_sbrk_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_sbrk_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	200009fc 	.word	0x200009fc

0800a898 <_write_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d07      	ldr	r5, [pc, #28]	@ (800a8b8 <_write_r+0x20>)
 800a89c:	4604      	mov	r4, r0
 800a89e:	4608      	mov	r0, r1
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f7f5 ff18 	bl	80006dc <_write>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_write_r+0x1e>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_write_r+0x1e>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200009fc 	.word	0x200009fc

0800a8bc <__errno>:
 800a8bc:	4b01      	ldr	r3, [pc, #4]	@ (800a8c4 <__errno+0x8>)
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	2000001c 	.word	0x2000001c

0800a8c8 <__libc_init_array>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a900 <__libc_init_array+0x38>)
 800a8cc:	4c0d      	ldr	r4, [pc, #52]	@ (800a904 <__libc_init_array+0x3c>)
 800a8ce:	1b64      	subs	r4, r4, r5
 800a8d0:	10a4      	asrs	r4, r4, #2
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	42a6      	cmp	r6, r4
 800a8d6:	d109      	bne.n	800a8ec <__libc_init_array+0x24>
 800a8d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a908 <__libc_init_array+0x40>)
 800a8da:	4c0c      	ldr	r4, [pc, #48]	@ (800a90c <__libc_init_array+0x44>)
 800a8dc:	f000 fc74 	bl	800b1c8 <_init>
 800a8e0:	1b64      	subs	r4, r4, r5
 800a8e2:	10a4      	asrs	r4, r4, #2
 800a8e4:	2600      	movs	r6, #0
 800a8e6:	42a6      	cmp	r6, r4
 800a8e8:	d105      	bne.n	800a8f6 <__libc_init_array+0x2e>
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}
 800a8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8f0:	4798      	blx	r3
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	e7ee      	b.n	800a8d4 <__libc_init_array+0xc>
 800a8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8fa:	4798      	blx	r3
 800a8fc:	3601      	adds	r6, #1
 800a8fe:	e7f2      	b.n	800a8e6 <__libc_init_array+0x1e>
 800a900:	0800b3a8 	.word	0x0800b3a8
 800a904:	0800b3a8 	.word	0x0800b3a8
 800a908:	0800b3a8 	.word	0x0800b3a8
 800a90c:	0800b3ac 	.word	0x0800b3ac

0800a910 <__retarget_lock_init_recursive>:
 800a910:	4770      	bx	lr

0800a912 <__retarget_lock_acquire_recursive>:
 800a912:	4770      	bx	lr

0800a914 <__retarget_lock_release_recursive>:
 800a914:	4770      	bx	lr

0800a916 <memcpy>:
 800a916:	440a      	add	r2, r1
 800a918:	4291      	cmp	r1, r2
 800a91a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a91e:	d100      	bne.n	800a922 <memcpy+0xc>
 800a920:	4770      	bx	lr
 800a922:	b510      	push	{r4, lr}
 800a924:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a92c:	4291      	cmp	r1, r2
 800a92e:	d1f9      	bne.n	800a924 <memcpy+0xe>
 800a930:	bd10      	pop	{r4, pc}
	...

0800a934 <_free_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4605      	mov	r5, r0
 800a938:	2900      	cmp	r1, #0
 800a93a:	d041      	beq.n	800a9c0 <_free_r+0x8c>
 800a93c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a940:	1f0c      	subs	r4, r1, #4
 800a942:	2b00      	cmp	r3, #0
 800a944:	bfb8      	it	lt
 800a946:	18e4      	addlt	r4, r4, r3
 800a948:	f7ff fd44 	bl	800a3d4 <__malloc_lock>
 800a94c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c4 <_free_r+0x90>)
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	b933      	cbnz	r3, 800a960 <_free_r+0x2c>
 800a952:	6063      	str	r3, [r4, #4]
 800a954:	6014      	str	r4, [r2, #0]
 800a956:	4628      	mov	r0, r5
 800a958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a95c:	f7ff bd40 	b.w	800a3e0 <__malloc_unlock>
 800a960:	42a3      	cmp	r3, r4
 800a962:	d908      	bls.n	800a976 <_free_r+0x42>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	1821      	adds	r1, r4, r0
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf01      	itttt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	1809      	addeq	r1, r1, r0
 800a972:	6021      	streq	r1, [r4, #0]
 800a974:	e7ed      	b.n	800a952 <_free_r+0x1e>
 800a976:	461a      	mov	r2, r3
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	b10b      	cbz	r3, 800a980 <_free_r+0x4c>
 800a97c:	42a3      	cmp	r3, r4
 800a97e:	d9fa      	bls.n	800a976 <_free_r+0x42>
 800a980:	6811      	ldr	r1, [r2, #0]
 800a982:	1850      	adds	r0, r2, r1
 800a984:	42a0      	cmp	r0, r4
 800a986:	d10b      	bne.n	800a9a0 <_free_r+0x6c>
 800a988:	6820      	ldr	r0, [r4, #0]
 800a98a:	4401      	add	r1, r0
 800a98c:	1850      	adds	r0, r2, r1
 800a98e:	4283      	cmp	r3, r0
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	d1e0      	bne.n	800a956 <_free_r+0x22>
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	6053      	str	r3, [r2, #4]
 800a99a:	4408      	add	r0, r1
 800a99c:	6010      	str	r0, [r2, #0]
 800a99e:	e7da      	b.n	800a956 <_free_r+0x22>
 800a9a0:	d902      	bls.n	800a9a8 <_free_r+0x74>
 800a9a2:	230c      	movs	r3, #12
 800a9a4:	602b      	str	r3, [r5, #0]
 800a9a6:	e7d6      	b.n	800a956 <_free_r+0x22>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	1821      	adds	r1, r4, r0
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	bf04      	itt	eq
 800a9b0:	6819      	ldreq	r1, [r3, #0]
 800a9b2:	685b      	ldreq	r3, [r3, #4]
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	bf04      	itt	eq
 800a9b8:	1809      	addeq	r1, r1, r0
 800a9ba:	6021      	streq	r1, [r4, #0]
 800a9bc:	6054      	str	r4, [r2, #4]
 800a9be:	e7ca      	b.n	800a956 <_free_r+0x22>
 800a9c0:	bd38      	pop	{r3, r4, r5, pc}
 800a9c2:	bf00      	nop
 800a9c4:	200008bc 	.word	0x200008bc

0800a9c8 <__sfputc_r>:
 800a9c8:	6893      	ldr	r3, [r2, #8]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	b410      	push	{r4}
 800a9d0:	6093      	str	r3, [r2, #8]
 800a9d2:	da08      	bge.n	800a9e6 <__sfputc_r+0x1e>
 800a9d4:	6994      	ldr	r4, [r2, #24]
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	db01      	blt.n	800a9de <__sfputc_r+0x16>
 800a9da:	290a      	cmp	r1, #10
 800a9dc:	d103      	bne.n	800a9e6 <__sfputc_r+0x1e>
 800a9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9e2:	f7ff be78 	b.w	800a6d6 <__swbuf_r>
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	1c58      	adds	r0, r3, #1
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	7019      	strb	r1, [r3, #0]
 800a9ee:	4608      	mov	r0, r1
 800a9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <__sfputs_r>:
 800a9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	460f      	mov	r7, r1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	18d5      	adds	r5, r2, r3
 800aa00:	42ac      	cmp	r4, r5
 800aa02:	d101      	bne.n	800aa08 <__sfputs_r+0x12>
 800aa04:	2000      	movs	r0, #0
 800aa06:	e007      	b.n	800aa18 <__sfputs_r+0x22>
 800aa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0c:	463a      	mov	r2, r7
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ffda 	bl	800a9c8 <__sfputc_r>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d1f3      	bne.n	800aa00 <__sfputs_r+0xa>
 800aa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa1c <_vfiprintf_r>:
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	460d      	mov	r5, r1
 800aa22:	b09d      	sub	sp, #116	@ 0x74
 800aa24:	4614      	mov	r4, r2
 800aa26:	4698      	mov	r8, r3
 800aa28:	4606      	mov	r6, r0
 800aa2a:	b118      	cbz	r0, 800aa34 <_vfiprintf_r+0x18>
 800aa2c:	6a03      	ldr	r3, [r0, #32]
 800aa2e:	b90b      	cbnz	r3, 800aa34 <_vfiprintf_r+0x18>
 800aa30:	f7ff fd68 	bl	800a504 <__sinit>
 800aa34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa36:	07d9      	lsls	r1, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <_vfiprintf_r+0x2a>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	059a      	lsls	r2, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <_vfiprintf_r+0x2a>
 800aa40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa42:	f7ff ff66 	bl	800a912 <__retarget_lock_acquire_recursive>
 800aa46:	89ab      	ldrh	r3, [r5, #12]
 800aa48:	071b      	lsls	r3, r3, #28
 800aa4a:	d501      	bpl.n	800aa50 <_vfiprintf_r+0x34>
 800aa4c:	692b      	ldr	r3, [r5, #16]
 800aa4e:	b99b      	cbnz	r3, 800aa78 <_vfiprintf_r+0x5c>
 800aa50:	4629      	mov	r1, r5
 800aa52:	4630      	mov	r0, r6
 800aa54:	f7ff fe7e 	bl	800a754 <__swsetup_r>
 800aa58:	b170      	cbz	r0, 800aa78 <_vfiprintf_r+0x5c>
 800aa5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa5c:	07dc      	lsls	r4, r3, #31
 800aa5e:	d504      	bpl.n	800aa6a <_vfiprintf_r+0x4e>
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	b01d      	add	sp, #116	@ 0x74
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	89ab      	ldrh	r3, [r5, #12]
 800aa6c:	0598      	lsls	r0, r3, #22
 800aa6e:	d4f7      	bmi.n	800aa60 <_vfiprintf_r+0x44>
 800aa70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa72:	f7ff ff4f 	bl	800a914 <__retarget_lock_release_recursive>
 800aa76:	e7f3      	b.n	800aa60 <_vfiprintf_r+0x44>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa82:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa86:	2330      	movs	r3, #48	@ 0x30
 800aa88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac38 <_vfiprintf_r+0x21c>
 800aa8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa90:	f04f 0901 	mov.w	r9, #1
 800aa94:	4623      	mov	r3, r4
 800aa96:	469a      	mov	sl, r3
 800aa98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9c:	b10a      	cbz	r2, 800aaa2 <_vfiprintf_r+0x86>
 800aa9e:	2a25      	cmp	r2, #37	@ 0x25
 800aaa0:	d1f9      	bne.n	800aa96 <_vfiprintf_r+0x7a>
 800aaa2:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa6:	d00b      	beq.n	800aac0 <_vfiprintf_r+0xa4>
 800aaa8:	465b      	mov	r3, fp
 800aaaa:	4622      	mov	r2, r4
 800aaac:	4629      	mov	r1, r5
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7ff ffa1 	bl	800a9f6 <__sfputs_r>
 800aab4:	3001      	adds	r0, #1
 800aab6:	f000 80a7 	beq.w	800ac08 <_vfiprintf_r+0x1ec>
 800aaba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aabc:	445a      	add	r2, fp
 800aabe:	9209      	str	r2, [sp, #36]	@ 0x24
 800aac0:	f89a 3000 	ldrb.w	r3, [sl]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 809f 	beq.w	800ac08 <_vfiprintf_r+0x1ec>
 800aaca:	2300      	movs	r3, #0
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295
 800aad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad4:	f10a 0a01 	add.w	sl, sl, #1
 800aad8:	9304      	str	r3, [sp, #16]
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aae0:	931a      	str	r3, [sp, #104]	@ 0x68
 800aae2:	4654      	mov	r4, sl
 800aae4:	2205      	movs	r2, #5
 800aae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaea:	4853      	ldr	r0, [pc, #332]	@ (800ac38 <_vfiprintf_r+0x21c>)
 800aaec:	f7f5 fb80 	bl	80001f0 <memchr>
 800aaf0:	9a04      	ldr	r2, [sp, #16]
 800aaf2:	b9d8      	cbnz	r0, 800ab2c <_vfiprintf_r+0x110>
 800aaf4:	06d1      	lsls	r1, r2, #27
 800aaf6:	bf44      	itt	mi
 800aaf8:	2320      	movmi	r3, #32
 800aafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aafe:	0713      	lsls	r3, r2, #28
 800ab00:	bf44      	itt	mi
 800ab02:	232b      	movmi	r3, #43	@ 0x2b
 800ab04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab08:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab0e:	d015      	beq.n	800ab3c <_vfiprintf_r+0x120>
 800ab10:	9a07      	ldr	r2, [sp, #28]
 800ab12:	4654      	mov	r4, sl
 800ab14:	2000      	movs	r0, #0
 800ab16:	f04f 0c0a 	mov.w	ip, #10
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab20:	3b30      	subs	r3, #48	@ 0x30
 800ab22:	2b09      	cmp	r3, #9
 800ab24:	d94b      	bls.n	800abbe <_vfiprintf_r+0x1a2>
 800ab26:	b1b0      	cbz	r0, 800ab56 <_vfiprintf_r+0x13a>
 800ab28:	9207      	str	r2, [sp, #28]
 800ab2a:	e014      	b.n	800ab56 <_vfiprintf_r+0x13a>
 800ab2c:	eba0 0308 	sub.w	r3, r0, r8
 800ab30:	fa09 f303 	lsl.w	r3, r9, r3
 800ab34:	4313      	orrs	r3, r2
 800ab36:	9304      	str	r3, [sp, #16]
 800ab38:	46a2      	mov	sl, r4
 800ab3a:	e7d2      	b.n	800aae2 <_vfiprintf_r+0xc6>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	1d19      	adds	r1, r3, #4
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	9103      	str	r1, [sp, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bfbb      	ittet	lt
 800ab48:	425b      	neglt	r3, r3
 800ab4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab4e:	9307      	strge	r3, [sp, #28]
 800ab50:	9307      	strlt	r3, [sp, #28]
 800ab52:	bfb8      	it	lt
 800ab54:	9204      	strlt	r2, [sp, #16]
 800ab56:	7823      	ldrb	r3, [r4, #0]
 800ab58:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab5a:	d10a      	bne.n	800ab72 <_vfiprintf_r+0x156>
 800ab5c:	7863      	ldrb	r3, [r4, #1]
 800ab5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab60:	d132      	bne.n	800abc8 <_vfiprintf_r+0x1ac>
 800ab62:	9b03      	ldr	r3, [sp, #12]
 800ab64:	1d1a      	adds	r2, r3, #4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	9203      	str	r2, [sp, #12]
 800ab6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab6e:	3402      	adds	r4, #2
 800ab70:	9305      	str	r3, [sp, #20]
 800ab72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac48 <_vfiprintf_r+0x22c>
 800ab76:	7821      	ldrb	r1, [r4, #0]
 800ab78:	2203      	movs	r2, #3
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	f7f5 fb38 	bl	80001f0 <memchr>
 800ab80:	b138      	cbz	r0, 800ab92 <_vfiprintf_r+0x176>
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	eba0 000a 	sub.w	r0, r0, sl
 800ab88:	2240      	movs	r2, #64	@ 0x40
 800ab8a:	4082      	lsls	r2, r0
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	3401      	adds	r4, #1
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab96:	4829      	ldr	r0, [pc, #164]	@ (800ac3c <_vfiprintf_r+0x220>)
 800ab98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab9c:	2206      	movs	r2, #6
 800ab9e:	f7f5 fb27 	bl	80001f0 <memchr>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d03f      	beq.n	800ac26 <_vfiprintf_r+0x20a>
 800aba6:	4b26      	ldr	r3, [pc, #152]	@ (800ac40 <_vfiprintf_r+0x224>)
 800aba8:	bb1b      	cbnz	r3, 800abf2 <_vfiprintf_r+0x1d6>
 800abaa:	9b03      	ldr	r3, [sp, #12]
 800abac:	3307      	adds	r3, #7
 800abae:	f023 0307 	bic.w	r3, r3, #7
 800abb2:	3308      	adds	r3, #8
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb8:	443b      	add	r3, r7
 800abba:	9309      	str	r3, [sp, #36]	@ 0x24
 800abbc:	e76a      	b.n	800aa94 <_vfiprintf_r+0x78>
 800abbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc2:	460c      	mov	r4, r1
 800abc4:	2001      	movs	r0, #1
 800abc6:	e7a8      	b.n	800ab1a <_vfiprintf_r+0xfe>
 800abc8:	2300      	movs	r3, #0
 800abca:	3401      	adds	r4, #1
 800abcc:	9305      	str	r3, [sp, #20]
 800abce:	4619      	mov	r1, r3
 800abd0:	f04f 0c0a 	mov.w	ip, #10
 800abd4:	4620      	mov	r0, r4
 800abd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abda:	3a30      	subs	r2, #48	@ 0x30
 800abdc:	2a09      	cmp	r2, #9
 800abde:	d903      	bls.n	800abe8 <_vfiprintf_r+0x1cc>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0c6      	beq.n	800ab72 <_vfiprintf_r+0x156>
 800abe4:	9105      	str	r1, [sp, #20]
 800abe6:	e7c4      	b.n	800ab72 <_vfiprintf_r+0x156>
 800abe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abec:	4604      	mov	r4, r0
 800abee:	2301      	movs	r3, #1
 800abf0:	e7f0      	b.n	800abd4 <_vfiprintf_r+0x1b8>
 800abf2:	ab03      	add	r3, sp, #12
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	462a      	mov	r2, r5
 800abf8:	4b12      	ldr	r3, [pc, #72]	@ (800ac44 <_vfiprintf_r+0x228>)
 800abfa:	a904      	add	r1, sp, #16
 800abfc:	4630      	mov	r0, r6
 800abfe:	f3af 8000 	nop.w
 800ac02:	4607      	mov	r7, r0
 800ac04:	1c78      	adds	r0, r7, #1
 800ac06:	d1d6      	bne.n	800abb6 <_vfiprintf_r+0x19a>
 800ac08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac0a:	07d9      	lsls	r1, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_vfiprintf_r+0x1fe>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_vfiprintf_r+0x1fe>
 800ac14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac16:	f7ff fe7d 	bl	800a914 <__retarget_lock_release_recursive>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	065b      	lsls	r3, r3, #25
 800ac1e:	f53f af1f 	bmi.w	800aa60 <_vfiprintf_r+0x44>
 800ac22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac24:	e71e      	b.n	800aa64 <_vfiprintf_r+0x48>
 800ac26:	ab03      	add	r3, sp, #12
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	462a      	mov	r2, r5
 800ac2c:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <_vfiprintf_r+0x228>)
 800ac2e:	a904      	add	r1, sp, #16
 800ac30:	4630      	mov	r0, r6
 800ac32:	f000 f879 	bl	800ad28 <_printf_i>
 800ac36:	e7e4      	b.n	800ac02 <_vfiprintf_r+0x1e6>
 800ac38:	0800b36c 	.word	0x0800b36c
 800ac3c:	0800b376 	.word	0x0800b376
 800ac40:	00000000 	.word	0x00000000
 800ac44:	0800a9f7 	.word	0x0800a9f7
 800ac48:	0800b372 	.word	0x0800b372

0800ac4c <_printf_common>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	4616      	mov	r6, r2
 800ac52:	4698      	mov	r8, r3
 800ac54:	688a      	ldr	r2, [r1, #8]
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	bfb8      	it	lt
 800ac60:	4613      	movlt	r3, r2
 800ac62:	6033      	str	r3, [r6, #0]
 800ac64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac68:	4607      	mov	r7, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	b10a      	cbz	r2, 800ac72 <_printf_common+0x26>
 800ac6e:	3301      	adds	r3, #1
 800ac70:	6033      	str	r3, [r6, #0]
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	0699      	lsls	r1, r3, #26
 800ac76:	bf42      	ittt	mi
 800ac78:	6833      	ldrmi	r3, [r6, #0]
 800ac7a:	3302      	addmi	r3, #2
 800ac7c:	6033      	strmi	r3, [r6, #0]
 800ac7e:	6825      	ldr	r5, [r4, #0]
 800ac80:	f015 0506 	ands.w	r5, r5, #6
 800ac84:	d106      	bne.n	800ac94 <_printf_common+0x48>
 800ac86:	f104 0a19 	add.w	sl, r4, #25
 800ac8a:	68e3      	ldr	r3, [r4, #12]
 800ac8c:	6832      	ldr	r2, [r6, #0]
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	dc26      	bgt.n	800ace2 <_printf_common+0x96>
 800ac94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	3b00      	subs	r3, #0
 800ac9c:	bf18      	it	ne
 800ac9e:	2301      	movne	r3, #1
 800aca0:	0692      	lsls	r2, r2, #26
 800aca2:	d42b      	bmi.n	800acfc <_printf_common+0xb0>
 800aca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aca8:	4641      	mov	r1, r8
 800acaa:	4638      	mov	r0, r7
 800acac:	47c8      	blx	r9
 800acae:	3001      	adds	r0, #1
 800acb0:	d01e      	beq.n	800acf0 <_printf_common+0xa4>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	f003 0306 	and.w	r3, r3, #6
 800acba:	2b04      	cmp	r3, #4
 800acbc:	bf02      	ittt	eq
 800acbe:	68e5      	ldreq	r5, [r4, #12]
 800acc0:	6833      	ldreq	r3, [r6, #0]
 800acc2:	1aed      	subeq	r5, r5, r3
 800acc4:	68a3      	ldr	r3, [r4, #8]
 800acc6:	bf0c      	ite	eq
 800acc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800accc:	2500      	movne	r5, #0
 800acce:	4293      	cmp	r3, r2
 800acd0:	bfc4      	itt	gt
 800acd2:	1a9b      	subgt	r3, r3, r2
 800acd4:	18ed      	addgt	r5, r5, r3
 800acd6:	2600      	movs	r6, #0
 800acd8:	341a      	adds	r4, #26
 800acda:	42b5      	cmp	r5, r6
 800acdc:	d11a      	bne.n	800ad14 <_printf_common+0xc8>
 800acde:	2000      	movs	r0, #0
 800ace0:	e008      	b.n	800acf4 <_printf_common+0xa8>
 800ace2:	2301      	movs	r3, #1
 800ace4:	4652      	mov	r2, sl
 800ace6:	4641      	mov	r1, r8
 800ace8:	4638      	mov	r0, r7
 800acea:	47c8      	blx	r9
 800acec:	3001      	adds	r0, #1
 800acee:	d103      	bne.n	800acf8 <_printf_common+0xac>
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf8:	3501      	adds	r5, #1
 800acfa:	e7c6      	b.n	800ac8a <_printf_common+0x3e>
 800acfc:	18e1      	adds	r1, r4, r3
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	2030      	movs	r0, #48	@ 0x30
 800ad02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad06:	4422      	add	r2, r4
 800ad08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad10:	3302      	adds	r3, #2
 800ad12:	e7c7      	b.n	800aca4 <_printf_common+0x58>
 800ad14:	2301      	movs	r3, #1
 800ad16:	4622      	mov	r2, r4
 800ad18:	4641      	mov	r1, r8
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	47c8      	blx	r9
 800ad1e:	3001      	adds	r0, #1
 800ad20:	d0e6      	beq.n	800acf0 <_printf_common+0xa4>
 800ad22:	3601      	adds	r6, #1
 800ad24:	e7d9      	b.n	800acda <_printf_common+0x8e>
	...

0800ad28 <_printf_i>:
 800ad28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	7e0f      	ldrb	r7, [r1, #24]
 800ad2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad30:	2f78      	cmp	r7, #120	@ 0x78
 800ad32:	4691      	mov	r9, r2
 800ad34:	4680      	mov	r8, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	469a      	mov	sl, r3
 800ad3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad3e:	d807      	bhi.n	800ad50 <_printf_i+0x28>
 800ad40:	2f62      	cmp	r7, #98	@ 0x62
 800ad42:	d80a      	bhi.n	800ad5a <_printf_i+0x32>
 800ad44:	2f00      	cmp	r7, #0
 800ad46:	f000 80d2 	beq.w	800aeee <_printf_i+0x1c6>
 800ad4a:	2f58      	cmp	r7, #88	@ 0x58
 800ad4c:	f000 80b9 	beq.w	800aec2 <_printf_i+0x19a>
 800ad50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad58:	e03a      	b.n	800add0 <_printf_i+0xa8>
 800ad5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad5e:	2b15      	cmp	r3, #21
 800ad60:	d8f6      	bhi.n	800ad50 <_printf_i+0x28>
 800ad62:	a101      	add	r1, pc, #4	@ (adr r1, 800ad68 <_printf_i+0x40>)
 800ad64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad68:	0800adc1 	.word	0x0800adc1
 800ad6c:	0800add5 	.word	0x0800add5
 800ad70:	0800ad51 	.word	0x0800ad51
 800ad74:	0800ad51 	.word	0x0800ad51
 800ad78:	0800ad51 	.word	0x0800ad51
 800ad7c:	0800ad51 	.word	0x0800ad51
 800ad80:	0800add5 	.word	0x0800add5
 800ad84:	0800ad51 	.word	0x0800ad51
 800ad88:	0800ad51 	.word	0x0800ad51
 800ad8c:	0800ad51 	.word	0x0800ad51
 800ad90:	0800ad51 	.word	0x0800ad51
 800ad94:	0800aed5 	.word	0x0800aed5
 800ad98:	0800adff 	.word	0x0800adff
 800ad9c:	0800ae8f 	.word	0x0800ae8f
 800ada0:	0800ad51 	.word	0x0800ad51
 800ada4:	0800ad51 	.word	0x0800ad51
 800ada8:	0800aef7 	.word	0x0800aef7
 800adac:	0800ad51 	.word	0x0800ad51
 800adb0:	0800adff 	.word	0x0800adff
 800adb4:	0800ad51 	.word	0x0800ad51
 800adb8:	0800ad51 	.word	0x0800ad51
 800adbc:	0800ae97 	.word	0x0800ae97
 800adc0:	6833      	ldr	r3, [r6, #0]
 800adc2:	1d1a      	adds	r2, r3, #4
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6032      	str	r2, [r6, #0]
 800adc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800add0:	2301      	movs	r3, #1
 800add2:	e09d      	b.n	800af10 <_printf_i+0x1e8>
 800add4:	6833      	ldr	r3, [r6, #0]
 800add6:	6820      	ldr	r0, [r4, #0]
 800add8:	1d19      	adds	r1, r3, #4
 800adda:	6031      	str	r1, [r6, #0]
 800addc:	0606      	lsls	r6, r0, #24
 800adde:	d501      	bpl.n	800ade4 <_printf_i+0xbc>
 800ade0:	681d      	ldr	r5, [r3, #0]
 800ade2:	e003      	b.n	800adec <_printf_i+0xc4>
 800ade4:	0645      	lsls	r5, r0, #25
 800ade6:	d5fb      	bpl.n	800ade0 <_printf_i+0xb8>
 800ade8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adec:	2d00      	cmp	r5, #0
 800adee:	da03      	bge.n	800adf8 <_printf_i+0xd0>
 800adf0:	232d      	movs	r3, #45	@ 0x2d
 800adf2:	426d      	negs	r5, r5
 800adf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adf8:	4859      	ldr	r0, [pc, #356]	@ (800af60 <_printf_i+0x238>)
 800adfa:	230a      	movs	r3, #10
 800adfc:	e011      	b.n	800ae22 <_printf_i+0xfa>
 800adfe:	6821      	ldr	r1, [r4, #0]
 800ae00:	6833      	ldr	r3, [r6, #0]
 800ae02:	0608      	lsls	r0, r1, #24
 800ae04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae08:	d402      	bmi.n	800ae10 <_printf_i+0xe8>
 800ae0a:	0649      	lsls	r1, r1, #25
 800ae0c:	bf48      	it	mi
 800ae0e:	b2ad      	uxthmi	r5, r5
 800ae10:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae12:	4853      	ldr	r0, [pc, #332]	@ (800af60 <_printf_i+0x238>)
 800ae14:	6033      	str	r3, [r6, #0]
 800ae16:	bf14      	ite	ne
 800ae18:	230a      	movne	r3, #10
 800ae1a:	2308      	moveq	r3, #8
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae22:	6866      	ldr	r6, [r4, #4]
 800ae24:	60a6      	str	r6, [r4, #8]
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	bfa2      	ittt	ge
 800ae2a:	6821      	ldrge	r1, [r4, #0]
 800ae2c:	f021 0104 	bicge.w	r1, r1, #4
 800ae30:	6021      	strge	r1, [r4, #0]
 800ae32:	b90d      	cbnz	r5, 800ae38 <_printf_i+0x110>
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	d04b      	beq.n	800aed0 <_printf_i+0x1a8>
 800ae38:	4616      	mov	r6, r2
 800ae3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae42:	5dc7      	ldrb	r7, [r0, r7]
 800ae44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae48:	462f      	mov	r7, r5
 800ae4a:	42bb      	cmp	r3, r7
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	d9f4      	bls.n	800ae3a <_printf_i+0x112>
 800ae50:	2b08      	cmp	r3, #8
 800ae52:	d10b      	bne.n	800ae6c <_printf_i+0x144>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	07df      	lsls	r7, r3, #31
 800ae58:	d508      	bpl.n	800ae6c <_printf_i+0x144>
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	6861      	ldr	r1, [r4, #4]
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	bfde      	ittt	le
 800ae62:	2330      	movle	r3, #48	@ 0x30
 800ae64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae6c:	1b92      	subs	r2, r2, r6
 800ae6e:	6122      	str	r2, [r4, #16]
 800ae70:	f8cd a000 	str.w	sl, [sp]
 800ae74:	464b      	mov	r3, r9
 800ae76:	aa03      	add	r2, sp, #12
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f7ff fee6 	bl	800ac4c <_printf_common>
 800ae80:	3001      	adds	r0, #1
 800ae82:	d14a      	bne.n	800af1a <_printf_i+0x1f2>
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	b004      	add	sp, #16
 800ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	f043 0320 	orr.w	r3, r3, #32
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	4833      	ldr	r0, [pc, #204]	@ (800af64 <_printf_i+0x23c>)
 800ae98:	2778      	movs	r7, #120	@ 0x78
 800ae9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	6831      	ldr	r1, [r6, #0]
 800aea2:	061f      	lsls	r7, r3, #24
 800aea4:	f851 5b04 	ldr.w	r5, [r1], #4
 800aea8:	d402      	bmi.n	800aeb0 <_printf_i+0x188>
 800aeaa:	065f      	lsls	r7, r3, #25
 800aeac:	bf48      	it	mi
 800aeae:	b2ad      	uxthmi	r5, r5
 800aeb0:	6031      	str	r1, [r6, #0]
 800aeb2:	07d9      	lsls	r1, r3, #31
 800aeb4:	bf44      	itt	mi
 800aeb6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeba:	6023      	strmi	r3, [r4, #0]
 800aebc:	b11d      	cbz	r5, 800aec6 <_printf_i+0x19e>
 800aebe:	2310      	movs	r3, #16
 800aec0:	e7ac      	b.n	800ae1c <_printf_i+0xf4>
 800aec2:	4827      	ldr	r0, [pc, #156]	@ (800af60 <_printf_i+0x238>)
 800aec4:	e7e9      	b.n	800ae9a <_printf_i+0x172>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	f023 0320 	bic.w	r3, r3, #32
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	e7f6      	b.n	800aebe <_printf_i+0x196>
 800aed0:	4616      	mov	r6, r2
 800aed2:	e7bd      	b.n	800ae50 <_printf_i+0x128>
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	6825      	ldr	r5, [r4, #0]
 800aed8:	6961      	ldr	r1, [r4, #20]
 800aeda:	1d18      	adds	r0, r3, #4
 800aedc:	6030      	str	r0, [r6, #0]
 800aede:	062e      	lsls	r6, r5, #24
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	d501      	bpl.n	800aee8 <_printf_i+0x1c0>
 800aee4:	6019      	str	r1, [r3, #0]
 800aee6:	e002      	b.n	800aeee <_printf_i+0x1c6>
 800aee8:	0668      	lsls	r0, r5, #25
 800aeea:	d5fb      	bpl.n	800aee4 <_printf_i+0x1bc>
 800aeec:	8019      	strh	r1, [r3, #0]
 800aeee:	2300      	movs	r3, #0
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	4616      	mov	r6, r2
 800aef4:	e7bc      	b.n	800ae70 <_printf_i+0x148>
 800aef6:	6833      	ldr	r3, [r6, #0]
 800aef8:	1d1a      	adds	r2, r3, #4
 800aefa:	6032      	str	r2, [r6, #0]
 800aefc:	681e      	ldr	r6, [r3, #0]
 800aefe:	6862      	ldr	r2, [r4, #4]
 800af00:	2100      	movs	r1, #0
 800af02:	4630      	mov	r0, r6
 800af04:	f7f5 f974 	bl	80001f0 <memchr>
 800af08:	b108      	cbz	r0, 800af0e <_printf_i+0x1e6>
 800af0a:	1b80      	subs	r0, r0, r6
 800af0c:	6060      	str	r0, [r4, #4]
 800af0e:	6863      	ldr	r3, [r4, #4]
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	2300      	movs	r3, #0
 800af14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af18:	e7aa      	b.n	800ae70 <_printf_i+0x148>
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	4632      	mov	r2, r6
 800af1e:	4649      	mov	r1, r9
 800af20:	4640      	mov	r0, r8
 800af22:	47d0      	blx	sl
 800af24:	3001      	adds	r0, #1
 800af26:	d0ad      	beq.n	800ae84 <_printf_i+0x15c>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	079b      	lsls	r3, r3, #30
 800af2c:	d413      	bmi.n	800af56 <_printf_i+0x22e>
 800af2e:	68e0      	ldr	r0, [r4, #12]
 800af30:	9b03      	ldr	r3, [sp, #12]
 800af32:	4298      	cmp	r0, r3
 800af34:	bfb8      	it	lt
 800af36:	4618      	movlt	r0, r3
 800af38:	e7a6      	b.n	800ae88 <_printf_i+0x160>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4632      	mov	r2, r6
 800af3e:	4649      	mov	r1, r9
 800af40:	4640      	mov	r0, r8
 800af42:	47d0      	blx	sl
 800af44:	3001      	adds	r0, #1
 800af46:	d09d      	beq.n	800ae84 <_printf_i+0x15c>
 800af48:	3501      	adds	r5, #1
 800af4a:	68e3      	ldr	r3, [r4, #12]
 800af4c:	9903      	ldr	r1, [sp, #12]
 800af4e:	1a5b      	subs	r3, r3, r1
 800af50:	42ab      	cmp	r3, r5
 800af52:	dcf2      	bgt.n	800af3a <_printf_i+0x212>
 800af54:	e7eb      	b.n	800af2e <_printf_i+0x206>
 800af56:	2500      	movs	r5, #0
 800af58:	f104 0619 	add.w	r6, r4, #25
 800af5c:	e7f5      	b.n	800af4a <_printf_i+0x222>
 800af5e:	bf00      	nop
 800af60:	0800b37d 	.word	0x0800b37d
 800af64:	0800b38e 	.word	0x0800b38e

0800af68 <__sflush_r>:
 800af68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af70:	0716      	lsls	r6, r2, #28
 800af72:	4605      	mov	r5, r0
 800af74:	460c      	mov	r4, r1
 800af76:	d454      	bmi.n	800b022 <__sflush_r+0xba>
 800af78:	684b      	ldr	r3, [r1, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dc02      	bgt.n	800af84 <__sflush_r+0x1c>
 800af7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	dd48      	ble.n	800b016 <__sflush_r+0xae>
 800af84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af86:	2e00      	cmp	r6, #0
 800af88:	d045      	beq.n	800b016 <__sflush_r+0xae>
 800af8a:	2300      	movs	r3, #0
 800af8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af90:	682f      	ldr	r7, [r5, #0]
 800af92:	6a21      	ldr	r1, [r4, #32]
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	d030      	beq.n	800affa <__sflush_r+0x92>
 800af98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	0759      	lsls	r1, r3, #29
 800af9e:	d505      	bpl.n	800afac <__sflush_r+0x44>
 800afa0:	6863      	ldr	r3, [r4, #4]
 800afa2:	1ad2      	subs	r2, r2, r3
 800afa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afa6:	b10b      	cbz	r3, 800afac <__sflush_r+0x44>
 800afa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	2300      	movs	r3, #0
 800afae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afb0:	6a21      	ldr	r1, [r4, #32]
 800afb2:	4628      	mov	r0, r5
 800afb4:	47b0      	blx	r6
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	d106      	bne.n	800afca <__sflush_r+0x62>
 800afbc:	6829      	ldr	r1, [r5, #0]
 800afbe:	291d      	cmp	r1, #29
 800afc0:	d82b      	bhi.n	800b01a <__sflush_r+0xb2>
 800afc2:	4a2a      	ldr	r2, [pc, #168]	@ (800b06c <__sflush_r+0x104>)
 800afc4:	410a      	asrs	r2, r1
 800afc6:	07d6      	lsls	r6, r2, #31
 800afc8:	d427      	bmi.n	800b01a <__sflush_r+0xb2>
 800afca:	2200      	movs	r2, #0
 800afcc:	6062      	str	r2, [r4, #4]
 800afce:	04d9      	lsls	r1, r3, #19
 800afd0:	6922      	ldr	r2, [r4, #16]
 800afd2:	6022      	str	r2, [r4, #0]
 800afd4:	d504      	bpl.n	800afe0 <__sflush_r+0x78>
 800afd6:	1c42      	adds	r2, r0, #1
 800afd8:	d101      	bne.n	800afde <__sflush_r+0x76>
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	b903      	cbnz	r3, 800afe0 <__sflush_r+0x78>
 800afde:	6560      	str	r0, [r4, #84]	@ 0x54
 800afe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afe2:	602f      	str	r7, [r5, #0]
 800afe4:	b1b9      	cbz	r1, 800b016 <__sflush_r+0xae>
 800afe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afea:	4299      	cmp	r1, r3
 800afec:	d002      	beq.n	800aff4 <__sflush_r+0x8c>
 800afee:	4628      	mov	r0, r5
 800aff0:	f7ff fca0 	bl	800a934 <_free_r>
 800aff4:	2300      	movs	r3, #0
 800aff6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aff8:	e00d      	b.n	800b016 <__sflush_r+0xae>
 800affa:	2301      	movs	r3, #1
 800affc:	4628      	mov	r0, r5
 800affe:	47b0      	blx	r6
 800b000:	4602      	mov	r2, r0
 800b002:	1c50      	adds	r0, r2, #1
 800b004:	d1c9      	bne.n	800af9a <__sflush_r+0x32>
 800b006:	682b      	ldr	r3, [r5, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0c6      	beq.n	800af9a <__sflush_r+0x32>
 800b00c:	2b1d      	cmp	r3, #29
 800b00e:	d001      	beq.n	800b014 <__sflush_r+0xac>
 800b010:	2b16      	cmp	r3, #22
 800b012:	d11e      	bne.n	800b052 <__sflush_r+0xea>
 800b014:	602f      	str	r7, [r5, #0]
 800b016:	2000      	movs	r0, #0
 800b018:	e022      	b.n	800b060 <__sflush_r+0xf8>
 800b01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b01e:	b21b      	sxth	r3, r3
 800b020:	e01b      	b.n	800b05a <__sflush_r+0xf2>
 800b022:	690f      	ldr	r7, [r1, #16]
 800b024:	2f00      	cmp	r7, #0
 800b026:	d0f6      	beq.n	800b016 <__sflush_r+0xae>
 800b028:	0793      	lsls	r3, r2, #30
 800b02a:	680e      	ldr	r6, [r1, #0]
 800b02c:	bf08      	it	eq
 800b02e:	694b      	ldreq	r3, [r1, #20]
 800b030:	600f      	str	r7, [r1, #0]
 800b032:	bf18      	it	ne
 800b034:	2300      	movne	r3, #0
 800b036:	eba6 0807 	sub.w	r8, r6, r7
 800b03a:	608b      	str	r3, [r1, #8]
 800b03c:	f1b8 0f00 	cmp.w	r8, #0
 800b040:	dde9      	ble.n	800b016 <__sflush_r+0xae>
 800b042:	6a21      	ldr	r1, [r4, #32]
 800b044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b046:	4643      	mov	r3, r8
 800b048:	463a      	mov	r2, r7
 800b04a:	4628      	mov	r0, r5
 800b04c:	47b0      	blx	r6
 800b04e:	2800      	cmp	r0, #0
 800b050:	dc08      	bgt.n	800b064 <__sflush_r+0xfc>
 800b052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b064:	4407      	add	r7, r0
 800b066:	eba8 0800 	sub.w	r8, r8, r0
 800b06a:	e7e7      	b.n	800b03c <__sflush_r+0xd4>
 800b06c:	dfbffffe 	.word	0xdfbffffe

0800b070 <_fflush_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	690b      	ldr	r3, [r1, #16]
 800b074:	4605      	mov	r5, r0
 800b076:	460c      	mov	r4, r1
 800b078:	b913      	cbnz	r3, 800b080 <_fflush_r+0x10>
 800b07a:	2500      	movs	r5, #0
 800b07c:	4628      	mov	r0, r5
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	b118      	cbz	r0, 800b08a <_fflush_r+0x1a>
 800b082:	6a03      	ldr	r3, [r0, #32]
 800b084:	b90b      	cbnz	r3, 800b08a <_fflush_r+0x1a>
 800b086:	f7ff fa3d 	bl	800a504 <__sinit>
 800b08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0f3      	beq.n	800b07a <_fflush_r+0xa>
 800b092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b094:	07d0      	lsls	r0, r2, #31
 800b096:	d404      	bmi.n	800b0a2 <_fflush_r+0x32>
 800b098:	0599      	lsls	r1, r3, #22
 800b09a:	d402      	bmi.n	800b0a2 <_fflush_r+0x32>
 800b09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b09e:	f7ff fc38 	bl	800a912 <__retarget_lock_acquire_recursive>
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f7ff ff5f 	bl	800af68 <__sflush_r>
 800b0aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ac:	07da      	lsls	r2, r3, #31
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	d4e4      	bmi.n	800b07c <_fflush_r+0xc>
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	059b      	lsls	r3, r3, #22
 800b0b6:	d4e1      	bmi.n	800b07c <_fflush_r+0xc>
 800b0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ba:	f7ff fc2b 	bl	800a914 <__retarget_lock_release_recursive>
 800b0be:	e7dd      	b.n	800b07c <_fflush_r+0xc>

0800b0c0 <__swhatbuf_r>:
 800b0c0:	b570      	push	{r4, r5, r6, lr}
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	b096      	sub	sp, #88	@ 0x58
 800b0cc:	4615      	mov	r5, r2
 800b0ce:	461e      	mov	r6, r3
 800b0d0:	da0d      	bge.n	800b0ee <__swhatbuf_r+0x2e>
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0d8:	f04f 0100 	mov.w	r1, #0
 800b0dc:	bf14      	ite	ne
 800b0de:	2340      	movne	r3, #64	@ 0x40
 800b0e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	6031      	str	r1, [r6, #0]
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	b016      	add	sp, #88	@ 0x58
 800b0ec:	bd70      	pop	{r4, r5, r6, pc}
 800b0ee:	466a      	mov	r2, sp
 800b0f0:	f000 f848 	bl	800b184 <_fstat_r>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	dbec      	blt.n	800b0d2 <__swhatbuf_r+0x12>
 800b0f8:	9901      	ldr	r1, [sp, #4]
 800b0fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b102:	4259      	negs	r1, r3
 800b104:	4159      	adcs	r1, r3
 800b106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b10a:	e7eb      	b.n	800b0e4 <__swhatbuf_r+0x24>

0800b10c <__smakebuf_r>:
 800b10c:	898b      	ldrh	r3, [r1, #12]
 800b10e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b110:	079d      	lsls	r5, r3, #30
 800b112:	4606      	mov	r6, r0
 800b114:	460c      	mov	r4, r1
 800b116:	d507      	bpl.n	800b128 <__smakebuf_r+0x1c>
 800b118:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	2301      	movs	r3, #1
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	b003      	add	sp, #12
 800b126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b128:	ab01      	add	r3, sp, #4
 800b12a:	466a      	mov	r2, sp
 800b12c:	f7ff ffc8 	bl	800b0c0 <__swhatbuf_r>
 800b130:	9f00      	ldr	r7, [sp, #0]
 800b132:	4605      	mov	r5, r0
 800b134:	4639      	mov	r1, r7
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff f8cc 	bl	800a2d4 <_malloc_r>
 800b13c:	b948      	cbnz	r0, 800b152 <__smakebuf_r+0x46>
 800b13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b142:	059a      	lsls	r2, r3, #22
 800b144:	d4ee      	bmi.n	800b124 <__smakebuf_r+0x18>
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	f043 0302 	orr.w	r3, r3, #2
 800b14e:	81a3      	strh	r3, [r4, #12]
 800b150:	e7e2      	b.n	800b118 <__smakebuf_r+0xc>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	6020      	str	r0, [r4, #0]
 800b156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	9b01      	ldr	r3, [sp, #4]
 800b15e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b162:	b15b      	cbz	r3, 800b17c <__smakebuf_r+0x70>
 800b164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b168:	4630      	mov	r0, r6
 800b16a:	f000 f81d 	bl	800b1a8 <_isatty_r>
 800b16e:	b128      	cbz	r0, 800b17c <__smakebuf_r+0x70>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	f023 0303 	bic.w	r3, r3, #3
 800b176:	f043 0301 	orr.w	r3, r3, #1
 800b17a:	81a3      	strh	r3, [r4, #12]
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	431d      	orrs	r5, r3
 800b180:	81a5      	strh	r5, [r4, #12]
 800b182:	e7cf      	b.n	800b124 <__smakebuf_r+0x18>

0800b184 <_fstat_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d07      	ldr	r5, [pc, #28]	@ (800b1a4 <_fstat_r+0x20>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	602b      	str	r3, [r5, #0]
 800b192:	f7f6 fc6a 	bl	8001a6a <_fstat>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d102      	bne.n	800b1a0 <_fstat_r+0x1c>
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	b103      	cbz	r3, 800b1a0 <_fstat_r+0x1c>
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200009fc 	.word	0x200009fc

0800b1a8 <_isatty_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d06      	ldr	r5, [pc, #24]	@ (800b1c4 <_isatty_r+0x1c>)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	f7f6 fc69 	bl	8001a8a <_isatty>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_isatty_r+0x1a>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_isatty_r+0x1a>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	200009fc 	.word	0x200009fc

0800b1c8 <_init>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr

0800b1d4 <_fini>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	bf00      	nop
 800b1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1da:	bc08      	pop	{r3}
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4770      	bx	lr
