
Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a10c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800a2bc  0800a2bc  0000b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a30c  0800a30c  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a30c  0800a30c  0000b30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a314  0800a314  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a314  0800a314  0000b314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a318  0800a318  0000b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a31c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c06c  2**0
                  CONTENTS
 10 .bss          00000998  2000006c  2000006c  0000c06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a04  20000a04  0000c06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a61c  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b9b  00000000  00000000  000366b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002598  00000000  00000000  0003c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d26  00000000  00000000  0003e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dc0d  00000000  00000000  00040516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e90f  00000000  00000000  0006e123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108d64  00000000  00000000  0009ca32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a5796  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a70c  00000000  00000000  001a57dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001afee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a2a4 	.word	0x0800a2a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800a2a4 	.word	0x0800a2a4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C3_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_I2C3_Init+0x78>)
 80004fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000574 <MX_I2C3_Init+0x7c>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 30000; // changed from 100000
 8000502:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000504:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000508:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800050a:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_I2C3_Init+0x78>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000510:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000516:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000518:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800051c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_I2C3_Init+0x78>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000536:	480e      	ldr	r0, [pc, #56]	@ (8000570 <MX_I2C3_Init+0x78>)
 8000538:	f003 ffde 	bl	80044f8 <HAL_I2C_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 8000542:	f000 fce5 	bl	8000f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000546:	2100      	movs	r1, #0
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <MX_I2C3_Init+0x78>)
 800054a:	f004 f919 	bl	8004780 <HAL_I2CEx_ConfigAnalogFilter>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_I2C3_Init+0x60>
  {
    Error_Handler();
 8000554:	f000 fcdc 	bl	8000f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000558:	2100      	movs	r1, #0
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <MX_I2C3_Init+0x78>)
 800055c:	f004 f94c 	bl	80047f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_I2C3_Init+0x72>
  {
    Error_Handler();
 8000566:	f000 fcd3 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000088 	.word	0x20000088
 8000574:	40005c00 	.word	0x40005c00

08000578 <_write>:
/* USER CODE BEGIN 0 */

extern UART_HandleTypeDef huart1;  // Assuming you're using UART1

int _write(int file, char *ptr, int len)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <_write+0x28>)
 8000590:	f007 f836 	bl	8007600 <HAL_UART_Transmit>
  return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000031c 	.word	0x2000031c

080005a4 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
  * @brief  Callback for RTC expiration. Deactivate the timer and reconfig the system clock and systick timer
  * @param the instance of the realtime clock (rtc)
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    printf("RTC Wake-up!\r\n");
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 80005ae:	f009 fb85 	bl	8009cbc <puts>
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f005 fe76 	bl	80062a4 <HAL_RTCEx_DeactivateWakeUpTimer>
	SystemClock_Config();
 80005b8:	f000 f85e 	bl	8000678 <SystemClock_Config>
	HAL_ResumeTick();
 80005bc:	f001 f988 	bl	80018d0 <HAL_ResumeTick>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	0800a2bc 	.word	0x0800a2bc

080005cc <set_sleepmode>:
  * @brief  Accepts an amount of time to sleep, sets RTC timer, and enters sleep mode
  * @param  sleep_time: Amount of time to sleep (seconds)
  * @retval None
  */
void set_sleepmode(int sleep_time)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint64_t sleep_ticks = sleep_time * (32768 / 16);
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	02c9      	lsls	r1, r1, #11
 80005d8:	17c8      	asrs	r0, r1, #31
 80005da:	460a      	mov	r2, r1
 80005dc:	4603      	mov	r3, r0
 80005de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	HAL_SuspendTick();
 80005e2:	f001 f963 	bl	80018ac <HAL_SuspendTick>
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	4807      	ldr	r0, [pc, #28]	@ (800060c <set_sleepmode+0x40>)
 80005ee:	f005 fd97 	bl	8006120 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <set_sleepmode+0x30>
	{
	  Error_Handler();
 80005f8:	f000 fc8a 	bl	8000f10 <Error_Handler>
	}
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80005fc:	2101      	movs	r1, #1
 80005fe:	2000      	movs	r0, #0
 8000600:	f004 fca2 	bl	8004f48 <HAL_PWR_EnterSLEEPMode>
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000214 	.word	0x20000214

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f001 fa80 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f82e 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fb56 	bl	8000ccc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000620:	f000 f896 	bl	8000750 <MX_ADC1_Init>
  MX_CRC_Init();
 8000624:	f000 f8e6 	bl	80007f4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000628:	f000 f8f8 	bl	800081c <MX_DMA2D_Init>
  MX_FMC_Init();
 800062c:	f000 fafe 	bl	8000c2c <MX_FMC_Init>
  MX_I2C3_Init();
 8000630:	f7ff ff62 	bl	80004f8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000634:	f000 f924 	bl	8000880 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000638:	f000 fa04 	bl	8000a44 <MX_SPI5_Init>
  MX_TIM1_Init();
 800063c:	f000 fa38 	bl	8000ab0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000640:	f000 faca 	bl	8000bd8 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8000644:	f000 fa84 	bl	8000b50 <MX_TIM9_Init>
  MX_RTC_Init();
 8000648:	f000 f99a 	bl	8000980 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 800064c:	f000 fc66 	bl	8000f1c <Motor_Init>
  Motor_SetSpeed(100);
 8000650:	2064      	movs	r0, #100	@ 0x64
 8000652:	f000 fc6d 	bl	8000f30 <Motor_SetSpeed>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000656:	b662      	cpsie	i
}
 8000658:	bf00      	nop
  __enable_irq();

  printf("Initialization complete!\r\n");
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <main+0x60>)
 800065c:	f009 fb2e 	bl	8009cbc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("in loop \n");
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <main+0x64>)
 8000662:	f009 fb2b 	bl	8009cbc <puts>
	  set_sleepmode(3);
 8000666:	2003      	movs	r0, #3
 8000668:	f7ff ffb0 	bl	80005cc <set_sleepmode>
	  printf("in loop \n");
 800066c:	bf00      	nop
 800066e:	e7f7      	b.n	8000660 <main+0x50>
 8000670:	0800a2cc 	.word	0x0800a2cc
 8000674:	0800a2e8 	.word	0x0800a2e8

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	@ 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f009 fbf8 	bl	8009e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemClock_Config+0xd0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <SystemClock_Config+0xd4>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006d8:	2309      	movs	r3, #9
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e2:	2301      	movs	r3, #1
 80006e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006f4:	2348      	movs	r3, #72	@ 0x48
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006fc:	2303      	movs	r3, #3
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f004 fc3f 	bl	8004f88 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000710:	f000 fbfe 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f004 fea1 	bl	8005478 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800073c:	f000 fbe8 	bl	8000f10 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	@ 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_ADC1_Init+0x98>)
 8000764:	4a21      	ldr	r2, [pc, #132]	@ (80007ec <MX_ADC1_Init+0x9c>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000780:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_ADC1_Init+0x98>)
 8000790:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <MX_ADC1_Init+0xa0>)
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_ADC1_Init+0x98>)
 800079c:	2201      	movs	r2, #1
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <MX_ADC1_Init+0x98>)
 80007b0:	f001 f9f4 	bl	8001b9c <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 fba9 	bl	8000f10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007be:	2305      	movs	r3, #5
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_ADC1_Init+0x98>)
 80007d0:	f001 fa28 	bl	8001c24 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 fb99 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000dc 	.word	0x200000dc
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001

080007f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_CRC_Init+0x20>)
 80007fa:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <MX_CRC_Init+0x24>)
 80007fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_CRC_Init+0x20>)
 8000800:	f001 fd20 	bl	8002244 <HAL_CRC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800080a:	f000 fb81 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000124 	.word	0x20000124
 8000818:	40023000 	.word	0x40023000

0800081c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <MX_DMA2D_Init+0x60>)
 8000824:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000850:	4809      	ldr	r0, [pc, #36]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000852:	f001 fd13 	bl	800227c <HAL_DMA2D_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800085c:	f000 fb58 	bl	8000f10 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000860:	2101      	movs	r1, #1
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_DMA2D_Init+0x5c>)
 8000864:	f001 fe64 	bl	8002530 <HAL_DMA2D_ConfigLayer>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800086e:	f000 fb4f 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000012c 	.word	0x2000012c
 800087c:	4002b000 	.word	0x4002b000

08000880 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	@ 0x38
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2234      	movs	r2, #52	@ 0x34
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f009 faf5 	bl	8009e7c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000892:	4b39      	ldr	r3, [pc, #228]	@ (8000978 <MX_LTDC_Init+0xf8>)
 8000894:	4a39      	ldr	r2, [pc, #228]	@ (800097c <MX_LTDC_Init+0xfc>)
 8000896:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000898:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <MX_LTDC_Init+0xf8>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800089e:	4b36      	ldr	r3, [pc, #216]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008a4:	4b34      	ldr	r3, [pc, #208]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008aa:	4b33      	ldr	r3, [pc, #204]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008b0:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008b2:	2209      	movs	r2, #9
 80008b4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008be:	221d      	movs	r2, #29
 80008c0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008ca:	f240 120d 	movw	r2, #269	@ 0x10d
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008d2:	f240 1243 	movw	r2, #323	@ 0x143
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008da:	f240 1217 	movw	r2, #279	@ 0x117
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008e0:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008e2:	f240 1247 	movw	r2, #327	@ 0x147
 80008e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_LTDC_Init+0xf8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000900:	481d      	ldr	r0, [pc, #116]	@ (8000978 <MX_LTDC_Init+0xf8>)
 8000902:	f003 ffb9 	bl	8004878 <HAL_LTDC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 fb00 	bl	8000f10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000914:	23f0      	movs	r3, #240	@ 0xf0
 8000916:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800091c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000920:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000922:	2302      	movs	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000926:	23ff      	movs	r3, #255	@ 0xff
 8000928:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800092e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000932:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000934:	2307      	movs	r3, #7
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000938:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 800093e:	23f0      	movs	r3, #240	@ 0xf0
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000942:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_LTDC_Init+0xf8>)
 8000962:	f004 f91b 	bl	8004b9c <HAL_LTDC_ConfigLayer>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800096c:	f000 fad0 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3738      	adds	r7, #56	@ 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000016c 	.word	0x2000016c
 800097c:	40016800 	.word	0x40016800

08000980 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <MX_RTC_Init+0xbc>)
 800099a:	4a29      	ldr	r2, [pc, #164]	@ (8000a40 <MX_RTC_Init+0xc0>)
 800099c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099e:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009a6:	227f      	movs	r2, #127	@ 0x7f
 80009a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009ac:	22ff      	movs	r2, #255	@ 0xff
 80009ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c2:	481e      	ldr	r0, [pc, #120]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009c4:	f005 f96a 	bl	8005c9c <HAL_RTC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 fa9f 	bl	8000f10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80009d2:	2318      	movs	r3, #24
 80009d4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x48;
 80009d6:	2348      	movs	r3, #72	@ 0x48
 80009d8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <MX_RTC_Init+0xbc>)
 80009ee:	f005 f9d8 	bl	8005da2 <HAL_RTC_SetTime>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 fa8a 	bl	8000f10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009fc:	2301      	movs	r3, #1
 80009fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000a00:	2308      	movs	r3, #8
 8000a02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 8000a04:	2305      	movs	r3, #5
 8000a06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000a08:	2324      	movs	r3, #36	@ 0x24
 8000a0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	480a      	ldr	r0, [pc, #40]	@ (8000a3c <MX_RTC_Init+0xbc>)
 8000a14:	f005 fa5f 	bl	8005ed6 <HAL_RTC_SetDate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a1e:	f000 fa77 	bl	8000f10 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_RTC_Init+0xbc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <MX_RTC_Init+0xbc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000a32:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000214 	.word	0x20000214
 8000a40:	40002800 	.word	0x40002800

08000a44 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <MX_SPI5_Init+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a74:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a78:	2218      	movs	r2, #24
 8000a7a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a90:	220a      	movs	r2, #10
 8000a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_SPI5_Init+0x64>)
 8000a96:	f005 fcb5 	bl	8006404 <HAL_SPI_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000aa0:	f000 fa36 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000234 	.word	0x20000234
 8000aac:	40015000 	.word	0x40015000

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	@ (8000b4c <MX_TIM1_Init+0x9c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af8:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000afa:	f005 fd0c 	bl	8006516 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 fa04 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000b16:	f006 f887 	bl	8006c28 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b20:	f000 f9f6 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_TIM1_Init+0x98>)
 8000b32:	f006 fc85 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f000 f9e8 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000028c 	.word	0x2000028c
 8000b4c:	40010000 	.word	0x40010000

08000b50 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd4 <MX_TIM9_Init+0x84>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b70:	2247      	movs	r2, #71	@ 0x47
 8000b72:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b7c:	2263      	movs	r2, #99	@ 0x63
 8000b7e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000b8c:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000b8e:	f005 fd81 	bl	8006694 <HAL_TIM_PWM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 f9ba 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	@ 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000ba0:	2332      	movs	r3, #50	@ 0x32
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000bb4:	f005 ff76 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000bbe:	f000 f9a7 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM9_Init+0x80>)
 8000bc4:	f000 fcd8 	bl	8001578 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200002d4 	.word	0x200002d4
 8000bd4:	40014000 	.word	0x40014000

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <MX_USART1_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f006 fca6 	bl	8007560 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f979 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000031c 	.word	0x2000031c
 8000c28:	40011000 	.word	0x40011000

08000c2c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c46:	4a20      	ldr	r2, [pc, #128]	@ (8000cc8 <MX_FMC_Init+0x9c>)
 8000c48:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c5e:	2210      	movs	r2, #16
 8000c60:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c64:	2240      	movs	r2, #64	@ 0x40
 8000c66:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c6a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c6e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c7c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000c86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c90:	2307      	movs	r3, #7
 8000c92:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_FMC_Init+0x98>)
 8000cae:	f005 fb75 	bl	800639c <HAL_SDRAM_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cb8:	f000 f92a 	bl	8000f10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000364 	.word	0x20000364
 8000cc8:	a0000140 	.word	0xa0000140

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	@ 0x38
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a7a      	ldr	r2, [pc, #488]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b78      	ldr	r3, [pc, #480]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	623b      	str	r3, [r7, #32]
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	4b74      	ldr	r3, [pc, #464]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a73      	ldr	r2, [pc, #460]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b71      	ldr	r3, [pc, #452]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a6c      	ldr	r2, [pc, #432]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	4b66      	ldr	r3, [pc, #408]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a65      	ldr	r2, [pc, #404]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b63      	ldr	r3, [pc, #396]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b5f      	ldr	r3, [pc, #380]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b5c      	ldr	r3, [pc, #368]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b58      	ldr	r3, [pc, #352]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a57      	ldr	r2, [pc, #348]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b55      	ldr	r3, [pc, #340]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a50      	ldr	r2, [pc, #320]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a49      	ldr	r2, [pc, #292]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b47      	ldr	r3, [pc, #284]	@ (8000ed4 <MX_GPIO_Init+0x208>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2116      	movs	r1, #22
 8000dc6:	4844      	ldr	r0, [pc, #272]	@ (8000ed8 <MX_GPIO_Init+0x20c>)
 8000dc8:	f001 fdf0 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2180      	movs	r1, #128	@ 0x80
 8000dd0:	4842      	ldr	r0, [pc, #264]	@ (8000edc <MX_GPIO_Init+0x210>)
 8000dd2:	f001 fdeb 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000ddc:	4840      	ldr	r0, [pc, #256]	@ (8000ee0 <MX_GPIO_Init+0x214>)
 8000dde:	f001 fde5 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000de8:	483e      	ldr	r0, [pc, #248]	@ (8000ee4 <MX_GPIO_Init+0x218>)
 8000dea:	f001 fddf 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|OTG_FS_PSO_Pin;
 8000dee:	2316      	movs	r3, #22
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4834      	ldr	r0, [pc, #208]	@ (8000ed8 <MX_GPIO_Init+0x20c>)
 8000e06:	f001 fc25 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e0a:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482e      	ldr	r0, [pc, #184]	@ (8000edc <MX_GPIO_Init+0x210>)
 8000e22:	f001 fc17 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4827      	ldr	r0, [pc, #156]	@ (8000edc <MX_GPIO_Init+0x210>)
 8000e3e:	f001 fc09 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e42:	2320      	movs	r3, #32
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4820      	ldr	r0, [pc, #128]	@ (8000ed8 <MX_GPIO_Init+0x20c>)
 8000e58:	f001 fbfc 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481e      	ldr	r0, [pc, #120]	@ (8000ee8 <MX_GPIO_Init+0x21c>)
 8000e70:	f001 fbf0 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4815      	ldr	r0, [pc, #84]	@ (8000ee0 <MX_GPIO_Init+0x214>)
 8000e8a:	f001 fbe3 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480e      	ldr	r0, [pc, #56]	@ (8000ee0 <MX_GPIO_Init+0x214>)
 8000ea8:	f001 fbd4 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000eac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_GPIO_Init+0x218>)
 8000ec6:	f001 fbc5 	bl	8002654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	@ 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021800 	.word	0x40021800
 8000ee8:	40020400 	.word	0x40020400

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efe:	f000 fe2d 	bl	8001b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40001000 	.word	0x40001000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <Motor_Init>:

// Global variables
extern TIM_HandleTypeDef htim9;  // Assuming TIM9 for PWM

void Motor_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Start PWM on PE5
 8000f20:	2100      	movs	r1, #0
 8000f22:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <Motor_Init+0x10>)
 8000f24:	f005 fc06 	bl	8006734 <HAL_TIM_PWM_Start>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200002d4 	.word	0x200002d4

08000f30 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
    // Assuming 16-bit timer, adjust if different
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, speed);
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <Motor_SetSpeed+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200002d4 	.word	0x200002d4

08000f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_MspInit+0x54>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210f      	movs	r1, #15
 8000f96:	f06f 0001 	mvn.w	r0, #1
 8000f9a:	f001 f929 	bl	80021f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_ADC_MspInit+0x7c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d127      	bne.n	800101e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_ADC_MspInit+0x80>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <HAL_ADC_MspInit+0x80>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_ADC_MspInit+0x80>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_ADC_MspInit+0x80>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <HAL_ADC_MspInit+0x80>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_ADC_MspInit+0x80>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001006:	2320      	movs	r3, #32
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <HAL_ADC_MspInit+0x84>)
 800101a:	f001 fb1b 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012000 	.word	0x40012000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <HAL_CRC_MspInit+0x3c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10d      	bne.n	8001062 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_CRC_MspInit+0x40>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_CRC_MspInit+0x40>)
 8001050:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_CRC_MspInit+0x40>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023000 	.word	0x40023000
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <HAL_DMA2D_MspInit+0x48>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d115      	bne.n	80010b6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_DMA2D_MspInit+0x4c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <HAL_DMA2D_MspInit+0x4c>)
 8001094:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_DMA2D_MspInit+0x4c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2105      	movs	r1, #5
 80010aa:	205a      	movs	r0, #90	@ 0x5a
 80010ac:	f001 f8a0 	bl	80021f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010b0:	205a      	movs	r0, #90	@ 0x5a
 80010b2:	f001 f8b9 	bl	8002228 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	4002b000 	.word	0x4002b000
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a29      	ldr	r2, [pc, #164]	@ (800118c <HAL_I2C_MspInit+0xc4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d14b      	bne.n	8001182 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a20      	ldr	r2, [pc, #128]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001122:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001134:	2304      	movs	r3, #4
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4815      	ldr	r0, [pc, #84]	@ (8001194 <HAL_I2C_MspInit+0xcc>)
 8001140:	f001 fa88 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001156:	2304      	movs	r3, #4
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480d      	ldr	r0, [pc, #52]	@ (8001198 <HAL_I2C_MspInit+0xd0>)
 8001162:	f001 fa77 	bl	8002654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 8001170:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_I2C_MspInit+0xc8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40005c00 	.word	0x40005c00
 8001190:	40023800 	.word	0x40023800
 8001194:	40020800 	.word	0x40020800
 8001198:	40020000 	.word	0x40020000

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b09a      	sub	sp, #104	@ 0x68
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b8:	2230      	movs	r2, #48	@ 0x30
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f008 fe5d 	bl	8009e7c <memset>
  if(hltdc->Instance==LTDC)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a85      	ldr	r2, [pc, #532]	@ (80013dc <HAL_LTDC_MspInit+0x240>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	f040 8102 	bne.w	80013d2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011ce:	2308      	movs	r3, #8
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011d2:	2332      	movs	r3, #50	@ 0x32
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011da:	2300      	movs	r3, #0
 80011dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fb9a 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80011ee:	f7ff fe8f 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
 80011f6:	4b7a      	ldr	r3, [pc, #488]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a79      	ldr	r2, [pc, #484]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 80011fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b77      	ldr	r3, [pc, #476]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800120a:	623b      	str	r3, [r7, #32]
 800120c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	4b73      	ldr	r3, [pc, #460]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a72      	ldr	r2, [pc, #456]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b70      	ldr	r3, [pc, #448]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	4b6c      	ldr	r3, [pc, #432]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a6b      	ldr	r2, [pc, #428]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b69      	ldr	r3, [pc, #420]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a64      	ldr	r2, [pc, #400]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b62      	ldr	r3, [pc, #392]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b5e      	ldr	r3, [pc, #376]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a5d      	ldr	r2, [pc, #372]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 800126c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b5b      	ldr	r3, [pc, #364]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b57      	ldr	r3, [pc, #348]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a56      	ldr	r2, [pc, #344]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b50      	ldr	r3, [pc, #320]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a4f      	ldr	r2, [pc, #316]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b4d      	ldr	r3, [pc, #308]	@ (80013e0 <HAL_LTDC_MspInit+0x244>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80012b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c8:	230e      	movs	r3, #14
 80012ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012d0:	4619      	mov	r1, r3
 80012d2:	4844      	ldr	r0, [pc, #272]	@ (80013e4 <HAL_LTDC_MspInit+0x248>)
 80012d4:	f001 f9be 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012d8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80012dc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ea:	230e      	movs	r3, #14
 80012ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012f2:	4619      	mov	r1, r3
 80012f4:	483c      	ldr	r0, [pc, #240]	@ (80013e8 <HAL_LTDC_MspInit+0x24c>)
 80012f6:	f001 f9ad 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80012fa:	2303      	movs	r3, #3
 80012fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800130a:	2309      	movs	r3, #9
 800130c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001312:	4619      	mov	r1, r3
 8001314:	4835      	ldr	r0, [pc, #212]	@ (80013ec <HAL_LTDC_MspInit+0x250>)
 8001316:	f001 f99d 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800131a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800131e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800132c:	230e      	movs	r3, #14
 800132e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001334:	4619      	mov	r1, r3
 8001336:	482d      	ldr	r0, [pc, #180]	@ (80013ec <HAL_LTDC_MspInit+0x250>)
 8001338:	f001 f98c 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800133c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001340:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800134e:	230e      	movs	r3, #14
 8001350:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001352:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001356:	4619      	mov	r1, r3
 8001358:	4825      	ldr	r0, [pc, #148]	@ (80013f0 <HAL_LTDC_MspInit+0x254>)
 800135a:	f001 f97b 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800135e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001362:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001370:	230e      	movs	r3, #14
 8001372:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001378:	4619      	mov	r1, r3
 800137a:	481e      	ldr	r0, [pc, #120]	@ (80013f4 <HAL_LTDC_MspInit+0x258>)
 800137c:	f001 f96a 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001380:	2348      	movs	r3, #72	@ 0x48
 8001382:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001390:	230e      	movs	r3, #14
 8001392:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001398:	4619      	mov	r1, r3
 800139a:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <HAL_LTDC_MspInit+0x25c>)
 800139c:	f001 f95a 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80013a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013a4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013b2:	2309      	movs	r3, #9
 80013b4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <HAL_LTDC_MspInit+0x254>)
 80013be:	f001 f949 	bl	8002654 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2105      	movs	r1, #5
 80013c6:	2058      	movs	r0, #88	@ 0x58
 80013c8:	f000 ff12 	bl	80021f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013cc:	2058      	movs	r0, #88	@ 0x58
 80013ce:	f000 ff2b 	bl	8002228 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80013d2:	bf00      	nop
 80013d4:	3768      	adds	r7, #104	@ 0x68
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40016800 	.word	0x40016800
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020c00 	.word	0x40020c00

080013fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	@ 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2230      	movs	r2, #48	@ 0x30
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f008 fd35 	bl	8009e7c <memset>
  if(hrtc->Instance==RTC)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <HAL_RTC_MspInit+0x5c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d119      	bne.n	8001450 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800141c:	2320      	movs	r3, #32
 800141e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4618      	mov	r0, r3
 800142c:	f004 fa76 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001436:	f7ff fd6b 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_RTC_MspInit+0x60>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2105      	movs	r1, #5
 8001444:	2003      	movs	r0, #3
 8001446:	f000 fed3 	bl	80021f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800144a:	2003      	movs	r0, #3
 800144c:	f000 feec 	bl	8002228 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001450:	bf00      	nop
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40002800 	.word	0x40002800
 800145c:	42470e3c 	.word	0x42470e3c

08001460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_SPI_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12c      	bne.n	80014dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 800148c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014ba:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014cc:	2305      	movs	r3, #5
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_SPI_MspInit+0x8c>)
 80014d8:	f001 f8bc 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40015000 	.word	0x40015000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021400 	.word	0x40021400

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_TIM_Base_MspInit+0x3c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_TIM_Base_MspInit+0x40>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <HAL_TIM_Base_MspInit+0x40>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_TIM_Base_MspInit+0x40>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_TIM_PWM_MspInit+0x3c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_TIM_PWM_MspInit+0x40>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <HAL_TIM_PWM_MspInit+0x40>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001554:	6453      	str	r3, [r2, #68]	@ 0x44
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <HAL_TIM_PWM_MspInit+0x40>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40014000 	.word	0x40014000
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_TIM_MspPostInit+0x68>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d11d      	bne.n	80015d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <HAL_TIM_MspPostInit+0x6c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <HAL_TIM_MspPostInit+0x6c>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <HAL_TIM_MspPostInit+0x6c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015b6:	2320      	movs	r3, #32
 80015b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <HAL_TIM_MspPostInit+0x70>)
 80015d2:	f001 f83f 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40014000 	.word	0x40014000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_UART_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12c      	bne.n	8001668 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001646:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_UART_MspInit+0x8c>)
 8001664:	f000 fff6 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	@ 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40011000 	.word	0x40011000
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <HAL_FMC_MspInit+0x104>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d16f      	bne.n	8001778 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <HAL_FMC_MspInit+0x104>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <HAL_FMC_MspInit+0x108>)
 80016a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a6:	4a37      	ldr	r2, [pc, #220]	@ (8001784 <HAL_FMC_MspInit+0x108>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6393      	str	r3, [r2, #56]	@ 0x38
 80016ae:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <HAL_FMC_MspInit+0x108>)
 80016b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80016ba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80016be:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016cc:	230c      	movs	r3, #12
 80016ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	482c      	ldr	r0, [pc, #176]	@ (8001788 <HAL_FMC_MspInit+0x10c>)
 80016d6:	f000 ffbd 	bl	8002654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80016da:	2301      	movs	r3, #1
 80016dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4826      	ldr	r0, [pc, #152]	@ (800178c <HAL_FMC_MspInit+0x110>)
 80016f4:	f000 ffae 	bl	8002654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016f8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80016fc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800170a:	230c      	movs	r3, #12
 800170c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	481f      	ldr	r0, [pc, #124]	@ (8001790 <HAL_FMC_MspInit+0x114>)
 8001714:	f000 ff9e 	bl	8002654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001718:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800171c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800172a:	230c      	movs	r3, #12
 800172c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4818      	ldr	r0, [pc, #96]	@ (8001794 <HAL_FMC_MspInit+0x118>)
 8001734:	f000 ff8e 	bl	8002654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001738:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800173c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800174a:	230c      	movs	r3, #12
 800174c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4619      	mov	r1, r3
 8001752:	4811      	ldr	r0, [pc, #68]	@ (8001798 <HAL_FMC_MspInit+0x11c>)
 8001754:	f000 ff7e 	bl	8002654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001758:	2360      	movs	r3, #96	@ 0x60
 800175a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001768:	230c      	movs	r3, #12
 800176a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	480a      	ldr	r0, [pc, #40]	@ (800179c <HAL_FMC_MspInit+0x120>)
 8001772:	f000 ff6f 	bl	8002654 <HAL_GPIO_Init>
 8001776:	e000      	b.n	800177a <HAL_FMC_MspInit+0xfe>
    return;
 8001778:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000398 	.word	0x20000398
 8001784:	40023800 	.word	0x40023800
 8001788:	40021400 	.word	0x40021400
 800178c:	40020800 	.word	0x40020800
 8001790:	40021800 	.word	0x40021800
 8001794:	40021000 	.word	0x40021000
 8001798:	40020c00 	.word	0x40020c00
 800179c:	40020400 	.word	0x40020400

080017a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80017a8:	f7ff ff68 	bl	800167c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	@ 0x38
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_InitTick+0xe4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <HAL_InitTick+0xe4>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_InitTick+0xe4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e0:	f107 0210 	add.w	r2, r7, #16
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 f864 	bl	80058b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fa:	f004 f835 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 80017fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8001800:	e004      	b.n	800180c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001802:	f004 f831 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8001806:	4603      	mov	r3, r0
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800180c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180e:	4a23      	ldr	r2, [pc, #140]	@ (800189c <HAL_InitTick+0xe8>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	3b01      	subs	r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <HAL_InitTick+0xec>)
 800181c:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <HAL_InitTick+0xf0>)
 800181e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_InitTick+0xec>)
 8001822:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001826:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001828:	4a1d      	ldr	r2, [pc, #116]	@ (80018a0 <HAL_InitTick+0xec>)
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HAL_InitTick+0xec>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_InitTick+0xec>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_InitTick+0xec>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001840:	4817      	ldr	r0, [pc, #92]	@ (80018a0 <HAL_InitTick+0xec>)
 8001842:	f004 fe68 	bl	8006516 <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11b      	bne.n	800188c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001854:	4812      	ldr	r0, [pc, #72]	@ (80018a0 <HAL_InitTick+0xec>)
 8001856:	f004 fead 	bl	80065b4 <HAL_TIM_Base_Start_IT>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001860:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001868:	2036      	movs	r0, #54	@ 0x36
 800186a:	f000 fcdd 	bl	8002228 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d808      	bhi.n	8001886 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	2036      	movs	r0, #54	@ 0x36
 800187a:	f000 fcb9 	bl	80021f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_InitTick+0xf4>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e002      	b.n	800188c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800188c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001890:	4618      	mov	r0, r3
 8001892:	3738      	adds	r7, #56	@ 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	2000039c 	.word	0x2000039c
 80018a4:	40001000 	.word	0x40001000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_SuspendTick+0x20>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_SuspendTick+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	60da      	str	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000039c 	.word	0x2000039c

080018d0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_ResumeTick+0x20>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_ResumeTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	60da      	str	r2, [r3, #12]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000039c 	.word	0x2000039c

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <NMI_Handler+0x4>

080018fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <MemManage_Handler+0x4>

0800190c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <UsageFault_Handler+0x4>

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <RTC_WKUP_IRQHandler+0x10>)
 8001932:	f004 fd0f 	bl	8006354 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000214 	.word	0x20000214

08001940 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <TIM6_DAC_IRQHandler+0x10>)
 8001946:	f004 ffbd 	bl	80068c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000039c 	.word	0x2000039c

08001954 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <OTG_HS_IRQHandler+0x10>)
 800195a:	f001 f840 	bl	80029de <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200004d8 	.word	0x200004d8

08001968 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <LTDC_IRQHandler+0x10>)
 800196e:	f003 f853 	bl	8004a18 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000016c 	.word	0x2000016c

0800197c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <DMA2D_IRQHandler+0x10>)
 8001982:	f000 fcc4 	bl	800230e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000012c 	.word	0x2000012c

08001990 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e00a      	b.n	80019b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a2:	f3af 8000 	nop.w
 80019a6:	4601      	mov	r1, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	b2ca      	uxtb	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf0      	blt.n	80019a2 <_read+0x12>
  }

  return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f2:	605a      	str	r2, [r3, #4]
  return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_isatty>:

int _isatty(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f008 fa68 	bl	8009f38 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20030000 	.word	0x20030000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	200003e4 	.word	0x200003e4
 8001a9c:	20000a08 	.word	0x20000a08

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001afc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac8:	f7ff ffea 	bl	8001aa0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001acc:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ace:	490d      	ldr	r1, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f008 fa27 	bl	8009f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7fe fd8b 	bl	8000610 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001afc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b08:	0800a31c 	.word	0x0800a31c
  ldr r2, =_sbss
 8001b0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b10:	20000a04 	.word	0x20000a04

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 fb4a 	bl	80021da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff fe34 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fa02 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	200003e8 	.word	0x200003e8

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200003e8 	.word	0x200003e8

08001b9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e033      	b.n	8001c1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff f9f6 	bl	8000fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be2:	f023 0302 	bic.w	r3, r3, #2
 8001be6:	f043 0202 	orr.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f94a 	bl	8001e88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c0a:	e001      	b.n	8001c10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e113      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x244>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d925      	bls.n	8001c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68d9      	ldr	r1, [r3, #12]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	3b1e      	subs	r3, #30
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4403      	add	r3, r0
 8001c8e:	3b1e      	subs	r3, #30
 8001c90:	409a      	lsls	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	e022      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6919      	ldr	r1, [r3, #16]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4403      	add	r3, r0
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d824      	bhi.n	8001d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b05      	subs	r3, #5
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d32:	e04c      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d824      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b23      	subs	r3, #35	@ 0x23
 8001d4e:	221f      	movs	r2, #31
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	@ 0x23
 8001d78:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d84:	e023      	b.n	8001dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b41      	subs	r3, #65	@ 0x41
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	@ 0x41
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dce:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <HAL_ADC_ConfigChannel+0x250>)
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <HAL_ADC_ConfigChannel+0x254>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d8>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_ADC_ConfigChannel+0x254>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12b      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_ADC_ConfigChannel+0x258>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d122      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <HAL_ADC_ConfigChannel+0x258>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_ADC_ConfigChannel+0x25c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <HAL_ADC_ConfigChannel+0x260>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0c9a      	lsrs	r2, r3, #18
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40012300 	.word	0x40012300
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	10000012 	.word	0x10000012
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	4b79      	ldr	r3, [pc, #484]	@ (8002078 <ADC_Init+0x1f0>)
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	4a58      	ldr	r2, [pc, #352]	@ (800207c <ADC_Init+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d022      	beq.n	8001f66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e00f      	b.n	8001f86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0202 	bic.w	r2, r2, #2
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
 8001fa0:	005a      	lsls	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fc2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	035a      	lsls	r2, r3, #13
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e007      	b.n	8001ffc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800200a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	3b01      	subs	r3, #1
 8002018:	051a      	lsls	r2, r3, #20
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800203e:	025a      	lsls	r2, r3, #9
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	029a      	lsls	r2, r3, #10
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	0f000001 	.word	0x0f000001

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ff4c 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002202:	f7ff ff61 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	6978      	ldr	r0, [r7, #20]
 800220e:	f7ff ffb1 	bl	8002174 <NVIC_EncodePriority>
 8002212:	4602      	mov	r2, r0
 8002214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff80 	bl	8002120 <__NVIC_SetPriority>
}
 8002220:	bf00      	nop
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff54 	bl	80020e4 <__NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e00e      	b.n	8002274 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	795b      	ldrb	r3, [r3, #5]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fee4 	bl	8001034 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03b      	b.n	8002306 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fee8 	bl	8001078 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022cc:	f023 0107 	bic.w	r1, r3, #7
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d1      	ldr	r1, [r2, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d026      	beq.n	800237e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d021      	beq.n	800237e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002348:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2204      	movs	r2, #4
 8002362:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d026      	beq.n	80023d6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d021      	beq.n	80023d6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2220      	movs	r2, #32
 80023a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d026      	beq.n	800242e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d021      	beq.n	800242e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2208      	movs	r2, #8
 8002400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	f043 0204 	orr.w	r2, r3, #4
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00e      	beq.n	8002460 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2204      	movs	r2, #4
 8002458:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f853 	bl	8002506 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d024      	beq.n	80024b4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01f      	beq.n	80024b4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002482:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2202      	movs	r2, #2
 800248a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01f      	beq.n	80024fe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01a      	beq.n	80024fe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f80e 	bl	800251a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_DMA2D_ConfigLayer+0x20>
 800254c:	2302      	movs	r3, #2
 800254e:	e079      	b.n	8002644 <HAL_DMA2D_ConfigLayer+0x114>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	3318      	adds	r3, #24
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800257a:	4b35      	ldr	r3, [pc, #212]	@ (8002650 <HAL_DMA2D_ConfigLayer+0x120>)
 800257c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	d003      	beq.n	800258e <HAL_DMA2D_ConfigLayer+0x5e>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b09      	cmp	r3, #9
 800258c:	d107      	bne.n	800259e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e005      	b.n	80025aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d120      	bne.n	80025f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	ea02 0103 	and.w	r1, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d003      	beq.n	80025e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b09      	cmp	r3, #9
 80025e0:	d127      	bne.n	8002632 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80025f0:	e01f      	b.n	8002632 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	ea02 0103 	and.w	r1, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	430a      	orrs	r2, r1
 8002608:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b0a      	cmp	r3, #10
 800261a:	d003      	beq.n	8002624 <HAL_DMA2D_ConfigLayer+0xf4>
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d106      	bne.n	8002632 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002630:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	ff03000f 	.word	0xff03000f

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e177      	b.n	8002960 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8166 	bne.w	800295a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80c0 	beq.w	800295a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b66      	ldr	r3, [pc, #408]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a65      	ldr	r2, [pc, #404]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b63      	ldr	r3, [pc, #396]	@ (8002978 <HAL_GPIO_Init+0x324>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a61      	ldr	r2, [pc, #388]	@ (800297c <HAL_GPIO_Init+0x328>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <HAL_GPIO_Init+0x32c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d037      	beq.n	8002892 <HAL_GPIO_Init+0x23e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a57      	ldr	r2, [pc, #348]	@ (8002984 <HAL_GPIO_Init+0x330>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d031      	beq.n	800288e <HAL_GPIO_Init+0x23a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a56      	ldr	r2, [pc, #344]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <HAL_GPIO_Init+0x236>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a55      	ldr	r2, [pc, #340]	@ (800298c <HAL_GPIO_Init+0x338>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_Init+0x232>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a54      	ldr	r2, [pc, #336]	@ (8002990 <HAL_GPIO_Init+0x33c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_Init+0x22e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a53      	ldr	r2, [pc, #332]	@ (8002994 <HAL_GPIO_Init+0x340>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0x22a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_GPIO_Init+0x344>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x226>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a51      	ldr	r2, [pc, #324]	@ (800299c <HAL_GPIO_Init+0x348>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x222>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a50      	ldr	r2, [pc, #320]	@ (80029a0 <HAL_GPIO_Init+0x34c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x21e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4f      	ldr	r2, [pc, #316]	@ (80029a4 <HAL_GPIO_Init+0x350>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x21a>
 800286a:	2309      	movs	r3, #9
 800286c:	e012      	b.n	8002894 <HAL_GPIO_Init+0x240>
 800286e:	230a      	movs	r3, #10
 8002870:	e010      	b.n	8002894 <HAL_GPIO_Init+0x240>
 8002872:	2308      	movs	r3, #8
 8002874:	e00e      	b.n	8002894 <HAL_GPIO_Init+0x240>
 8002876:	2307      	movs	r3, #7
 8002878:	e00c      	b.n	8002894 <HAL_GPIO_Init+0x240>
 800287a:	2306      	movs	r3, #6
 800287c:	e00a      	b.n	8002894 <HAL_GPIO_Init+0x240>
 800287e:	2305      	movs	r3, #5
 8002880:	e008      	b.n	8002894 <HAL_GPIO_Init+0x240>
 8002882:	2304      	movs	r3, #4
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x240>
 8002886:	2303      	movs	r3, #3
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x240>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x240>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x240>
 8002892:	2300      	movs	r3, #0
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a4:	4935      	ldr	r1, [pc, #212]	@ (800297c <HAL_GPIO_Init+0x328>)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b2:	4b3d      	ldr	r3, [pc, #244]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d6:	4a34      	ldr	r2, [pc, #208]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028dc:	4b32      	ldr	r3, [pc, #200]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002906:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292a:	4a1f      	ldr	r2, [pc, #124]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002954:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <HAL_GPIO_Init+0x354>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3301      	adds	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	f67f ae84 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40013800 	.word	0x40013800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021400 	.word	0x40021400
 8002998:	40021800 	.word	0x40021800
 800299c:	40021c00 	.word	0x40021c00
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40022400 	.word	0x40022400
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f005 fb93 	bl	8008120 <USB_GetMode>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 80fb 	bne.w	8002bf8 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 fb56 	bl	80080b8 <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80f1 	beq.w	8002bf6 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f005 fb4d 	bl	80080b8 <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a28:	d104      	bne.n	8002a34 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a32:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fb3d 	bl	80080b8 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a48:	d104      	bne.n	8002a54 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 fb2d 	bl	80080b8 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a68:	d104      	bne.n	8002a74 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a72:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fb1d 	bl	80080b8 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d103      	bne.n	8002a90 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f005 fb0f 	bl	80080b8 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aa4:	d120      	bne.n	8002ae8 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002aae:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d113      	bne.n	8002ae8 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	6938      	ldr	r0, [r7, #16]
 8002ac4:	f005 fa40 	bl	8007f48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ac8:	6938      	ldr	r0, [r7, #16]
 8002aca:	f005 fa6f 	bl	8007fac <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7a5b      	ldrb	r3, [r3, #9]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d105      	bne.n	8002ae2 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f005 fb2d 	bl	800813c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f006 fea0 	bl	8009828 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 fae3 	bl	80080b8 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002afc:	d102      	bne.n	8002b04 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f001 fc87 	bl	8004412 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f005 fad5 	bl	80080b8 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d106      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f006 fe69 	bl	80097f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2208      	movs	r2, #8
 8002b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 fac4 	bl	80080b8 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b3a:	d139      	bne.n	8002bb0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f005 fb38 	bl	80081b6 <USB_HC_ReadInterrupt>
 8002b46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e025      	b.n	8002b9a <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b78:	d106      	bne.n	8002b88 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f859 	bl	8002c38 <HCD_HC_IN_IRQHandler>
 8002b86:	e005      	b.n	8002b94 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 febb 	bl	800390a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	795b      	ldrb	r3, [r3, #5]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d3d3      	bcc.n	8002b4e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 fa7f 	bl	80080b8 <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d101      	bne.n	8002bc8 <HAL_HCD_IRQHandler+0x1ea>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_HCD_IRQHandler+0x1ec>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0210 	bic.w	r2, r2, #16
 8002bdc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 fb38 	bl	8004254 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0210 	orr.w	r2, r2, #16
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	e000      	b.n	8002bf8 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002bf6:	bf00      	nop
    }
  }
}
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_HCD_Stop+0x16>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e00d      	b.n	8002c30 <HAL_HCD_Stop+0x32>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f005 fbf9 	bl	8008418 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fa41 	bl	80080de <USB_ReadChInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d11a      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c72:	461a      	mov	r2, r3
 8002c74:	2304      	movs	r3, #4
 8002c76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	334d      	adds	r3, #77	@ 0x4d
 8002c88:	2207      	movs	r2, #7
 8002c8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fa9f 	bl	80081d8 <USB_HC_Halt>
 8002c9a:	e09e      	b.n	8002dda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f005 fa1a 	bl	80080de <USB_ReadChInterrupts>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb4:	d11b      	bne.n	8002cee <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	334d      	adds	r3, #77	@ 0x4d
 8002cda:	2208      	movs	r2, #8
 8002cdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 fa76 	bl	80081d8 <USB_HC_Halt>
 8002cec:	e075      	b.n	8002dda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f005 f9f1 	bl	80080de <USB_ReadChInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11a      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2308      	movs	r3, #8
 8002d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	334d      	adds	r3, #77	@ 0x4d
 8002d28:	2206      	movs	r2, #6
 8002d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fa4f 	bl	80081d8 <USB_HC_Halt>
 8002d3a:	e04e      	b.n	8002dda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 f9ca 	bl	80080de <USB_ReadChInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d54:	d11b      	bne.n	8002d8e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	334d      	adds	r3, #77	@ 0x4d
 8002d7a:	2209      	movs	r2, #9
 8002d7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 fa26 	bl	80081d8 <USB_HC_Halt>
 8002d8c:	e025      	b.n	8002dda <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 f9a1 	bl	80080de <USB_ReadChInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da2:	2b80      	cmp	r3, #128	@ 0x80
 8002da4:	d119      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	334d      	adds	r3, #77	@ 0x4d
 8002dc8:	2207      	movs	r2, #7
 8002dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f005 f9ff 	bl	80081d8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f005 f97b 	bl	80080de <USB_ReadChInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df2:	d112      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 f9eb 	bl	80081d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e14:	6093      	str	r3, [r2, #8]
 8002e16:	f000 bd75 	b.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f95b 	bl	80080de <USB_ReadChInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	f040 8128 	bne.w	8003084 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2320      	movs	r3, #32
 8002e44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	331b      	adds	r3, #27
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d119      	bne.n	8002e90 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	331b      	adds	r3, #27
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	0151      	lsls	r1, r2, #5
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	440a      	add	r2, r1
 8002e86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	799b      	ldrb	r3, [r3, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3330      	adds	r3, #48	@ 0x30
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	1ac9      	subs	r1, r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4403      	add	r3, r0
 8002ecc:	3338      	adds	r3, #56	@ 0x38
 8002ece:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	334d      	adds	r3, #77	@ 0x4d
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3344      	adds	r3, #68	@ 0x44
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2301      	movs	r3, #1
 8002f08:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3326      	adds	r3, #38	@ 0x26
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3326      	adds	r3, #38	@ 0x26
 8002f30:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d110      	bne.n	8002f58 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f005 f94a 	bl	80081d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	2310      	movs	r3, #16
 8002f54:	6093      	str	r3, [r2, #8]
 8002f56:	e03d      	b.n	8002fd4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3326      	adds	r3, #38	@ 0x26
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d00a      	beq.n	8002f84 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3326      	adds	r3, #38	@ 0x26
 8002f7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d127      	bne.n	8002fd4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	0151      	lsls	r1, r2, #5
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	440a      	add	r2, r1
 8002f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fa2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334c      	adds	r3, #76	@ 0x4c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	334c      	adds	r3, #76	@ 0x4c
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f006 fc38 	bl	8009844 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	799b      	ldrb	r3, [r3, #6]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d13b      	bne.n	8003054 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3338      	adds	r3, #56	@ 0x38
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4403      	add	r3, r0
 8002ffc:	3328      	adds	r3, #40	@ 0x28
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	440b      	add	r3, r1
 8003002:	1e59      	subs	r1, r3, #1
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4403      	add	r3, r0
 8003012:	3328      	adds	r3, #40	@ 0x28
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	fbb1 f3f3 	udiv	r3, r1, r3
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8470 	beq.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333c      	adds	r3, #60	@ 0x3c
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2d8      	uxtb	r0, r3
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	333c      	adds	r3, #60	@ 0x3c
 800304c:	4602      	mov	r2, r0
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	f000 bc58 	b.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	333c      	adds	r3, #60	@ 0x3c
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2d8      	uxtb	r0, r3
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	333c      	adds	r3, #60	@ 0x3c
 800307c:	4602      	mov	r2, r0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	f000 bc40 	b.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f005 f826 	bl	80080de <USB_ReadChInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b20      	cmp	r3, #32
 800309a:	d131      	bne.n	8003100 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	2320      	movs	r3, #32
 80030ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	331a      	adds	r3, #26
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 841f 	bne.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	331b      	adds	r3, #27
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334d      	adds	r3, #77	@ 0x4d
 80030ea:	2203      	movs	r2, #3
 80030ec:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f005 f86e 	bl	80081d8 <USB_HC_Halt>
 80030fc:	f000 bc02 	b.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f004 ffe8 	bl	80080de <USB_ReadChInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	f040 8305 	bne.w	8003724 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	2302      	movs	r3, #2
 800312a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334d      	adds	r3, #77	@ 0x4d
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d114      	bne.n	800316c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334d      	adds	r3, #77	@ 0x4d
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334c      	adds	r3, #76	@ 0x4c
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e2cc      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d114      	bne.n	80031ac <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334d      	adds	r3, #77	@ 0x4d
 8003192:	2202      	movs	r2, #2
 8003194:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334c      	adds	r3, #76	@ 0x4c
 80031a6:	2205      	movs	r2, #5
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e2ac      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	334d      	adds	r3, #77	@ 0x4d
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b07      	cmp	r3, #7
 80031c0:	d00b      	beq.n	80031da <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334d      	adds	r3, #77	@ 0x4d
 80031d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	f040 80a6 	bne.w	8003326 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	334d      	adds	r3, #77	@ 0x4d
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3344      	adds	r3, #68	@ 0x44
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1c59      	adds	r1, r3, #1
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4403      	add	r3, r0
 800320e:	3344      	adds	r3, #68	@ 0x44
 8003210:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3344      	adds	r3, #68	@ 0x44
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d943      	bls.n	80032b0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3344      	adds	r3, #68	@ 0x44
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	331a      	adds	r3, #26
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d123      	bne.n	800329a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	331b      	adds	r3, #27
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	331c      	adds	r3, #28
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	0151      	lsls	r1, r2, #5
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	440a      	add	r2, r1
 8003290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003298:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334c      	adds	r3, #76	@ 0x4c
 80032aa:	2204      	movs	r2, #4
 80032ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ae:	e229      	b.n	8003704 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	@ 0x4c
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3326      	adds	r3, #38	@ 0x26
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3326      	adds	r3, #38	@ 0x26
 80032ea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	f040 8209 	bne.w	8003704 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003308:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003310:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003324:	e1ee      	b.n	8003704 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334d      	adds	r3, #77	@ 0x4d
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b05      	cmp	r3, #5
 800333a:	f040 80c8 	bne.w	80034ce <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334d      	adds	r3, #77	@ 0x4d
 800334e:	2202      	movs	r2, #2
 8003350:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	331b      	adds	r3, #27
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 81ce 	bne.w	8003706 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3326      	adds	r3, #38	@ 0x26
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d16b      	bne.n	8003458 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3348      	adds	r3, #72	@ 0x48
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	3348      	adds	r3, #72	@ 0x48
 80033a2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3348      	adds	r3, #72	@ 0x48
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d943      	bls.n	8003442 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3348      	adds	r3, #72	@ 0x48
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	331b      	adds	r3, #27
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3344      	adds	r3, #68	@ 0x44
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d809      	bhi.n	800340c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	331c      	adds	r3, #28
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	440a      	add	r2, r1
 8003422:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334c      	adds	r3, #76	@ 0x4c
 800343c:	2204      	movs	r2, #4
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e014      	b.n	800346c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334c      	adds	r3, #76	@ 0x4c
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e009      	b.n	800346c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	334c      	adds	r3, #76	@ 0x4c
 8003468:	2202      	movs	r2, #2
 800346a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3326      	adds	r3, #38	@ 0x26
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3326      	adds	r3, #38	@ 0x26
 8003492:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003494:	2b02      	cmp	r3, #2
 8003496:	f040 8136 	bne.w	8003706 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e11b      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	334d      	adds	r3, #77	@ 0x4d
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	f040 8081 	bne.w	80035e8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	334d      	adds	r3, #77	@ 0x4d
 80034f6:	2202      	movs	r2, #2
 80034f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	331b      	adds	r3, #27
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 80fa 	bne.w	8003706 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	334c      	adds	r3, #76	@ 0x4c
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	0151      	lsls	r1, r2, #5
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	440a      	add	r2, r1
 800353c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003544:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	0151      	lsls	r1, r2, #5
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	440a      	add	r2, r1
 800355c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003564:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	440a      	add	r2, r1
 800357c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003580:	f023 0320 	bic.w	r3, r3, #32
 8003584:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3326      	adds	r3, #38	@ 0x26
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3326      	adds	r3, #38	@ 0x26
 80035ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	f040 80a9 	bne.w	8003706 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e08e      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d143      	bne.n	8003686 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	@ 0x4d
 800360e:	2202      	movs	r2, #2
 8003610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	334c      	adds	r3, #76	@ 0x4c
 8003622:	2202      	movs	r2, #2
 8003624:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3326      	adds	r3, #38	@ 0x26
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3326      	adds	r3, #38	@ 0x26
 800364c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800364e:	2b02      	cmp	r3, #2
 8003650:	d159      	bne.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003668:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003670:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	e03f      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	334d      	adds	r3, #77	@ 0x4d
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d126      	bne.n	80036ea <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334d      	adds	r3, #77	@ 0x4d
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	3344      	adds	r3, #68	@ 0x44
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4403      	add	r3, r0
 80036d0:	3344      	adds	r3, #68	@ 0x44
 80036d2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334c      	adds	r3, #76	@ 0x4c
 80036e4:	2204      	movs	r2, #4
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00d      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	334d      	adds	r3, #77	@ 0x4d
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f000 8100 	beq.w	8003902 <HCD_HC_IN_IRQHandler+0xcca>
 8003702:	e000      	b.n	8003706 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003704:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f006 f891 	bl	8009844 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003722:	e0ef      	b.n	8003904 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f004 fcd6 	bl	80080de <USB_ReadChInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	d12f      	bne.n	800379c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	2340      	movs	r3, #64	@ 0x40
 800374c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	334d      	adds	r3, #77	@ 0x4d
 800375e:	2205      	movs	r2, #5
 8003760:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	331a      	adds	r3, #26
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3344      	adds	r3, #68	@ 0x44
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f004 fd1f 	bl	80081d8 <USB_HC_Halt>
 800379a:	e0b3      	b.n	8003904 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 fc9a 	bl	80080de <USB_ReadChInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	f040 80a7 	bne.w	8003904 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3326      	adds	r3, #38	@ 0x26
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d11b      	bne.n	8003804 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3344      	adds	r3, #68	@ 0x44
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	@ 0x4d
 80037f0:	2204      	movs	r2, #4
 80037f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f004 fceb 	bl	80081d8 <USB_HC_Halt>
 8003802:	e03f      	b.n	8003884 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3326      	adds	r3, #38	@ 0x26
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3326      	adds	r3, #38	@ 0x26
 800382a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800382c:	2b02      	cmp	r3, #2
 800382e:	d129      	bne.n	8003884 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3344      	adds	r3, #68	@ 0x44
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HCD_HC_IN_IRQHandler+0xc2a>
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	331b      	adds	r3, #27
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d110      	bne.n	8003884 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	334d      	adds	r3, #77	@ 0x4d
 8003872:	2204      	movs	r2, #4
 8003874:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fcaa 	bl	80081d8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	331b      	adds	r3, #27
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d129      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	331b      	adds	r3, #27
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038cc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038e8:	f043 0320 	orr.w	r3, r3, #32
 80038ec:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	2310      	movs	r3, #16
 80038fe:	6093      	str	r3, [r2, #8]
 8003900:	e000      	b.n	8003904 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003902:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f004 fbd8 	bl	80080de <USB_ReadChInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d11b      	bne.n	8003970 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	2304      	movs	r3, #4
 8003948:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	2207      	movs	r2, #7
 800395c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f004 fc36 	bl	80081d8 <USB_HC_Halt>
 800396c:	f000 bc6f 	b.w	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f004 fbb0 	bl	80080de <USB_ReadChInterrupts>
 800397e:	4603      	mov	r3, r0
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b20      	cmp	r3, #32
 8003986:	f040 8082 	bne.w	8003a8e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003996:	461a      	mov	r2, r3
 8003998:	2320      	movs	r3, #32
 800399a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3319      	adds	r3, #25
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d124      	bne.n	80039fc <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3319      	adds	r3, #25
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	334c      	adds	r3, #76	@ 0x4c
 80039d6:	2202      	movs	r2, #2
 80039d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	@ 0x4d
 80039ea:	2203      	movs	r2, #3
 80039ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 fbee 	bl	80081d8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	331a      	adds	r3, #26
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	f040 841d 	bne.w	800424e <HCD_HC_OUT_IRQHandler+0x944>
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	331b      	adds	r3, #27
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 8411 	bne.w	800424e <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3326      	adds	r3, #38	@ 0x26
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d009      	beq.n	8003a56 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	331b      	adds	r3, #27
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334d      	adds	r3, #77	@ 0x4d
 8003a66:	2203      	movs	r2, #3
 8003a68:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fbb0 	bl	80081d8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3344      	adds	r3, #68	@ 0x44
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e3df      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 fb21 	bl	80080de <USB_ReadChInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa6:	d111      	bne.n	8003acc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 fb87 	bl	80081d8 <USB_HC_Halt>
 8003aca:	e3c0      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 fb02 	bl	80080de <USB_ReadChInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d168      	bne.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3344      	adds	r3, #68	@ 0x44
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 faec 	bl	80080de <USB_ReadChInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d112      	bne.n	8003b36 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3319      	adds	r3, #25
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b30:	461a      	mov	r2, r3
 8003b32:	2340      	movs	r3, #64	@ 0x40
 8003b34:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	331b      	adds	r3, #27
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d019      	beq.n	8003b80 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2301      	movs	r3, #1
 8003b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334d      	adds	r3, #77	@ 0x4d
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 fb12 	bl	80081d8 <USB_HC_Halt>
 8003bb4:	e34b      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fa8d 	bl	80080de <USB_ReadChInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d139      	bne.n	8003c42 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334d      	adds	r3, #77	@ 0x4d
 8003bde:	2205      	movs	r2, #5
 8003be0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	331a      	adds	r3, #26
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	3319      	adds	r3, #25
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3344      	adds	r3, #68	@ 0x44
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 fad5 	bl	80081d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2340      	movs	r3, #64	@ 0x40
 8003c3e:	6093      	str	r3, [r2, #8]
 8003c40:	e305      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fa47 	bl	80080de <USB_ReadChInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d11a      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c66:	461a      	mov	r2, r3
 8003c68:	2308      	movs	r3, #8
 8003c6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334d      	adds	r3, #77	@ 0x4d
 8003c7c:	2206      	movs	r2, #6
 8003c7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f004 faa5 	bl	80081d8 <USB_HC_Halt>
 8003c8e:	e2de      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f004 fa20 	bl	80080de <USB_ReadChInterrupts>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d144      	bne.n	8003d32 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3344      	adds	r3, #68	@ 0x44
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334d      	adds	r3, #77	@ 0x4d
 8003ccc:	2204      	movs	r2, #4
 8003cce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3319      	adds	r3, #25
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3319      	adds	r3, #25
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f004 fa5d 	bl	80081d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	e28d      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 f9cf 	bl	80080de <USB_ReadChInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d169      	bne.n	8003e1e <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	799b      	ldrb	r3, [r3, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d111      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334d      	adds	r3, #77	@ 0x4d
 8003d62:	2207      	movs	r2, #7
 8003d64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 fa32 	bl	80081d8 <USB_HC_Halt>
 8003d74:	e049      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3344      	adds	r3, #68	@ 0x44
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4403      	add	r3, r0
 8003d96:	3344      	adds	r3, #68	@ 0x44
 8003d98:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3344      	adds	r3, #68	@ 0x44
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d922      	bls.n	8003df6 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3344      	adds	r3, #68	@ 0x44
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	334c      	adds	r3, #76	@ 0x4c
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	334c      	adds	r3, #76	@ 0x4c
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f005 fd28 	bl	8009844 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003df4:	e009      	b.n	8003e0a <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	334c      	adds	r3, #76	@ 0x4c
 8003e06:	2202      	movs	r2, #2
 8003e08:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e16:	461a      	mov	r2, r3
 8003e18:	2380      	movs	r3, #128	@ 0x80
 8003e1a:	6093      	str	r3, [r2, #8]
 8003e1c:	e217      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 f959 	bl	80080de <USB_ReadChInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e36:	d11b      	bne.n	8003e70 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	334d      	adds	r3, #77	@ 0x4d
 8003e48:	2209      	movs	r2, #9
 8003e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f004 f9bf 	bl	80081d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e66:	461a      	mov	r2, r3
 8003e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e6c:	6093      	str	r3, [r2, #8]
 8003e6e:	e1ee      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f004 f930 	bl	80080de <USB_ReadChInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	f040 81df 	bne.w	8004248 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	2302      	movs	r3, #2
 8003e9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	334d      	adds	r3, #77	@ 0x4d
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 8093 	bne.w	8003fda <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	334d      	adds	r3, #77	@ 0x4d
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	334c      	adds	r3, #76	@ 0x4c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3326      	adds	r3, #38	@ 0x26
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d00b      	beq.n	8003f0a <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	3326      	adds	r3, #38	@ 0x26
 8003f02:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	f040 8190 	bne.w	800422a <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	799b      	ldrb	r3, [r3, #6]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d115      	bne.n	8003f3e <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	333d      	adds	r3, #61	@ 0x3d
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	f083 0301 	eor.w	r3, r3, #1
 8003f2a:	b2d8      	uxtb	r0, r3
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	333d      	adds	r3, #61	@ 0x3d
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	799b      	ldrb	r3, [r3, #6]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 8171 	bne.w	800422a <HCD_HC_OUT_IRQHandler+0x920>
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3334      	adds	r3, #52	@ 0x34
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8165 	beq.w	800422a <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3334      	adds	r3, #52	@ 0x34
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4403      	add	r3, r0
 8003f80:	3328      	adds	r3, #40	@ 0x28
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	440b      	add	r3, r1
 8003f86:	1e59      	subs	r1, r3, #1
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4403      	add	r3, r0
 8003f96:	3328      	adds	r3, #40	@ 0x28
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 813f 	beq.w	800422a <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	333d      	adds	r3, #61	@ 0x3d
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	f083 0301 	eor.w	r3, r3, #1
 8003fc4:	b2d8      	uxtb	r0, r3
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	333d      	adds	r3, #61	@ 0x3d
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e127      	b.n	800422a <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	334d      	adds	r3, #77	@ 0x4d
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d120      	bne.n	8004032 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	334d      	adds	r3, #77	@ 0x4d
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	331b      	adds	r3, #27
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	f040 8107 	bne.w	800422a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	334c      	adds	r3, #76	@ 0x4c
 800402c:	2202      	movs	r2, #2
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	e0fb      	b.n	800422a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	334d      	adds	r3, #77	@ 0x4d
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b04      	cmp	r3, #4
 8004046:	d13a      	bne.n	80040be <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	334d      	adds	r3, #77	@ 0x4d
 8004058:	2202      	movs	r2, #2
 800405a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334c      	adds	r3, #76	@ 0x4c
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	331b      	adds	r3, #27
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b01      	cmp	r3, #1
 8004084:	f040 80d1 	bne.w	800422a <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	331b      	adds	r3, #27
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ba:	6053      	str	r3, [r2, #4]
 80040bc:	e0b5      	b.n	800422a <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	334d      	adds	r3, #77	@ 0x4d
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d114      	bne.n	80040fe <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	334d      	adds	r3, #77	@ 0x4d
 80040e4:	2202      	movs	r2, #2
 80040e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	334c      	adds	r3, #76	@ 0x4c
 80040f8:	2202      	movs	r2, #2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e095      	b.n	800422a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	334d      	adds	r3, #77	@ 0x4d
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d114      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	334d      	adds	r3, #77	@ 0x4d
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	334c      	adds	r3, #76	@ 0x4c
 8004138:	2205      	movs	r2, #5
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e075      	b.n	800422a <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	334d      	adds	r3, #77	@ 0x4d
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b07      	cmp	r3, #7
 8004152:	d00a      	beq.n	800416a <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	334d      	adds	r3, #77	@ 0x4d
 8004164:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004166:	2b09      	cmp	r3, #9
 8004168:	d170      	bne.n	800424c <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	334d      	adds	r3, #77	@ 0x4d
 800417a:	2202      	movs	r2, #2
 800417c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3344      	adds	r3, #68	@ 0x44
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	3344      	adds	r3, #68	@ 0x44
 80041a0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3344      	adds	r3, #68	@ 0x44
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d914      	bls.n	80041e2 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	3344      	adds	r3, #68	@ 0x44
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	334c      	adds	r3, #76	@ 0x4c
 80041dc:	2204      	movs	r2, #4
 80041de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041e0:	e022      	b.n	8004228 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	334c      	adds	r3, #76	@ 0x4c
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800420c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004214:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004228:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	334c      	adds	r3, #76	@ 0x4c
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f005 faff 	bl	8009844 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004246:	e002      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800424c:	bf00      	nop
  }
}
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08a      	sub	sp, #40	@ 0x28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	0c5b      	lsrs	r3, r3, #17
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004288:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d004      	beq.n	800429a <HCD_RXQLVL_IRQHandler+0x46>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b05      	cmp	r3, #5
 8004294:	f000 80b6 	beq.w	8004404 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004298:	e0b7      	b.n	800440a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80b3 	beq.w	8004408 <HCD_RXQLVL_IRQHandler+0x1b4>
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4613      	mov	r3, r2
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	332c      	adds	r3, #44	@ 0x2c
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a7 	beq.w	8004408 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	3338      	adds	r3, #56	@ 0x38
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	18d1      	adds	r1, r2, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4403      	add	r3, r0
 80042de:	3334      	adds	r3, #52	@ 0x34
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4299      	cmp	r1, r3
 80042e4:	f200 8083 	bhi.w	80043ee <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	332c      	adds	r3, #44	@ 0x2c
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	b292      	uxth	r2, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f003 fe80 	bl	8008008 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	332c      	adds	r3, #44	@ 0x2c
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	18d1      	adds	r1, r2, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4403      	add	r3, r0
 800432c:	332c      	adds	r3, #44	@ 0x2c
 800432e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	3338      	adds	r3, #56	@ 0x38
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	18d1      	adds	r1, r2, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4403      	add	r3, r0
 8004354:	3338      	adds	r3, #56	@ 0x38
 8004356:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	0cdb      	lsrs	r3, r3, #19
 8004368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800436c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3328      	adds	r3, #40	@ 0x28
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4293      	cmp	r3, r2
 8004386:	d13f      	bne.n	8004408 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03c      	beq.n	8004408 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043a4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043ac:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	333c      	adds	r3, #60	@ 0x3c
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2d8      	uxtb	r0, r3
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	333c      	adds	r3, #60	@ 0x3c
 80043e8:	4602      	mov	r2, r0
 80043ea:	701a      	strb	r2, [r3, #0]
      break;
 80043ec:	e00c      	b.n	8004408 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	334c      	adds	r3, #76	@ 0x4c
 80043fe:	2204      	movs	r2, #4
 8004400:	701a      	strb	r2, [r3, #0]
      break;
 8004402:	e001      	b.n	8004408 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004408:	bf00      	nop
  }
}
 800440a:	bf00      	nop
 800440c:	3728      	adds	r7, #40	@ 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800443e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d10b      	bne.n	8004462 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f005 f9d9 	bl	800980c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d132      	bne.n	80044d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f043 0308 	orr.w	r3, r3, #8
 8004472:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d126      	bne.n	80044cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7a5b      	ldrb	r3, [r3, #9]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d113      	bne.n	80044ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800448c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004490:	d106      	bne.n	80044a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2102      	movs	r1, #2
 8004498:	4618      	mov	r0, r3
 800449a:	f003 fe4f 	bl	800813c <USB_InitFSLSPClkSel>
 800449e:	e011      	b.n	80044c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f003 fe48 	bl	800813c <USB_InitFSLSPClkSel>
 80044ac:	e00a      	b.n	80044c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	79db      	ldrb	r3, [r3, #7]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d106      	bne.n	80044c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044bc:	461a      	mov	r2, r3
 80044be:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80044c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f005 f9cf 	bl	8009868 <HAL_HCD_PortEnabled_Callback>
 80044ca:	e002      	b.n	80044d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f005 f9d9 	bl	8009884 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d103      	bne.n	80044e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f043 0320 	orr.w	r3, r3, #32
 80044e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e12b      	b.n	8004762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fdd2 	bl	80010c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	@ 0x24
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800454a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800455a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800455c:	f001 f984 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8004560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a81      	ldr	r2, [pc, #516]	@ (800476c <HAL_I2C_Init+0x274>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d807      	bhi.n	800457c <HAL_I2C_Init+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a80      	ldr	r2, [pc, #512]	@ (8004770 <HAL_I2C_Init+0x278>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e006      	b.n	800458a <HAL_I2C_Init+0x92>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a7d      	ldr	r2, [pc, #500]	@ (8004774 <HAL_I2C_Init+0x27c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	bf94      	ite	ls
 8004584:	2301      	movls	r3, #1
 8004586:	2300      	movhi	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0e7      	b.n	8004762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a78      	ldr	r2, [pc, #480]	@ (8004778 <HAL_I2C_Init+0x280>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a6a      	ldr	r2, [pc, #424]	@ (800476c <HAL_I2C_Init+0x274>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d802      	bhi.n	80045cc <HAL_I2C_Init+0xd4>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	e009      	b.n	80045e0 <HAL_I2C_Init+0xe8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	4a69      	ldr	r2, [pc, #420]	@ (800477c <HAL_I2C_Init+0x284>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	3301      	adds	r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	495c      	ldr	r1, [pc, #368]	@ (800476c <HAL_I2C_Init+0x274>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d819      	bhi.n	8004634 <HAL_I2C_Init+0x13c>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e59      	subs	r1, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fbb1 f3f3 	udiv	r3, r1, r3
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004614:	400b      	ands	r3, r1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_I2C_Init+0x138>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e59      	subs	r1, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fbb1 f3f3 	udiv	r3, r1, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	e051      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004630:	2304      	movs	r3, #4
 8004632:	e04f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d111      	bne.n	8004660 <HAL_I2C_Init+0x168>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e58      	subs	r0, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e012      	b.n	8004686 <HAL_I2C_Init+0x18e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	0099      	lsls	r1, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x196>
 800468a:	2301      	movs	r3, #1
 800468c:	e022      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <HAL_I2C_Init+0x1bc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1e58      	subs	r0, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	440b      	add	r3, r1
 80046a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b2:	e00f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	0099      	lsls	r1, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	6809      	ldr	r1, [r1, #0]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6911      	ldr	r1, [r2, #16]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68d2      	ldr	r2, [r2, #12]
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	000186a0 	.word	0x000186a0
 8004770:	001e847f 	.word	0x001e847f
 8004774:	003d08ff 	.word	0x003d08ff
 8004778:	431bde83 	.word	0x431bde83
 800477c:	10624dd3 	.word	0x10624dd3

08004780 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b20      	cmp	r3, #32
 8004794:	d129      	bne.n	80047ea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2224      	movs	r2, #36	@ 0x24
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0210 	bic.w	r2, r2, #16
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	d12a      	bne.n	8004868 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	@ 0x24
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004832:	89fb      	ldrh	r3, [r7, #14]
 8004834:	f023 030f 	bic.w	r3, r3, #15
 8004838:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	b29a      	uxth	r2, r3
 800483e:	89fb      	ldrh	r3, [r7, #14]
 8004840:	4313      	orrs	r3, r2
 8004842:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	89fa      	ldrh	r2, [r7, #14]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	e000      	b.n	800486a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004868:	2302      	movs	r3, #2
  }
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0bf      	b.n	8004a0a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fc7c 	bl	800119c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80048ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6999      	ldr	r1, [r3, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_LTDC_Init+0x19c>)
 80048ec:	400b      	ands	r3, r1
 80048ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6899      	ldr	r1, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68d9      	ldr	r1, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b3e      	ldr	r3, [pc, #248]	@ (8004a14 <HAL_LTDC_Init+0x19c>)
 800491a:	400b      	ands	r3, r1
 800491c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68d9      	ldr	r1, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6919      	ldr	r1, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b33      	ldr	r3, [pc, #204]	@ (8004a14 <HAL_LTDC_Init+0x19c>)
 8004948:	400b      	ands	r3, r1
 800494a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6959      	ldr	r1, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <HAL_LTDC_Init+0x19c>)
 8004976:	400b      	ands	r3, r1
 8004978:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6959      	ldr	r1, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0206 	orr.w	r2, r2, #6
 80049e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	f000f800 	.word	0xf000f800

08004a18 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d023      	beq.n	8004a82 <HAL_LTDC_IRQHandler+0x6a>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01e      	beq.n	8004a82 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f86f 	bl	8004b60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <HAL_LTDC_IRQHandler+0xbc>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01e      	beq.n	8004ad4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0202 	bic.w	r2, r2, #2
 8004aa4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ab4:	f043 0202 	orr.w	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f846 	bl	8004b60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01b      	beq.n	8004b16 <HAL_LTDC_IRQHandler+0xfe>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2201      	movs	r2, #1
 8004afe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f82f 	bl	8004b74 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_LTDC_IRQHandler+0x140>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2208      	movs	r2, #8
 8004b40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f818 	bl	8004b88 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b9c:	b5b0      	push	{r4, r5, r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_LTDC_ConfigLayer+0x1a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e02c      	b.n	8004c10 <HAL_LTDC_ConfigLayer+0x74>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2134      	movs	r1, #52	@ 0x34
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4614      	mov	r4, r2
 8004bda:	461d      	mov	r5, r3
 8004bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f811 	bl	8004c18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bdb0      	pop	{r4, r5, r7, pc}

08004c18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	0c1b      	lsrs	r3, r3, #16
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	4413      	add	r3, r2
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	4413      	add	r3, r2
 8004c46:	3384      	adds	r3, #132	@ 0x84
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	01d2      	lsls	r2, r2, #7
 8004c54:	440a      	add	r2, r1
 8004c56:	3284      	adds	r2, #132	@ 0x84
 8004c58:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c6e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c70:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	01db      	lsls	r3, r3, #7
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3384      	adds	r3, #132	@ 0x84
 8004c80:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c96:	4413      	add	r3, r2
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3384      	adds	r3, #132	@ 0x84
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	01d2      	lsls	r2, r2, #7
 8004cb6:	440a      	add	r2, r1
 8004cb8:	3284      	adds	r2, #132	@ 0x84
 8004cba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004cbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cce:	4413      	add	r3, r2
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	01db      	lsls	r3, r3, #7
 8004cdc:	440b      	add	r3, r1
 8004cde:	3384      	adds	r3, #132	@ 0x84
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3384      	adds	r3, #132	@ 0x84
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	01d2      	lsls	r2, r2, #7
 8004d02:	440a      	add	r2, r1
 8004d04:	3284      	adds	r2, #132	@ 0x84
 8004d06:	f023 0307 	bic.w	r3, r3, #7
 8004d0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	01db      	lsls	r3, r3, #7
 8004d16:	4413      	add	r3, r2
 8004d18:	3384      	adds	r3, #132	@ 0x84
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004d32:	041b      	lsls	r3, r3, #16
 8004d34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	01db      	lsls	r3, r3, #7
 8004d48:	4413      	add	r3, r2
 8004d4a:	3384      	adds	r3, #132	@ 0x84
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	01db      	lsls	r3, r3, #7
 8004d58:	4413      	add	r3, r2
 8004d5a:	3384      	adds	r3, #132	@ 0x84
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d68:	461a      	mov	r2, r3
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	01db      	lsls	r3, r3, #7
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3384      	adds	r3, #132	@ 0x84
 8004d80:	4619      	mov	r1, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	01db      	lsls	r3, r3, #7
 8004d92:	4413      	add	r3, r2
 8004d94:	3384      	adds	r3, #132	@ 0x84
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	01d2      	lsls	r2, r2, #7
 8004da2:	440a      	add	r2, r1
 8004da4:	3284      	adds	r2, #132	@ 0x84
 8004da6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004daa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	01db      	lsls	r3, r3, #7
 8004db6:	4413      	add	r3, r2
 8004db8:	3384      	adds	r3, #132	@ 0x84
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	01db      	lsls	r3, r3, #7
 8004dcc:	4413      	add	r3, r2
 8004dce:	3384      	adds	r3, #132	@ 0x84
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	01d2      	lsls	r2, r2, #7
 8004ddc:	440a      	add	r2, r1
 8004dde:	3284      	adds	r2, #132	@ 0x84
 8004de0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	6809      	ldr	r1, [r1, #0]
 8004df6:	4608      	mov	r0, r1
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	01c9      	lsls	r1, r1, #7
 8004dfc:	4401      	add	r1, r0
 8004dfe:	3184      	adds	r1, #132	@ 0x84
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	01db      	lsls	r3, r3, #7
 8004e0e:	4413      	add	r3, r2
 8004e10:	3384      	adds	r3, #132	@ 0x84
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	4413      	add	r3, r2
 8004e20:	3384      	adds	r3, #132	@ 0x84
 8004e22:	461a      	mov	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	01db      	lsls	r3, r3, #7
 8004e32:	4413      	add	r3, r2
 8004e34:	3384      	adds	r3, #132	@ 0x84
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e46:	2304      	movs	r3, #4
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e01b      	b.n	8004e84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d102      	bne.n	8004e5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004e54:	2303      	movs	r3, #3
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e014      	b.n	8004e84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00b      	beq.n	8004e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d007      	beq.n	8004e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d003      	beq.n	8004e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e76:	2b07      	cmp	r3, #7
 8004e78:	d102      	bne.n	8004e80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e001      	b.n	8004e84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004e80:	2301      	movs	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	01db      	lsls	r3, r3, #7
 8004e8e:	4413      	add	r3, r2
 8004e90:	3384      	adds	r3, #132	@ 0x84
 8004e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	01d2      	lsls	r2, r2, #7
 8004e9e:	440a      	add	r2, r1
 8004ea0:	3284      	adds	r2, #132	@ 0x84
 8004ea2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1acb      	subs	r3, r1, r3
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	6809      	ldr	r1, [r1, #0]
 8004eca:	4608      	mov	r0, r1
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	01c9      	lsls	r1, r1, #7
 8004ed0:	4401      	add	r1, r0
 8004ed2:	3184      	adds	r1, #132	@ 0x84
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	01db      	lsls	r3, r3, #7
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3384      	adds	r3, #132	@ 0x84
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	4611      	mov	r1, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	01d2      	lsls	r2, r2, #7
 8004ef2:	440a      	add	r2, r1
 8004ef4:	3284      	adds	r2, #132	@ 0x84
 8004ef6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004efa:	f023 0307 	bic.w	r3, r3, #7
 8004efe:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	01db      	lsls	r3, r3, #7
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3384      	adds	r3, #132	@ 0x84
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	01db      	lsls	r3, r3, #7
 8004f20:	4413      	add	r3, r2
 8004f22:	3384      	adds	r3, #132	@ 0x84
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	01d2      	lsls	r2, r2, #7
 8004f30:	440a      	add	r2, r1
 8004f32:	3284      	adds	r2, #132	@ 0x84
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6013      	str	r3, [r2, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3724      	adds	r7, #36	@ 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f54:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	4a0a      	ldr	r2, [pc, #40]	@ (8004f84 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8004f5a:	f023 0304 	bic.w	r3, r3, #4
 8004f5e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004f66:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8004f68:	e005      	b.n	8004f76 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d001      	beq.n	8004f74 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8004f70:	bf40      	sev
      __WFE();
 8004f72:	bf20      	wfe
    __WFE();
 8004f74:	bf20      	wfe
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e267      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d075      	beq.n	8005092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fa6:	4b88      	ldr	r3, [pc, #544]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d00c      	beq.n	8004fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb2:	4b85      	ldr	r3, [pc, #532]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d112      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4b82      	ldr	r3, [pc, #520]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fca:	d10b      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05b      	beq.n	8005090 <HAL_RCC_OscConfig+0x108>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d157      	bne.n	8005090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e242      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x74>
 8004fee:	4b76      	ldr	r3, [pc, #472]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a75      	ldr	r2, [pc, #468]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e01d      	b.n	8005038 <HAL_RCC_OscConfig+0xb0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x98>
 8005006:	4b70      	ldr	r3, [pc, #448]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6f      	ldr	r2, [pc, #444]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 800500c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b6d      	ldr	r3, [pc, #436]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6c      	ldr	r2, [pc, #432]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0xb0>
 8005020:	4b69      	ldr	r3, [pc, #420]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a68      	ldr	r2, [pc, #416]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b66      	ldr	r3, [pc, #408]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a65      	ldr	r2, [pc, #404]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fc fda0 	bl	8001b84 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005048:	f7fc fd9c 	bl	8001b84 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e207      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b5b      	ldr	r3, [pc, #364]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xc0>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fc fd8c 	bl	8001b84 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005070:	f7fc fd88 	bl	8001b84 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	@ 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e1f3      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	4b51      	ldr	r3, [pc, #324]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0xe8>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d063      	beq.n	8005166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800509e:	4b4a      	ldr	r3, [pc, #296]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050aa:	4b47      	ldr	r3, [pc, #284]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d11c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b44      	ldr	r3, [pc, #272]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d116      	bne.n	80050f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c2:	4b41      	ldr	r3, [pc, #260]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x152>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e1c7      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050da:	4b3b      	ldr	r3, [pc, #236]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4937      	ldr	r1, [pc, #220]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	e03a      	b.n	8005166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d020      	beq.n	800513a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f8:	4b34      	ldr	r3, [pc, #208]	@ (80051cc <HAL_RCC_OscConfig+0x244>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fc fd41 	bl	8001b84 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005106:	f7fc fd3d 	bl	8001b84 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e1a8      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005118:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005124:	4b28      	ldr	r3, [pc, #160]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4925      	ldr	r1, [pc, #148]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]
 8005138:	e015      	b.n	8005166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513a:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <HAL_RCC_OscConfig+0x244>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fc fd20 	bl	8001b84 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005148:	f7fc fd1c 	bl	8001b84 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e187      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	4b1b      	ldr	r3, [pc, #108]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d036      	beq.n	80051e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <HAL_RCC_OscConfig+0x248>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fc fd00 	bl	8001b84 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005188:	f7fc fcfc 	bl	8001b84 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e167      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519a:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <HAL_RCC_OscConfig+0x240>)
 800519c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x200>
 80051a6:	e01b      	b.n	80051e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCC_OscConfig+0x248>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ae:	f7fc fce9 	bl	8001b84 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	e00e      	b.n	80051d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b6:	f7fc fce5 	bl	8001b84 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d907      	bls.n	80051d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e150      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
 80051c8:	40023800 	.word	0x40023800
 80051cc:	42470000 	.word	0x42470000
 80051d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80051d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ea      	bne.n	80051b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8097 	beq.w	800531c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b81      	ldr	r3, [pc, #516]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	4b7d      	ldr	r3, [pc, #500]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	4a7c      	ldr	r2, [pc, #496]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	@ 0x40
 800520e:	4b7a      	ldr	r3, [pc, #488]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b77      	ldr	r3, [pc, #476]	@ (80053fc <HAL_RCC_OscConfig+0x474>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d118      	bne.n	800525c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522a:	4b74      	ldr	r3, [pc, #464]	@ (80053fc <HAL_RCC_OscConfig+0x474>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a73      	ldr	r2, [pc, #460]	@ (80053fc <HAL_RCC_OscConfig+0x474>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005236:	f7fc fca5 	bl	8001b84 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fc fca1 	bl	8001b84 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e10c      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	4b6a      	ldr	r3, [pc, #424]	@ (80053fc <HAL_RCC_OscConfig+0x474>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x2ea>
 8005264:	4b64      	ldr	r3, [pc, #400]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005268:	4a63      	ldr	r2, [pc, #396]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005270:	e01c      	b.n	80052ac <HAL_RCC_OscConfig+0x324>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x30c>
 800527a:	4b5f      	ldr	r3, [pc, #380]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527e:	4a5e      	ldr	r2, [pc, #376]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005280:	f043 0304 	orr.w	r3, r3, #4
 8005284:	6713      	str	r3, [r2, #112]	@ 0x70
 8005286:	4b5c      	ldr	r3, [pc, #368]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	4a5b      	ldr	r2, [pc, #364]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6713      	str	r3, [r2, #112]	@ 0x70
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0x324>
 8005294:	4b58      	ldr	r3, [pc, #352]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005298:	4a57      	ldr	r2, [pc, #348]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a0:	4b55      	ldr	r3, [pc, #340]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a54      	ldr	r2, [pc, #336]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f023 0304 	bic.w	r3, r3, #4
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fc fc66 	bl	8001b84 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	e00a      	b.n	80052d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052bc:	f7fc fc62 	bl	8001b84 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e0cb      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d2:	4b49      	ldr	r3, [pc, #292]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ee      	beq.n	80052bc <HAL_RCC_OscConfig+0x334>
 80052de:	e014      	b.n	800530a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e0:	f7fc fc50 	bl	8001b84 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fc fc4c 	bl	8001b84 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e0b5      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fe:	4b3e      	ldr	r3, [pc, #248]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ee      	bne.n	80052e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005314:	4a38      	ldr	r2, [pc, #224]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a1 	beq.w	8005468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005326:	4b34      	ldr	r3, [pc, #208]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b08      	cmp	r3, #8
 8005330:	d05c      	beq.n	80053ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d141      	bne.n	80053be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533a:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <HAL_RCC_OscConfig+0x478>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fc fc20 	bl	8001b84 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005348:	f7fc fc1c 	bl	8001b84 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e087      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	4b27      	ldr	r3, [pc, #156]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	3b01      	subs	r3, #1
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	491b      	ldr	r1, [pc, #108]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005390:	4b1b      	ldr	r3, [pc, #108]	@ (8005400 <HAL_RCC_OscConfig+0x478>)
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fc fbf5 	bl	8001b84 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539e:	f7fc fbf1 	bl	8001b84 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e05c      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x416>
 80053bc:	e054      	b.n	8005468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <HAL_RCC_OscConfig+0x478>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fc fbde 	bl	8001b84 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fc fbda 	bl	8001b84 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e045      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <HAL_RCC_OscConfig+0x470>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x444>
 80053ea:	e03d      	b.n	8005468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e038      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <HAL_RCC_OscConfig+0x4ec>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d028      	beq.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d121      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d11a      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800543a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543c:	4293      	cmp	r3, r2
 800543e:	d111      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	3b01      	subs	r3, #1
 800544e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d107      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800

08005478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0cc      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800548c:	4b68      	ldr	r3, [pc, #416]	@ (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d90c      	bls.n	80054b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b65      	ldr	r3, [pc, #404]	@ (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b63      	ldr	r3, [pc, #396]	@ (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0b8      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d020      	beq.n	8005502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054cc:	4b59      	ldr	r3, [pc, #356]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4a58      	ldr	r2, [pc, #352]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e4:	4b53      	ldr	r3, [pc, #332]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4a52      	ldr	r2, [pc, #328]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f0:	4b50      	ldr	r3, [pc, #320]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	494d      	ldr	r1, [pc, #308]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d044      	beq.n	8005598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d107      	bne.n	8005526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	4b47      	ldr	r3, [pc, #284]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d119      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e07f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d003      	beq.n	8005536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005532:	2b03      	cmp	r3, #3
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005536:	4b3f      	ldr	r3, [pc, #252]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e06f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	4b3b      	ldr	r3, [pc, #236]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e067      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4934      	ldr	r1, [pc, #208]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005568:	f7fc fb0c 	bl	8001b84 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7fc fb08 	bl	8001b84 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e04f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b2b      	ldr	r3, [pc, #172]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b25      	ldr	r3, [pc, #148]	@ (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d20c      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b22      	ldr	r3, [pc, #136]	@ (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b20      	ldr	r3, [pc, #128]	@ (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e032      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055cc:	4b19      	ldr	r3, [pc, #100]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4916      	ldr	r1, [pc, #88]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ea:	4b12      	ldr	r3, [pc, #72]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	490e      	ldr	r1, [pc, #56]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055fe:	f000 f821 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8005602:	4602      	mov	r2, r0
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	490a      	ldr	r1, [pc, #40]	@ (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 8005610:	5ccb      	ldrb	r3, [r1, r3]
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	4a09      	ldr	r2, [pc, #36]	@ (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800561a:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <HAL_RCC_ClockConfig+0x1c8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fc f8c8 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023c00 	.word	0x40023c00
 8005634:	40023800 	.word	0x40023800
 8005638:	0800a2f4 	.word	0x0800a2f4
 800563c:	20000000 	.word	0x20000000
 8005640:	20000004 	.word	0x20000004

08005644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005648:	b094      	sub	sp, #80	@ 0x50
 800564a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005650:	2300      	movs	r3, #0
 8005652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005654:	2300      	movs	r3, #0
 8005656:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800565c:	4b79      	ldr	r3, [pc, #484]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b08      	cmp	r3, #8
 8005666:	d00d      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x40>
 8005668:	2b08      	cmp	r3, #8
 800566a:	f200 80e1 	bhi.w	8005830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x34>
 8005672:	2b04      	cmp	r3, #4
 8005674:	d003      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x3a>
 8005676:	e0db      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b73      	ldr	r3, [pc, #460]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x204>)
 800567a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800567c:	e0db      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800567e:	4b73      	ldr	r3, [pc, #460]	@ (800584c <HAL_RCC_GetSysClockFreq+0x208>)
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005682:	e0d8      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005684:	4b6f      	ldr	r3, [pc, #444]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800568c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800568e:	4b6d      	ldr	r3, [pc, #436]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d063      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569a:	4b6a      	ldr	r3, [pc, #424]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	099b      	lsrs	r3, r3, #6
 80056a0:	2200      	movs	r2, #0
 80056a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	f04f 0000 	mov.w	r0, #0
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	0159      	lsls	r1, r3, #5
 80056c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c8:	0150      	lsls	r0, r2, #5
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4621      	mov	r1, r4
 80056d0:	1a51      	subs	r1, r2, r1
 80056d2:	6139      	str	r1, [r7, #16]
 80056d4:	4629      	mov	r1, r5
 80056d6:	eb63 0301 	sbc.w	r3, r3, r1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e8:	4659      	mov	r1, fp
 80056ea:	018b      	lsls	r3, r1, #6
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056f2:	4651      	mov	r1, sl
 80056f4:	018a      	lsls	r2, r1, #6
 80056f6:	4651      	mov	r1, sl
 80056f8:	ebb2 0801 	subs.w	r8, r2, r1
 80056fc:	4659      	mov	r1, fp
 80056fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800570e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005716:	4690      	mov	r8, r2
 8005718:	4699      	mov	r9, r3
 800571a:	4623      	mov	r3, r4
 800571c:	eb18 0303 	adds.w	r3, r8, r3
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	462b      	mov	r3, r5
 8005724:	eb49 0303 	adc.w	r3, r9, r3
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005736:	4629      	mov	r1, r5
 8005738:	024b      	lsls	r3, r1, #9
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005740:	4621      	mov	r1, r4
 8005742:	024a      	lsls	r2, r1, #9
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574a:	2200      	movs	r2, #0
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800574e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005754:	f7fa fd4c 	bl	80001f0 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005760:	e058      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4b38      	ldr	r3, [pc, #224]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	2200      	movs	r2, #0
 800576a:	4618      	mov	r0, r3
 800576c:	4611      	mov	r1, r2
 800576e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
 8005778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0159      	lsls	r1, r3, #5
 800578a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800578e:	0150      	lsls	r0, r2, #5
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4641      	mov	r1, r8
 8005796:	ebb2 0a01 	subs.w	sl, r2, r1
 800579a:	4649      	mov	r1, r9
 800579c:	eb63 0b01 	sbc.w	fp, r3, r1
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057b4:	ebb2 040a 	subs.w	r4, r2, sl
 80057b8:	eb63 050b 	sbc.w	r5, r3, fp
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	00eb      	lsls	r3, r5, #3
 80057c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ca:	00e2      	lsls	r2, r4, #3
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	18e3      	adds	r3, r4, r3
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	464b      	mov	r3, r9
 80057d8:	eb45 0303 	adc.w	r3, r5, r3
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ea:	4629      	mov	r1, r5
 80057ec:	028b      	lsls	r3, r1, #10
 80057ee:	4621      	mov	r1, r4
 80057f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057f4:	4621      	mov	r1, r4
 80057f6:	028a      	lsls	r2, r1, #10
 80057f8:	4610      	mov	r0, r2
 80057fa:	4619      	mov	r1, r3
 80057fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fe:	2200      	movs	r2, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	61fa      	str	r2, [r7, #28]
 8005804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005808:	f7fa fcf2 	bl	80001f0 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4613      	mov	r3, r2
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005824:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800582e:	e002      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x204>)
 8005832:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005838:	4618      	mov	r0, r3
 800583a:	3750      	adds	r7, #80	@ 0x50
 800583c:	46bd      	mov	sp, r7
 800583e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	00f42400 	.word	0x00f42400
 800584c:	007a1200 	.word	0x007a1200

08005850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005854:	4b03      	ldr	r3, [pc, #12]	@ (8005864 <HAL_RCC_GetHCLKFreq+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000000 	.word	0x20000000

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800586c:	f7ff fff0 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0a9b      	lsrs	r3, r3, #10
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4903      	ldr	r1, [pc, #12]	@ (800588c <HAL_RCC_GetPCLK1Freq+0x24>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	0800a304 	.word	0x0800a304

08005890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005894:	f7ff ffdc 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005898:	4602      	mov	r2, r0
 800589a:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	0b5b      	lsrs	r3, r3, #13
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	4903      	ldr	r1, [pc, #12]	@ (80058b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a6:	5ccb      	ldrb	r3, [r1, r3]
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40023800 	.word	0x40023800
 80058b4:	0800a304 	.word	0x0800a304

080058b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	220f      	movs	r2, #15
 80058c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058c8:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0203 	and.w	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058ec:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	08db      	lsrs	r3, r3, #3
 80058f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058fa:	4b07      	ldr	r3, [pc, #28]	@ (8005918 <HAL_RCC_GetClockConfig+0x60>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	601a      	str	r2, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800
 8005918:	40023c00 	.word	0x40023c00

0800591c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800594c:	2b00      	cmp	r3, #0
 800594e:	d075      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005950:	4b91      	ldr	r3, [pc, #580]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005956:	f7fc f915 	bl	8001b84 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800595e:	f7fc f911 	bl	8001b84 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e189      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005970:	4b8a      	ldr	r3, [pc, #552]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f0      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	019a      	lsls	r2, r3, #6
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	071b      	lsls	r3, r3, #28
 8005994:	4981      	ldr	r1, [pc, #516]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01f      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059a8:	4b7c      	ldr	r3, [pc, #496]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ae:	0f1b      	lsrs	r3, r3, #28
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	019a      	lsls	r2, r3, #6
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	061b      	lsls	r3, r3, #24
 80059c2:	431a      	orrs	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	071b      	lsls	r3, r3, #28
 80059c8:	4974      	ldr	r1, [pc, #464]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059d0:	4b72      	ldr	r3, [pc, #456]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059d6:	f023 021f 	bic.w	r2, r3, #31
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	3b01      	subs	r3, #1
 80059e0:	496e      	ldr	r1, [pc, #440]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	019a      	lsls	r2, r3, #6
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	071b      	lsls	r3, r3, #28
 8005a08:	4964      	ldr	r1, [pc, #400]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a10:	4b61      	ldr	r3, [pc, #388]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a16:	f7fc f8b5 	bl	8001b84 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a1e:	f7fc f8b1 	bl	8001b84 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e129      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a30:	4b5a      	ldr	r3, [pc, #360]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d079      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a54:	4b52      	ldr	r3, [pc, #328]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a5a:	f7fc f893 	bl	8001b84 <HAL_GetTick>
 8005a5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a62:	f7fc f88f 	bl	8001b84 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e107      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a74:	4b49      	ldr	r3, [pc, #292]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a80:	d0ef      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a8e:	4b43      	ldr	r3, [pc, #268]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a94:	0f1b      	lsrs	r3, r3, #28
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	019a      	lsls	r2, r3, #6
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	071b      	lsls	r3, r3, #28
 8005aae:	493b      	ldr	r1, [pc, #236]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ab6:	4b39      	ldr	r3, [pc, #228]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005abc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	4934      	ldr	r1, [pc, #208]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01e      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005adc:	4b2f      	ldr	r3, [pc, #188]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae2:	0e1b      	lsrs	r3, r3, #24
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	019a      	lsls	r2, r3, #6
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	071b      	lsls	r3, r3, #28
 8005afc:	4927      	ldr	r1, [pc, #156]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b04:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	4922      	ldr	r1, [pc, #136]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b1a:	4b21      	ldr	r3, [pc, #132]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b20:	f7fc f830 	bl	8001b84 <HAL_GetTick>
 8005b24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b28:	f7fc f82c 	bl	8001b84 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e0a4      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b3a:	4b18      	ldr	r3, [pc, #96]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b46:	d1ef      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 808b 	beq.w	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4b10      	ldr	r3, [pc, #64]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a0b      	ldr	r2, [pc, #44]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b7e:	f7fc f801 	bl	8001b84 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b84:	e010      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b86:	f7fb fffd 	bl	8001b84 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d909      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e075      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b98:	42470068 	.word	0x42470068
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	42470070 	.word	0x42470070
 8005ba4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ba8:	4b38      	ldr	r3, [pc, #224]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0e8      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bb4:	4b36      	ldr	r3, [pc, #216]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02f      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d028      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005be2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005be8:	4a29      	ldr	r2, [pc, #164]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bee:	4b28      	ldr	r3, [pc, #160]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d114      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fb ffc3 	bl	8001b84 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c00:	e00a      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c02:	f7fb ffbf 	bl	8001b84 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e035      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c18:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0ee      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c30:	d10d      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c32:	4b17      	ldr	r3, [pc, #92]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c46:	4912      	ldr	r1, [pc, #72]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]
 8005c4c:	e005      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c4e:	4b10      	ldr	r3, [pc, #64]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4a0f      	ldr	r2, [pc, #60]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c54:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c58:	6093      	str	r3, [r2, #8]
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c66:	490a      	ldr	r1, [pc, #40]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005c7e:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c80:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40007000 	.word	0x40007000
 8005c90:	40023800 	.word	0x40023800
 8005c94:	42470e40 	.word	0x42470e40
 8005c98:	424711e0 	.word	0x424711e0

08005c9c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e073      	b.n	8005d9a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7f5b      	ldrb	r3, [r3, #29]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fb fb9a 	bl	80013fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d055      	beq.n	8005d88 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	22ca      	movs	r2, #202	@ 0xca
 8005ce2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2253      	movs	r2, #83	@ 0x53
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f99d 	bl	800602c <RTC_EnterInitMode>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d12c      	bne.n	8005d56 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d0e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6899      	ldr	r1, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68d2      	ldr	r2, [r2, #12]
 8005d36:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6919      	ldr	r1, [r3, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	041a      	lsls	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f9a4 	bl	800609a <RTC_ExitInitMode>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d110      	bne.n	8005d7e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d6a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	22ff      	movs	r2, #255	@ 0xff
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d86:	e001      	b.n	8005d8c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005da2:	b590      	push	{r4, r7, lr}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	7f1b      	ldrb	r3, [r3, #28]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_RTC_SetTime+0x1c>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e087      	b.n	8005ece <HAL_RTC_SetTime+0x12c>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d126      	bne.n	8005e1e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f97b 	bl	80060e4 <RTC_ByteToBcd2>
 8005dee:	4603      	mov	r3, r0
 8005df0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f974 	bl	80060e4 <RTC_ByteToBcd2>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e00:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	789b      	ldrb	r3, [r3, #2]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f96c 	bl	80060e4 <RTC_ByteToBcd2>
 8005e0c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e0e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	78db      	ldrb	r3, [r3, #3]
 8005e16:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e018      	b.n	8005e50 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e3e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e44:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	78db      	ldrb	r3, [r3, #3]
 8005e4a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	22ca      	movs	r2, #202	@ 0xca
 8005e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2253      	movs	r2, #83	@ 0x53
 8005e5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f8e3 	bl	800602c <RTC_EnterInitMode>
 8005e66:	4603      	mov	r3, r0
 8005e68:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d120      	bne.n	8005eb2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005e7a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6899      	ldr	r1, [r3, #8]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f8f6 	bl	800609a <RTC_ExitInitMode>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eb2:	7cfb      	ldrb	r3, [r7, #19]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	22ff      	movs	r2, #255	@ 0xff
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]

  return status;
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}

08005ed6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ed6:	b590      	push	{r4, r7, lr}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	7f1b      	ldrb	r3, [r3, #28]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_RTC_SetDate+0x1c>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e071      	b.n	8005fd6 <HAL_RTC_SetDate+0x100>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2202      	movs	r2, #2
 8005efc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10e      	bne.n	8005f22 <HAL_RTC_SetDate+0x4c>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	f023 0310 	bic.w	r3, r3, #16
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	330a      	adds	r3, #10
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11c      	bne.n	8005f62 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	78db      	ldrb	r3, [r3, #3]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f8d9 	bl	80060e4 <RTC_ByteToBcd2>
 8005f32:	4603      	mov	r3, r0
 8005f34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f8d2 	bl	80060e4 <RTC_ByteToBcd2>
 8005f40:	4603      	mov	r3, r0
 8005f42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	789b      	ldrb	r3, [r3, #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f8ca 	bl	80060e4 <RTC_ByteToBcd2>
 8005f50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e00e      	b.n	8005f80 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	78db      	ldrb	r3, [r3, #3]
 8005f66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f6e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	22ca      	movs	r2, #202	@ 0xca
 8005f86:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2253      	movs	r2, #83	@ 0x53
 8005f8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f84b 	bl	800602c <RTC_EnterInitMode>
 8005f96:	4603      	mov	r3, r0
 8005f98:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005faa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005fae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f872 	bl	800609a <RTC_ExitInitMode>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	22ff      	movs	r2, #255	@ 0xff
 8005fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]

  return status;
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd90      	pop	{r4, r7, pc}
	...

08005fe0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8006028 <HAL_RTC_WaitForSynchro+0x48>)
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ff4:	f7fb fdc6 	bl	8001b84 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ffa:	e009      	b.n	8006010 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ffc:	f7fb fdc2 	bl	8001b84 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800600a:	d901      	bls.n	8006010 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e007      	b.n	8006020 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ee      	beq.n	8005ffc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	00017f5f 	.word	0x00017f5f

0800602c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d122      	bne.n	8006090 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006058:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800605a:	f7fb fd93 	bl	8001b84 <HAL_GetTick>
 800605e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006060:	e00c      	b.n	800607c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006062:	f7fb fd8f 	bl	8001b84 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006070:	d904      	bls.n	800607c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <RTC_EnterInitMode+0x64>
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d1e8      	bne.n	8006062 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ff8b 	bl	8005fe0 <HAL_RTC_WaitForSynchro>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2204      	movs	r2, #4
 80060d4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80060f2:	e005      	b.n	8006100 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	3b0a      	subs	r3, #10
 80060fe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	2b09      	cmp	r3, #9
 8006104:	d8f6      	bhi.n	80060f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	b2da      	uxtb	r2, r3
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	4313      	orrs	r3, r2
 8006112:	b2db      	uxtb	r3, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800612c:	4b5a      	ldr	r3, [pc, #360]	@ (8006298 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5a      	ldr	r2, [pc, #360]	@ (800629c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	0adb      	lsrs	r3, r3, #11
 8006138:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	7f1b      	ldrb	r3, [r3, #28]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800614a:	2302      	movs	r3, #2
 800614c:	e09d      	b.n	800628a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2202      	movs	r2, #2
 8006158:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	22ca      	movs	r2, #202	@ 0xca
 8006160:	625a      	str	r2, [r3, #36]	@ 0x24
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2253      	movs	r2, #83	@ 0x53
 8006168:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006174:	2b00      	cmp	r3, #0
 8006176:	d018      	beq.n	80061aa <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	3b01      	subs	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	22ff      	movs	r2, #255	@ 0xff
 800618a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2203      	movs	r2, #3
 8006190:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e076      	b.n	800628a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e6      	bne.n	8006178 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061b8:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80061ca:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80061cc:	4b32      	ldr	r3, [pc, #200]	@ (8006298 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a32      	ldr	r2, [pc, #200]	@ (800629c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	0adb      	lsrs	r3, r3, #11
 80061d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
 80061e0:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	22ff      	movs	r2, #255	@ 0xff
 80061f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2203      	movs	r2, #3
 80061fa:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e041      	b.n	800628a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0e6      	beq.n	80061e2 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0207 	bic.w	r2, r2, #7
 8006222:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6899      	ldr	r1, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800623c:	4b18      	ldr	r3, [pc, #96]	@ (80062a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006242:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006246:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006248:	4b15      	ldr	r3, [pc, #84]	@ (80062a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a14      	ldr	r2, [pc, #80]	@ (80062a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800624e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006252:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006262:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006272:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	22ff      	movs	r2, #255	@ 0xff
 800627a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000000 	.word	0x20000000
 800629c:	10624dd3 	.word	0x10624dd3
 80062a0:	40013c00 	.word	0x40013c00

080062a4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7f1b      	ldrb	r3, [r3, #28]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e047      	b.n	800634c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	22ca      	movs	r2, #202	@ 0xca
 80062ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2253      	movs	r2, #83	@ 0x53
 80062d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062f6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f8:	f7fb fc44 	bl	8001b84 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062fe:	e013      	b.n	8006328 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006300:	f7fb fc40 	bl	8001b84 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800630e:	d90b      	bls.n	8006328 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	22ff      	movs	r2, #255	@ 0xff
 8006316:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2203      	movs	r2, #3
 800631c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e011      	b.n	800634c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0e4      	beq.n	8006300 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	22ff      	movs	r2, #255	@ 0xff
 800633c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800635c:	4b0e      	ldr	r3, [pc, #56]	@ (8006398 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800635e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006362:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006382:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7fa f90d 	bl	80005a4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	775a      	strb	r2, [r3, #29]
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40013c00 	.word	0x40013c00

0800639c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e025      	b.n	80063fc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fb f9eb 	bl	80017a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f001 fccb 	bl	8007d78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	f001 fd20 	bl	8007e32 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e07b      	b.n	800650e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d108      	bne.n	8006430 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006426:	d009      	beq.n	800643c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	61da      	str	r2, [r3, #28]
 800642e:	e005      	b.n	800643c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fb f802 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006472:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c0:	ea42 0103 	orr.w	r1, r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	0c1b      	lsrs	r3, r3, #16
 80064da:	f003 0104 	and.w	r1, r3, #4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	f003 0210 	and.w	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e041      	b.n	80065ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fa ffd7 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f000 fc57 	bl	8006e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e04e      	b.n	800666a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a23      	ldr	r2, [pc, #140]	@ (8006678 <HAL_TIM_Base_Start_IT+0xc4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	d01d      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1f      	ldr	r2, [pc, #124]	@ (800667c <HAL_TIM_Base_Start_IT+0xc8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <HAL_TIM_Base_Start_IT+0xcc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1c      	ldr	r2, [pc, #112]	@ (8006684 <HAL_TIM_Base_Start_IT+0xd0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <HAL_TIM_Base_Start_IT+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a19      	ldr	r2, [pc, #100]	@ (800668c <HAL_TIM_Base_Start_IT+0xd8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x80>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <HAL_TIM_Base_Start_IT+0xdc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d111      	bne.n	8006658 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b06      	cmp	r3, #6
 8006644:	d010      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	e007      	b.n	8006668 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00
 8006688:	40010400 	.word	0x40010400
 800668c:	40014000 	.word	0x40014000
 8006690:	40001800 	.word	0x40001800

08006694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e041      	b.n	800672a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fa ff3a 	bl	8001534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f000 fb98 	bl	8006e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_TIM_PWM_Start+0x24>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e022      	b.n	800679e <HAL_TIM_PWM_Start+0x6a>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b04      	cmp	r3, #4
 800675c:	d109      	bne.n	8006772 <HAL_TIM_PWM_Start+0x3e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b01      	cmp	r3, #1
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	e015      	b.n	800679e <HAL_TIM_PWM_Start+0x6a>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d109      	bne.n	800678c <HAL_TIM_PWM_Start+0x58>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	bf14      	ite	ne
 8006784:	2301      	movne	r3, #1
 8006786:	2300      	moveq	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e008      	b.n	800679e <HAL_TIM_PWM_Start+0x6a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	bf14      	ite	ne
 8006798:	2301      	movne	r3, #1
 800679a:	2300      	moveq	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07c      	b.n	80068a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_PWM_Start+0x82>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067b4:	e013      	b.n	80067de <HAL_TIM_PWM_Start+0xaa>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d104      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x92>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067c4:	e00b      	b.n	80067de <HAL_TIM_PWM_Start+0xaa>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d104      	bne.n	80067d6 <HAL_TIM_PWM_Start+0xa2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d4:	e003      	b.n	80067de <HAL_TIM_PWM_Start+0xaa>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fe04 	bl	80073f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a2d      	ldr	r2, [pc, #180]	@ (80068a8 <HAL_TIM_PWM_Start+0x174>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_TIM_PWM_Start+0xcc>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2c      	ldr	r2, [pc, #176]	@ (80068ac <HAL_TIM_PWM_Start+0x178>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d101      	bne.n	8006804 <HAL_TIM_PWM_Start+0xd0>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <HAL_TIM_PWM_Start+0xd2>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a22      	ldr	r2, [pc, #136]	@ (80068a8 <HAL_TIM_PWM_Start+0x174>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682c:	d01d      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1f      	ldr	r2, [pc, #124]	@ (80068b0 <HAL_TIM_PWM_Start+0x17c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <HAL_TIM_PWM_Start+0x180>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1c      	ldr	r2, [pc, #112]	@ (80068b8 <HAL_TIM_PWM_Start+0x184>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a16      	ldr	r2, [pc, #88]	@ (80068ac <HAL_TIM_PWM_Start+0x178>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a18      	ldr	r2, [pc, #96]	@ (80068bc <HAL_TIM_PWM_Start+0x188>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a16      	ldr	r2, [pc, #88]	@ (80068c0 <HAL_TIM_PWM_Start+0x18c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d111      	bne.n	800688e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d010      	beq.n	800689e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	e007      	b.n	800689e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40010400 	.word	0x40010400
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40001800 	.word	0x40001800

080068c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d020      	beq.n	8006928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01b      	beq.n	8006928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0202 	mvn.w	r2, #2
 80068f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa5b 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa4d 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa5e 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d020      	beq.n	8006974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01b      	beq.n	8006974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0204 	mvn.w	r2, #4
 8006944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa35 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 8006960:	e005      	b.n	800696e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa27 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa38 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f003 0308 	and.w	r3, r3, #8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d020      	beq.n	80069c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01b      	beq.n	80069c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0208 	mvn.w	r2, #8
 8006990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2204      	movs	r2, #4
 8006996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa0f 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 80069ac:	e005      	b.n	80069ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa01 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa12 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d020      	beq.n	8006a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0210 	mvn.w	r2, #16
 80069dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2208      	movs	r2, #8
 80069e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f9e9 	bl	8006dca <HAL_TIM_IC_CaptureCallback>
 80069f8:	e005      	b.n	8006a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9db 	bl	8006db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f9ec 	bl	8006dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00c      	beq.n	8006a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0201 	mvn.w	r2, #1
 8006a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fa fa5e 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00c      	beq.n	8006a54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fd7c 	bl	800754c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00c      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9bd 	bl	8006df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0220 	mvn.w	r2, #32
 8006a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fd4e 	bl	8007538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e0ae      	b.n	8006c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	f200 809f 	bhi.w	8006c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006b0d 	.word	0x08006b0d
 8006adc:	08006c11 	.word	0x08006c11
 8006ae0:	08006c11 	.word	0x08006c11
 8006ae4:	08006c11 	.word	0x08006c11
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006c11 	.word	0x08006c11
 8006af0:	08006c11 	.word	0x08006c11
 8006af4:	08006c11 	.word	0x08006c11
 8006af8:	08006b8f 	.word	0x08006b8f
 8006afc:	08006c11 	.word	0x08006c11
 8006b00:	08006c11 	.word	0x08006c11
 8006b04:	08006c11 	.word	0x08006c11
 8006b08:	08006bcf 	.word	0x08006bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fa24 	bl	8006f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0208 	orr.w	r2, r2, #8
 8006b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0204 	bic.w	r2, r2, #4
 8006b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6999      	ldr	r1, [r3, #24]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	619a      	str	r2, [r3, #24]
      break;
 8006b4a:	e064      	b.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fa74 	bl	8007040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6999      	ldr	r1, [r3, #24]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	021a      	lsls	r2, r3, #8
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	619a      	str	r2, [r3, #24]
      break;
 8006b8c:	e043      	b.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fac9 	bl	800712c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0208 	orr.w	r2, r2, #8
 8006ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0204 	bic.w	r2, r2, #4
 8006bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69d9      	ldr	r1, [r3, #28]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	61da      	str	r2, [r3, #28]
      break;
 8006bcc:	e023      	b.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fb1d 	bl	8007214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69d9      	ldr	r1, [r3, #28]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	021a      	lsls	r2, r3, #8
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	61da      	str	r2, [r3, #28]
      break;
 8006c0e:	e002      	b.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIM_ConfigClockSource+0x1c>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e0b4      	b.n	8006dae <HAL_TIM_ConfigClockSource+0x186>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c7c:	d03e      	beq.n	8006cfc <HAL_TIM_ConfigClockSource+0xd4>
 8006c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c82:	f200 8087 	bhi.w	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8a:	f000 8086 	beq.w	8006d9a <HAL_TIM_ConfigClockSource+0x172>
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c92:	d87f      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b70      	cmp	r3, #112	@ 0x70
 8006c96:	d01a      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0xa6>
 8006c98:	2b70      	cmp	r3, #112	@ 0x70
 8006c9a:	d87b      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b60      	cmp	r3, #96	@ 0x60
 8006c9e:	d050      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x11a>
 8006ca0:	2b60      	cmp	r3, #96	@ 0x60
 8006ca2:	d877      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b50      	cmp	r3, #80	@ 0x50
 8006ca6:	d03c      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0xfa>
 8006ca8:	2b50      	cmp	r3, #80	@ 0x50
 8006caa:	d873      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	d058      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x13a>
 8006cb0:	2b40      	cmp	r3, #64	@ 0x40
 8006cb2:	d86f      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b30      	cmp	r3, #48	@ 0x30
 8006cb6:	d064      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x15a>
 8006cb8:	2b30      	cmp	r3, #48	@ 0x30
 8006cba:	d86b      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d060      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x15a>
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d867      	bhi.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d05c      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d05a      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x15a>
 8006ccc:	e062      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cde:	f000 fb69 	bl	80073b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	609a      	str	r2, [r3, #8]
      break;
 8006cfa:	e04f      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	f000 fb52 	bl	80073b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d1e:	609a      	str	r2, [r3, #8]
      break;
 8006d20:	e03c      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f000 fac6 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2150      	movs	r1, #80	@ 0x50
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fb1f 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006d40:	e02c      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f000 fae5 	bl	800731e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2160      	movs	r1, #96	@ 0x60
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fb0f 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006d60:	e01c      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f000 faa6 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2140      	movs	r1, #64	@ 0x40
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 faff 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006d80:	e00c      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f000 faf6 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006d92:	e003      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
      break;
 8006d98:	e000      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a46      	ldr	r2, [pc, #280]	@ (8006f34 <TIM_Base_SetConfig+0x12c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e26:	d00f      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a43      	ldr	r2, [pc, #268]	@ (8006f38 <TIM_Base_SetConfig+0x130>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a42      	ldr	r2, [pc, #264]	@ (8006f3c <TIM_Base_SetConfig+0x134>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a41      	ldr	r2, [pc, #260]	@ (8006f40 <TIM_Base_SetConfig+0x138>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a40      	ldr	r2, [pc, #256]	@ (8006f44 <TIM_Base_SetConfig+0x13c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d108      	bne.n	8006e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a35      	ldr	r2, [pc, #212]	@ (8006f34 <TIM_Base_SetConfig+0x12c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d02b      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e68:	d027      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a32      	ldr	r2, [pc, #200]	@ (8006f38 <TIM_Base_SetConfig+0x130>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d023      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a31      	ldr	r2, [pc, #196]	@ (8006f3c <TIM_Base_SetConfig+0x134>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d01f      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a30      	ldr	r2, [pc, #192]	@ (8006f40 <TIM_Base_SetConfig+0x138>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01b      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2f      	ldr	r2, [pc, #188]	@ (8006f44 <TIM_Base_SetConfig+0x13c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d017      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f48 <TIM_Base_SetConfig+0x140>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	@ (8006f4c <TIM_Base_SetConfig+0x144>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00f      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f50 <TIM_Base_SetConfig+0x148>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00b      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f54 <TIM_Base_SetConfig+0x14c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d007      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2a      	ldr	r2, [pc, #168]	@ (8006f58 <TIM_Base_SetConfig+0x150>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a29      	ldr	r2, [pc, #164]	@ (8006f5c <TIM_Base_SetConfig+0x154>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a10      	ldr	r2, [pc, #64]	@ (8006f34 <TIM_Base_SetConfig+0x12c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0xf8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a12      	ldr	r2, [pc, #72]	@ (8006f44 <TIM_Base_SetConfig+0x13c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d103      	bne.n	8006f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d105      	bne.n	8006f26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f023 0201 	bic.w	r2, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	611a      	str	r2, [r3, #16]
  }
}
 8006f26:	bf00      	nop
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40010400 	.word	0x40010400
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400
 8006f50:	40014800 	.word	0x40014800
 8006f54:	40001800 	.word	0x40001800
 8006f58:	40001c00 	.word	0x40001c00
 8006f5c:	40002000 	.word	0x40002000

08006f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	f023 0201 	bic.w	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f023 0302 	bic.w	r3, r3, #2
 8006fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a20      	ldr	r2, [pc, #128]	@ (8007038 <TIM_OC1_SetConfig+0xd8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC1_SetConfig+0x64>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800703c <TIM_OC1_SetConfig+0xdc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10c      	bne.n	8006fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0308 	bic.w	r3, r3, #8
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f023 0304 	bic.w	r3, r3, #4
 8006fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	@ (8007038 <TIM_OC1_SetConfig+0xd8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC1_SetConfig+0x8e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	@ (800703c <TIM_OC1_SetConfig+0xdc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d111      	bne.n	8007012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	621a      	str	r2, [r3, #32]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	40010000 	.word	0x40010000
 800703c:	40010400 	.word	0x40010400

08007040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	f023 0210 	bic.w	r2, r3, #16
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0320 	bic.w	r3, r3, #32
 800708a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a22      	ldr	r2, [pc, #136]	@ (8007124 <TIM_OC2_SetConfig+0xe4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_OC2_SetConfig+0x68>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a21      	ldr	r2, [pc, #132]	@ (8007128 <TIM_OC2_SetConfig+0xe8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d10d      	bne.n	80070c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a17      	ldr	r2, [pc, #92]	@ (8007124 <TIM_OC2_SetConfig+0xe4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC2_SetConfig+0x94>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <TIM_OC2_SetConfig+0xe8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d113      	bne.n	80070fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400

0800712c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a21      	ldr	r2, [pc, #132]	@ (800720c <TIM_OC3_SetConfig+0xe0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_OC3_SetConfig+0x66>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a20      	ldr	r2, [pc, #128]	@ (8007210 <TIM_OC3_SetConfig+0xe4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d10d      	bne.n	80071ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a16      	ldr	r2, [pc, #88]	@ (800720c <TIM_OC3_SetConfig+0xe0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d003      	beq.n	80071be <TIM_OC3_SetConfig+0x92>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <TIM_OC3_SetConfig+0xe4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d113      	bne.n	80071e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	621a      	str	r2, [r3, #32]
}
 8007200:	bf00      	nop
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400

08007214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800724a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800725e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	031b      	lsls	r3, r3, #12
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <TIM_OC4_SetConfig+0xa4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC4_SetConfig+0x68>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a11      	ldr	r2, [pc, #68]	@ (80072bc <TIM_OC4_SetConfig+0xa8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d109      	bne.n	8007290 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400

080072c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 030a 	bic.w	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f023 0210 	bic.w	r2, r3, #16
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	031b      	lsls	r3, r3, #12
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800735a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	f043 0307 	orr.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	609a      	str	r2, [r3, #8]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	021a      	lsls	r2, r3, #8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	609a      	str	r2, [r3, #8]
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	43db      	mvns	r3, r3
 8007416:	401a      	ands	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007454:	2302      	movs	r3, #2
 8007456:	e05a      	b.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a21      	ldr	r2, [pc, #132]	@ (800751c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d022      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a4:	d01d      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d018      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d013      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00e      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a18      	ldr	r2, [pc, #96]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d009      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a17      	ldr	r2, [pc, #92]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d004      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10c      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40000400 	.word	0x40000400
 8007524:	40000800 	.word	0x40000800
 8007528:	40000c00 	.word	0x40000c00
 800752c:	40010400 	.word	0x40010400
 8007530:	40014000 	.word	0x40014000
 8007534:	40001800 	.word	0x40001800

08007538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e042      	b.n	80075f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fa f830 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	@ 0x24
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f973 	bl	8007890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b20      	cmp	r3, #32
 800761e:	d175      	bne.n	800770c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_UART_Transmit+0x2c>
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e06e      	b.n	800770e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2221      	movs	r2, #33	@ 0x21
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800763e:	f7fa faa1 	bl	8001b84 <HAL_GetTick>
 8007642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007658:	d108      	bne.n	800766c <HAL_UART_Transmit+0x6c>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e003      	b.n	8007674 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007674:	e02e      	b.n	80076d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2200      	movs	r2, #0
 800767e:	2180      	movs	r1, #128	@ 0x80
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f848 	bl	8007716 <UART_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e03a      	b.n	800770e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	3302      	adds	r3, #2
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	e007      	b.n	80076c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	781a      	ldrb	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	3301      	adds	r3, #1
 80076c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1cb      	bne.n	8007676 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	2140      	movs	r1, #64	@ 0x40
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f814 	bl	8007716 <UART_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e006      	b.n	800770e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	e000      	b.n	800770e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800770c:	2302      	movs	r3, #2
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b086      	sub	sp, #24
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007726:	e03b      	b.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d037      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007730:	f7fa fa28 	bl	8001b84 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	6a3a      	ldr	r2, [r7, #32]
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <UART_WaitOnFlagUntilTimeout+0x30>
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e03a      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d023      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	d020      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	d01d      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b08      	cmp	r3, #8
 8007770:	d116      	bne.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f81d 	bl	80077c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2208      	movs	r2, #8
 8007792:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e00f      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4013      	ands	r3, r2
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	bf0c      	ite	eq
 80077b0:	2301      	moveq	r3, #1
 80077b2:	2300      	movne	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d0b4      	beq.n	8007728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b095      	sub	sp, #84	@ 0x54
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	61fb      	str	r3, [r7, #28]
   return(result);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007824:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800782a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	2b01      	cmp	r3, #1
 800783e:	d119      	bne.n	8007874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	647b      	str	r3, [r7, #68]	@ 0x44
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007860:	61ba      	str	r2, [r7, #24]
 8007862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007882:	bf00      	nop
 8007884:	3754      	adds	r7, #84	@ 0x54
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
	...

08007890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007894:	b0c0      	sub	sp, #256	@ 0x100
 8007896:	af00      	add	r7, sp, #0
 8007898:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ac:	68d9      	ldr	r1, [r3, #12]
 80078ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	ea40 0301 	orr.w	r3, r0, r1
 80078b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	431a      	orrs	r2, r3
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078e8:	f021 010c 	bic.w	r1, r1, #12
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078f6:	430b      	orrs	r3, r1
 80078f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	6999      	ldr	r1, [r3, #24]
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	ea40 0301 	orr.w	r3, r0, r1
 8007916:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b8f      	ldr	r3, [pc, #572]	@ (8007b5c <UART_SetConfig+0x2cc>)
 8007920:	429a      	cmp	r2, r3
 8007922:	d005      	beq.n	8007930 <UART_SetConfig+0xa0>
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b8d      	ldr	r3, [pc, #564]	@ (8007b60 <UART_SetConfig+0x2d0>)
 800792c:	429a      	cmp	r2, r3
 800792e:	d104      	bne.n	800793a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007930:	f7fd ffae 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8007934:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007938:	e003      	b.n	8007942 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800793a:	f7fd ff95 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 800793e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800794c:	f040 810c 	bne.w	8007b68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007954:	2200      	movs	r2, #0
 8007956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800795a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800795e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007962:	4622      	mov	r2, r4
 8007964:	462b      	mov	r3, r5
 8007966:	1891      	adds	r1, r2, r2
 8007968:	65b9      	str	r1, [r7, #88]	@ 0x58
 800796a:	415b      	adcs	r3, r3
 800796c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800796e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007972:	4621      	mov	r1, r4
 8007974:	eb12 0801 	adds.w	r8, r2, r1
 8007978:	4629      	mov	r1, r5
 800797a:	eb43 0901 	adc.w	r9, r3, r1
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800798a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800798e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007992:	4690      	mov	r8, r2
 8007994:	4699      	mov	r9, r3
 8007996:	4623      	mov	r3, r4
 8007998:	eb18 0303 	adds.w	r3, r8, r3
 800799c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079a0:	462b      	mov	r3, r5
 80079a2:	eb49 0303 	adc.w	r3, r9, r3
 80079a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079be:	460b      	mov	r3, r1
 80079c0:	18db      	adds	r3, r3, r3
 80079c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079c4:	4613      	mov	r3, r2
 80079c6:	eb42 0303 	adc.w	r3, r2, r3
 80079ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80079cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079d4:	f7f8 fc0c 	bl	80001f0 <__aeabi_uldivmod>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4b61      	ldr	r3, [pc, #388]	@ (8007b64 <UART_SetConfig+0x2d4>)
 80079de:	fba3 2302 	umull	r2, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	011c      	lsls	r4, r3, #4
 80079e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	1891      	adds	r1, r2, r2
 80079fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a00:	415b      	adcs	r3, r3
 8007a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a08:	4641      	mov	r1, r8
 8007a0a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a0e:	4649      	mov	r1, r9
 8007a10:	eb43 0b01 	adc.w	fp, r3, r1
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a28:	4692      	mov	sl, r2
 8007a2a:	469b      	mov	fp, r3
 8007a2c:	4643      	mov	r3, r8
 8007a2e:	eb1a 0303 	adds.w	r3, sl, r3
 8007a32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a36:	464b      	mov	r3, r9
 8007a38:	eb4b 0303 	adc.w	r3, fp, r3
 8007a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a54:	460b      	mov	r3, r1
 8007a56:	18db      	adds	r3, r3, r3
 8007a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	eb42 0303 	adc.w	r3, r2, r3
 8007a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a6a:	f7f8 fbc1 	bl	80001f0 <__aeabi_uldivmod>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	4b3b      	ldr	r3, [pc, #236]	@ (8007b64 <UART_SetConfig+0x2d4>)
 8007a76:	fba3 2301 	umull	r2, r3, r3, r1
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	2264      	movs	r2, #100	@ 0x64
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	1acb      	subs	r3, r1, r3
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a8a:	4b36      	ldr	r3, [pc, #216]	@ (8007b64 <UART_SetConfig+0x2d4>)
 8007a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a98:	441c      	add	r4, r3
 8007a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007aa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007aa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	1891      	adds	r1, r2, r2
 8007ab2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ab4:	415b      	adcs	r3, r3
 8007ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007abc:	4641      	mov	r1, r8
 8007abe:	1851      	adds	r1, r2, r1
 8007ac0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	414b      	adcs	r3, r1
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	00cb      	lsls	r3, r1, #3
 8007ad8:	4651      	mov	r1, sl
 8007ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ade:	4651      	mov	r1, sl
 8007ae0:	00ca      	lsls	r2, r1, #3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4642      	mov	r2, r8
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007af0:	464b      	mov	r3, r9
 8007af2:	460a      	mov	r2, r1
 8007af4:	eb42 0303 	adc.w	r3, r2, r3
 8007af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b10:	460b      	mov	r3, r1
 8007b12:	18db      	adds	r3, r3, r3
 8007b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b16:	4613      	mov	r3, r2
 8007b18:	eb42 0303 	adc.w	r3, r2, r3
 8007b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b26:	f7f8 fb63 	bl	80001f0 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <UART_SetConfig+0x2d4>)
 8007b30:	fba3 1302 	umull	r1, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	2164      	movs	r1, #100	@ 0x64
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	3332      	adds	r3, #50	@ 0x32
 8007b42:	4a08      	ldr	r2, [pc, #32]	@ (8007b64 <UART_SetConfig+0x2d4>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f003 0207 	and.w	r2, r3, #7
 8007b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4422      	add	r2, r4
 8007b56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b58:	e106      	b.n	8007d68 <UART_SetConfig+0x4d8>
 8007b5a:	bf00      	nop
 8007b5c:	40011000 	.word	0x40011000
 8007b60:	40011400 	.word	0x40011400
 8007b64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b7a:	4642      	mov	r2, r8
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	1891      	adds	r1, r2, r2
 8007b80:	6239      	str	r1, [r7, #32]
 8007b82:	415b      	adcs	r3, r3
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	1854      	adds	r4, r2, r1
 8007b8e:	4649      	mov	r1, r9
 8007b90:	eb43 0501 	adc.w	r5, r3, r1
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	00eb      	lsls	r3, r5, #3
 8007b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ba2:	00e2      	lsls	r2, r4, #3
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	4643      	mov	r3, r8
 8007baa:	18e3      	adds	r3, r4, r3
 8007bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	eb45 0303 	adc.w	r3, r5, r3
 8007bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bca:	f04f 0200 	mov.w	r2, #0
 8007bce:	f04f 0300 	mov.w	r3, #0
 8007bd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	008b      	lsls	r3, r1, #2
 8007bda:	4621      	mov	r1, r4
 8007bdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007be0:	4621      	mov	r1, r4
 8007be2:	008a      	lsls	r2, r1, #2
 8007be4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007be8:	f7f8 fb02 	bl	80001f0 <__aeabi_uldivmod>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4b60      	ldr	r3, [pc, #384]	@ (8007d74 <UART_SetConfig+0x4e4>)
 8007bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	011c      	lsls	r4, r3, #4
 8007bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c0c:	4642      	mov	r2, r8
 8007c0e:	464b      	mov	r3, r9
 8007c10:	1891      	adds	r1, r2, r2
 8007c12:	61b9      	str	r1, [r7, #24]
 8007c14:	415b      	adcs	r3, r3
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c1c:	4641      	mov	r1, r8
 8007c1e:	1851      	adds	r1, r2, r1
 8007c20:	6139      	str	r1, [r7, #16]
 8007c22:	4649      	mov	r1, r9
 8007c24:	414b      	adcs	r3, r1
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c34:	4659      	mov	r1, fp
 8007c36:	00cb      	lsls	r3, r1, #3
 8007c38:	4651      	mov	r1, sl
 8007c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c3e:	4651      	mov	r1, sl
 8007c40:	00ca      	lsls	r2, r1, #3
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	4642      	mov	r2, r8
 8007c4a:	189b      	adds	r3, r3, r2
 8007c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c50:	464b      	mov	r3, r9
 8007c52:	460a      	mov	r2, r1
 8007c54:	eb42 0303 	adc.w	r3, r2, r3
 8007c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c74:	4649      	mov	r1, r9
 8007c76:	008b      	lsls	r3, r1, #2
 8007c78:	4641      	mov	r1, r8
 8007c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c7e:	4641      	mov	r1, r8
 8007c80:	008a      	lsls	r2, r1, #2
 8007c82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c86:	f7f8 fab3 	bl	80001f0 <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4b38      	ldr	r3, [pc, #224]	@ (8007d74 <UART_SetConfig+0x4e4>)
 8007c92:	fba3 2301 	umull	r2, r3, r3, r1
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	2264      	movs	r2, #100	@ 0x64
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	1acb      	subs	r3, r1, r3
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	3332      	adds	r3, #50	@ 0x32
 8007ca4:	4a33      	ldr	r2, [pc, #204]	@ (8007d74 <UART_SetConfig+0x4e4>)
 8007ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cb0:	441c      	add	r4, r3
 8007cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cba:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	1891      	adds	r1, r2, r2
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	415b      	adcs	r3, r3
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	1851      	adds	r1, r2, r1
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	414b      	adcs	r3, r1
 8007cda:	607b      	str	r3, [r7, #4]
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ce8:	4659      	mov	r1, fp
 8007cea:	00cb      	lsls	r3, r1, #3
 8007cec:	4651      	mov	r1, sl
 8007cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	00ca      	lsls	r2, r1, #3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d02:	464b      	mov	r3, r9
 8007d04:	460a      	mov	r2, r1
 8007d06:	eb42 0303 	adc.w	r3, r2, r3
 8007d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d16:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d24:	4649      	mov	r1, r9
 8007d26:	008b      	lsls	r3, r1, #2
 8007d28:	4641      	mov	r1, r8
 8007d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d2e:	4641      	mov	r1, r8
 8007d30:	008a      	lsls	r2, r1, #2
 8007d32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d36:	f7f8 fa5b 	bl	80001f0 <__aeabi_uldivmod>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d74 <UART_SetConfig+0x4e4>)
 8007d40:	fba3 1302 	umull	r1, r3, r3, r2
 8007d44:	095b      	lsrs	r3, r3, #5
 8007d46:	2164      	movs	r1, #100	@ 0x64
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	3332      	adds	r3, #50	@ 0x32
 8007d52:	4a08      	ldr	r2, [pc, #32]	@ (8007d74 <UART_SetConfig+0x4e4>)
 8007d54:	fba2 2303 	umull	r2, r3, r2, r3
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f003 020f 	and.w	r2, r3, #15
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4422      	add	r2, r4
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d74:	51eb851f 	.word	0x51eb851f

08007d78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d123      	bne.n	8007dd2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007d92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	6851      	ldr	r1, [r2, #4]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	6892      	ldr	r2, [r2, #8]
 8007d9e:	4311      	orrs	r1, r2
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	68d2      	ldr	r2, [r2, #12]
 8007da4:	4311      	orrs	r1, r2
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	6912      	ldr	r2, [r2, #16]
 8007daa:	4311      	orrs	r1, r2
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	6952      	ldr	r2, [r2, #20]
 8007db0:	4311      	orrs	r1, r2
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	6992      	ldr	r2, [r2, #24]
 8007db6:	4311      	orrs	r1, r2
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	69d2      	ldr	r2, [r2, #28]
 8007dbc:	4311      	orrs	r1, r2
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	6a12      	ldr	r2, [r2, #32]
 8007dc2:	4311      	orrs	r1, r2
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e028      	b.n	8007e24 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	69d9      	ldr	r1, [r3, #28]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	4319      	orrs	r1, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	430b      	orrs	r3, r1
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007df8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	6851      	ldr	r1, [r2, #4]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	6892      	ldr	r2, [r2, #8]
 8007e04:	4311      	orrs	r1, r2
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	68d2      	ldr	r2, [r2, #12]
 8007e0a:	4311      	orrs	r1, r2
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	6912      	ldr	r2, [r2, #16]
 8007e10:	4311      	orrs	r1, r2
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	6952      	ldr	r2, [r2, #20]
 8007e16:	4311      	orrs	r1, r2
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	6992      	ldr	r2, [r2, #24]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d128      	bne.n	8007e96 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	1e59      	subs	r1, r3, #1
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	4319      	orrs	r1, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	4319      	orrs	r1, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	031b      	lsls	r3, r3, #12
 8007e6e:	4319      	orrs	r1, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	041b      	lsls	r3, r3, #16
 8007e78:	4319      	orrs	r1, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	051b      	lsls	r3, r3, #20
 8007e82:	4319      	orrs	r1, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	061b      	lsls	r3, r3, #24
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	609a      	str	r2, [r3, #8]
 8007e94:	e02f      	b.n	8007ef6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	68d2      	ldr	r2, [r2, #12]
 8007ea6:	3a01      	subs	r2, #1
 8007ea8:	0311      	lsls	r1, r2, #12
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	6952      	ldr	r2, [r2, #20]
 8007eae:	3a01      	subs	r2, #1
 8007eb0:	0512      	lsls	r2, r2, #20
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	1e59      	subs	r1, r3, #1
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	4319      	orrs	r1, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	021b      	lsls	r3, r3, #8
 8007eda:	4319      	orrs	r1, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	4319      	orrs	r1, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f043 0201 	orr.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 0201 	bic.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f62:	d901      	bls.n	8007f68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e01b      	b.n	8007fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	daf2      	bge.n	8007f56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	019b      	lsls	r3, r3, #6
 8007f78:	f043 0220 	orr.w	r2, r3, #32
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f8c:	d901      	bls.n	8007f92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e006      	b.n	8007fa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d0f0      	beq.n	8007f80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fc4:	d901      	bls.n	8007fca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e018      	b.n	8007ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	daf2      	bge.n	8007fb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2210      	movs	r2, #16
 8007fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fe8:	d901      	bls.n	8007fee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e006      	b.n	8007ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	2b10      	cmp	r3, #16
 8007ff8:	d0f0      	beq.n	8007fdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008008:	b480      	push	{r7}
 800800a:	b08b      	sub	sp, #44	@ 0x2c
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	089b      	lsrs	r3, r3, #2
 8008022:	b29b      	uxth	r3, r3
 8008024:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800802e:	2300      	movs	r3, #0
 8008030:	623b      	str	r3, [r7, #32]
 8008032:	e014      	b.n	800805e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	3301      	adds	r3, #1
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	3301      	adds	r3, #1
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	3301      	adds	r3, #1
 8008050:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	3301      	adds	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	3301      	adds	r3, #1
 800805c:	623b      	str	r3, [r7, #32]
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	429a      	cmp	r2, r3
 8008064:	d3e6      	bcc.n	8008034 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008066:	8bfb      	ldrh	r3, [r7, #30]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01e      	beq.n	80080aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008076:	461a      	mov	r2, r3
 8008078:	f107 0310 	add.w	r3, r7, #16
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	fa22 f303 	lsr.w	r3, r2, r3
 800808c:	b2da      	uxtb	r2, r3
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	701a      	strb	r2, [r3, #0]
      i++;
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	3301      	adds	r3, #1
 8008096:	623b      	str	r3, [r7, #32]
      pDest++;
 8008098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809a:	3301      	adds	r3, #1
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800809e:	8bfb      	ldrh	r3, [r7, #30]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080a4:	8bfb      	ldrh	r3, [r7, #30]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1ea      	bne.n	8008080 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	372c      	adds	r7, #44	@ 0x2c
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4013      	ands	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080d0:	68fb      	ldr	r3, [r7, #12]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	4013      	ands	r3, r2
 8008110:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008112:	68bb      	ldr	r3, [r7, #8]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	f003 0301 	and.w	r3, r3, #1
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800815a:	f023 0303 	bic.w	r3, r3, #3
 800815e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008174:	4313      	orrs	r3, r2
 8008176:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d107      	bne.n	800818e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008184:	461a      	mov	r2, r3
 8008186:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800818a:	6053      	str	r3, [r2, #4]
 800818c:	e00c      	b.n	80081a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d107      	bne.n	80081a4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800819a:	461a      	mov	r2, r3
 800819c:	f241 7370 	movw	r3, #6000	@ 0x1770
 80081a0:	6053      	str	r3, [r2, #4]
 80081a2:	e001      	b.n	80081a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	b29b      	uxth	r3, r3
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081d8:	b480      	push	{r7}
 80081da:	b089      	sub	sp, #36	@ 0x24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0c9b      	lsrs	r3, r3, #18
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	0fdb      	lsrs	r3, r3, #31
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	0fdb      	lsrs	r3, r3, #31
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b20      	cmp	r3, #32
 800823c:	d10d      	bne.n	800825a <USB_HC_Halt+0x82>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <USB_HC_Halt+0x82>
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d002      	beq.n	8008256 <USB_HC_Halt+0x7e>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b03      	cmp	r3, #3
 8008254:	d101      	bne.n	800825a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	e0d8      	b.n	800840c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <USB_HC_Halt+0x8e>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d173      	bne.n	800834e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	440a      	add	r2, r1
 800827c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008284:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	d14a      	bne.n	8008328 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d133      	bne.n	8008306 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082dc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	3301      	adds	r3, #1
 80082e2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082ea:	d82e      	bhi.n	800834a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008302:	d0ec      	beq.n	80082de <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008304:	e081      	b.n	800840a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4413      	add	r3, r2
 800830e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	0151      	lsls	r1, r2, #5
 8008318:	69fa      	ldr	r2, [r7, #28]
 800831a:	440a      	add	r2, r1
 800831c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008320:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008324:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008326:	e070      	b.n	800840a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	440a      	add	r2, r1
 800833e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008342:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008346:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008348:	e05f      	b.n	800840a <USB_HC_Halt+0x232>
            break;
 800834a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800834c:	e05d      	b.n	800840a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	440a      	add	r2, r1
 8008364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008368:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800836c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d133      	bne.n	80083e6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	440a      	add	r2, r1
 8008394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800839c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083bc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083ca:	d81d      	bhi.n	8008408 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083e2:	d0ec      	beq.n	80083be <USB_HC_Halt+0x1e6>
 80083e4:	e011      	b.n	800840a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008400:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	e000      	b.n	800840a <USB_HC_Halt+0x232>
          break;
 8008408:	bf00      	nop
    }
  }

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3724      	adds	r7, #36	@ 0x24
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fd7a 	bl	8007f26 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008432:	2110      	movs	r1, #16
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fd87 	bl	8007f48 <USB_FlushTxFifo>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff fdb1 	bl	8007fac <USB_FlushRxFifo>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
 8008458:	e01f      	b.n	800849a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	4413      	add	r3, r2
 8008462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008470:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008478:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008480:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848e:	461a      	mov	r2, r3
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	3301      	adds	r3, #1
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b0f      	cmp	r3, #15
 800849e:	d9dc      	bls.n	800845a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084a0:	2300      	movs	r3, #0
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	e034      	b.n	8008510 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084da:	461a      	mov	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084ec:	d80c      	bhi.n	8008508 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008504:	d0ec      	beq.n	80084e0 <USB_StopHost+0xc8>
 8008506:	e000      	b.n	800850a <USB_StopHost+0xf2>
        break;
 8008508:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	3301      	adds	r3, #1
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	2b0f      	cmp	r3, #15
 8008514:	d9c7      	bls.n	80084a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800851c:	461a      	mov	r2, r3
 800851e:	f04f 33ff 	mov.w	r3, #4294967295
 8008522:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fce9 	bl	8007f04 <USB_EnableGlobalInt>

  return ret;
 8008532:	7ffb      	ldrb	r3, [r7, #31]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3720      	adds	r7, #32
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f804 	bl	8008560 <USBH_HandleSof>
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b0b      	cmp	r3, #11
 8008570:	d10a      	bne.n	8008588 <USBH_HandleSof+0x28>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
  }
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80085b4:	2200      	movs	r2, #0
 80085b6:	4619      	mov	r1, r3
 80085b8:	f000 f8ae 	bl	8008718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80085bc:	bf00      	nop
}
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80085d4:	bf00      	nop
}
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008614:	2200      	movs	r2, #0
 8008616:	4619      	mov	r1, r3
 8008618:	f000 f87e 	bl	8008718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 f92a 	bl	80098a0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	791b      	ldrb	r3, [r3, #4]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f830 	bl	80086b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	795b      	ldrb	r3, [r3, #5]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f82a 	bl	80086b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008678:	2200      	movs	r2, #0
 800867a:	4619      	mov	r1, r3
 800867c:	f000 f84c 	bl	8008718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80086a6:	2200      	movs	r2, #0
 80086a8:	4619      	mov	r1, r3
 80086aa:	f000 f835 	bl	8008718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d80d      	bhi.n	80086e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	33e0      	adds	r3, #224	@ 0xe0
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	33e0      	adds	r3, #224	@ 0xe0
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086fa:	f3ef 8305 	mrs	r3, IPSR
 80086fe:	607b      	str	r3, [r7, #4]
  return(result);
 8008700:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008724:	2300      	movs	r3, #0
 8008726:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <osMessagePut+0x1e>
    ticks = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008736:	f7ff ffdd 	bl	80086f4 <inHandlerMode>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d018      	beq.n	8008772 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008740:	f107 0210 	add.w	r2, r7, #16
 8008744:	f107 0108 	add.w	r1, r7, #8
 8008748:	2300      	movs	r3, #0
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f9ae 	bl	8008aac <xQueueGenericSendFromISR>
 8008750:	4603      	mov	r3, r0
 8008752:	2b01      	cmp	r3, #1
 8008754:	d001      	beq.n	800875a <osMessagePut+0x42>
      return osErrorOS;
 8008756:	23ff      	movs	r3, #255	@ 0xff
 8008758:	e018      	b.n	800878c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d014      	beq.n	800878a <osMessagePut+0x72>
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <osMessagePut+0x7c>)
 8008762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	e00b      	b.n	800878a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008772:	f107 0108 	add.w	r1, r7, #8
 8008776:	2300      	movs	r3, #0
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f894 	bl	80088a8 <xQueueGenericSend>
 8008780:	4603      	mov	r3, r0
 8008782:	2b01      	cmp	r3, #1
 8008784:	d001      	beq.n	800878a <osMessagePut+0x72>
      return osErrorOS;
 8008786:	23ff      	movs	r3, #255	@ 0xff
 8008788:	e000      	b.n	800878c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	e000ed04 	.word	0xe000ed04

08008798 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d103      	bne.n	8008800 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	e00c      	b.n	800881a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3308      	adds	r3, #8
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e002      	b.n	800880e <vListInsert+0x2e>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	d2f6      	bcs.n	8008808 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	6892      	ldr	r2, [r2, #8]
 8008868:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6852      	ldr	r2, [r2, #4]
 8008872:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	429a      	cmp	r2, r3
 800887c:	d103      	bne.n	8008886 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	1e5a      	subs	r2, r3, #1
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08e      	sub	sp, #56	@ 0x38
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088b6:	2300      	movs	r3, #0
 80088b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <xQueueGenericSend+0x42>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <xQueueGenericSend+0x46>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e000      	b.n	80088f0 <xQueueGenericSend+0x48>
 80088ee:	2300      	movs	r3, #0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10b      	bne.n	800890c <xQueueGenericSend+0x64>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d103      	bne.n	800891a <xQueueGenericSend+0x72>
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008916:	2b01      	cmp	r3, #1
 8008918:	d101      	bne.n	800891e <xQueueGenericSend+0x76>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <xQueueGenericSend+0x78>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <xQueueGenericSend+0x94>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	623b      	str	r3, [r7, #32]
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800893c:	f000 fd40 	bl	80093c0 <xTaskGetSchedulerState>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <xQueueGenericSend+0xa4>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <xQueueGenericSend+0xa8>
 800894c:	2301      	movs	r3, #1
 800894e:	e000      	b.n	8008952 <xQueueGenericSend+0xaa>
 8008950:	2300      	movs	r3, #0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <xQueueGenericSend+0xc6>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	61fb      	str	r3, [r7, #28]
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	e7fd      	b.n	800896a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800896e:	f000 fe4b 	bl	8009608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897a:	429a      	cmp	r2, r3
 800897c:	d302      	bcc.n	8008984 <xQueueGenericSend+0xdc>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d129      	bne.n	80089d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800898a:	f000 f92d 	bl	8008be8 <prvCopyDataToQueue>
 800898e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d010      	beq.n	80089ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899a:	3324      	adds	r3, #36	@ 0x24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fc05 	bl	80091ac <xTaskRemoveFromEventList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d013      	beq.n	80089d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089a8:	4b3f      	ldr	r3, [pc, #252]	@ (8008aa8 <xQueueGenericSend+0x200>)
 80089aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	e00a      	b.n	80089d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089c0:	4b39      	ldr	r3, [pc, #228]	@ (8008aa8 <xQueueGenericSend+0x200>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089d0:	f000 fe4c 	bl	800966c <vPortExitCritical>
				return pdPASS;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e063      	b.n	8008aa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d103      	bne.n	80089e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089de:	f000 fe45 	bl	800966c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e05c      	b.n	8008aa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d106      	bne.n	80089fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fc3f 	bl	8009274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089f6:	2301      	movs	r3, #1
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089fa:	f000 fe37 	bl	800966c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089fe:	f000 f9c7 	bl	8008d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a02:	f000 fe01 	bl	8009608 <vPortEnterCritical>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d103      	bne.n	8008a1c <xQueueGenericSend+0x174>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a22:	b25b      	sxtb	r3, r3
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d103      	bne.n	8008a32 <xQueueGenericSend+0x18a>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a32:	f000 fe1b 	bl	800966c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a36:	1d3a      	adds	r2, r7, #4
 8008a38:	f107 0314 	add.w	r3, r7, #20
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fc2e 	bl	80092a0 <xTaskCheckForTimeOut>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d124      	bne.n	8008a94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a4c:	f000 f988 	bl	8008d60 <prvIsQueueFull>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d018      	beq.n	8008a88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	3310      	adds	r3, #16
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fb7e 	bl	8009160 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a66:	f000 f929 	bl	8008cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a6a:	f000 f99f 	bl	8008dac <xTaskResumeAll>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f af7c 	bne.w	800896e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a76:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <xQueueGenericSend+0x200>)
 8008a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	e772      	b.n	800896e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a8a:	f000 f917 	bl	8008cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a8e:	f000 f98d 	bl	8008dac <xTaskResumeAll>
 8008a92:	e76c      	b.n	800896e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a96:	f000 f911 	bl	8008cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a9a:	f000 f987 	bl	8008dac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3738      	adds	r7, #56	@ 0x38
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b090      	sub	sp, #64	@ 0x40
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <xQueueGenericSendFromISR+0x3e>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <xQueueGenericSendFromISR+0x42>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e000      	b.n	8008af0 <xQueueGenericSendFromISR+0x44>
 8008aee:	2300      	movs	r3, #0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	e7fd      	b.n	8008b08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d103      	bne.n	8008b1a <xQueueGenericSendFromISR+0x6e>
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <xQueueGenericSendFromISR+0x72>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <xQueueGenericSendFromISR+0x74>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10b      	bne.n	8008b3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	623b      	str	r3, [r7, #32]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b3c:	f000 fe16 	bl	800976c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b40:	f3ef 8211 	mrs	r2, BASEPRI
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	61fa      	str	r2, [r7, #28]
 8008b56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d302      	bcc.n	8008b6e <xQueueGenericSendFromISR+0xc2>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d12f      	bne.n	8008bce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b84:	f000 f830 	bl	8008be8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d112      	bne.n	8008bb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d016      	beq.n	8008bc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	3324      	adds	r3, #36	@ 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fb04 	bl	80091ac <xTaskRemoveFromEventList>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00e      	beq.n	8008bc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	e007      	b.n	8008bc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	b25a      	sxtb	r2, r3
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008bcc:	e001      	b.n	8008bd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3740      	adds	r7, #64	@ 0x40
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10d      	bne.n	8008c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d14d      	bne.n	8008caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fbf2 	bl	80093fc <xTaskPriorityDisinherit>
 8008c18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	609a      	str	r2, [r3, #8]
 8008c20:	e043      	b.n	8008caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d119      	bne.n	8008c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6858      	ldr	r0, [r3, #4]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c30:	461a      	mov	r2, r3
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	f001 f9ad 	bl	8009f92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	441a      	add	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d32b      	bcc.n	8008caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	605a      	str	r2, [r3, #4]
 8008c5a:	e026      	b.n	8008caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68d8      	ldr	r0, [r3, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	461a      	mov	r2, r3
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	f001 f993 	bl	8009f92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c74:	425b      	negs	r3, r3
 8008c76:	441a      	add	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d207      	bcs.n	8008c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c90:	425b      	negs	r3, r3
 8008c92:	441a      	add	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d105      	bne.n	8008caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008cb2:	697b      	ldr	r3, [r7, #20]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cc4:	f000 fca0 	bl	8009608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cd0:	e011      	b.n	8008cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d012      	beq.n	8008d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3324      	adds	r3, #36	@ 0x24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fa64 	bl	80091ac <xTaskRemoveFromEventList>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cea:	f000 fb3d 	bl	8009368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dce9      	bgt.n	8008cd2 <prvUnlockQueue+0x16>
 8008cfe:	e000      	b.n	8008d02 <prvUnlockQueue+0x46>
					break;
 8008d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	22ff      	movs	r2, #255	@ 0xff
 8008d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d0a:	f000 fcaf 	bl	800966c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d0e:	f000 fc7b 	bl	8009608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d1a:	e011      	b.n	8008d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d012      	beq.n	8008d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3310      	adds	r3, #16
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fa3f 	bl	80091ac <xTaskRemoveFromEventList>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d34:	f000 fb18 	bl	8009368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dce9      	bgt.n	8008d1c <prvUnlockQueue+0x60>
 8008d48:	e000      	b.n	8008d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	22ff      	movs	r2, #255	@ 0xff
 8008d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d54:	f000 fc8a 	bl	800966c <vPortExitCritical>
}
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d68:	f000 fc4e 	bl	8009608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d102      	bne.n	8008d7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	e001      	b.n	8008d82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d82:	f000 fc73 	bl	800966c <vPortExitCritical>

	return xReturn;
 8008d86:	68fb      	ldr	r3, [r7, #12]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d94:	4b04      	ldr	r3, [pc, #16]	@ (8008da8 <vTaskSuspendAll+0x18>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	4a03      	ldr	r2, [pc, #12]	@ (8008da8 <vTaskSuspendAll+0x18>)
 8008d9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d9e:	bf00      	nop
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	200004cc 	.word	0x200004cc

08008dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dba:	4b42      	ldr	r3, [pc, #264]	@ (8008ec4 <xTaskResumeAll+0x118>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10b      	bne.n	8008dda <xTaskResumeAll+0x2e>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	603b      	str	r3, [r7, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	e7fd      	b.n	8008dd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dda:	f000 fc15 	bl	8009608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dde:	4b39      	ldr	r3, [pc, #228]	@ (8008ec4 <xTaskResumeAll+0x118>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	4a37      	ldr	r2, [pc, #220]	@ (8008ec4 <xTaskResumeAll+0x118>)
 8008de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de8:	4b36      	ldr	r3, [pc, #216]	@ (8008ec4 <xTaskResumeAll+0x118>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d161      	bne.n	8008eb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008df0:	4b35      	ldr	r3, [pc, #212]	@ (8008ec8 <xTaskResumeAll+0x11c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d05d      	beq.n	8008eb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008df8:	e02e      	b.n	8008e58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dfa:	4b34      	ldr	r3, [pc, #208]	@ (8008ecc <xTaskResumeAll+0x120>)
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3318      	adds	r3, #24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff fd23 	bl	8008852 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fd1e 	bl	8008852 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	409a      	lsls	r2, r3
 8008e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ed0 <xTaskResumeAll+0x124>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	4a2a      	ldr	r2, [pc, #168]	@ (8008ed0 <xTaskResumeAll+0x124>)
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4a27      	ldr	r2, [pc, #156]	@ (8008ed4 <xTaskResumeAll+0x128>)
 8008e36:	441a      	add	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7ff fcaa 	bl	8008798 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e48:	4b23      	ldr	r3, [pc, #140]	@ (8008ed8 <xTaskResumeAll+0x12c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d302      	bcc.n	8008e58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e52:	4b22      	ldr	r3, [pc, #136]	@ (8008edc <xTaskResumeAll+0x130>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e58:	4b1c      	ldr	r3, [pc, #112]	@ (8008ecc <xTaskResumeAll+0x120>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1cc      	bne.n	8008dfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e66:	f000 fa8b 	bl	8009380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <xTaskResumeAll+0x134>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d010      	beq.n	8008e98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e76:	f000 f837 	bl	8008ee8 <xTaskIncrementTick>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e80:	4b16      	ldr	r3, [pc, #88]	@ (8008edc <xTaskResumeAll+0x130>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f1      	bne.n	8008e76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e92:	4b13      	ldr	r3, [pc, #76]	@ (8008ee0 <xTaskResumeAll+0x134>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e98:	4b10      	ldr	r3, [pc, #64]	@ (8008edc <xTaskResumeAll+0x130>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee4 <xTaskResumeAll+0x138>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eb4:	f000 fbda 	bl	800966c <vPortExitCritical>

	return xAlreadyYielded;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200004cc 	.word	0x200004cc
 8008ec8:	200004ac 	.word	0x200004ac
 8008ecc:	20000484 	.word	0x20000484
 8008ed0:	200004b4 	.word	0x200004b4
 8008ed4:	200003f0 	.word	0x200003f0
 8008ed8:	200003ec 	.word	0x200003ec
 8008edc:	200004c0 	.word	0x200004c0
 8008ee0:	200004bc 	.word	0x200004bc
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8009030 <xTaskIncrementTick+0x148>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f040 808f 	bne.w	800901a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008efc:	4b4d      	ldr	r3, [pc, #308]	@ (8009034 <xTaskIncrementTick+0x14c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f04:	4a4b      	ldr	r2, [pc, #300]	@ (8009034 <xTaskIncrementTick+0x14c>)
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d121      	bne.n	8008f54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f10:	4b49      	ldr	r3, [pc, #292]	@ (8009038 <xTaskIncrementTick+0x150>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	603b      	str	r3, [r7, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <xTaskIncrementTick+0x46>
 8008f32:	4b41      	ldr	r3, [pc, #260]	@ (8009038 <xTaskIncrementTick+0x150>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	4b40      	ldr	r3, [pc, #256]	@ (800903c <xTaskIncrementTick+0x154>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009038 <xTaskIncrementTick+0x150>)
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4a3e      	ldr	r2, [pc, #248]	@ (800903c <xTaskIncrementTick+0x154>)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	4b3e      	ldr	r3, [pc, #248]	@ (8009040 <xTaskIncrementTick+0x158>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8009040 <xTaskIncrementTick+0x158>)
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	f000 fa16 	bl	8009380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f54:	4b3b      	ldr	r3, [pc, #236]	@ (8009044 <xTaskIncrementTick+0x15c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d348      	bcc.n	8008ff0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f5e:	4b36      	ldr	r3, [pc, #216]	@ (8009038 <xTaskIncrementTick+0x150>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f68:	4b36      	ldr	r3, [pc, #216]	@ (8009044 <xTaskIncrementTick+0x15c>)
 8008f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6e:	601a      	str	r2, [r3, #0]
					break;
 8008f70:	e03e      	b.n	8008ff0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f72:	4b31      	ldr	r3, [pc, #196]	@ (8009038 <xTaskIncrementTick+0x150>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d203      	bcs.n	8008f92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009044 <xTaskIncrementTick+0x15c>)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f90:	e02e      	b.n	8008ff0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fc5b 	bl	8008852 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d004      	beq.n	8008fae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	3318      	adds	r3, #24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fc52 	bl	8008852 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	409a      	lsls	r2, r3
 8008fb6:	4b24      	ldr	r3, [pc, #144]	@ (8009048 <xTaskIncrementTick+0x160>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	4a22      	ldr	r2, [pc, #136]	@ (8009048 <xTaskIncrementTick+0x160>)
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800904c <xTaskIncrementTick+0x164>)
 8008fce:	441a      	add	r2, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7ff fbde 	bl	8008798 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8009050 <xTaskIncrementTick+0x168>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d3b9      	bcc.n	8008f5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fea:	2301      	movs	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fee:	e7b6      	b.n	8008f5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ff0:	4b17      	ldr	r3, [pc, #92]	@ (8009050 <xTaskIncrementTick+0x168>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff6:	4915      	ldr	r1, [pc, #84]	@ (800904c <xTaskIncrementTick+0x164>)
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d901      	bls.n	800900c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800900c:	4b11      	ldr	r3, [pc, #68]	@ (8009054 <xTaskIncrementTick+0x16c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d007      	beq.n	8009024 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e004      	b.n	8009024 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800901a:	4b0f      	ldr	r3, [pc, #60]	@ (8009058 <xTaskIncrementTick+0x170>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	4a0d      	ldr	r2, [pc, #52]	@ (8009058 <xTaskIncrementTick+0x170>)
 8009022:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009024:	697b      	ldr	r3, [r7, #20]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200004cc 	.word	0x200004cc
 8009034:	200004b0 	.word	0x200004b0
 8009038:	2000047c 	.word	0x2000047c
 800903c:	20000480 	.word	0x20000480
 8009040:	200004c4 	.word	0x200004c4
 8009044:	200004c8 	.word	0x200004c8
 8009048:	200004b4 	.word	0x200004b4
 800904c:	200003f0 	.word	0x200003f0
 8009050:	200003ec 	.word	0x200003ec
 8009054:	200004c0 	.word	0x200004c0
 8009058:	200004bc 	.word	0x200004bc

0800905c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009062:	4b3a      	ldr	r3, [pc, #232]	@ (800914c <vTaskSwitchContext+0xf0>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800906a:	4b39      	ldr	r3, [pc, #228]	@ (8009150 <vTaskSwitchContext+0xf4>)
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009070:	e067      	b.n	8009142 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8009072:	4b37      	ldr	r3, [pc, #220]	@ (8009150 <vTaskSwitchContext+0xf4>)
 8009074:	2200      	movs	r2, #0
 8009076:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009078:	4b36      	ldr	r3, [pc, #216]	@ (8009154 <vTaskSwitchContext+0xf8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009084:	61bb      	str	r3, [r7, #24]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	429a      	cmp	r2, r3
 800908e:	d111      	bne.n	80090b4 <vTaskSwitchContext+0x58>
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3304      	adds	r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	429a      	cmp	r2, r3
 800909a:	d10b      	bne.n	80090b4 <vTaskSwitchContext+0x58>
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	3308      	adds	r3, #8
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d105      	bne.n	80090b4 <vTaskSwitchContext+0x58>
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	330c      	adds	r3, #12
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d008      	beq.n	80090c6 <vTaskSwitchContext+0x6a>
 80090b4:	4b27      	ldr	r3, [pc, #156]	@ (8009154 <vTaskSwitchContext+0xf8>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	4b26      	ldr	r3, [pc, #152]	@ (8009154 <vTaskSwitchContext+0xf8>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3334      	adds	r3, #52	@ 0x34
 80090be:	4619      	mov	r1, r3
 80090c0:	4610      	mov	r0, r2
 80090c2:	f7f7 fa0d 	bl	80004e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c6:	4b24      	ldr	r3, [pc, #144]	@ (8009158 <vTaskSwitchContext+0xfc>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	fab3 f383 	clz	r3, r3
 80090d2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	f1c3 031f 	rsb	r3, r3, #31
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	491f      	ldr	r1, [pc, #124]	@ (800915c <vTaskSwitchContext+0x100>)
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10b      	bne.n	8009108 <vTaskSwitchContext+0xac>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	607b      	str	r3, [r7, #4]
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	e7fd      	b.n	8009104 <vTaskSwitchContext+0xa8>
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4a12      	ldr	r2, [pc, #72]	@ (800915c <vTaskSwitchContext+0x100>)
 8009114:	4413      	add	r3, r2
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	605a      	str	r2, [r3, #4]
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	3308      	adds	r3, #8
 800912a:	429a      	cmp	r2, r3
 800912c:	d104      	bne.n	8009138 <vTaskSwitchContext+0xdc>
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	605a      	str	r2, [r3, #4]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	4a05      	ldr	r2, [pc, #20]	@ (8009154 <vTaskSwitchContext+0xf8>)
 8009140:	6013      	str	r3, [r2, #0]
}
 8009142:	bf00      	nop
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	200004cc 	.word	0x200004cc
 8009150:	200004c0 	.word	0x200004c0
 8009154:	200003ec 	.word	0x200003ec
 8009158:	200004b4 	.word	0x200004b4
 800915c:	200003f0 	.word	0x200003f0

08009160 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10b      	bne.n	8009188 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009188:	4b07      	ldr	r3, [pc, #28]	@ (80091a8 <vTaskPlaceOnEventList+0x48>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3318      	adds	r3, #24
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff fb25 	bl	80087e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009196:	2101      	movs	r1, #1
 8009198:	6838      	ldr	r0, [r7, #0]
 800919a:	f000 f9b7 	bl	800950c <prvAddCurrentTaskToDelayedList>
}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200003ec 	.word	0x200003ec

080091ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10b      	bne.n	80091da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60fb      	str	r3, [r7, #12]
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	e7fd      	b.n	80091d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3318      	adds	r3, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fb37 	bl	8008852 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e4:	4b1d      	ldr	r3, [pc, #116]	@ (800925c <xTaskRemoveFromEventList+0xb0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d11c      	bne.n	8009226 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff fb2e 	bl	8008852 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	2201      	movs	r2, #1
 80091fc:	409a      	lsls	r2, r3
 80091fe:	4b18      	ldr	r3, [pc, #96]	@ (8009260 <xTaskRemoveFromEventList+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4313      	orrs	r3, r2
 8009204:	4a16      	ldr	r2, [pc, #88]	@ (8009260 <xTaskRemoveFromEventList+0xb4>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a13      	ldr	r2, [pc, #76]	@ (8009264 <xTaskRemoveFromEventList+0xb8>)
 8009216:	441a      	add	r2, r3
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7ff faba 	bl	8008798 <vListInsertEnd>
 8009224:	e005      	b.n	8009232 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3318      	adds	r3, #24
 800922a:	4619      	mov	r1, r3
 800922c:	480e      	ldr	r0, [pc, #56]	@ (8009268 <xTaskRemoveFromEventList+0xbc>)
 800922e:	f7ff fab3 	bl	8008798 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009236:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <xTaskRemoveFromEventList+0xc0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d905      	bls.n	800924c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009240:	2301      	movs	r3, #1
 8009242:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009244:	4b0a      	ldr	r3, [pc, #40]	@ (8009270 <xTaskRemoveFromEventList+0xc4>)
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e001      	b.n	8009250 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	200004cc 	.word	0x200004cc
 8009260:	200004b4 	.word	0x200004b4
 8009264:	200003f0 	.word	0x200003f0
 8009268:	20000484 	.word	0x20000484
 800926c:	200003ec 	.word	0x200003ec
 8009270:	200004c0 	.word	0x200004c0

08009274 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <vTaskInternalSetTimeOutState+0x24>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009284:	4b05      	ldr	r3, [pc, #20]	@ (800929c <vTaskInternalSetTimeOutState+0x28>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	605a      	str	r2, [r3, #4]
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	200004c4 	.word	0x200004c4
 800929c:	200004b0 	.word	0x200004b0

080092a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10b      	bne.n	80092c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
 80092c6:	e7fd      	b.n	80092c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60fb      	str	r3, [r7, #12]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092e6:	f000 f98f 	bl	8009608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009360 <xTaskCheckForTimeOut+0xc0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d102      	bne.n	800930a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	e023      	b.n	8009352 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4b15      	ldr	r3, [pc, #84]	@ (8009364 <xTaskCheckForTimeOut+0xc4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d007      	beq.n	8009326 <xTaskCheckForTimeOut+0x86>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	429a      	cmp	r2, r3
 800931e:	d302      	bcc.n	8009326 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e015      	b.n	8009352 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	429a      	cmp	r2, r3
 800932e:	d20b      	bcs.n	8009348 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff ff99 	bl	8009274 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
 8009346:	e004      	b.n	8009352 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800934e:	2301      	movs	r3, #1
 8009350:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009352:	f000 f98b 	bl	800966c <vPortExitCritical>

	return xReturn;
 8009356:	69fb      	ldr	r3, [r7, #28]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3720      	adds	r7, #32
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200004b0 	.word	0x200004b0
 8009364:	200004c4 	.word	0x200004c4

08009368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800936c:	4b03      	ldr	r3, [pc, #12]	@ (800937c <vTaskMissedYield+0x14>)
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	200004c0 	.word	0x200004c0

08009380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009386:	4b0c      	ldr	r3, [pc, #48]	@ (80093b8 <prvResetNextTaskUnblockTime+0x38>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009390:	4b0a      	ldr	r3, [pc, #40]	@ (80093bc <prvResetNextTaskUnblockTime+0x3c>)
 8009392:	f04f 32ff 	mov.w	r2, #4294967295
 8009396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009398:	e008      	b.n	80093ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939a:	4b07      	ldr	r3, [pc, #28]	@ (80093b8 <prvResetNextTaskUnblockTime+0x38>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4a04      	ldr	r2, [pc, #16]	@ (80093bc <prvResetNextTaskUnblockTime+0x3c>)
 80093aa:	6013      	str	r3, [r2, #0]
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	2000047c 	.word	0x2000047c
 80093bc:	200004c8 	.word	0x200004c8

080093c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093c6:	4b0b      	ldr	r3, [pc, #44]	@ (80093f4 <xTaskGetSchedulerState+0x34>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093ce:	2301      	movs	r3, #1
 80093d0:	607b      	str	r3, [r7, #4]
 80093d2:	e008      	b.n	80093e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d4:	4b08      	ldr	r3, [pc, #32]	@ (80093f8 <xTaskGetSchedulerState+0x38>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d102      	bne.n	80093e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093dc:	2302      	movs	r3, #2
 80093de:	607b      	str	r3, [r7, #4]
 80093e0:	e001      	b.n	80093e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093e2:	2300      	movs	r3, #0
 80093e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093e6:	687b      	ldr	r3, [r7, #4]
	}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	200004b8 	.word	0x200004b8
 80093f8:	200004cc 	.word	0x200004cc

080093fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009408:	2300      	movs	r3, #0
 800940a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d070      	beq.n	80094f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009412:	4b3b      	ldr	r3, [pc, #236]	@ (8009500 <xTaskPriorityDisinherit+0x104>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	429a      	cmp	r2, r3
 800941a:	d00b      	beq.n	8009434 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	60fb      	str	r3, [r7, #12]
}
 800942e:	bf00      	nop
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10b      	bne.n	8009454 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60bb      	str	r3, [r7, #8]
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	e7fd      	b.n	8009450 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009458:	1e5a      	subs	r2, r3, #1
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009466:	429a      	cmp	r2, r3
 8009468:	d044      	beq.n	80094f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800946e:	2b00      	cmp	r3, #0
 8009470:	d140      	bne.n	80094f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3304      	adds	r3, #4
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff f9eb 	bl	8008852 <uxListRemove>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d115      	bne.n	80094ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009486:	491f      	ldr	r1, [pc, #124]	@ (8009504 <xTaskPriorityDisinherit+0x108>)
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <xTaskPriorityDisinherit+0xb2>
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	2201      	movs	r2, #1
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43da      	mvns	r2, r3
 80094a4:	4b18      	ldr	r3, [pc, #96]	@ (8009508 <xTaskPriorityDisinherit+0x10c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4013      	ands	r3, r2
 80094aa:	4a17      	ldr	r2, [pc, #92]	@ (8009508 <xTaskPriorityDisinherit+0x10c>)
 80094ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	f1c3 0207 	rsb	r2, r3, #7
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	2201      	movs	r2, #1
 80094c8:	409a      	lsls	r2, r3
 80094ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009508 <xTaskPriorityDisinherit+0x10c>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009508 <xTaskPriorityDisinherit+0x10c>)
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4a08      	ldr	r2, [pc, #32]	@ (8009504 <xTaskPriorityDisinherit+0x108>)
 80094e2:	441a      	add	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	3304      	adds	r3, #4
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7ff f954 	bl	8008798 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094f0:	2301      	movs	r3, #1
 80094f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094f4:	697b      	ldr	r3, [r7, #20]
	}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	200003ec 	.word	0x200003ec
 8009504:	200003f0 	.word	0x200003f0
 8009508:	200004b4 	.word	0x200004b4

0800950c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009516:	4b29      	ldr	r3, [pc, #164]	@ (80095bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800951c:	4b28      	ldr	r3, [pc, #160]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3304      	adds	r3, #4
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff f995 	bl	8008852 <uxListRemove>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800952e:	4b24      	ldr	r3, [pc, #144]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009534:	2201      	movs	r2, #1
 8009536:	fa02 f303 	lsl.w	r3, r2, r3
 800953a:	43da      	mvns	r2, r3
 800953c:	4b21      	ldr	r3, [pc, #132]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4013      	ands	r3, r2
 8009542:	4a20      	ldr	r2, [pc, #128]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009544:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954c:	d10a      	bne.n	8009564 <prvAddCurrentTaskToDelayedList+0x58>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d007      	beq.n	8009564 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009554:	4b1a      	ldr	r3, [pc, #104]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3304      	adds	r3, #4
 800955a:	4619      	mov	r1, r3
 800955c:	481a      	ldr	r0, [pc, #104]	@ (80095c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800955e:	f7ff f91b 	bl	8008798 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009562:	e026      	b.n	80095b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800956c:	4b14      	ldr	r3, [pc, #80]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	429a      	cmp	r2, r3
 800957a:	d209      	bcs.n	8009590 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800957c:	4b13      	ldr	r3, [pc, #76]	@ (80095cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4b0f      	ldr	r3, [pc, #60]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7ff f929 	bl	80087e0 <vListInsert>
}
 800958e:	e010      	b.n	80095b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009590:	4b0f      	ldr	r3, [pc, #60]	@ (80095d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4b0a      	ldr	r3, [pc, #40]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3304      	adds	r3, #4
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f7ff f91f 	bl	80087e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d202      	bcs.n	80095b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80095ac:	4a09      	ldr	r2, [pc, #36]	@ (80095d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6013      	str	r3, [r2, #0]
}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200004b0 	.word	0x200004b0
 80095c0:	200003ec 	.word	0x200003ec
 80095c4:	200004b4 	.word	0x200004b4
 80095c8:	20000498 	.word	0x20000498
 80095cc:	20000480 	.word	0x20000480
 80095d0:	2000047c 	.word	0x2000047c
 80095d4:	200004c8 	.word	0x200004c8
	...

080095e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095e0:	4b07      	ldr	r3, [pc, #28]	@ (8009600 <pxCurrentTCBConst2>)
 80095e2:	6819      	ldr	r1, [r3, #0]
 80095e4:	6808      	ldr	r0, [r1, #0]
 80095e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	f380 8809 	msr	PSP, r0
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8811 	msr	BASEPRI, r0
 80095fa:	4770      	bx	lr
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst2>:
 8009600:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop

08009608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009622:	4b10      	ldr	r3, [pc, #64]	@ (8009664 <vPortEnterCritical+0x5c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	4a0e      	ldr	r2, [pc, #56]	@ (8009664 <vPortEnterCritical+0x5c>)
 800962a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800962c:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <vPortEnterCritical+0x5c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d110      	bne.n	8009656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009634:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <vPortEnterCritical+0x60>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <vPortEnterCritical+0x4e>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	603b      	str	r3, [r7, #0]
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	e7fd      	b.n	8009652 <vPortEnterCritical+0x4a>
	}
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	2000000c 	.word	0x2000000c
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009672:	4b12      	ldr	r3, [pc, #72]	@ (80096bc <vPortExitCritical+0x50>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10b      	bne.n	8009692 <vPortExitCritical+0x26>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	607b      	str	r3, [r7, #4]
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	e7fd      	b.n	800968e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009692:	4b0a      	ldr	r3, [pc, #40]	@ (80096bc <vPortExitCritical+0x50>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3b01      	subs	r3, #1
 8009698:	4a08      	ldr	r2, [pc, #32]	@ (80096bc <vPortExitCritical+0x50>)
 800969a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800969c:	4b07      	ldr	r3, [pc, #28]	@ (80096bc <vPortExitCritical+0x50>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <vPortExitCritical+0x44>
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f383 8811 	msr	BASEPRI, r3
}
 80096ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	2000000c 	.word	0x2000000c

080096c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096c0:	f3ef 8009 	mrs	r0, PSP
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	4b15      	ldr	r3, [pc, #84]	@ (8009720 <pxCurrentTCBConst>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	f01e 0f10 	tst.w	lr, #16
 80096d0:	bf08      	it	eq
 80096d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	6010      	str	r0, [r2, #0]
 80096dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80096e4:	f380 8811 	msr	BASEPRI, r0
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f7ff fcb4 	bl	800905c <vTaskSwitchContext>
 80096f4:	f04f 0000 	mov.w	r0, #0
 80096f8:	f380 8811 	msr	BASEPRI, r0
 80096fc:	bc09      	pop	{r0, r3}
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009706:	f01e 0f10 	tst.w	lr, #16
 800970a:	bf08      	it	eq
 800970c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009710:	f380 8809 	msr	PSP, r0
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	f3af 8000 	nop.w

08009720 <pxCurrentTCBConst>:
 8009720:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop

08009728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	607b      	str	r3, [r7, #4]
}
 8009740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009742:	f7ff fbd1 	bl	8008ee8 <xTaskIncrementTick>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800974c:	4b06      	ldr	r3, [pc, #24]	@ (8009768 <SysTick_Handler+0x40>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f383 8811 	msr	BASEPRI, r3
}
 800975e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009772:	f3ef 8305 	mrs	r3, IPSR
 8009776:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b0f      	cmp	r3, #15
 800977c:	d915      	bls.n	80097aa <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800977e:	4a18      	ldr	r2, [pc, #96]	@ (80097e0 <vPortValidateInterruptPriority+0x74>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009788:	4b16      	ldr	r3, [pc, #88]	@ (80097e4 <vPortValidateInterruptPriority+0x78>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	7afa      	ldrb	r2, [r7, #11]
 800978e:	429a      	cmp	r2, r3
 8009790:	d20b      	bcs.n	80097aa <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	607b      	str	r3, [r7, #4]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097aa:	4b0f      	ldr	r3, [pc, #60]	@ (80097e8 <vPortValidateInterruptPriority+0x7c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80097b2:	4b0e      	ldr	r3, [pc, #56]	@ (80097ec <vPortValidateInterruptPriority+0x80>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d90b      	bls.n	80097d2 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <vPortValidateInterruptPriority+0x62>
	}
 80097d2:	bf00      	nop
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	e000e3f0 	.word	0xe000e3f0
 80097e4:	200004d0 	.word	0x200004d0
 80097e8:	e000ed0c 	.word	0xe000ed0c
 80097ec:	200004d4 	.word	0x200004d4

080097f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fe9c 	bl	800853c <USBH_LL_IncTimer>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fee0 	bl	80085e0 <USBH_LL_Connect>
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fef5 	bl	8008626 <USBH_LL_Disconnect>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
 8009850:	4613      	mov	r3, r2
 8009852:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe ff15 	bl	800868a <USBH_LL_NotifyURBChange>
#endif
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fe8a 	bl	8008590 <USBH_LL_PortEnabled>
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fe96 	bl	80085c4 <USBH_LL_PortDisabled>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f9 f9a1 	bl	8002bfe <HAL_HCD_Stop>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 f808 	bl	80098d8 <USBH_Get_USB_Status>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d817      	bhi.n	800991c <USBH_Get_USB_Status+0x44>
 80098ec:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <USBH_Get_USB_Status+0x1c>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009905 	.word	0x08009905
 80098f8:	0800990b 	.word	0x0800990b
 80098fc:	08009911 	.word	0x08009911
 8009900:	08009917 	.word	0x08009917
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	e00b      	b.n	8009922 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800990a:	2302      	movs	r3, #2
 800990c:	73fb      	strb	r3, [r7, #15]
    break;
 800990e:	e008      	b.n	8009922 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009910:	2301      	movs	r3, #1
 8009912:	73fb      	strb	r3, [r7, #15]
    break;
 8009914:	e005      	b.n	8009922 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
    break;
 800991a:	e002      	b.n	8009922 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800991c:	2302      	movs	r3, #2
 800991e:	73fb      	strb	r3, [r7, #15]
    break;
 8009920:	bf00      	nop
  }
  return usb_status;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <sbrk_aligned>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	4e0f      	ldr	r6, [pc, #60]	@ (8009970 <sbrk_aligned+0x40>)
 8009934:	460c      	mov	r4, r1
 8009936:	6831      	ldr	r1, [r6, #0]
 8009938:	4605      	mov	r5, r0
 800993a:	b911      	cbnz	r1, 8009942 <sbrk_aligned+0x12>
 800993c:	f000 fada 	bl	8009ef4 <_sbrk_r>
 8009940:	6030      	str	r0, [r6, #0]
 8009942:	4621      	mov	r1, r4
 8009944:	4628      	mov	r0, r5
 8009946:	f000 fad5 	bl	8009ef4 <_sbrk_r>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	d103      	bne.n	8009956 <sbrk_aligned+0x26>
 800994e:	f04f 34ff 	mov.w	r4, #4294967295
 8009952:	4620      	mov	r0, r4
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	1cc4      	adds	r4, r0, #3
 8009958:	f024 0403 	bic.w	r4, r4, #3
 800995c:	42a0      	cmp	r0, r4
 800995e:	d0f8      	beq.n	8009952 <sbrk_aligned+0x22>
 8009960:	1a21      	subs	r1, r4, r0
 8009962:	4628      	mov	r0, r5
 8009964:	f000 fac6 	bl	8009ef4 <_sbrk_r>
 8009968:	3001      	adds	r0, #1
 800996a:	d1f2      	bne.n	8009952 <sbrk_aligned+0x22>
 800996c:	e7ef      	b.n	800994e <sbrk_aligned+0x1e>
 800996e:	bf00      	nop
 8009970:	200008b8 	.word	0x200008b8

08009974 <_malloc_r>:
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	1ccd      	adds	r5, r1, #3
 800997a:	f025 0503 	bic.w	r5, r5, #3
 800997e:	3508      	adds	r5, #8
 8009980:	2d0c      	cmp	r5, #12
 8009982:	bf38      	it	cc
 8009984:	250c      	movcc	r5, #12
 8009986:	2d00      	cmp	r5, #0
 8009988:	4606      	mov	r6, r0
 800998a:	db01      	blt.n	8009990 <_malloc_r+0x1c>
 800998c:	42a9      	cmp	r1, r5
 800998e:	d904      	bls.n	800999a <_malloc_r+0x26>
 8009990:	230c      	movs	r3, #12
 8009992:	6033      	str	r3, [r6, #0]
 8009994:	2000      	movs	r0, #0
 8009996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800999a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a70 <_malloc_r+0xfc>
 800999e:	f000 f869 	bl	8009a74 <__malloc_lock>
 80099a2:	f8d8 3000 	ldr.w	r3, [r8]
 80099a6:	461c      	mov	r4, r3
 80099a8:	bb44      	cbnz	r4, 80099fc <_malloc_r+0x88>
 80099aa:	4629      	mov	r1, r5
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff ffbf 	bl	8009930 <sbrk_aligned>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	4604      	mov	r4, r0
 80099b6:	d158      	bne.n	8009a6a <_malloc_r+0xf6>
 80099b8:	f8d8 4000 	ldr.w	r4, [r8]
 80099bc:	4627      	mov	r7, r4
 80099be:	2f00      	cmp	r7, #0
 80099c0:	d143      	bne.n	8009a4a <_malloc_r+0xd6>
 80099c2:	2c00      	cmp	r4, #0
 80099c4:	d04b      	beq.n	8009a5e <_malloc_r+0xea>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	4639      	mov	r1, r7
 80099ca:	4630      	mov	r0, r6
 80099cc:	eb04 0903 	add.w	r9, r4, r3
 80099d0:	f000 fa90 	bl	8009ef4 <_sbrk_r>
 80099d4:	4581      	cmp	r9, r0
 80099d6:	d142      	bne.n	8009a5e <_malloc_r+0xea>
 80099d8:	6821      	ldr	r1, [r4, #0]
 80099da:	1a6d      	subs	r5, r5, r1
 80099dc:	4629      	mov	r1, r5
 80099de:	4630      	mov	r0, r6
 80099e0:	f7ff ffa6 	bl	8009930 <sbrk_aligned>
 80099e4:	3001      	adds	r0, #1
 80099e6:	d03a      	beq.n	8009a5e <_malloc_r+0xea>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	442b      	add	r3, r5
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	f8d8 3000 	ldr.w	r3, [r8]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	bb62      	cbnz	r2, 8009a50 <_malloc_r+0xdc>
 80099f6:	f8c8 7000 	str.w	r7, [r8]
 80099fa:	e00f      	b.n	8009a1c <_malloc_r+0xa8>
 80099fc:	6822      	ldr	r2, [r4, #0]
 80099fe:	1b52      	subs	r2, r2, r5
 8009a00:	d420      	bmi.n	8009a44 <_malloc_r+0xd0>
 8009a02:	2a0b      	cmp	r2, #11
 8009a04:	d917      	bls.n	8009a36 <_malloc_r+0xc2>
 8009a06:	1961      	adds	r1, r4, r5
 8009a08:	42a3      	cmp	r3, r4
 8009a0a:	6025      	str	r5, [r4, #0]
 8009a0c:	bf18      	it	ne
 8009a0e:	6059      	strne	r1, [r3, #4]
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	bf08      	it	eq
 8009a14:	f8c8 1000 	streq.w	r1, [r8]
 8009a18:	5162      	str	r2, [r4, r5]
 8009a1a:	604b      	str	r3, [r1, #4]
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f000 f82f 	bl	8009a80 <__malloc_unlock>
 8009a22:	f104 000b 	add.w	r0, r4, #11
 8009a26:	1d23      	adds	r3, r4, #4
 8009a28:	f020 0007 	bic.w	r0, r0, #7
 8009a2c:	1ac2      	subs	r2, r0, r3
 8009a2e:	bf1c      	itt	ne
 8009a30:	1a1b      	subne	r3, r3, r0
 8009a32:	50a3      	strne	r3, [r4, r2]
 8009a34:	e7af      	b.n	8009996 <_malloc_r+0x22>
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	bf0c      	ite	eq
 8009a3c:	f8c8 2000 	streq.w	r2, [r8]
 8009a40:	605a      	strne	r2, [r3, #4]
 8009a42:	e7eb      	b.n	8009a1c <_malloc_r+0xa8>
 8009a44:	4623      	mov	r3, r4
 8009a46:	6864      	ldr	r4, [r4, #4]
 8009a48:	e7ae      	b.n	80099a8 <_malloc_r+0x34>
 8009a4a:	463c      	mov	r4, r7
 8009a4c:	687f      	ldr	r7, [r7, #4]
 8009a4e:	e7b6      	b.n	80099be <_malloc_r+0x4a>
 8009a50:	461a      	mov	r2, r3
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	d1fb      	bne.n	8009a50 <_malloc_r+0xdc>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	6053      	str	r3, [r2, #4]
 8009a5c:	e7de      	b.n	8009a1c <_malloc_r+0xa8>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	6033      	str	r3, [r6, #0]
 8009a62:	4630      	mov	r0, r6
 8009a64:	f000 f80c 	bl	8009a80 <__malloc_unlock>
 8009a68:	e794      	b.n	8009994 <_malloc_r+0x20>
 8009a6a:	6005      	str	r5, [r0, #0]
 8009a6c:	e7d6      	b.n	8009a1c <_malloc_r+0xa8>
 8009a6e:	bf00      	nop
 8009a70:	200008bc 	.word	0x200008bc

08009a74 <__malloc_lock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	@ (8009a7c <__malloc_lock+0x8>)
 8009a76:	f000 ba8a 	b.w	8009f8e <__retarget_lock_acquire_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	20000a00 	.word	0x20000a00

08009a80 <__malloc_unlock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	@ (8009a88 <__malloc_unlock+0x8>)
 8009a82:	f000 ba85 	b.w	8009f90 <__retarget_lock_release_recursive>
 8009a86:	bf00      	nop
 8009a88:	20000a00 	.word	0x20000a00

08009a8c <std>:
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	4604      	mov	r4, r0
 8009a92:	e9c0 3300 	strd	r3, r3, [r0]
 8009a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a9a:	6083      	str	r3, [r0, #8]
 8009a9c:	8181      	strh	r1, [r0, #12]
 8009a9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009aa0:	81c2      	strh	r2, [r0, #14]
 8009aa2:	6183      	str	r3, [r0, #24]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	305c      	adds	r0, #92	@ 0x5c
 8009aaa:	f000 f9e7 	bl	8009e7c <memset>
 8009aae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae4 <std+0x58>)
 8009ab0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae8 <std+0x5c>)
 8009ab4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8009aec <std+0x60>)
 8009ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009aba:	4b0d      	ldr	r3, [pc, #52]	@ (8009af0 <std+0x64>)
 8009abc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009abe:	4b0d      	ldr	r3, [pc, #52]	@ (8009af4 <std+0x68>)
 8009ac0:	6224      	str	r4, [r4, #32]
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d006      	beq.n	8009ad4 <std+0x48>
 8009ac6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009aca:	4294      	cmp	r4, r2
 8009acc:	d002      	beq.n	8009ad4 <std+0x48>
 8009ace:	33d0      	adds	r3, #208	@ 0xd0
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d105      	bne.n	8009ae0 <std+0x54>
 8009ad4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009adc:	f000 ba56 	b.w	8009f8c <__retarget_lock_init_recursive>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	08009ccd 	.word	0x08009ccd
 8009ae8:	08009cef 	.word	0x08009cef
 8009aec:	08009d27 	.word	0x08009d27
 8009af0:	08009d4b 	.word	0x08009d4b
 8009af4:	200008c0 	.word	0x200008c0

08009af8 <stdio_exit_handler>:
 8009af8:	4a02      	ldr	r2, [pc, #8]	@ (8009b04 <stdio_exit_handler+0xc>)
 8009afa:	4903      	ldr	r1, [pc, #12]	@ (8009b08 <stdio_exit_handler+0x10>)
 8009afc:	4803      	ldr	r0, [pc, #12]	@ (8009b0c <stdio_exit_handler+0x14>)
 8009afe:	f000 b869 	b.w	8009bd4 <_fwalk_sglue>
 8009b02:	bf00      	nop
 8009b04:	20000010 	.word	0x20000010
 8009b08:	0800a14d 	.word	0x0800a14d
 8009b0c:	20000020 	.word	0x20000020

08009b10 <cleanup_stdio>:
 8009b10:	6841      	ldr	r1, [r0, #4]
 8009b12:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <cleanup_stdio+0x34>)
 8009b14:	4299      	cmp	r1, r3
 8009b16:	b510      	push	{r4, lr}
 8009b18:	4604      	mov	r4, r0
 8009b1a:	d001      	beq.n	8009b20 <cleanup_stdio+0x10>
 8009b1c:	f000 fb16 	bl	800a14c <_fflush_r>
 8009b20:	68a1      	ldr	r1, [r4, #8]
 8009b22:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <cleanup_stdio+0x38>)
 8009b24:	4299      	cmp	r1, r3
 8009b26:	d002      	beq.n	8009b2e <cleanup_stdio+0x1e>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fb0f 	bl	800a14c <_fflush_r>
 8009b2e:	68e1      	ldr	r1, [r4, #12]
 8009b30:	4b06      	ldr	r3, [pc, #24]	@ (8009b4c <cleanup_stdio+0x3c>)
 8009b32:	4299      	cmp	r1, r3
 8009b34:	d004      	beq.n	8009b40 <cleanup_stdio+0x30>
 8009b36:	4620      	mov	r0, r4
 8009b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3c:	f000 bb06 	b.w	800a14c <_fflush_r>
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	bf00      	nop
 8009b44:	200008c0 	.word	0x200008c0
 8009b48:	20000928 	.word	0x20000928
 8009b4c:	20000990 	.word	0x20000990

08009b50 <global_stdio_init.part.0>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4b0b      	ldr	r3, [pc, #44]	@ (8009b80 <global_stdio_init.part.0+0x30>)
 8009b54:	4c0b      	ldr	r4, [pc, #44]	@ (8009b84 <global_stdio_init.part.0+0x34>)
 8009b56:	4a0c      	ldr	r2, [pc, #48]	@ (8009b88 <global_stdio_init.part.0+0x38>)
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2104      	movs	r1, #4
 8009b60:	f7ff ff94 	bl	8009a8c <std>
 8009b64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b68:	2201      	movs	r2, #1
 8009b6a:	2109      	movs	r1, #9
 8009b6c:	f7ff ff8e 	bl	8009a8c <std>
 8009b70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b74:	2202      	movs	r2, #2
 8009b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b7a:	2112      	movs	r1, #18
 8009b7c:	f7ff bf86 	b.w	8009a8c <std>
 8009b80:	200009f8 	.word	0x200009f8
 8009b84:	200008c0 	.word	0x200008c0
 8009b88:	08009af9 	.word	0x08009af9

08009b8c <__sfp_lock_acquire>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	@ (8009b94 <__sfp_lock_acquire+0x8>)
 8009b8e:	f000 b9fe 	b.w	8009f8e <__retarget_lock_acquire_recursive>
 8009b92:	bf00      	nop
 8009b94:	20000a01 	.word	0x20000a01

08009b98 <__sfp_lock_release>:
 8009b98:	4801      	ldr	r0, [pc, #4]	@ (8009ba0 <__sfp_lock_release+0x8>)
 8009b9a:	f000 b9f9 	b.w	8009f90 <__retarget_lock_release_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	20000a01 	.word	0x20000a01

08009ba4 <__sinit>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	f7ff fff0 	bl	8009b8c <__sfp_lock_acquire>
 8009bac:	6a23      	ldr	r3, [r4, #32]
 8009bae:	b11b      	cbz	r3, 8009bb8 <__sinit+0x14>
 8009bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb4:	f7ff bff0 	b.w	8009b98 <__sfp_lock_release>
 8009bb8:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <__sinit+0x28>)
 8009bba:	6223      	str	r3, [r4, #32]
 8009bbc:	4b04      	ldr	r3, [pc, #16]	@ (8009bd0 <__sinit+0x2c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1f5      	bne.n	8009bb0 <__sinit+0xc>
 8009bc4:	f7ff ffc4 	bl	8009b50 <global_stdio_init.part.0>
 8009bc8:	e7f2      	b.n	8009bb0 <__sinit+0xc>
 8009bca:	bf00      	nop
 8009bcc:	08009b11 	.word	0x08009b11
 8009bd0:	200009f8 	.word	0x200009f8

08009bd4 <_fwalk_sglue>:
 8009bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	4607      	mov	r7, r0
 8009bda:	4688      	mov	r8, r1
 8009bdc:	4614      	mov	r4, r2
 8009bde:	2600      	movs	r6, #0
 8009be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009be4:	f1b9 0901 	subs.w	r9, r9, #1
 8009be8:	d505      	bpl.n	8009bf6 <_fwalk_sglue+0x22>
 8009bea:	6824      	ldr	r4, [r4, #0]
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d1f7      	bne.n	8009be0 <_fwalk_sglue+0xc>
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf6:	89ab      	ldrh	r3, [r5, #12]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d907      	bls.n	8009c0c <_fwalk_sglue+0x38>
 8009bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c00:	3301      	adds	r3, #1
 8009c02:	d003      	beq.n	8009c0c <_fwalk_sglue+0x38>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4638      	mov	r0, r7
 8009c08:	47c0      	blx	r8
 8009c0a:	4306      	orrs	r6, r0
 8009c0c:	3568      	adds	r5, #104	@ 0x68
 8009c0e:	e7e9      	b.n	8009be4 <_fwalk_sglue+0x10>

08009c10 <_puts_r>:
 8009c10:	6a03      	ldr	r3, [r0, #32]
 8009c12:	b570      	push	{r4, r5, r6, lr}
 8009c14:	6884      	ldr	r4, [r0, #8]
 8009c16:	4605      	mov	r5, r0
 8009c18:	460e      	mov	r6, r1
 8009c1a:	b90b      	cbnz	r3, 8009c20 <_puts_r+0x10>
 8009c1c:	f7ff ffc2 	bl	8009ba4 <__sinit>
 8009c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c22:	07db      	lsls	r3, r3, #31
 8009c24:	d405      	bmi.n	8009c32 <_puts_r+0x22>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	0598      	lsls	r0, r3, #22
 8009c2a:	d402      	bmi.n	8009c32 <_puts_r+0x22>
 8009c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c2e:	f000 f9ae 	bl	8009f8e <__retarget_lock_acquire_recursive>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	0719      	lsls	r1, r3, #28
 8009c36:	d502      	bpl.n	8009c3e <_puts_r+0x2e>
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d135      	bne.n	8009caa <_puts_r+0x9a>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4628      	mov	r0, r5
 8009c42:	f000 f8c5 	bl	8009dd0 <__swsetup_r>
 8009c46:	b380      	cbz	r0, 8009caa <_puts_r+0x9a>
 8009c48:	f04f 35ff 	mov.w	r5, #4294967295
 8009c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c4e:	07da      	lsls	r2, r3, #31
 8009c50:	d405      	bmi.n	8009c5e <_puts_r+0x4e>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	059b      	lsls	r3, r3, #22
 8009c56:	d402      	bmi.n	8009c5e <_puts_r+0x4e>
 8009c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c5a:	f000 f999 	bl	8009f90 <__retarget_lock_release_recursive>
 8009c5e:	4628      	mov	r0, r5
 8009c60:	bd70      	pop	{r4, r5, r6, pc}
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da04      	bge.n	8009c70 <_puts_r+0x60>
 8009c66:	69a2      	ldr	r2, [r4, #24]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	dc17      	bgt.n	8009c9c <_puts_r+0x8c>
 8009c6c:	290a      	cmp	r1, #10
 8009c6e:	d015      	beq.n	8009c9c <_puts_r+0x8c>
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	6022      	str	r2, [r4, #0]
 8009c76:	7019      	strb	r1, [r3, #0]
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	60a3      	str	r3, [r4, #8]
 8009c82:	2900      	cmp	r1, #0
 8009c84:	d1ed      	bne.n	8009c62 <_puts_r+0x52>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da11      	bge.n	8009cae <_puts_r+0x9e>
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	210a      	movs	r1, #10
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 f85f 	bl	8009d52 <__swbuf_r>
 8009c94:	3001      	adds	r0, #1
 8009c96:	d0d7      	beq.n	8009c48 <_puts_r+0x38>
 8009c98:	250a      	movs	r5, #10
 8009c9a:	e7d7      	b.n	8009c4c <_puts_r+0x3c>
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f857 	bl	8009d52 <__swbuf_r>
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d1e7      	bne.n	8009c78 <_puts_r+0x68>
 8009ca8:	e7ce      	b.n	8009c48 <_puts_r+0x38>
 8009caa:	3e01      	subs	r6, #1
 8009cac:	e7e4      	b.n	8009c78 <_puts_r+0x68>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	6022      	str	r2, [r4, #0]
 8009cb4:	220a      	movs	r2, #10
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	e7ee      	b.n	8009c98 <_puts_r+0x88>
	...

08009cbc <puts>:
 8009cbc:	4b02      	ldr	r3, [pc, #8]	@ (8009cc8 <puts+0xc>)
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	f7ff bfa5 	b.w	8009c10 <_puts_r>
 8009cc6:	bf00      	nop
 8009cc8:	2000001c 	.word	0x2000001c

08009ccc <__sread>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	460c      	mov	r4, r1
 8009cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd4:	f000 f8fc 	bl	8009ed0 <_read_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	bfab      	itete	ge
 8009cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cde:	89a3      	ldrhlt	r3, [r4, #12]
 8009ce0:	181b      	addge	r3, r3, r0
 8009ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ce6:	bfac      	ite	ge
 8009ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cea:	81a3      	strhlt	r3, [r4, #12]
 8009cec:	bd10      	pop	{r4, pc}

08009cee <__swrite>:
 8009cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	461f      	mov	r7, r3
 8009cf4:	898b      	ldrh	r3, [r1, #12]
 8009cf6:	05db      	lsls	r3, r3, #23
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	d505      	bpl.n	8009d0c <__swrite+0x1e>
 8009d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d04:	2302      	movs	r3, #2
 8009d06:	2200      	movs	r2, #0
 8009d08:	f000 f8d0 	bl	8009eac <_lseek_r>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	4632      	mov	r2, r6
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	f000 b8f7 	b.w	8009f14 <_write_r>

08009d26 <__sseek>:
 8009d26:	b510      	push	{r4, lr}
 8009d28:	460c      	mov	r4, r1
 8009d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2e:	f000 f8bd 	bl	8009eac <_lseek_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	bf15      	itete	ne
 8009d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d42:	81a3      	strheq	r3, [r4, #12]
 8009d44:	bf18      	it	ne
 8009d46:	81a3      	strhne	r3, [r4, #12]
 8009d48:	bd10      	pop	{r4, pc}

08009d4a <__sclose>:
 8009d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4e:	f000 b89d 	b.w	8009e8c <_close_r>

08009d52 <__swbuf_r>:
 8009d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d54:	460e      	mov	r6, r1
 8009d56:	4614      	mov	r4, r2
 8009d58:	4605      	mov	r5, r0
 8009d5a:	b118      	cbz	r0, 8009d64 <__swbuf_r+0x12>
 8009d5c:	6a03      	ldr	r3, [r0, #32]
 8009d5e:	b90b      	cbnz	r3, 8009d64 <__swbuf_r+0x12>
 8009d60:	f7ff ff20 	bl	8009ba4 <__sinit>
 8009d64:	69a3      	ldr	r3, [r4, #24]
 8009d66:	60a3      	str	r3, [r4, #8]
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	071a      	lsls	r2, r3, #28
 8009d6c:	d501      	bpl.n	8009d72 <__swbuf_r+0x20>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	b943      	cbnz	r3, 8009d84 <__swbuf_r+0x32>
 8009d72:	4621      	mov	r1, r4
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f82b 	bl	8009dd0 <__swsetup_r>
 8009d7a:	b118      	cbz	r0, 8009d84 <__swbuf_r+0x32>
 8009d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d80:	4638      	mov	r0, r7
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	6922      	ldr	r2, [r4, #16]
 8009d88:	1a98      	subs	r0, r3, r2
 8009d8a:	6963      	ldr	r3, [r4, #20]
 8009d8c:	b2f6      	uxtb	r6, r6
 8009d8e:	4283      	cmp	r3, r0
 8009d90:	4637      	mov	r7, r6
 8009d92:	dc05      	bgt.n	8009da0 <__swbuf_r+0x4e>
 8009d94:	4621      	mov	r1, r4
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 f9d8 	bl	800a14c <_fflush_r>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d1ed      	bne.n	8009d7c <__swbuf_r+0x2a>
 8009da0:	68a3      	ldr	r3, [r4, #8]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	60a3      	str	r3, [r4, #8]
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	6022      	str	r2, [r4, #0]
 8009dac:	701e      	strb	r6, [r3, #0]
 8009dae:	6962      	ldr	r2, [r4, #20]
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d004      	beq.n	8009dc0 <__swbuf_r+0x6e>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	07db      	lsls	r3, r3, #31
 8009dba:	d5e1      	bpl.n	8009d80 <__swbuf_r+0x2e>
 8009dbc:	2e0a      	cmp	r6, #10
 8009dbe:	d1df      	bne.n	8009d80 <__swbuf_r+0x2e>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f9c2 	bl	800a14c <_fflush_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d0d9      	beq.n	8009d80 <__swbuf_r+0x2e>
 8009dcc:	e7d6      	b.n	8009d7c <__swbuf_r+0x2a>
	...

08009dd0 <__swsetup_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4b29      	ldr	r3, [pc, #164]	@ (8009e78 <__swsetup_r+0xa8>)
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	460c      	mov	r4, r1
 8009dda:	b118      	cbz	r0, 8009de4 <__swsetup_r+0x14>
 8009ddc:	6a03      	ldr	r3, [r0, #32]
 8009dde:	b90b      	cbnz	r3, 8009de4 <__swsetup_r+0x14>
 8009de0:	f7ff fee0 	bl	8009ba4 <__sinit>
 8009de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de8:	0719      	lsls	r1, r3, #28
 8009dea:	d422      	bmi.n	8009e32 <__swsetup_r+0x62>
 8009dec:	06da      	lsls	r2, r3, #27
 8009dee:	d407      	bmi.n	8009e00 <__swsetup_r+0x30>
 8009df0:	2209      	movs	r2, #9
 8009df2:	602a      	str	r2, [r5, #0]
 8009df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	e033      	b.n	8009e68 <__swsetup_r+0x98>
 8009e00:	0758      	lsls	r0, r3, #29
 8009e02:	d512      	bpl.n	8009e2a <__swsetup_r+0x5a>
 8009e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e06:	b141      	cbz	r1, 8009e1a <__swsetup_r+0x4a>
 8009e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e0c:	4299      	cmp	r1, r3
 8009e0e:	d002      	beq.n	8009e16 <__swsetup_r+0x46>
 8009e10:	4628      	mov	r0, r5
 8009e12:	f000 f8cd 	bl	8009fb0 <_free_r>
 8009e16:	2300      	movs	r3, #0
 8009e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	2300      	movs	r3, #0
 8009e24:	6063      	str	r3, [r4, #4]
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f043 0308 	orr.w	r3, r3, #8
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	b94b      	cbnz	r3, 8009e4a <__swsetup_r+0x7a>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e40:	d003      	beq.n	8009e4a <__swsetup_r+0x7a>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 f9cf 	bl	800a1e8 <__smakebuf_r>
 8009e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e4e:	f013 0201 	ands.w	r2, r3, #1
 8009e52:	d00a      	beq.n	8009e6a <__swsetup_r+0x9a>
 8009e54:	2200      	movs	r2, #0
 8009e56:	60a2      	str	r2, [r4, #8]
 8009e58:	6962      	ldr	r2, [r4, #20]
 8009e5a:	4252      	negs	r2, r2
 8009e5c:	61a2      	str	r2, [r4, #24]
 8009e5e:	6922      	ldr	r2, [r4, #16]
 8009e60:	b942      	cbnz	r2, 8009e74 <__swsetup_r+0xa4>
 8009e62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e66:	d1c5      	bne.n	8009df4 <__swsetup_r+0x24>
 8009e68:	bd38      	pop	{r3, r4, r5, pc}
 8009e6a:	0799      	lsls	r1, r3, #30
 8009e6c:	bf58      	it	pl
 8009e6e:	6962      	ldrpl	r2, [r4, #20]
 8009e70:	60a2      	str	r2, [r4, #8]
 8009e72:	e7f4      	b.n	8009e5e <__swsetup_r+0x8e>
 8009e74:	2000      	movs	r0, #0
 8009e76:	e7f7      	b.n	8009e68 <__swsetup_r+0x98>
 8009e78:	2000001c 	.word	0x2000001c

08009e7c <memset>:
 8009e7c:	4402      	add	r2, r0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d100      	bne.n	8009e86 <memset+0xa>
 8009e84:	4770      	bx	lr
 8009e86:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8a:	e7f9      	b.n	8009e80 <memset+0x4>

08009e8c <_close_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ea8 <_close_r+0x1c>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f7 fd97 	bl	80019ca <_close>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_close_r+0x1a>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_close_r+0x1a>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	200009fc 	.word	0x200009fc

08009eac <_lseek_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d07      	ldr	r5, [pc, #28]	@ (8009ecc <_lseek_r+0x20>)
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	602a      	str	r2, [r5, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f7f7 fdac 	bl	8001a18 <_lseek>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_lseek_r+0x1e>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_lseek_r+0x1e>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	200009fc 	.word	0x200009fc

08009ed0 <_read_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d07      	ldr	r5, [pc, #28]	@ (8009ef0 <_read_r+0x20>)
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	4611      	mov	r1, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	602a      	str	r2, [r5, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f7f7 fd56 	bl	8001990 <_read>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_read_r+0x1e>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_read_r+0x1e>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	200009fc 	.word	0x200009fc

08009ef4 <_sbrk_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d06      	ldr	r5, [pc, #24]	@ (8009f10 <_sbrk_r+0x1c>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f7 fd98 	bl	8001a34 <_sbrk>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_sbrk_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_sbrk_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	200009fc 	.word	0x200009fc

08009f14 <_write_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	@ (8009f34 <_write_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f6 fb28 	bl	8000578 <_write>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_write_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_write_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	200009fc 	.word	0x200009fc

08009f38 <__errno>:
 8009f38:	4b01      	ldr	r3, [pc, #4]	@ (8009f40 <__errno+0x8>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	2000001c 	.word	0x2000001c

08009f44 <__libc_init_array>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4d0d      	ldr	r5, [pc, #52]	@ (8009f7c <__libc_init_array+0x38>)
 8009f48:	4c0d      	ldr	r4, [pc, #52]	@ (8009f80 <__libc_init_array+0x3c>)
 8009f4a:	1b64      	subs	r4, r4, r5
 8009f4c:	10a4      	asrs	r4, r4, #2
 8009f4e:	2600      	movs	r6, #0
 8009f50:	42a6      	cmp	r6, r4
 8009f52:	d109      	bne.n	8009f68 <__libc_init_array+0x24>
 8009f54:	4d0b      	ldr	r5, [pc, #44]	@ (8009f84 <__libc_init_array+0x40>)
 8009f56:	4c0c      	ldr	r4, [pc, #48]	@ (8009f88 <__libc_init_array+0x44>)
 8009f58:	f000 f9a4 	bl	800a2a4 <_init>
 8009f5c:	1b64      	subs	r4, r4, r5
 8009f5e:	10a4      	asrs	r4, r4, #2
 8009f60:	2600      	movs	r6, #0
 8009f62:	42a6      	cmp	r6, r4
 8009f64:	d105      	bne.n	8009f72 <__libc_init_array+0x2e>
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6c:	4798      	blx	r3
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7ee      	b.n	8009f50 <__libc_init_array+0xc>
 8009f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f76:	4798      	blx	r3
 8009f78:	3601      	adds	r6, #1
 8009f7a:	e7f2      	b.n	8009f62 <__libc_init_array+0x1e>
 8009f7c:	0800a314 	.word	0x0800a314
 8009f80:	0800a314 	.word	0x0800a314
 8009f84:	0800a314 	.word	0x0800a314
 8009f88:	0800a318 	.word	0x0800a318

08009f8c <__retarget_lock_init_recursive>:
 8009f8c:	4770      	bx	lr

08009f8e <__retarget_lock_acquire_recursive>:
 8009f8e:	4770      	bx	lr

08009f90 <__retarget_lock_release_recursive>:
 8009f90:	4770      	bx	lr

08009f92 <memcpy>:
 8009f92:	440a      	add	r2, r1
 8009f94:	4291      	cmp	r1, r2
 8009f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f9a:	d100      	bne.n	8009f9e <memcpy+0xc>
 8009f9c:	4770      	bx	lr
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa8:	4291      	cmp	r1, r2
 8009faa:	d1f9      	bne.n	8009fa0 <memcpy+0xe>
 8009fac:	bd10      	pop	{r4, pc}
	...

08009fb0 <_free_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	d041      	beq.n	800a03c <_free_r+0x8c>
 8009fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fbc:	1f0c      	subs	r4, r1, #4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bfb8      	it	lt
 8009fc2:	18e4      	addlt	r4, r4, r3
 8009fc4:	f7ff fd56 	bl	8009a74 <__malloc_lock>
 8009fc8:	4a1d      	ldr	r2, [pc, #116]	@ (800a040 <_free_r+0x90>)
 8009fca:	6813      	ldr	r3, [r2, #0]
 8009fcc:	b933      	cbnz	r3, 8009fdc <_free_r+0x2c>
 8009fce:	6063      	str	r3, [r4, #4]
 8009fd0:	6014      	str	r4, [r2, #0]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd8:	f7ff bd52 	b.w	8009a80 <__malloc_unlock>
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d908      	bls.n	8009ff2 <_free_r+0x42>
 8009fe0:	6820      	ldr	r0, [r4, #0]
 8009fe2:	1821      	adds	r1, r4, r0
 8009fe4:	428b      	cmp	r3, r1
 8009fe6:	bf01      	itttt	eq
 8009fe8:	6819      	ldreq	r1, [r3, #0]
 8009fea:	685b      	ldreq	r3, [r3, #4]
 8009fec:	1809      	addeq	r1, r1, r0
 8009fee:	6021      	streq	r1, [r4, #0]
 8009ff0:	e7ed      	b.n	8009fce <_free_r+0x1e>
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	b10b      	cbz	r3, 8009ffc <_free_r+0x4c>
 8009ff8:	42a3      	cmp	r3, r4
 8009ffa:	d9fa      	bls.n	8009ff2 <_free_r+0x42>
 8009ffc:	6811      	ldr	r1, [r2, #0]
 8009ffe:	1850      	adds	r0, r2, r1
 800a000:	42a0      	cmp	r0, r4
 800a002:	d10b      	bne.n	800a01c <_free_r+0x6c>
 800a004:	6820      	ldr	r0, [r4, #0]
 800a006:	4401      	add	r1, r0
 800a008:	1850      	adds	r0, r2, r1
 800a00a:	4283      	cmp	r3, r0
 800a00c:	6011      	str	r1, [r2, #0]
 800a00e:	d1e0      	bne.n	8009fd2 <_free_r+0x22>
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	6053      	str	r3, [r2, #4]
 800a016:	4408      	add	r0, r1
 800a018:	6010      	str	r0, [r2, #0]
 800a01a:	e7da      	b.n	8009fd2 <_free_r+0x22>
 800a01c:	d902      	bls.n	800a024 <_free_r+0x74>
 800a01e:	230c      	movs	r3, #12
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	e7d6      	b.n	8009fd2 <_free_r+0x22>
 800a024:	6820      	ldr	r0, [r4, #0]
 800a026:	1821      	adds	r1, r4, r0
 800a028:	428b      	cmp	r3, r1
 800a02a:	bf04      	itt	eq
 800a02c:	6819      	ldreq	r1, [r3, #0]
 800a02e:	685b      	ldreq	r3, [r3, #4]
 800a030:	6063      	str	r3, [r4, #4]
 800a032:	bf04      	itt	eq
 800a034:	1809      	addeq	r1, r1, r0
 800a036:	6021      	streq	r1, [r4, #0]
 800a038:	6054      	str	r4, [r2, #4]
 800a03a:	e7ca      	b.n	8009fd2 <_free_r+0x22>
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	200008bc 	.word	0x200008bc

0800a044 <__sflush_r>:
 800a044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04c:	0716      	lsls	r6, r2, #28
 800a04e:	4605      	mov	r5, r0
 800a050:	460c      	mov	r4, r1
 800a052:	d454      	bmi.n	800a0fe <__sflush_r+0xba>
 800a054:	684b      	ldr	r3, [r1, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	dc02      	bgt.n	800a060 <__sflush_r+0x1c>
 800a05a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	dd48      	ble.n	800a0f2 <__sflush_r+0xae>
 800a060:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a062:	2e00      	cmp	r6, #0
 800a064:	d045      	beq.n	800a0f2 <__sflush_r+0xae>
 800a066:	2300      	movs	r3, #0
 800a068:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a06c:	682f      	ldr	r7, [r5, #0]
 800a06e:	6a21      	ldr	r1, [r4, #32]
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	d030      	beq.n	800a0d6 <__sflush_r+0x92>
 800a074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	0759      	lsls	r1, r3, #29
 800a07a:	d505      	bpl.n	800a088 <__sflush_r+0x44>
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a082:	b10b      	cbz	r3, 800a088 <__sflush_r+0x44>
 800a084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a086:	1ad2      	subs	r2, r2, r3
 800a088:	2300      	movs	r3, #0
 800a08a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a08c:	6a21      	ldr	r1, [r4, #32]
 800a08e:	4628      	mov	r0, r5
 800a090:	47b0      	blx	r6
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	d106      	bne.n	800a0a6 <__sflush_r+0x62>
 800a098:	6829      	ldr	r1, [r5, #0]
 800a09a:	291d      	cmp	r1, #29
 800a09c:	d82b      	bhi.n	800a0f6 <__sflush_r+0xb2>
 800a09e:	4a2a      	ldr	r2, [pc, #168]	@ (800a148 <__sflush_r+0x104>)
 800a0a0:	410a      	asrs	r2, r1
 800a0a2:	07d6      	lsls	r6, r2, #31
 800a0a4:	d427      	bmi.n	800a0f6 <__sflush_r+0xb2>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6062      	str	r2, [r4, #4]
 800a0aa:	04d9      	lsls	r1, r3, #19
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	d504      	bpl.n	800a0bc <__sflush_r+0x78>
 800a0b2:	1c42      	adds	r2, r0, #1
 800a0b4:	d101      	bne.n	800a0ba <__sflush_r+0x76>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	b903      	cbnz	r3, 800a0bc <__sflush_r+0x78>
 800a0ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0be:	602f      	str	r7, [r5, #0]
 800a0c0:	b1b9      	cbz	r1, 800a0f2 <__sflush_r+0xae>
 800a0c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0c6:	4299      	cmp	r1, r3
 800a0c8:	d002      	beq.n	800a0d0 <__sflush_r+0x8c>
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7ff ff70 	bl	8009fb0 <_free_r>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0d4:	e00d      	b.n	800a0f2 <__sflush_r+0xae>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b0      	blx	r6
 800a0dc:	4602      	mov	r2, r0
 800a0de:	1c50      	adds	r0, r2, #1
 800a0e0:	d1c9      	bne.n	800a076 <__sflush_r+0x32>
 800a0e2:	682b      	ldr	r3, [r5, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d0c6      	beq.n	800a076 <__sflush_r+0x32>
 800a0e8:	2b1d      	cmp	r3, #29
 800a0ea:	d001      	beq.n	800a0f0 <__sflush_r+0xac>
 800a0ec:	2b16      	cmp	r3, #22
 800a0ee:	d11e      	bne.n	800a12e <__sflush_r+0xea>
 800a0f0:	602f      	str	r7, [r5, #0]
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e022      	b.n	800a13c <__sflush_r+0xf8>
 800a0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0fa:	b21b      	sxth	r3, r3
 800a0fc:	e01b      	b.n	800a136 <__sflush_r+0xf2>
 800a0fe:	690f      	ldr	r7, [r1, #16]
 800a100:	2f00      	cmp	r7, #0
 800a102:	d0f6      	beq.n	800a0f2 <__sflush_r+0xae>
 800a104:	0793      	lsls	r3, r2, #30
 800a106:	680e      	ldr	r6, [r1, #0]
 800a108:	bf08      	it	eq
 800a10a:	694b      	ldreq	r3, [r1, #20]
 800a10c:	600f      	str	r7, [r1, #0]
 800a10e:	bf18      	it	ne
 800a110:	2300      	movne	r3, #0
 800a112:	eba6 0807 	sub.w	r8, r6, r7
 800a116:	608b      	str	r3, [r1, #8]
 800a118:	f1b8 0f00 	cmp.w	r8, #0
 800a11c:	dde9      	ble.n	800a0f2 <__sflush_r+0xae>
 800a11e:	6a21      	ldr	r1, [r4, #32]
 800a120:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a122:	4643      	mov	r3, r8
 800a124:	463a      	mov	r2, r7
 800a126:	4628      	mov	r0, r5
 800a128:	47b0      	blx	r6
 800a12a:	2800      	cmp	r0, #0
 800a12c:	dc08      	bgt.n	800a140 <__sflush_r+0xfc>
 800a12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a140:	4407      	add	r7, r0
 800a142:	eba8 0800 	sub.w	r8, r8, r0
 800a146:	e7e7      	b.n	800a118 <__sflush_r+0xd4>
 800a148:	dfbffffe 	.word	0xdfbffffe

0800a14c <_fflush_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b913      	cbnz	r3, 800a15c <_fflush_r+0x10>
 800a156:	2500      	movs	r5, #0
 800a158:	4628      	mov	r0, r5
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	b118      	cbz	r0, 800a166 <_fflush_r+0x1a>
 800a15e:	6a03      	ldr	r3, [r0, #32]
 800a160:	b90b      	cbnz	r3, 800a166 <_fflush_r+0x1a>
 800a162:	f7ff fd1f 	bl	8009ba4 <__sinit>
 800a166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f3      	beq.n	800a156 <_fflush_r+0xa>
 800a16e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a170:	07d0      	lsls	r0, r2, #31
 800a172:	d404      	bmi.n	800a17e <_fflush_r+0x32>
 800a174:	0599      	lsls	r1, r3, #22
 800a176:	d402      	bmi.n	800a17e <_fflush_r+0x32>
 800a178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a17a:	f7ff ff08 	bl	8009f8e <__retarget_lock_acquire_recursive>
 800a17e:	4628      	mov	r0, r5
 800a180:	4621      	mov	r1, r4
 800a182:	f7ff ff5f 	bl	800a044 <__sflush_r>
 800a186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a188:	07da      	lsls	r2, r3, #31
 800a18a:	4605      	mov	r5, r0
 800a18c:	d4e4      	bmi.n	800a158 <_fflush_r+0xc>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	059b      	lsls	r3, r3, #22
 800a192:	d4e1      	bmi.n	800a158 <_fflush_r+0xc>
 800a194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a196:	f7ff fefb 	bl	8009f90 <__retarget_lock_release_recursive>
 800a19a:	e7dd      	b.n	800a158 <_fflush_r+0xc>

0800a19c <__swhatbuf_r>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	460c      	mov	r4, r1
 800a1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	b096      	sub	sp, #88	@ 0x58
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	da0d      	bge.n	800a1ca <__swhatbuf_r+0x2e>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1b4:	f04f 0100 	mov.w	r1, #0
 800a1b8:	bf14      	ite	ne
 800a1ba:	2340      	movne	r3, #64	@ 0x40
 800a1bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	6031      	str	r1, [r6, #0]
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	b016      	add	sp, #88	@ 0x58
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f000 f848 	bl	800a260 <_fstat_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	dbec      	blt.n	800a1ae <__swhatbuf_r+0x12>
 800a1d4:	9901      	ldr	r1, [sp, #4]
 800a1d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1de:	4259      	negs	r1, r3
 800a1e0:	4159      	adcs	r1, r3
 800a1e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1e6:	e7eb      	b.n	800a1c0 <__swhatbuf_r+0x24>

0800a1e8 <__smakebuf_r>:
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ec:	079d      	lsls	r5, r3, #30
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	d507      	bpl.n	800a204 <__smakebuf_r+0x1c>
 800a1f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6163      	str	r3, [r4, #20]
 800a200:	b003      	add	sp, #12
 800a202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a204:	ab01      	add	r3, sp, #4
 800a206:	466a      	mov	r2, sp
 800a208:	f7ff ffc8 	bl	800a19c <__swhatbuf_r>
 800a20c:	9f00      	ldr	r7, [sp, #0]
 800a20e:	4605      	mov	r5, r0
 800a210:	4639      	mov	r1, r7
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff fbae 	bl	8009974 <_malloc_r>
 800a218:	b948      	cbnz	r0, 800a22e <__smakebuf_r+0x46>
 800a21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21e:	059a      	lsls	r2, r3, #22
 800a220:	d4ee      	bmi.n	800a200 <__smakebuf_r+0x18>
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	f043 0302 	orr.w	r3, r3, #2
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	e7e2      	b.n	800a1f4 <__smakebuf_r+0xc>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	6020      	str	r0, [r4, #0]
 800a232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a236:	81a3      	strh	r3, [r4, #12]
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a23e:	b15b      	cbz	r3, 800a258 <__smakebuf_r+0x70>
 800a240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f81d 	bl	800a284 <_isatty_r>
 800a24a:	b128      	cbz	r0, 800a258 <__smakebuf_r+0x70>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	431d      	orrs	r5, r3
 800a25c:	81a5      	strh	r5, [r4, #12]
 800a25e:	e7cf      	b.n	800a200 <__smakebuf_r+0x18>

0800a260 <_fstat_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	@ (800a280 <_fstat_r+0x20>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	f7f7 fbb8 	bl	80019e2 <_fstat>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d102      	bne.n	800a27c <_fstat_r+0x1c>
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	b103      	cbz	r3, 800a27c <_fstat_r+0x1c>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	200009fc 	.word	0x200009fc

0800a284 <_isatty_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	@ (800a2a0 <_isatty_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f7 fbb7 	bl	8001a02 <_isatty>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_isatty_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_isatty_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	200009fc 	.word	0x200009fc

0800a2a4 <_init>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	bf00      	nop
 800a2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2aa:	bc08      	pop	{r3}
 800a2ac:	469e      	mov	lr, r3
 800a2ae:	4770      	bx	lr

0800a2b0 <_fini>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	bf00      	nop
 800a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b6:	bc08      	pop	{r3}
 800a2b8:	469e      	mov	lr, r3
 800a2ba:	4770      	bx	lr
